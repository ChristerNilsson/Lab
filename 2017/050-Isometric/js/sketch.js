// Generated by CoffeeScript 1.11.1
var Isometric, isometric, setup, xdraw;

isometric = null;

Isometric = (function() {
  function Isometric(alpha) {
    this.alpha = alpha != null ? alpha : 1;
    this.n = 10;
    this.dx = 10;
    this.dy = 5;
    this.blocks = [];
    this.w = width;
    this.w2 = this.w / 2;
    this.w1 = (this.w + this.w2) / 2;
    this.r = 1;
    this.g = 1;
    this.b = 1;
  }

  Isometric.prototype.setColor = function(r1, g1, b1) {
    this.r = r1;
    this.g = g1;
    this.b = b1;
  };

  Isometric.prototype.add = function(i, j, k) {
    return this.blocks.push([i, j, k, this.r, this.g, this.b]);
  };

  Isometric.prototype.sort = function() {
    return this.blocks = _.sortBy(this.blocks, (function(_this) {
      return function(arg) {
        var b, g, i, j, k, r;
        i = arg[0], j = arg[1], k = arg[2], r = arg[3], g = arg[4], b = arg[5];
        return -(i * i + j * j + (_this.n - k) * (_this.n - k));
      };
    })(this));
  };

  Isometric.prototype.draw = function() {
    var block, l, len, ref, results;
    ref = this.blocks;
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      block = ref[l];
      results.push(this.drawBlock(block));
    }
    return results;
  };

  Isometric.prototype.drawBlock = function(block) {
    var b, f, g, i, j, k, p0, p1, p2, p3, p4, p5, p6, p7, q, r;
    f = (function(_this) {
      return function(i, j, k) {
        return [_this.w2 + i * _this.dx - 2 * j * _this.dy, _this.w - j * _this.dy - i * _this.dx / 2 - k * _this.dy * 2];
      };
    })(this);
    q = function(a, b, c, d) {
      return quad(a[0], a[1], b[0], b[1], c[0], c[1], d[0], d[1]);
    };
    i = block[0], j = block[1], k = block[2], r = block[3], g = block[4], b = block[5];
    p0 = f(i, j, k);
    p1 = f(i + 1, j, k);
    p2 = f(i, j + 1, k);
    p3 = f(i + 1, j + 1, k);
    p4 = f(i, j, k + 1);
    p5 = f(i + 1, j, k + 1);
    p6 = f(i, j + 1, k + 1);
    p7 = f(i + 1, j + 1, k + 1);
    fc(r, g, b, this.alpha);
    q(p4, p6, p7, p5);
    fc(r * 0.5, g * 0.5, b * 0.5, this.alpha);
    q(p0, p2, p6, p4);
    fc(r * 0.75, g * 0.75, b * 0.75, this.alpha);
    return q(p0, p4, p5, p1);
  };

  Isometric.prototype.grid = function() {
    var i, l, len, ref, results, x1, x2, y1, y2;
    ref = range(width / 20 + 1);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      x1 = lerp(this.w2, this.w2 + this.dx, i);
      x2 = lerp(0, this.dx, i);
      y1 = lerp(this.w, this.w - this.dy, i);
      y2 = lerp(this.w1, this.w1 - this.dy, i);
      line(x1, y1, x2, y2);
      x1 = lerp(this.w2, this.w2 - this.dx, i);
      x2 = lerp(this.w, this.w - this.dx, i);
      y1 = lerp(this.w, this.w - this.dy, i);
      y2 = lerp(this.w1, this.w1 - this.dy, i);
      results.push(line(x1, y1, x2, y2));
    }
    return results;
  };

  Isometric.prototype.box = function() {
    var a, b, i, l, len, len1, len2, m, n, ref, ref1, ref2;
    this.blocks = [];
    ref = range(10);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = [0, 9];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        a = ref1[m];
        ref2 = [0, 9];
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          b = ref2[n];
          this.setColor(1, 0, 0);
          this.add(i, a, b);
          this.setColor(1, 1, 0);
          this.add(a, i, b);
          this.setColor(0, 1, 0);
          this.add(a, b, i);
        }
      }
    }
    return this.sort();
  };

  return Isometric;

})();

setup = function() {
  createCanvas(200, 200);
  isometric = new Isometric;
  return xdraw();
};

xdraw = function() {
  bg(1);
  sc();
  isometric.box();
  return isometric.draw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\050-Isometric\coffee\sketch.coffee