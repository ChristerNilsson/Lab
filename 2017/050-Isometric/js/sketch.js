// Generated by CoffeeScript 1.11.1
var Isometric, isometric, setup, xdraw;

isometric = null;

Isometric = (function() {
  function Isometric(alpha) {
    this.alpha = alpha != null ? alpha : 1;
    this.n = 10;
    this.dx = 10;
    this.dy = 5;
    this.blocks = {};
    this.w = width;
    this.w2 = this.w / 2;
    this.w1 = (this.w + this.w2) / 2;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    this.index = this.createIndex();
  }

  Isometric.prototype.setColor = function(r1, g1, b1) {
    this.r = r1;
    this.g = g1;
    this.b = b1;
  };

  Isometric.prototype.add = function(i, j, k) {
    return this.blocks[this.n * this.n * i + this.n * j + k] = [this.r, this.g, this.b];
  };

  Isometric.prototype.draw = function() {
    var index, l, len, ref, results;
    ref = this.index;
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      index = ref[l];
      results.push(this.drawBlock(index));
    }
    return results;
  };

  Isometric.prototype.createIndex = function() {
    var arr, i, j, k, l, len, len1, len2, len3, m, n, o, ref, ref1, ref2, ref3, results;
    arr = [];
    ref = range(this.n);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = range(this.n);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        ref2 = range(this.n);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          k = ref2[n];
          arr.push([i, j, k]);
        }
      }
    }
    arr = _.sortBy(arr, (function(_this) {
      return function(arg) {
        var i, j, k;
        i = arg[0], j = arg[1], k = arg[2];
        return -(i * i + j * j + (_this.n - k) * (_this.n - k));
      };
    })(this));
    results = [];
    for (o = 0, len3 = arr.length; o < len3; o++) {
      ref3 = arr[o], i = ref3[0], j = ref3[1], k = ref3[2];
      results.push(this.n * this.n * i + this.n * j + k);
    }
    return results;
  };

  Isometric.prototype.drawBlock = function(index) {
    var b, block, f, g, i, j, k, p0, p1, p2, p3, p4, p5, p6, p7, q, r;
    f = (function(_this) {
      return function(i, j, k) {
        return [_this.w2 + i * _this.dx - 2 * j * _this.dy, _this.w - j * _this.dy - i * _this.dx / 2 - k * _this.dy * 2];
      };
    })(this);
    q = function(a, b, c, d) {
      return quad(a[0], a[1], b[0], b[1], c[0], c[1], d[0], d[1]);
    };
    block = this.blocks[index];
    if (block == null) {
      return;
    }
    r = block[0], g = block[1], b = block[2];
    k = index % this.n;
    index = Math.floor(index / this.n);
    j = index % this.n;
    index = Math.floor(index / this.n);
    i = index;
    p0 = f(i, j, k);
    p1 = f(i + 1, j, k);
    p2 = f(i, j + 1, k);
    p3 = f(i + 1, j + 1, k);
    p4 = f(i, j, k + 1);
    p5 = f(i + 1, j, k + 1);
    p6 = f(i, j + 1, k + 1);
    p7 = f(i + 1, j + 1, k + 1);
    fc(r, g, b, this.alpha);
    q(p4, p6, p7, p5);
    fc(r * 0.5, g * 0.5, b * 0.5, this.alpha);
    q(p0, p2, p6, p4);
    fc(r * 0.75, g * 0.75, b * 0.75, this.alpha);
    return q(p0, p4, p5, p1);
  };

  Isometric.prototype.grid = function() {
    var i, l, len, ref, results;
    ref = range(this.n + 1);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      line(this.w2 + this.dx * i, this.w - this.dy * i, this.dx * i, this.w1 - this.dy * i);
      results.push(line(this.w2 - this.dx * i, this.w - this.dy * i, this.w - this.dx * i, this.w1 - this.dy * i));
    }
    return results;
  };

  Isometric.prototype.box = function() {
    var i, j, k, l, len, ref, results, tot;
    this.blocks = [];
    ref = range(this.n);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push((function() {
        var len1, m, ref1, results1;
        ref1 = range(this.n);
        results1 = [];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          j = ref1[m];
          results1.push((function() {
            var len2, n, ref2, results2;
            ref2 = range(this.n);
            results2 = [];
            for (n = 0, len2 = ref2.length; n < len2; n++) {
              k = ref2[n];
              tot = 0;
              if (i === 2 || i === 3 || i === 4 || i === 5 || i === 6 || i === 7) {
                tot++;
              }
              if (j === 2 || j === 3 || j === 4 || j === 5 || j === 6 || j === 7) {
                tot++;
              }
              if (k === 2 || k === 3 || k === 4 || k === 5 || k === 6 || k === 7) {
                tot++;
              }
              if (tot <= 1) {
                this.setColor(i / 9, j / 9, k / 9);
                results2.push(this.add(i, j, k));
              } else {
                results2.push(void 0);
              }
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Isometric.prototype.sphere = function() {
    var i, j, k, l, len, ref, results;
    this.blocks = [];
    this.setColor(1, 0, 0);
    ref = range(this.n);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push((function() {
        var len1, m, ref1, results1;
        ref1 = range(this.n);
        results1 = [];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          j = ref1[m];
          results1.push((function() {
            var len2, n, ref2, results2;
            ref2 = range(this.n);
            results2 = [];
            for (n = 0, len2 = ref2.length; n < len2; n++) {
              k = ref2[n];
              if ((i - 4.5) * (i - 4.5) + (j - 4.5) * (j - 4.5) + (k - 4.5) * (k - 4.5) < 23) {
                results2.push(this.add(i, j, k));
              } else {
                results2.push(void 0);
              }
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return Isometric;

})();

setup = function() {
  createCanvas(200, 200);
  isometric = new Isometric;
  return xdraw();
};

xdraw = function() {
  bg(0.25);
  isometric.grid();
  sc();
  isometric.box();
  return isometric.draw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\050-Isometric\coffee\sketch.coffee