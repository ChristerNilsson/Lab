"use strict";

// Generated by CoffeeScript 2.3.2
var Cell;

Cell = class Cell {
  constructor(i1, j1, w1) {
    this.i = i1;
    this.j = j1;
    this.w = w1;
    this.x = this.i * this.w + this.w / 2;
    this.y = this.j * this.w + this.w / 2;
    this.neighborCount = 0;
    this.bee = false;
    this.revealed = false;
    this.flag = false;
  }

  show() {
    if (this.flag) {
      return image(images.flag, this.x, this.y, w, w);
    } else if (this.revealed) {
      if (this.bee) {
        return image(images.bomb, this.x, this.y, w, w);
      } else {
        if (this.neighborCount > 0) {
          return image(images[this.neighborCount], this.x, this.y, w, w);
        } else {
          return image(images.tile_depressed, this.x, this.y, w, w);
        }
      }
    } else {
      return image(images.tile, this.x, this.y, w, w);
    }
  }

  countBees() {
    var i, j, k, l, len, len1, neighbor, ref, ref1, total, xoff, yoff;
    if (this.bee) {
      this.neighborCount = -1;
      return;
    }
    total = 0;
    ref = [-1, 0, 1];
    for (k = 0, len = ref.length; k < len; k++) {
      xoff = ref[k];
      ref1 = [-1, 0, 1];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        yoff = ref1[l];
        i = this.i + xoff;
        j = this.j + yoff;
        if (-1 < i && i < cols && -1 < j && j < rows) {
          neighbor = grid[i][j];
          if (neighbor.bee) {
            total++;
          }
        }
      }
    }
    return this.neighborCount = total;
  }

  contains(x, y) {
    return this.x < x && x < this.x + this.w && this.y < y && y < this.y + this.w;
  }

  toggle() {
    this.flag = !this.flag;
    if (this.flag) {
      return count++;
    } else {
      return count--;
    }
  }

  reveal() {
    this.revealed = true;
    count++;
    if (this.neighborCount === 0) {
      return this.floodFill();
    }
  }

  floodFill() {
    var i, j, k, len, neighbor, ref, results, xoff, yoff;
    ref = [-1, 0, 1];
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      xoff = ref[k];
      results.push(function () {
        var l, len1, ref1, results1;
        ref1 = [-1, 0, 1];
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          yoff = ref1[l];
          i = this.i + xoff;
          j = this.j + yoff;
          if (-1 < i && i < cols && -1 < j && j < rows) {
            neighbor = grid[i][j];
            if (!(neighbor.bee || neighbor.revealed)) {
              results1.push(neighbor.reveal());
            } else {
              results1.push(void 0);
            }
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }.call(this));
    }
    return results;
  }

};
//# sourceMappingURL=cell.js.map
