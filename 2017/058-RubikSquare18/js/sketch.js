// Generated by CoffeeScript 1.11.1
var RS18, rs, setup,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

rs = null;

RS18 = (function() {
  function RS18() {
    this.generate();
  }

  RS18.prototype.generate = function() {
    var generation, hash, index, k, key, len, queue, res, results, sq, square;
    hash = {};
    queue = [];
    sq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    queue.push(sq);
    hash[sq.join('')] = 0;
    while (queue.length > 0) {
      square = queue.shift();
      generation = hash[square.join('')];
      res = [];
      res.push(this.gen(square, [[0, 15], [3, 12], [6, 9]]));
      res.push(this.gen(square, [[0, 11], [1, 10], [2, 9]]));
      res.push(this.gen(square, [[2, 17], [5, 14], [8, 11]]));
      res.push(this.gen(square, [[6, 17], [7, 16], [8, 15]]));
      for (k = 0, len = res.length; k < len; k++) {
        sq = res[k];
        key = sq.join('');
        if (indexOf.call(_.keys(hash), key) < 0) {
          hash[key] = generation + 1;
          queue.push(sq);
        }
      }
    }
    index = 0;
    results = [];
    for (key in hash) {
      sq = hash[key];
      print(index, key, sq);
      results.push(index++);
    }
    return results;
  };

  RS18.prototype.pr = function(sq) {
    print(' ');
    print(sq.substring(0, 3));
    print(sq.substring(3, 6));
    print(sq.substring(6, 9));
    return print(' ');
  };

  RS18.prototype.gen = function(square, moves) {
    var i, j, k, len, ref, ref1, res;
    res = square.slice();
    for (k = 0, len = moves.length; k < len; k++) {
      ref = moves[k], i = ref[0], j = ref[1];
      ref1 = [res[j], res[i]], res[i] = ref1[0], res[j] = ref1[1];
    }
    return res;
  };

  return RS18;

})();

setup = function() {
  createCanvas(400, 400);
  return rs = new RS18;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLElBQUEsZUFBQTtFQUFBOztBQUFBLEVBQUEsR0FBSzs7QUFFQztFQUNTLGNBQUE7SUFBTSxJQUFDLENBQUEsUUFBRCxDQUFBO0VBQU47O2lCQUVkLFFBQUEsR0FBVyxTQUFBO0FBQ1YsUUFBQTtJQUFBLElBQUEsR0FBTztJQUNQLEtBQUEsR0FBUTtJQUNSLEVBQUEsR0FBSyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DO0lBQ0wsS0FBSyxDQUFDLElBQU4sQ0FBVyxFQUFYO0lBQ0EsSUFBSyxDQUFBLEVBQUUsQ0FBQyxJQUFILENBQVEsRUFBUixDQUFBLENBQUwsR0FBbUI7QUFDbkIsV0FBTSxLQUFLLENBQUMsTUFBTixHQUFlLENBQXJCO01BQ0MsTUFBQSxHQUFTLEtBQUssQ0FBQyxLQUFOLENBQUE7TUFDVCxVQUFBLEdBQWEsSUFBSyxDQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksRUFBWixDQUFBO01BQ2xCLEdBQUEsR0FBTTtNQUNOLEdBQUcsQ0FBQyxJQUFKLENBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxNQUFMLEVBQVksQ0FBQyxDQUFDLENBQUQsRUFBRyxFQUFILENBQUQsRUFBUSxDQUFDLENBQUQsRUFBRyxFQUFILENBQVIsRUFBZSxDQUFDLENBQUQsRUFBRyxDQUFILENBQWYsQ0FBWixDQUFUO01BQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLE1BQUwsRUFBWSxDQUFDLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBRCxFQUFRLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBUixFQUFlLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBZixDQUFaLENBQVQ7TUFDQSxHQUFHLENBQUMsSUFBSixDQUFTLElBQUMsQ0FBQSxHQUFELENBQUssTUFBTCxFQUFZLENBQUMsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUFELEVBQVEsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUFSLEVBQWUsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUFmLENBQVosQ0FBVDtNQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxNQUFMLEVBQVksQ0FBQyxDQUFDLENBQUQsRUFBRyxFQUFILENBQUQsRUFBUSxDQUFDLENBQUQsRUFBRyxFQUFILENBQVIsRUFBZSxDQUFDLENBQUQsRUFBRyxFQUFILENBQWYsQ0FBWixDQUFUO0FBQ0EsV0FBQSxxQ0FBQTs7UUFDQyxHQUFBLEdBQU0sRUFBRSxDQUFDLElBQUgsQ0FBUSxFQUFSO1FBQ04sSUFBRyxhQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBUCxDQUFYLEVBQUEsR0FBQSxLQUFIO1VBQ0MsSUFBSyxDQUFBLEdBQUEsQ0FBTCxHQUFZLFVBQUEsR0FBYTtVQUN6QixLQUFLLENBQUMsSUFBTixDQUFXLEVBQVgsRUFGRDs7QUFGRDtJQVJEO0lBYUEsS0FBQSxHQUFRO0FBQ1I7U0FBQSxXQUFBOztNQUNDLEtBQUEsQ0FBTSxLQUFOLEVBQVksR0FBWixFQUFnQixFQUFoQjttQkFDQSxLQUFBO0FBRkQ7O0VBcEJVOztpQkEwQlgsRUFBQSxHQUFLLFNBQUMsRUFBRDtJQUNKLEtBQUEsQ0FBTSxHQUFOO0lBQ0EsS0FBQSxDQUFNLEVBQUUsQ0FBQyxTQUFILENBQWEsQ0FBYixFQUFlLENBQWYsQ0FBTjtJQUNBLEtBQUEsQ0FBTSxFQUFFLENBQUMsU0FBSCxDQUFhLENBQWIsRUFBZSxDQUFmLENBQU47SUFDQSxLQUFBLENBQU0sRUFBRSxDQUFDLFNBQUgsQ0FBYSxDQUFiLEVBQWUsQ0FBZixDQUFOO1dBQ0EsS0FBQSxDQUFNLEdBQU47RUFMSTs7aUJBT0wsR0FBQSxHQUFNLFNBQUMsTUFBRCxFQUFRLEtBQVI7QUFDTCxRQUFBO0lBQUEsR0FBQSxHQUFNLE1BQU0sQ0FBQyxLQUFQLENBQUE7QUFDTixTQUFBLHVDQUFBO3NCQUFLLFlBQUU7TUFDTixPQUFrQixDQUFDLEdBQUksQ0FBQSxDQUFBLENBQUwsRUFBUSxHQUFJLENBQUEsQ0FBQSxDQUFaLENBQWxCLEVBQUMsR0FBSSxDQUFBLENBQUEsV0FBTCxFQUFRLEdBQUksQ0FBQSxDQUFBO0FBRGI7V0FFQTtFQUpLOzs7Ozs7QUFNUCxLQUFBLEdBQVEsU0FBQTtFQUNQLFlBQUEsQ0FBYSxHQUFiLEVBQWlCLEdBQWpCO1NBQ0EsRUFBQSxHQUFLLElBQUk7QUFGRiIsInNvdXJjZXNDb250ZW50IjpbIiMgM3gzLCB0dsOlIHNpZG9yLCA5NiBwb3NpdGlvbmVyLiBNYXggc2V4IGRyYWcuXHJcblxyXG5ycyA9IG51bGxcclxuXHJcbmNsYXNzIFJTMThcclxuXHRjb25zdHJ1Y3RvciA6ICgpIC0+XHRAZ2VuZXJhdGUoKVxyXG5cclxuXHRnZW5lcmF0ZSA6ICgpIC0+XHJcblx0XHRoYXNoID0ge31cclxuXHRcdHF1ZXVlID0gW11cclxuXHRcdHNxID0gWzAsMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMSwxLDEsMSwxXVxyXG5cdFx0cXVldWUucHVzaCBzcVxyXG5cdFx0aGFzaFtzcS5qb2luICcnXSA9IDAgI1snJywwXVxyXG5cdFx0d2hpbGUgcXVldWUubGVuZ3RoID4gMFxyXG5cdFx0XHRzcXVhcmUgPSBxdWV1ZS5zaGlmdCgpXHJcblx0XHRcdGdlbmVyYXRpb24gPSBoYXNoW3NxdWFyZS5qb2luICcnXVxyXG5cdFx0XHRyZXMgPSBbXVxyXG5cdFx0XHRyZXMucHVzaCBAZ2VuIHNxdWFyZSxbWzAsMTVdLFszLDEyXSxbNiw5XV1cclxuXHRcdFx0cmVzLnB1c2ggQGdlbiBzcXVhcmUsW1swLDExXSxbMSwxMF0sWzIsOV1dXHJcblx0XHRcdHJlcy5wdXNoIEBnZW4gc3F1YXJlLFtbMiwxN10sWzUsMTRdLFs4LDExXV1cclxuXHRcdFx0cmVzLnB1c2ggQGdlbiBzcXVhcmUsW1s2LDE3XSxbNywxNl0sWzgsMTVdXVxyXG5cdFx0XHRmb3Igc3EgaW4gcmVzXHJcblx0XHRcdFx0a2V5ID0gc3Euam9pbiAnJ1xyXG5cdFx0XHRcdGlmIGtleSBub3QgaW4gXy5rZXlzIGhhc2hcclxuXHRcdFx0XHRcdGhhc2hba2V5XSA9IGdlbmVyYXRpb24gKyAxICNzcXVhcmUuam9pbiAnJ1xyXG5cdFx0XHRcdFx0cXVldWUucHVzaCBzcVxyXG5cdFx0aW5kZXggPSAwXHJcblx0XHRmb3Iga2V5LHNxIG9mIGhhc2hcclxuXHRcdFx0cHJpbnQgaW5kZXgsa2V5LHNxXHJcblx0XHRcdGluZGV4KytcclxuXHRcdFx0I0BwciBrZXlcclxuXHRcdCNwcmludCBfLnNpemUgaGFzaFxyXG5cclxuXHRwciA6IChzcSkgLT5cclxuXHRcdHByaW50ICcgJ1xyXG5cdFx0cHJpbnQgc3Euc3Vic3RyaW5nKDAsMylcclxuXHRcdHByaW50IHNxLnN1YnN0cmluZygzLDYpXHJcblx0XHRwcmludCBzcS5zdWJzdHJpbmcoNiw5KVxyXG5cdFx0cHJpbnQgJyAnXHJcblxyXG5cdGdlbiA6IChzcXVhcmUsbW92ZXMpIC0+XHJcblx0XHRyZXMgPSBzcXVhcmUuc2xpY2UoKVxyXG5cdFx0Zm9yIFtpLGpdIGluIG1vdmVzXHJcblx0XHRcdFtyZXNbaV0scmVzW2pdXSA9IFtyZXNbal0scmVzW2ldXVxyXG5cdFx0cmVzXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIDQwMCw0MDBcclxuXHRycyA9IG5ldyBSUzE4XHJcblxyXG4iXX0=
//# sourceURL=C:\Lab\2017\058-RubikSquare18\coffee\sketch.coffee