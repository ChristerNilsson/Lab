// Generated by CoffeeScript 1.12.7
var Button, RS18, START, buttons, draw, mousePressed, mouseReleased, released, rs, setup, sida,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

rs = null;

buttons = [];

START = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1];

sida = null;

released = true;

Button = (function() {
  function Button(x, y, action) {
    this.x = x;
    this.y = y;
    this.action = action != null ? action : function() {};
  }

  Button.prototype.draw = function(r, g, b) {
    fc(r, g, b);
    return rect(this.x, this.y, sida, sida);
  };

  Button.prototype.inside = function(mx, my) {
    return (this.x - sida / 2 < mx && mx < this.x + sida / 2) && (this.y - sida / 2 < my && my < this.y + sida / 2);
  };

  return Button;

})();

RS18 = (function() {
  function RS18() {
    this.level = 0;
    this.generate();
    this.square = START;
    this.startNewGame(1);
  }

  RS18.prototype.startNewGame = function(dlevel) {
    this.state = 0;
    if (this.level < 6) {
      this.level += dlevel;
    }
    this.history = [];
    return this.square = _.sample(this.positions[this.level]);
  };

  RS18.prototype.draw = function() {
    var i, k, len, ref;
    textAlign(CENTER, CENTER);
    textSize(50);
    ref = range(9);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.square[i] === 0) {
        buttons[i].draw(1, 0, 0);
      } else {
        buttons[i].draw(1, 1, 0);
      }
    }
    fc(0);
    return text(this.level - this.history.length, width / 2, height / 2);
  };

  RS18.prototype.mousePressed = function(mx, my) {
    var button, k, len, results;
    if (this.state > 0) {
      return this.startNewGame(this.state - 1);
    } else {
      results = [];
      for (k = 0, len = buttons.length; k < len; k++) {
        button = buttons[k];
        if (button.inside(mx, my)) {
          results.push(button.action());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  RS18.prototype.undo = function() {
    if (this.history.length > 0) {
      return this.square = this.history.pop();
    }
  };

  RS18.prototype.move = function(index) {
    this.history.push(this.square);
    this.square = this.moveOne(index, this.square);
    if (_.isEqual(this.square, START)) {
      return this.state = this.level === this.history.length ? 2 : void 0;
    } else {
      return 1;
    }
  };

  RS18.prototype.moveOne = function(index, square) {
    if (index === 0) {
      return this.gen(square, [[0, 11], [1, 10], [2, 9]]);
    }
    if (index === 1) {
      return this.gen(square, [[0, 15], [3, 12], [6, 9]]);
    }
    if (index === 2) {
      return this.gen(square, [[2, 17], [5, 14], [8, 11]]);
    }
    if (index === 3) {
      return this.gen(square, [[6, 17], [7, 16], [8, 15]]);
    }
  };

  RS18.prototype.generate = function() {
    var generation, hash, i, k, key, len, queue, ref, res, results, sq, square;
    this.positions = [[], [], [], [], [], [], []];
    hash = {};
    queue = [];
    sq = START;
    this.positions[0].push(sq);
    queue.push(sq);
    hash[sq.join('')] = 0;
    results = [];
    while (queue.length > 0) {
      square = queue.shift();
      generation = hash[square.join('')];
      res = [];
      ref = range(4);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        res.push(this.moveOne(i, square));
      }
      results.push((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = res.length; l < len1; l++) {
          sq = res[l];
          key = sq.join('');
          if (indexOf.call(_.keys(hash), key) < 0) {
            hash[key] = generation + 1;
            this.positions[generation + 1].push(sq);
            results1.push(queue.push(sq));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  RS18.prototype.gen = function(square, moves) {
    var i, j, k, len, ref, ref1, res;
    res = square.slice();
    for (k = 0, len = moves.length; k < len; k++) {
      ref = moves[k], i = ref[0], j = ref[1];
      ref1 = [res[j], res[i]], res[i] = ref1[0], res[j] = ref1[1];
    }
    return res;
  };

  return RS18;

})();

setup = function() {
  var i, j, k, l, len, len1, ref, ref1;
  createCanvas(windowWidth, windowHeight);
  sida = min(width, height) / 5;
  rectMode(CENTER);
  buttons = [];
  ref = range(3);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    ref1 = range(3);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      buttons.push(new Button(width / 2 + sida * (j - 1), height / 2 + sida * (i - 1)));
    }
  }
  buttons[1].action = function() {
    return rs.move(0);
  };
  buttons[3].action = function() {
    return rs.move(1);
  };
  buttons[5].action = function() {
    return rs.move(2);
  };
  buttons[7].action = function() {
    return rs.move(3);
  };
  buttons[4].action = function() {
    return rs.undo();
  };
  return rs = new RS18;
};

draw = function() {
  return rs.draw();
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  if (!released) {
    return;
  }
  released = false;
  return rs.mousePressed(mouseX, mouseY);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\058-RubikSquare18\coffee\sketch.coffee