// Generated by CoffeeScript 1.11.1
var Matrix, expand;

expand = function(target, n) {
  var a, big, index, l, len, len1, m, ref, small;
  big = [];
  target = target.slice().reverse();
  ref = range(n);
  for (l = 0, len = ref.length; l < len; l++) {
    index = ref[l];
    small = [];
    for (m = 0, len1 = target.length; m < len1; m++) {
      a = target[m];
      small.unshift(index % a);
      index = Math.floor(index / a);
    }
    big.push(small);
  }
  return big;
};

Matrix = (function() {
  function Matrix(data1) {
    this.data = data1;
    this.shape = [this.data.length];
  }

  Matrix.prototype.reshape = function(shape1) {
    this.shape = shape1;
    return this;
  };

  Matrix.prototype.map = function(f) {
    var x;
    return new Matrix((function() {
      var l, len, ref, results;
      ref = this.data;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        x = ref[l];
        results.push(f(x));
      }
      return results;
    }).call(this)).reshape(this.shape);
  };

  Matrix.prototype.cell = function(indices) {
    return this.data[this.index(indices)];
  };

  Matrix.prototype.fixData = function(other) {
    if (other instanceof Matrix) {
      return other;
    } else {
      return new Matrix([other]);
    }
  };

  Matrix.prototype.toArray = function() {
    return this.data;
  };

  Matrix.prototype.copy = function() {
    return new Matrix(this.data).reshape(this.shape);
  };

  Matrix.prototype.randint = function(n) {
    if (n == null) {
      n = 10;
    }
    return Math.floor(n * Math.random());
  };

  Matrix.prototype.add = function(other) {
    return this.broadcast(other, function(a, b) {
      return a + b;
    });
  };

  Matrix.prototype.sub = function(other) {
    return this.broadcast(other, function(a, b) {
      return a - b;
    });
  };

  Matrix.prototype.mul = function(other) {
    return this.broadcast(other, function(a, b) {
      return a * b;
    });
  };

  Matrix.prototype.broadcast = function(other, f) {
    var a, antal, b, data, i, indices, n, target;
    other = this.fixData(other);
    a = this.shape;
    b = other.shape;
    antal = Math.max(a.length, b.length);
    target = (function() {
      var l, len, ref, results;
      ref = range(antal);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(Math.max(a[i] || 1, b[i] || 1));
      }
      return results;
    })();
    n = target.reduce((function(a, b) {
      return a * b;
    }), 1);
    data = (function() {
      var l, len, ref, results;
      ref = expand(target, n);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        indices = ref[l];
        results.push(f(this.cell(indices), other.cell(indices)));
      }
      return results;
    }).call(this);
    return new Matrix(data).reshape(target);
  };

  Matrix.prototype.matrix = function(shape, data) {
    var arg, i;
    if (shape == null) {
      shape = this.shape.slice();
    }
    if (data == null) {
      data = this.data;
    }
    if (shape.length === 1) {
      return data;
    }
    arg = shape.pop();
    return this.matrix(shape, (function() {
      var l, len, ref, results;
      ref = range(0, data.length, arg);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(data.slice(i, i + arg));
      }
      return results;
    })());
  };

  Matrix.prototype.index = function(indices) {
    var arg, i, l, len, res, si;
    res = 0;
    for (i = l = 0, len = indices.length; l < len; i = ++l) {
      arg = indices[i];
      si = i >= this.shape.length ? 1 : this.shape[i];
      res = res * si + (si === 1 ? 0 : arg);
    }
    return res;
  };

  Matrix.prototype.transpose = function() {
    var data, i, j, l, len, ref;
    data = [];
    ref = range(this.shape[1]);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      data = data.concat((function() {
        var len1, m, ref1, results;
        ref1 = range(this.shape[0]);
        results = [];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          j = ref1[m];
          results.push(this.cell([j, i]));
        }
        return results;
      }).call(this));
    }
    return new Matrix(data).reshape([this.shape[1], this.shape[0]]);
  };

  Matrix.prototype.dot = function(other) {
    var i, j, sum;
    sum = (function(_this) {
      return function(i, j) {
        var k;
        return ((function() {
          var l, len, ref, results;
          ref = range(this.shape[1]);
          results = [];
          for (l = 0, len = ref.length; l < len; l++) {
            k = ref[l];
            results.push(this.cell([i, k]) * other.cell([k, j]));
          }
          return results;
        }).call(_this)).reduce((function(a, b) {
          return a + b;
        }), 0);
      };
    })(this);
    return new Matrix(_.flatten((function() {
      var l, len, ref, results;
      ref = range(other.shape[1]);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        j = ref[l];
        results.push((function() {
          var len1, m, ref1, results1;
          ref1 = range(this.shape[0]);
          results1 = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            i = ref1[m];
            results1.push(sum(j, i));
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this))).reshape([this.shape[0], other.shape[1]]);
  };

  return Matrix;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLElBQUE7O0FBQUEsTUFBQSxHQUFTLFNBQUMsTUFBRCxFQUFRLENBQVI7QUFDUixNQUFBO0VBQUEsR0FBQSxHQUFNO0VBQ04sTUFBQSxHQUFTLE1BQU0sQ0FBQyxLQUFQLENBQUEsQ0FBYyxDQUFDLE9BQWYsQ0FBQTtBQUNUO0FBQUEsT0FBQSxxQ0FBQTs7SUFDQyxLQUFBLEdBQVE7QUFDUixTQUFBLDBDQUFBOztNQUNDLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FBQSxHQUFRLENBQXRCO01BQ0EsbUJBQUEsUUFBVTtBQUZYO0lBR0EsR0FBRyxDQUFDLElBQUosQ0FBUyxLQUFUO0FBTEQ7U0FNQTtBQVRROztBQVdIO0VBQ1MsZ0JBQUMsS0FBRDtJQUFDLElBQUMsQ0FBQSxPQUFEO0lBQVUsSUFBQyxDQUFBLEtBQUQsR0FBUyxDQUFDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBUDtFQUFwQjs7bUJBQ2QsT0FBQSxHQUFVLFNBQUMsTUFBRDtJQUFDLElBQUMsQ0FBQSxRQUFEO1dBQVc7RUFBWjs7bUJBQ1YsR0FBQSxHQUFVLFNBQUMsQ0FBRDtBQUFPLFFBQUE7V0FBSSxJQUFBLE1BQUE7O0FBQVE7QUFBQTtXQUFBLHFDQUFBOztxQkFBQSxDQUFBLENBQUUsQ0FBRjtBQUFBOztpQkFBUixDQUE0QixDQUFDLE9BQTdCLENBQXFDLElBQUMsQ0FBQSxLQUF0QztFQUFYOzttQkFDVixJQUFBLEdBQVUsU0FBQyxPQUFEO1dBQWEsSUFBQyxDQUFBLElBQUssQ0FBQSxJQUFDLENBQUEsS0FBRCxDQUFPLE9BQVAsQ0FBQTtFQUFuQjs7bUJBQ1YsT0FBQSxHQUFVLFNBQUMsS0FBRDtJQUFXLElBQUcsS0FBQSxZQUFpQixNQUFwQjthQUFnQyxNQUFoQztLQUFBLE1BQUE7YUFBK0MsSUFBQSxNQUFBLENBQU8sQ0FBQyxLQUFELENBQVAsRUFBL0M7O0VBQVg7O21CQUNWLE9BQUEsR0FBVSxTQUFBO1dBQUcsSUFBQyxDQUFBO0VBQUo7O21CQUNWLElBQUEsR0FBVSxTQUFBO1dBQU8sSUFBQSxNQUFBLENBQU8sSUFBQyxDQUFBLElBQVIsQ0FBYSxDQUFDLE9BQWQsQ0FBc0IsSUFBQyxDQUFBLEtBQXZCO0VBQVA7O21CQUNWLE9BQUEsR0FBVSxTQUFDLENBQUQ7O01BQUMsSUFBRTs7V0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUEsR0FBSSxJQUFJLENBQUMsTUFBTCxDQUFBLENBQWY7RUFBVjs7bUJBQ1YsR0FBQSxHQUFVLFNBQUMsS0FBRDtXQUFXLElBQUMsQ0FBQSxTQUFELENBQVcsS0FBWCxFQUFrQixTQUFDLENBQUQsRUFBRyxDQUFIO2FBQVMsQ0FBQSxHQUFJO0lBQWIsQ0FBbEI7RUFBWDs7bUJBQ1YsR0FBQSxHQUFVLFNBQUMsS0FBRDtXQUFXLElBQUMsQ0FBQSxTQUFELENBQVcsS0FBWCxFQUFrQixTQUFDLENBQUQsRUFBRyxDQUFIO2FBQVMsQ0FBQSxHQUFJO0lBQWIsQ0FBbEI7RUFBWDs7bUJBQ1YsR0FBQSxHQUFVLFNBQUMsS0FBRDtXQUFXLElBQUMsQ0FBQSxTQUFELENBQVcsS0FBWCxFQUFrQixTQUFDLENBQUQsRUFBRyxDQUFIO2FBQVMsQ0FBQSxHQUFJO0lBQWIsQ0FBbEI7RUFBWDs7bUJBRVYsU0FBQSxHQUFZLFNBQUMsS0FBRCxFQUFPLENBQVA7QUFDWCxRQUFBO0lBQUEsS0FBQSxHQUFRLElBQUMsQ0FBQSxPQUFELENBQVMsS0FBVDtJQUNSLENBQUEsR0FBSSxJQUFDLENBQUE7SUFDTCxDQUFBLEdBQUksS0FBSyxDQUFDO0lBQ1YsS0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLE1BQVgsRUFBa0IsQ0FBQyxDQUFDLE1BQXBCO0lBQ1IsTUFBQTs7QUFBVTtBQUFBO1dBQUEscUNBQUE7O3FCQUFBLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBRSxDQUFBLENBQUEsQ0FBRixJQUFRLENBQWpCLEVBQW9CLENBQUUsQ0FBQSxDQUFBLENBQUYsSUFBUSxDQUE1QjtBQUFBOzs7SUFDVixDQUFBLEdBQUksTUFBTSxDQUFDLE1BQVAsQ0FBYyxDQUFDLFNBQUMsQ0FBRCxFQUFJLENBQUo7YUFBVSxDQUFBLEdBQUk7SUFBZCxDQUFELENBQWQsRUFBaUMsQ0FBakM7SUFDSixJQUFBOztBQUFRO0FBQUE7V0FBQSxxQ0FBQTs7cUJBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFELENBQU0sT0FBTixDQUFGLEVBQWtCLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBWCxDQUFsQjtBQUFBOzs7V0FDSixJQUFBLE1BQUEsQ0FBTyxJQUFQLENBQVksQ0FBQyxPQUFiLENBQXFCLE1BQXJCO0VBUk87O21CQVVaLE1BQUEsR0FBUyxTQUFDLEtBQUQsRUFBdUIsSUFBdkI7QUFDUixRQUFBOztNQURTLFFBQU0sSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUE7OztNQUFnQixPQUFLLElBQUMsQ0FBQTs7SUFDckMsSUFBRyxLQUFLLENBQUMsTUFBTixLQUFjLENBQWpCO0FBQXdCLGFBQU8sS0FBL0I7O0lBQ0EsR0FBQSxHQUFNLEtBQUssQ0FBQyxHQUFOLENBQUE7V0FDTixJQUFDLENBQUEsTUFBRCxDQUFRLEtBQVI7O0FBQWdCO0FBQUE7V0FBQSxxQ0FBQTs7cUJBQUEsSUFBSztBQUFMOztRQUFoQjtFQUhROzttQkFLVCxLQUFBLEdBQVEsU0FBQyxPQUFEO0FBQ1AsUUFBQTtJQUFBLEdBQUEsR0FBTTtBQUNOLFNBQUEsaURBQUE7O01BQ0MsRUFBQSxHQUFRLENBQUEsSUFBSyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQWYsR0FBMkIsQ0FBM0IsR0FBa0MsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBO01BQzlDLEdBQUEsR0FBTSxHQUFBLEdBQU0sRUFBTixHQUFXLENBQUcsRUFBQSxLQUFJLENBQVAsR0FBYyxDQUFkLEdBQXFCLEdBQXJCO0FBRmxCO1dBR0E7RUFMTzs7bUJBT1IsU0FBQSxHQUFZLFNBQUE7QUFDWCxRQUFBO0lBQUEsSUFBQSxHQUFPO0FBQ1A7QUFBQSxTQUFBLHFDQUFBOztNQUFBLElBQUEsR0FBTyxJQUFJLENBQUMsTUFBTDs7QUFBYTtBQUFBO2FBQUEsd0NBQUE7O3VCQUFBLElBQUMsQ0FBQSxJQUFELENBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFOO0FBQUE7O21CQUFiO0FBQVA7V0FDSSxJQUFBLE1BQUEsQ0FBTyxJQUFQLENBQVksQ0FBQyxPQUFiLENBQXFCLENBQUMsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVIsRUFBVyxJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBbEIsQ0FBckI7RUFITzs7bUJBS1osR0FBQSxHQUFNLFNBQUMsS0FBRDtBQUNMLFFBQUE7SUFBQSxHQUFBLEdBQU0sQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQsRUFBRyxDQUFIO0FBQVMsWUFBQTtlQUFBOztBQUFDO0FBQUE7ZUFBQSxxQ0FBQTs7eUJBQUEsSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFDLENBQUQsRUFBRyxDQUFILENBQU4sQ0FBQSxHQUFlLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFYO0FBQWY7O3NCQUFELENBQTJELENBQUMsTUFBNUQsQ0FBbUUsQ0FBQyxTQUFDLENBQUQsRUFBSSxDQUFKO2lCQUFVLENBQUEsR0FBSTtRQUFkLENBQUQsQ0FBbkUsRUFBc0YsQ0FBdEY7TUFBVDtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7V0FDRixJQUFBLE1BQUEsQ0FBTyxDQUFDLENBQUMsT0FBRjs7QUFBVztBQUFBO1dBQUEscUNBQUE7Ozs7QUFBQTtBQUFBO2VBQUEsd0NBQUE7OzBCQUFBLEdBQUEsQ0FBSSxDQUFKLEVBQU0sQ0FBTjtBQUFBOzs7QUFBQTs7aUJBQVgsQ0FBUCxDQUFvRixDQUFDLE9BQXJGLENBQTZGLENBQUMsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVIsRUFBWSxLQUFLLENBQUMsS0FBTSxDQUFBLENBQUEsQ0FBeEIsQ0FBN0Y7RUFGQyIsInNvdXJjZXNDb250ZW50IjpbIiMgaHR0cHM6Ly9naXRodWIuY29tL3NoaWZmbWFuL05ldXJhbC1OZXR3b3JrLXA1XHJcbiMgaHR0cHM6Ly9kb2NzLnNjaXB5Lm9yZy9kb2MvbnVtcHktZGV2L3VzZXIvcXVpY2tzdGFydC5odG1sXHJcblxyXG5leHBhbmQgPSAodGFyZ2V0LG4pIC0+XHJcblx0YmlnID0gW11cclxuXHR0YXJnZXQgPSB0YXJnZXQuc2xpY2UoKS5yZXZlcnNlKClcclxuXHRmb3IgaW5kZXggaW4gcmFuZ2UgblxyXG5cdFx0c21hbGwgPSBbXVxyXG5cdFx0Zm9yIGEgaW4gdGFyZ2V0XHJcblx0XHRcdHNtYWxsLnVuc2hpZnQgaW5kZXggJSBhXHJcblx0XHRcdGluZGV4IC8vPSBhXHJcblx0XHRiaWcucHVzaCBzbWFsbFxyXG5cdGJpZ1xyXG5cclxuY2xhc3MgTWF0cml4ICMgYW55IERcclxuXHRjb25zdHJ1Y3RvciA6IChAZGF0YSkgLT4gQHNoYXBlID0gW0BkYXRhLmxlbmd0aF1cclxuXHRyZXNoYXBlIDogKEBzaGFwZSkgLT4gQFxyXG5cdG1hcCAgICAgOiAoZikgLT4gbmV3IE1hdHJpeCgoZiB4IGZvciB4IGluIEBkYXRhKSkucmVzaGFwZSBAc2hhcGVcclxuXHRjZWxsICAgIDogKGluZGljZXMpIC0+IEBkYXRhW0BpbmRleCBpbmRpY2VzXVxyXG5cdGZpeERhdGEgOiAob3RoZXIpIC0+IGlmIG90aGVyIGluc3RhbmNlb2YgTWF0cml4IHRoZW4gb3RoZXIgZWxzZSBuZXcgTWF0cml4IFtvdGhlcl1cclxuXHR0b0FycmF5IDogLT4gQGRhdGFcclxuXHRjb3B5ICAgIDogLT4gbmV3IE1hdHJpeChAZGF0YSkucmVzaGFwZSBAc2hhcGVcclxuXHRyYW5kaW50IDogKG49MTApIC0+IE1hdGguZmxvb3IgbiAqIE1hdGgucmFuZG9tKClcclxuXHRhZGQgICAgIDogKG90aGVyKSAtPiBAYnJvYWRjYXN0IG90aGVyLCAoYSxiKSAtPiBhICsgYlxyXG5cdHN1YiAgICAgOiAob3RoZXIpIC0+IEBicm9hZGNhc3Qgb3RoZXIsIChhLGIpIC0+IGEgLSBiXHJcblx0bXVsICAgICA6IChvdGhlcikgLT4gQGJyb2FkY2FzdCBvdGhlciwgKGEsYikgLT4gYSAqIGJcclxuXHJcblx0YnJvYWRjYXN0IDogKG90aGVyLGYpIC0+XHJcblx0XHRvdGhlciA9IEBmaXhEYXRhIG90aGVyXHJcblx0XHRhID0gQHNoYXBlXHJcblx0XHRiID0gb3RoZXIuc2hhcGVcclxuXHRcdGFudGFsID0gTWF0aC5tYXggYS5sZW5ndGgsYi5sZW5ndGhcclxuXHRcdHRhcmdldCA9IChNYXRoLm1heCBhW2ldIHx8IDEsIGJbaV0gfHwgMSBmb3IgaSBpbiByYW5nZSBhbnRhbClcclxuXHRcdG4gPSB0YXJnZXQucmVkdWNlICgoYSwgYikgLT4gYSAqIGIpLCAxXHJcblx0XHRkYXRhID0gKGYgQGNlbGwoaW5kaWNlcyksIG90aGVyLmNlbGwoaW5kaWNlcykgZm9yIGluZGljZXMgaW4gZXhwYW5kIHRhcmdldCxuKVxyXG5cdFx0bmV3IE1hdHJpeChkYXRhKS5yZXNoYXBlIHRhcmdldFxyXG5cclxuXHRtYXRyaXggOiAoc2hhcGU9QHNoYXBlLnNsaWNlKCksIGRhdGE9QGRhdGEpIC0+XHJcblx0XHRpZiBzaGFwZS5sZW5ndGg9PTEgdGhlbiByZXR1cm4gZGF0YVxyXG5cdFx0YXJnID0gc2hhcGUucG9wKClcclxuXHRcdEBtYXRyaXggc2hhcGUsIChkYXRhW2kuLi5pK2FyZ10gZm9yIGkgaW4gcmFuZ2UgMCxkYXRhLmxlbmd0aCxhcmcpXHJcblxyXG5cdGluZGV4IDogKGluZGljZXMpIC0+XHJcblx0XHRyZXMgPSAwXHJcblx0XHRmb3IgYXJnLGkgaW4gaW5kaWNlc1xyXG5cdFx0XHRzaSA9IGlmIGkgPj0gQHNoYXBlLmxlbmd0aCB0aGVuIDEgZWxzZSBAc2hhcGVbaV1cclxuXHRcdFx0cmVzID0gcmVzICogc2kgKyBpZiBzaT09MSB0aGVuIDAgZWxzZSBhcmdcclxuXHRcdHJlc1xyXG5cclxuXHR0cmFuc3Bvc2UgOiAtPiAjIDJEIG9ubHlcclxuXHRcdGRhdGEgPSBbXVxyXG5cdFx0ZGF0YSA9IGRhdGEuY29uY2F0IChAY2VsbCBbaixpXSBmb3IgaiBpbiByYW5nZSBAc2hhcGVbMF0pIGZvciBpIGluIHJhbmdlIEBzaGFwZVsxXVxyXG5cdFx0bmV3IE1hdHJpeChkYXRhKS5yZXNoYXBlIFtAc2hhcGVbMV0sQHNoYXBlWzBdXVxyXG5cclxuXHRkb3QgOiAob3RoZXIpIC0+ICMgMkQgb25seVxyXG5cdFx0c3VtID0gKGksaikgPT4gKEBjZWxsKFtpLGtdKSAqIG90aGVyLmNlbGwoW2ssal0pIGZvciBrIGluIHJhbmdlIEBzaGFwZVsxXSkucmVkdWNlICgoYSwgYikgLT4gYSArIGIpLCAwXHJcblx0XHRuZXcgTWF0cml4KF8uZmxhdHRlbigoc3VtKGosaSkgZm9yIGkgaW4gcmFuZ2UgQHNoYXBlWzBdIGZvciBqIGluIHJhbmdlIG90aGVyLnNoYXBlWzFdKSkpLnJlc2hhcGUgW0BzaGFwZVswXSwgb3RoZXIuc2hhcGVbMV1dXHJcbiJdfQ==
//# sourceURL=C:\Lab\2017\055-Matrix\coffee\sketch.coffee