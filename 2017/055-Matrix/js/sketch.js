// Generated by CoffeeScript 1.11.1
var Matrix, a, b, c, d, e, g, h;

Matrix = (function() {
  function Matrix(data1, shape1) {
    this.data = data1;
    this.shape = shape1 != null ? shape1 : [this.data.length];
  }

  Matrix.prototype.reshape = function(shape1) {
    this.shape = shape1;
  };

  Matrix.prototype.iterate = function(f) {
    var i;
    return new Matrix((function() {
      var l, len, ref, results;
      ref = range(this.data.length);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(f(i));
      }
      return results;
    }).call(this), this.shape);
  };

  Matrix.prototype.map = function(f) {
    return this.iterate((function(_this) {
      return function(i) {
        return f(_this.data[i]);
      };
    })(this));
  };

  Matrix.prototype.fixData = function(other) {
    if (other instanceof Matrix) {
      return other.data;
    } else {
      return [other];
    }
  };

  Matrix.prototype.matrix = function(shape, data) {
    var arg, i;
    if (shape == null) {
      shape = this.shape.slice();
    }
    if (data == null) {
      data = this.data;
    }
    if (shape.length === 1) {
      return data;
    }
    arg = shape.pop();
    return this.matrix(shape, (function() {
      var l, len, ref, results;
      ref = range(0, this.data.length, arg);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(data.slice(i, i + arg));
      }
      return results;
    }).call(this));
  };

  Matrix.prototype.cell = function() {
    var arg, i, index, l, len;
    index = 0;
    for (i = l = 0, len = arguments.length; l < len; i = ++l) {
      arg = arguments[i];
      index = index * this.shape[i] + arg;
    }
    return this.data[index];
  };

  Matrix.prototype.add = function(other) {
    var data;
    data = this.fixData(other);
    return this.iterate((function(_this) {
      return function(i) {
        return _this.data[i] + data[i % data.length];
      };
    })(this));
  };

  Matrix.prototype.sub = function(other) {
    var data;
    data = this.fixData(other);
    return this.iterate((function(_this) {
      return function(i) {
        return _this.data[i] - data[i % data.length];
      };
    })(this));
  };

  Matrix.prototype.mul = function(other) {
    var data;
    data = this.fixData(other);
    return this.iterate((function(_this) {
      return function(i) {
        return _this.data[i] * data[i % data.length];
      };
    })(this));
  };

  Matrix.prototype.toArray = function() {
    return this.data;
  };

  Matrix.prototype.copy = function() {
    return this.iterate((function(_this) {
      return function(i) {
        return _this.data[i];
      };
    })(this));
  };

  Matrix.prototype.randint = function(n) {
    if (n == null) {
      n = 10;
    }
    return this.iterate(function(i) {
      return Math.floor(n * Math.random());
    });
  };

  Matrix.prototype.transpose = function() {
    var matrix;
    matrix = this.iterate((function(_this) {
      return function(index) {
        return _this.cell(index % _this.shape[0], Math.floor(index / _this.shape[0]));
      };
    })(this));
    matrix.reshape([this.shape[1], this.shape[0]]);
    return matrix;
  };

  Matrix.prototype.dot = function(other) {
    var i, j, sum;
    sum = (function(_this) {
      return function(i, j) {
        var k;
        return ((function() {
          var l, len, ref, results;
          ref = range(this.shape[1]);
          results = [];
          for (l = 0, len = ref.length; l < len; l++) {
            k = ref[l];
            results.push(this.cell(i, k) * other.cell(k, j));
          }
          return results;
        }).call(_this)).reduce((function(a, b) {
          return a + b;
        }), 0);
      };
    })(this);
    return new Matrix(_.flatten((function() {
      var l, len, ref, results;
      ref = range(other.shape[1]);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        j = ref[l];
        results.push((function() {
          var len1, m, ref1, results1;
          ref1 = range(this.shape[0]);
          results1 = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            i = ref1[m];
            results1.push(sum(i, j));
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this)), [this.shape[0], other.shape[1]]);
  };

  return Matrix;

})();

a = new Matrix([1, 2, 3, 4, 5, 6], [2, 3]);

assert(a.matrix(), [[1, 2, 3], [4, 5, 6]]);

a = new Matrix([1, 2, 3, 4], [2, 2]);

assert(a.matrix(), [[1, 2], [3, 4]]);

a = new Matrix([0, 0, 0, 0]);

assert(a.shape, [4]);

a.reshape([2, 2]);

assert(a.shape, [2, 2]);

assert(a.data, [0, 0, 0, 0]);

assert(a.matrix(), [[0, 0], [0, 0]]);

a = new Matrix([1, 2, 3, 4]);

b = new Matrix([5, 6, 7, 8]);

assert(a.cell(0), 1);

assert(a.cell(1), 2);

assert(a.cell(2), 3);

assert(a.cell(3), 4);

a.reshape([2, 2]);

b.reshape([2, 2]);

assert(a.cell(0, 0), 1);

assert(a.cell(0, 1), 2);

assert(a.cell(1, 0), 3);

assert(a.cell(1, 1), 4);

c = a.add(b);

assert(c.matrix(), [[6, 8], [10, 12]]);

b = a.add(new Matrix([2, 3]));

assert(b.matrix(), [[3, 5], [5, 7]]);

assert(a.add(10).matrix(), [[11, 12], [13, 14]]);

assert(b.sub(a).matrix(), [[2, 3], [2, 3]]);

assert(a.mul(b).matrix(), [[3, 10], [15, 28]]);

assert(a.add(2).matrix(), [[3, 4], [5, 6]]);

assert(a.sub(2).matrix(), [[-1, 0], [1, 2]]);

assert(a.mul(2).matrix(), [[2, 4], [6, 8]]);

assert(a.data, [1, 2, 3, 4]);

assert(a.copy().matrix(), [[1, 2], [3, 4]]);

assert(a.transpose().data, [1, 3, 2, 4]);

assert(a.dot(b).matrix(), [[13, 29], [19, 43]]);

c = a.map(function(x) {
  return x * x;
});

assert([[1, 4], [9, 16]], c.matrix());

d = new Matrix([1, 2, 3, 4, 5, 6], [2, 3]);

e = d.transpose();

assert(e.data, [1, 4, 2, 5, 3, 6]);

assert(e.shape, [3, 2]);

e = d.add(3);

assert(e.data, [4, 5, 6, 7, 8, 9]);

assert(e.shape, [2, 3]);

assert(e.matrix(), [[4, 5, 6], [7, 8, 9]]);

e = d.transpose();

assert(e.dot(d).matrix(), [[17, 22, 27], [22, 29, 36], [27, 36, 45]]);

assert(d.dot(e).matrix(), [[14, 32], [32, 77]]);

g = new Matrix(range(24));

g.reshape([2, 3, 4]);

assert(g.matrix()[0], [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]);

assert(g.matrix()[0][0], [0, 1, 2, 3]);

assert(g.matrix()[0][0][0], 0);

assert(g.cell(0, 0, 0), 0);

assert(g.cell(1, 2, 3), 23);

h = new Matrix(range(15), [3, 5]);

assert(h.matrix(), [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\055-Matrix\coffee\sketch.coffee