// Generated by CoffeeScript 1.11.1
var Matrix, expand;

expand = function(lst) {
  var a, big, index, l, len, len1, len2, m, n, o, ref, small;
  n = 1;
  for (l = 0, len = lst.length; l < len; l++) {
    a = lst[l];
    n *= a;
  }
  big = [];
  lst = lst.slice().reverse();
  ref = range(n);
  for (m = 0, len1 = ref.length; m < len1; m++) {
    index = ref[m];
    small = [];
    for (o = 0, len2 = lst.length; o < len2; o++) {
      a = lst[o];
      small.unshift(index % a);
      index = Math.floor(index / a);
    }
    big.push(small);
  }
  return big;
};

Matrix = (function() {
  function Matrix(data1) {
    this.data = data1;
    this.shape = [this.data.length];
  }

  Matrix.prototype.reshape = function(shape1) {
    this.shape = shape1;
    return this;
  };

  Matrix.prototype.map = function(f) {
    var x;
    return new Matrix((function() {
      var l, len, ref, results;
      ref = this.data;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        x = ref[l];
        results.push(f(x));
      }
      return results;
    }).call(this)).reshape(this.shape);
  };

  Matrix.prototype.broadcast = function(other, f) {
    var a, ai, antal, b, bi, data, i, indices, l, len, len1, m, n, ref, ref1, target;
    n = 1;
    target = [];
    a = this.shape;
    b = other.shape;
    antal = Math.max(a.length, b.length);
    ref = range(antal);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ai = i >= a.length ? 1 : a[i];
      bi = i >= b.length ? 1 : b[i];
      target.push(Math.max(ai, bi));
      n *= _.last(target);
    }
    data = [];
    ref1 = expand(target);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      indices = ref1[m];
      data.push(f(this.index(indices), other.index(indices)));
    }
    return new Matrix(data).reshape(target);
  };

  Matrix.prototype.fixData = function(other) {
    if (other instanceof Matrix) {
      return other;
    }
    return new Matrix([other]);
  };

  Matrix.prototype.matrix = function(shape, data) {
    var arg, i;
    if (shape == null) {
      shape = this.shape.slice();
    }
    if (data == null) {
      data = this.data;
    }
    if (shape.length === 1) {
      return data;
    }
    arg = shape.pop();
    return this.matrix(shape, (function() {
      var l, len, ref, results;
      ref = range(0, data.length, arg);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        results.push(data.slice(i, i + arg));
      }
      return results;
    })());
  };

  Matrix.prototype.index = function(indices) {
    var arg, i, l, len, res, si;
    res = 0;
    for (i = l = 0, len = indices.length; l < len; i = ++l) {
      arg = indices[i];
      si = i >= this.shape.length ? 1 : this.shape[i];
      res = res * si + (si === 1 ? 0 : arg);
    }
    return res;
  };

  Matrix.prototype.cell = function() {
    return this.data[this.index(Array.prototype.slice.call(arguments))];
  };

  Matrix.prototype.add = function(other) {
    other = this.fixData(other);
    return this.broadcast(other, (function(_this) {
      return function(i, j) {
        return _this.data[i] + other.data[j];
      };
    })(this));
  };

  Matrix.prototype.sub = function(other) {
    other = this.fixData(other);
    return this.broadcast(other, (function(_this) {
      return function(i, j) {
        return _this.data[i] - other.data[j];
      };
    })(this));
  };

  Matrix.prototype.mul = function(other) {
    other = this.fixData(other);
    return this.broadcast(other, (function(_this) {
      return function(i, j) {
        return _this.data[i] * other.data[j];
      };
    })(this));
  };

  Matrix.prototype.toArray = function() {
    return this.data;
  };

  Matrix.prototype.copy = function() {
    return new Matrix(this.data).reshape(this.shape);
  };

  Matrix.prototype.randint = function(n) {
    if (n == null) {
      n = 10;
    }
    return Math.floor(n * Math.random());
  };

  Matrix.prototype.transpose = function() {
    var data, i, j, l, len, len1, m, ref, ref1;
    data = [];
    ref = range(this.shape[1]);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      ref1 = range(this.shape[0]);
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        data.push(this.cell(j, i));
      }
    }
    return new Matrix(data).reshape([this.shape[1], this.shape[0]]);
  };

  Matrix.prototype.dot = function(other) {
    var i, j, sum;
    sum = (function(_this) {
      return function(i, j) {
        var k;
        return ((function() {
          var l, len, ref, results;
          ref = range(this.shape[1]);
          results = [];
          for (l = 0, len = ref.length; l < len; l++) {
            k = ref[l];
            results.push(this.cell(i, k) * other.cell(k, j));
          }
          return results;
        }).call(_this)).reduce((function(a, b) {
          return a + b;
        }), 0);
      };
    })(this);
    return new Matrix(_.flatten((function() {
      var l, len, ref, results;
      ref = range(other.shape[1]);
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        j = ref[l];
        results.push((function() {
          var len1, m, ref1, results1;
          ref1 = range(this.shape[0]);
          results1 = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            i = ref1[m];
            results1.push(sum(j, i));
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this))).reshape([this.shape[0], other.shape[1]]);
  };

  return Matrix;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\055-Matrix\coffee\sketch.coffee