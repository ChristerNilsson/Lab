// Generated by CoffeeScript 1.11.1
var ASegment, BSegment, DT, FACTOR, LEN, LENGTH, MACC, MAX_ACC, MAX_SPEED, MSPEED, Station, Train, WIDTH, X0, Y0, changeScale, corr, draw, drawLine, factor, getPoint, memory, mouseDragged, mousePressed, names, pause, ref, segments, setup, stations, totalDist, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

MSPEED = 25;

MACC = 1.25;

LEN = 3 * 46.5;

FACTOR = 24;

MAX_SPEED = MSPEED / FACTOR;

MAX_ACC = MACC / FACTOR;

LENGTH = LEN / FACTOR;

WIDTH = 0.5;

DT = 0.02;

names = 'Åkeshov Brommaplan Abrahamsberg StoraMossen Alvik Kristineberg Thorildsplan Fridhemsplan S:tEriksplan Odenplan Rådmansgatan Hötorget T-centralen GamlaStan Slussen Medborgarplatsen Skanstull Gullmarsplan Skärmarbrink Hammarbyhöjden Björkhagen Kärrtorp Bagarmossen Skarpnäck'.split(' ');

trains = [];

stations = [];

segments = [];

totalDist = 0;

pause = false;

factor = 1.0;

ref = [0, 0], X0 = ref[0], Y0 = ref[1];

memory = [0, 0];

getPoint = function(s) {
  var j, len, segment;
  s = modulo(s, totalDist);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    if (s <= segment.dist) {
      return segment.point(s);
    } else {
      s -= segment.dist;
    }
  }
};

drawLine = function(s1, s2) {
  var ref1, ref2, x1, x2, y1, y2;
  ref1 = getPoint(s1), x1 = ref1[0], y1 = ref1[1];
  ref2 = getPoint(s2), x2 = ref2[0], y2 = ref2[1];
  return line(x1, y1, x2, y2);
};

corr = function(a1, sp1, acc1, a2, sp2, security) {
  var d, distance;
  distance = security + sp1 * sp1 / 2 / MAX_ACC;
  d = a2 - a1;
  if (d < 0) {
    d += totalDist;
  }
  if (d <= distance) {
    return sp2 - sp1;
  } else {
    return MAX_ACC;
  }
};

Station = (function() {
  function Station(angle1, name1, duration, speed1, acc2) {
    this.angle = angle1;
    this.name = name1;
    this.duration = duration;
    this.speed = speed1 != null ? speed1 : 0;
    this.acc = acc2 != null ? acc2 : 0;
    this.angle *= totalDist;
  }

  Station.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, this.acc);
  };

  Station.prototype.draw = function() {
    var ref1, x, y;
    fc();
    sc(0.1);
    sw(WIDTH);
    drawLine(this.angle, this.angle - 0.51 * LENGTH);
    drawLine(this.angle - 0.49 * LENGTH, this.angle - LENGTH);
    ref1 = getPoint(this.angle - 0.5 * LENGTH), x = ref1[0], y = ref1[1];
    sw(0);
    fc(0);
    textSize(5);
    textAlign(LEFT, CENTER);
    return text(this.name, x + 2, y);
  };

  return Station;

})();

Train = (function() {
  function Train(angle1, r, g, b, nextStation, nextTrain, maxSpeed, maxAcc, duration) {
    this.angle = angle1;
    this.r = r;
    this.g = g;
    this.b = b;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 30000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
    this.angle *= totalDist;
  }

  Train.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, LENGTH * 2);
  };

  Train.prototype.update = function(nr) {
    var ds, dt, s, t;
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += totalDist;
    }
    if (ds < 0) {
      ds += totalDist;
    }
    if (this.state === 'Run') {
      if (ds < 0.001) {
        this.acc = 0;
        this.speed = 0;
        this.nextStart = millis() + this.duration;
        this.state = 'Stop';
      } else {
        this.s = stations[this.nextStation].correction(this.angle, this.speed, this.acc);
        this.t = trains[this.nextTrain].correction(this.angle, this.speed, this.acc);
        this.s = constrain(this.s, -MAX_ACC, MAX_ACC);
        this.t = constrain(this.t, -MAX_ACC, MAX_ACC);
        this.acc = _.min([this.s, this.t]);
      }
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, totalDist);
  };

  Train.prototype.draw = function(nr) {
    var a0, a1, a2, a3, a4, a5;
    this.update(nr);
    fc();
    sc(this.r, this.g, this.b);
    sw(WIDTH);
    a0 = this.angle;
    a1 = this.angle - 0.33 * LENGTH;
    a2 = this.angle - 0.34 * LENGTH;
    a3 = this.angle - 0.66 * LENGTH;
    a4 = this.angle - 0.67 * LENGTH;
    a5 = this.angle - 1.00 * LENGTH;
    drawLine(a0, a1);
    drawLine(a2, a3);
    return drawLine(a4, a5);
  };

  Train.prototype.drawText = function(nr) {
    var y;
    fc(this.r, this.g, this.b);
    y = 40 + 20 * nr;
    sc();
    textSize(16);
    textAlign(RIGHT, CENTER);
    text(this.state, 50, y);
    text(nf(FACTOR * this.acc, 0, 2), 100, y);
    text(round(FACTOR * this.speed), 150, y);
    text(round(this.angle * 19600 / totalDist), 200, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 250, y);
    }
    textAlign(LEFT, CENTER);
    if (this.nextStation < 24) {
      return text(names[this.nextStation], 270, y);
    } else {
      return text(names[47 - this.nextStation], 270, y);
    }
  };

  return Train;

})();

ASegment = (function() {
  function ASegment(a, b, c, d1) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d1;
    this.dist = dist(this.a, this.b, this.c, this.d);
  }

  ASegment.prototype.point = function(d) {
    return [d / this.dist * this.c + (this.dist - d) / this.dist * this.a, d / this.dist * this.d + (this.dist - d) / this.dist * this.b];
  };

  ASegment.prototype.draw = function() {
    return line(this.a, this.b, this.c, this.d);
  };

  return ASegment;

})();

BSegment = (function() {
  function BSegment(a, b, c, d1, e, f, g, h, steps) {
    var i, j, len, ref1, ref2, ref3, xa, xb, ya, yb;
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d1;
    this.e = e;
    this.f = f;
    this.g = g;
    this.h = h;
    this.steps = steps != null ? steps : 16;
    this.dist = 0;
    ref1 = range(this.steps + 1);
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      ref2 = this.bp(i / this.steps), xa = ref2[0], ya = ref2[1];
      ref3 = this.bp((i + 1) / this.steps), xb = ref3[0], yb = ref3[1];
      this.dist += dist(xa, ya, xb, yb);
    }
  }

  BSegment.prototype.point = function(d) {
    return this.bp(d / this.dist);
  };

  BSegment.prototype.bp = function(t) {
    return [bezierPoint(this.a, this.c, this.e, this.g, t), bezierPoint(this.b, this.d, this.f, this.h, t)];
  };

  BSegment.prototype.draw = function() {
    return bezier(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h);
  };

  return BSegment;

})();

setup = function() {
  var cnv, i, j, k, len, len1, name, ref1, segment, x1, x2, y0, y1, y2, y3;
  cnv = createCanvas(1000, 800);
  cnv.mouseWheel(changeScale);
  strokeCap(SQUARE);
  textSize(16);
  textAlign(RIGHT);
  frameRate(50);
  x1 = 485;
  x2 = 500;
  y0 = 0;
  y1 = 10;
  y2 = 790;
  y3 = 800;
  segments.push(new ASegment(x2, y1, x2, y2));
  segments.push(new BSegment(x2, y2, x2, y3, x1, y3, x1, y2));
  segments.push(new ASegment(x1, y2, x1, y1));
  segments.push(new BSegment(x1, y1, x1, y0, x2, y0, x2, y1));
  sc(1);
  sw(1);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    totalDist += segment.dist;
  }
  print(totalDist);
  ref1 = range(48);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    if (i < 24) {
      name = names[i];
    } else {
      name = '';
    }
    stations.push(new Station(0.0042 + i / 48, name, 60));
  }
  trains.push(new Train(0.10, 1, 0, 0, 5, 1));
  trains.push(new Train(0.30, 1, 1, 0, 15, 2));
  trains.push(new Train(0.50, 0, 1, 0, 24, 3));
  trains.push(new Train(0.70, 0, 1, 1, 34, 4));
  return trains.push(new Train(0.98, 0, 0, 1, 47, 0));
};

draw = function() {
  var i, j, k, l, len, len1, len2, len3, m, results, segment, station, train, y;
  bg(0.5);
  sc(0);
  fc(1);
  sw(0);
  y = 20;
  textSize(16);
  textAlign(RIGHT, CENTER);
  text('state', 50, y);
  text('m/s2', 100, y);
  text('m/s', 150, y);
  text('m', 200, y);
  text('s', 250, y);
  text('dest', 300, y);
  for (i = j = 0, len = trains.length; j < len; i = ++j) {
    train = trains[i];
    train.drawText(i);
  }
  scale(factor);
  translate(X0, Y0);
  for (k = 0, len1 = segments.length; k < len1; k++) {
    segment = segments[k];
    sc(1);
    sw(WIDTH);
    fc();
    segment.draw();
  }
  for (l = 0, len2 = stations.length; l < len2; l++) {
    station = stations[l];
    station.draw();
  }
  results = [];
  for (i = m = 0, len3 = trains.length; m < len3; i = ++m) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mousePressed = function() {
  return memory = [mouseX, mouseY];
};

mouseDragged = function() {
  X0 += (mouseX - memory[0]) / factor;
  Y0 += (mouseY - memory[1]) / factor;
  return memory = [mouseX, mouseY];
};

changeScale = function(event) {
  var S;
  S = 1.5;
  X0 -= mouseX / factor;
  Y0 -= mouseY / factor;
  factor = event.deltaY > 0 ? factor / S : factor * S;
  X0 += mouseX / factor;
  return Y0 += mouseY / factor;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\075-Tunnelbanesimulator-Linje17\coffee\sketch.coffee