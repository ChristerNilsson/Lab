// Generated by CoffeeScript 1.11.1
var ASegment, BSegment, DT, LENGTH, MAX_ACC, MAX_SPEED, Station, Train, WIDTH, X0, Y0, changeScale, corr, draw, drawLine, factor, getPoint, memory, mouseDragged, mousePressed, names, pause, ref, segments, setup, stations, totalDist, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

MAX_SPEED = 0.4;

MAX_ACC = 0.025;

LENGTH = 5;

WIDTH = 0.5;

DT = 0.02;

names = 'Åkeshov Brommaplan Abrahamsberg StoraMossen Alvik Kristineberg Thorildsplan Fridhemsplan S:tEriksplan Odenplan Rådmansgatan Hötorget T-centralen GamlaStan Slussen Medborgarplatsen Skanstull Gullmarsplan Skärmabrink Hammarbyhöjden Björkhagen Kärrtorp Bagarmossen Skarpnäck'.split(' ');

trains = [];

stations = [];

segments = [];

totalDist = 0;

pause = false;

factor = 1.0;

ref = [0, 0], X0 = ref[0], Y0 = ref[1];

memory = [0, 0];

getPoint = function(s) {
  var j, len, segment;
  s = modulo(s, totalDist);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    if (s <= segment.dist) {
      return segment.point(s);
    } else {
      s -= segment.dist;
    }
  }
};

drawLine = function(s1, s2) {
  var ref1, ref2, x1, x2, y1, y2;
  ref1 = getPoint(s1), x1 = ref1[0], y1 = ref1[1];
  ref2 = getPoint(s2), x2 = ref2[0], y2 = ref2[1];
  return line(x1, y1, x2, y2);
};

corr = function(a1, sp1, acc1, a2, sp2, security) {
  var d, distance;
  distance = security + sp1 * sp1 / 2 / MAX_ACC;
  d = a2 - a1;
  if (d < 0) {
    d += totalDist;
  }
  if (d <= distance) {
    return sp2 - sp1;
  } else {
    return MAX_ACC;
  }
};

Station = (function() {
  function Station(angle1, name1, duration, speed1, acc2) {
    this.angle = angle1;
    this.name = name1;
    this.duration = duration;
    this.speed = speed1 != null ? speed1 : 0;
    this.acc = acc2 != null ? acc2 : 0;
    this.angle *= totalDist;
  }

  Station.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, this.acc);
  };

  Station.prototype.draw = function() {
    var ref1, x, y;
    fc();
    sc(0.1);
    sw(WIDTH);
    drawLine(this.angle, this.angle - 2.55);
    drawLine(this.angle - 2.45, this.angle - LENGTH);
    ref1 = getPoint(this.angle - 2.5), x = ref1[0], y = ref1[1];
    sw(0);
    fc(0);
    textSize(5);
    textAlign(LEFT, CENTER);
    return text(this.name, x + 2, y);
  };

  return Station;

})();

Train = (function() {
  function Train(angle1, r, g, b, nextStation, nextTrain, maxSpeed, maxAcc, duration) {
    this.angle = angle1;
    this.r = r;
    this.g = g;
    this.b = b;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 30000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
    this.angle *= totalDist;
  }

  Train.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, LENGTH * 2);
  };

  Train.prototype.update = function(nr) {
    var ds, dt, s, t;
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += totalDist;
    }
    if (ds < 0) {
      ds += totalDist;
    }
    if (this.state === 'Run') {
      if (ds < 0.05) {
        this.acc = 0;
        this.speed = 0;
        this.nextStart = millis() + this.duration;
        this.state = 'Stop';
      } else {
        this.s = stations[this.nextStation].correction(this.angle, this.speed, this.acc);
        this.t = trains[this.nextTrain].correction(this.angle, this.speed, this.acc);
        this.s = constrain(this.s, -1, 1);
        this.t = constrain(this.t, -1, 1);
        this.acc = _.min([this.s, this.t]);
      }
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, totalDist);
  };

  Train.prototype.draw = function(nr) {
    this.update(nr);
    fc();
    sc(this.r, this.g, this.b);
    sw(WIDTH);
    drawLine(this.angle, this.angle - 2.4);
    return drawLine(this.angle - 2.6, this.angle - LENGTH);
  };

  Train.prototype.drawText = function(nr) {
    var y;
    fc(this.r, this.g, this.b);
    y = 40 + 20 * nr;
    sc();
    textSize(16);
    textAlign(RIGHT, CENTER);
    text(this.state, 50, y);
    text(round(100 * this.acc), 100, y);
    text(round(this.angle * 19600 / totalDist), 150, y);
    text(round(100 * this.speed), 200, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 250, y);
    }
    textAlign(LEFT, CENTER);
    if (this.nextStation < 24) {
      return text(names[this.nextStation], 270, y);
    } else {
      return text(names[23 - modulo(this.nextStation, 24)], 270, y);
    }
  };

  return Train;

})();

ASegment = (function() {
  function ASegment(p1, p2) {
    this.p1 = p1;
    this.p2 = p2;
    this.dist = dist(this.p1[0], this.p1[1], this.p2[0], this.p2[1]);
  }

  ASegment.prototype.point = function(d) {
    return [d / this.dist * this.p2[0] + (this.dist - d) / this.dist * this.p1[0], d / this.dist * this.p2[1] + (this.dist - d) / this.dist * this.p1[1]];
  };

  ASegment.prototype.draw = function() {
    return line(this.p1[0], this.p1[1], this.p2[0], this.p2[1]);
  };

  return ASegment;

})();

BSegment = (function() {
  function BSegment(p1, p2, p3, p4, steps) {
    var i, j, len, ref1, xa, xb, ya, yb;
    this.p1 = p1;
    this.p2 = p2;
    this.p3 = p3;
    this.p4 = p4;
    this.steps = steps != null ? steps : 16;
    this.dist = 0;
    ref1 = range(this.steps + 1);
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      xa = bezierPoint(this.p1[0], this.p2[0], this.p3[0], this.p4[0], i / this.steps);
      ya = bezierPoint(this.p1[1], this.p2[1], this.p3[1], this.p4[1], i / this.steps);
      xb = bezierPoint(this.p1[0], this.p2[0], this.p3[0], this.p4[0], (i + 1) / this.steps);
      yb = bezierPoint(this.p1[1], this.p2[1], this.p3[1], this.p4[1], (i + 1) / this.steps);
      this.dist += dist(xa, ya, xb, yb);
    }
  }

  BSegment.prototype.point = function(d) {
    return [bezierPoint(this.p1[0], this.p2[0], this.p3[0], this.p4[0], d / this.dist), bezierPoint(this.p1[1], this.p2[1], this.p3[1], this.p4[1], d / this.dist)];
  };

  BSegment.prototype.draw = function() {
    return bezier(this.p1[0], this.p1[1], this.p2[0], this.p2[1], this.p3[0], this.p3[1], this.p4[0], this.p4[1]);
  };

  return BSegment;

})();

setup = function() {
  var cnv, i, j, k, len, len1, name, ref1, segment, x1, x2, y0, y1, y2, y3;
  cnv = createCanvas(1000, 800);
  cnv.mouseWheel(changeScale);
  strokeCap(SQUARE);
  textSize(16);
  textAlign(RIGHT);
  frameRate(50);
  x1 = 480;
  x2 = 500;
  y0 = 0;
  y1 = 15;
  y2 = 785;
  y3 = 800;
  segments.push(new ASegment([x2, y1], [x2, y2]));
  segments.push(new BSegment([x2, y2], [x2, y3], [x1, y3], [x1, y2]));
  segments.push(new ASegment([x1, y2], [x1, y1]));
  segments.push(new BSegment([x1, y1], [x1, y0], [x2, y0], [x2, y1]));
  sc(1);
  sw(1);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    totalDist += segment.dist;
  }
  ref1 = range(48);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    if (i < 24) {
      name = names[i];
    } else {
      name = '';
    }
    stations.push(new Station(0.0006 + i / 48, name, 60));
  }
  trains.push(new Train(0.10, 1, 0, 0, 5, 1));
  trains.push(new Train(0.30, 1, 1, 0, 15, 2));
  trains.push(new Train(0.50, 0, 1, 0, 25, 3));
  trains.push(new Train(0.70, 0, 1, 1, 34, 4));
  return trains.push(new Train(0.90, 0, 0, 1, 44, 0));
};

draw = function() {
  var i, j, k, l, len, len1, len2, len3, m, results, segment, station, train, y;
  bg(0.5);
  sc(0);
  fc(1);
  sw(0);
  y = 20;
  textSize(16);
  textAlign(RIGHT, CENTER);
  text('state', 50, y);
  text('acc', 100, y);
  text('pos', 150, y);
  text('sp', 200, y);
  text('sec', 250, y);
  text('dest', 300, y);
  for (i = j = 0, len = trains.length; j < len; i = ++j) {
    train = trains[i];
    train.drawText(i);
  }
  translate(X0, Y0);
  scale(factor);
  for (k = 0, len1 = segments.length; k < len1; k++) {
    segment = segments[k];
    sc(1);
    sw(WIDTH);
    fc();
    segment.draw();
  }
  for (l = 0, len2 = stations.length; l < len2; l++) {
    station = stations[l];
    station.draw();
  }
  results = [];
  for (i = m = 0, len3 = trains.length; m < len3; i = ++m) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mousePressed = function() {
  return memory = [mouseX, mouseY];
};

mouseDragged = function() {
  X0 += mouseX - memory[0];
  Y0 += mouseY - memory[1];
  return memory = [mouseX, mouseY];
};

changeScale = function(event) {
  if (event.deltaY > 0) {
    X0 = (X0 + mouseX) / 2;
    Y0 = (Y0 + mouseY) / 2;
    return factor /= 2;
  } else {
    X0 = 2 * X0 - mouseX;
    Y0 = 2 * Y0 - mouseY;
    return factor *= 2;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsMk9BQUE7RUFBQTs7QUFBQSxTQUFBLEdBQVk7O0FBQ1osT0FBQSxHQUFZOztBQUNaLE1BQUEsR0FBWTs7QUFDWixLQUFBLEdBQVk7O0FBQ1osRUFBQSxHQUFZOztBQUVaLEtBQUEsR0FBUSxpUkFBaVIsQ0FBQyxLQUFsUixDQUF3UixHQUF4Ujs7QUFDUixNQUFBLEdBQVM7O0FBQ1QsUUFBQSxHQUFXOztBQUNYLFFBQUEsR0FBVzs7QUFFWCxTQUFBLEdBQVk7O0FBRVosS0FBQSxHQUFROztBQUNSLE1BQUEsR0FBUzs7QUFDVCxNQUFRLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBUixFQUFDLFdBQUQsRUFBSTs7QUFDSixNQUFBLEdBQVMsQ0FBQyxDQUFELEVBQUcsQ0FBSDs7QUFFVCxRQUFBLEdBQVcsU0FBQyxDQUFEO0FBQ1YsTUFBQTtFQUFBLFdBQUEsR0FBTTtBQUNOLE9BQUEsMENBQUE7O0lBQ0MsSUFBRyxDQUFBLElBQUssT0FBTyxDQUFDLElBQWhCO0FBQTBCLGFBQU8sT0FBTyxDQUFDLEtBQVIsQ0FBYyxDQUFkLEVBQWpDO0tBQUEsTUFBQTtNQUFzRCxDQUFBLElBQUssT0FBTyxDQUFDLEtBQW5FOztBQUREO0FBRlU7O0FBS1gsUUFBQSxHQUFXLFNBQUMsRUFBRCxFQUFJLEVBQUo7QUFDVixNQUFBO0VBQUEsT0FBVSxRQUFBLENBQVMsRUFBVCxDQUFWLEVBQUMsWUFBRCxFQUFJO0VBQ0osT0FBVSxRQUFBLENBQVMsRUFBVCxDQUFWLEVBQUMsWUFBRCxFQUFJO1NBQ0osSUFBQSxDQUFLLEVBQUwsRUFBUSxFQUFSLEVBQVcsRUFBWCxFQUFjLEVBQWQ7QUFIVTs7QUFLWCxJQUFBLEdBQU8sU0FBQyxFQUFELEVBQUksR0FBSixFQUFRLElBQVIsRUFBYSxFQUFiLEVBQWdCLEdBQWhCLEVB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O0FBS2YsV0FBQSxHQUFjLFNBQUMsS0FBRDtFQUNiLElBQUcsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFsQjtJQUNDLEVBQUEsR0FBSyxDQUFDLEVBQUEsR0FBRyxNQUFKLENBQUEsR0FBWTtJQUNqQixFQUFBLEdBQUssQ0FBQyxFQUFBLEdBQUcsTUFBSixDQUFBLEdBQVk7V0FDakIsTUFBQSxJQUFVLEVBSFg7R0FBQSxNQUFBO0lBS0MsRUFBQSxHQUFLLENBQUEsR0FBRSxFQUFGLEdBQUs7SUFDVixFQUFBLEdBQUssQ0FBQSxHQUFFLEVBQUYsR0FBSztXQUNWLE1BQUEsSUFBVSxFQVBYOztBQURhIiwic291cmNlc0NvbnRlbnQiOlsiTUFYX1NQRUVEID0gMC40ICMgcGl4bGFyL3NcclxuTUFYX0FDQyAgID0gMC4wMjUgIyBwaXhsYXIvczJcclxuTEVOR1RIICAgID0gNSAjIHBpeGxhclxyXG5XSURUSCAgICAgPSAwLjUgIyBwaXhsYXIgIyAzLDUgb3N2IGdlciBpY2tlIHNhbW1hbmjDpG5nYW5kZSBiZXppZXIgbWVkIGxpbmUuIDAuNSwyLDQgb2tcclxuRFQgICAgICAgID0gMC4wMiAjIG1zXHJcblxyXG5uYW1lcyA9ICfDhWtlc2hvdiBCcm9tbWFwbGFuIEFicmFoYW1zYmVyZyBTdG9yYU1vc3NlbiBBbHZpayBLcmlzdGluZWJlcmcgVGhvcmlsZHNwbGFuIEZyaWRoZW1zcGxhbiBTOnRFcmlrc3BsYW4gT2RlbnBsYW4gUsOlZG1hbnNnYXRhbiBIw7Z0b3JnZXQgVC1jZW50cmFsZW4gR2FtbGFTdGFuIFNsdXNzZW4gTWVkYm9yZ2FycGxhdHNlbiBTa2Fuc3R1bGwgR3VsbG1hcnNwbGFuIFNrw6RybWFicmluayBIYW1tYXJieWjDtmpkZW4gQmrDtnJraGFnZW4gS8OkcnJ0b3JwIEJhZ2FybW9zc2VuIFNrYXJwbsOkY2snLnNwbGl0ICcgJ1xyXG50cmFpbnMgPSBbXVxyXG5zdGF0aW9ucyA9IFtdXHJcbnNlZ21lbnRzID0gW11cclxuXHJcbnRvdGFsRGlzdCA9IDAgIyBwaXhsYXJcclxuXHJcbnBhdXNlID0gZmFsc2VcclxuZmFjdG9yID0gMS4wXHJcbltYMCxZMF09WzAsMF1cclxubWVtb3J5ID0gWzAsMF1cclxuXHJcbmdldFBvaW50ID0gKHMpIC0+XHJcblx0cyAlJT0gdG90YWxEaXN0XHJcblx0Zm9yIHNlZ21lbnQgaW4gc2VnbWVudHNcclxuXHRcdGlmIHMgPD0gc2VnbWVudC5kaXN0IHRoZW4gcmV0dXJuIHNlZ21lbnQucG9pbnQgcyBlbHNlIHMgLT0gc2VnbWVudC5kaXN0XHJcblxyXG5kcmF3TGluZSA9IChzMSxzMikgLT5cclxuXHRbeDEseTFdID0gZ2V0UG9pbnQgczFcclxuXHRbeDIseTJdID0gZ2V0UG9pbnQgczJcclxuXHRsaW5lIHgxLHkxLHgyLHkyXHJcblxyXG5jb3JyID0gKGExLHNwMSxhY2MxLGEyLHNwMixzZWN1cml0eSkgLT5cclxuXHRkaXN0YW5jZSA9IHNlY3VyaXR5ICsgc3AxKnNwMS8yL01BWF9BQ0NcclxuXHRkID0gYTItYTFcclxuXHRpZiBkIDwgMCB0aGVuIGQgKz0gdG90YWxEaXN0XHJcblx0aWYgZCA8PSBkaXN0YW5jZSB0aGVuIHNwMi1zcDEgZWxzZSBNQVhfQUNDXHJcblxyXG5jbGFzcyBTdGF0aW9uXHJcblx0Y29uc3RydWN0b3IgOiAoQGFuZ2xlLEBuYW1lLEBkdXJhdGlvbixAc3BlZWQ9MCxAYWNjPTApIC0+IEBhbmdsZSAqPSB0b3RhbERpc3RcclxuXHRjb3JyZWN0aW9uIDogKGFuZ2xlLHNwZWVkLGFjYykgLT4gY29yciBhbmdsZSxzcGVlZCxhY2MsQGFuZ2xlLEBzcGVlZCxAYWNjXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRmYygpXHJcblx0XHRzYyAwLjFcclxuXHRcdHN3IFdJRFRIXHJcblx0XHRkcmF3TGluZSBAYW5nbGUsQGFuZ2xlLTIuNTVcclxuXHRcdGRyYXdMaW5lIEBhbmdsZS0yLjQ1LEBhbmdsZS1MRU5HVEhcclxuXHRcdFt4LHldID0gZ2V0UG9pbnQgQGFuZ2xlLTIuNVxyXG5cdFx0c3cgMFxyXG5cdFx0ZmMgMFxyXG5cdFx0dGV4dFNpemUgNVxyXG5cdFx0dGV4dEFsaWduIExFRlQsQ0VOVEVSXHJcblx0XHR0ZXh0IEBuYW1lLHgrMix5XHJcblxyXG5jbGFzcyBUcmFpblxyXG5cdGNvbnN0cnVjdG9yIDogKEBhbmdsZSwgQHIsQGcsQGIsIEBuZXh0U3RhdGlvbiwgQG5leHRUcmFpbiwgQG1heFNwZWVkPU1BWF9TUEVFRCwgQG1heEFjYz1NQVhfQUNDLCBAZHVyYXRpb249MzAwMDApIC0+XHJcblx0XHRAc3RhdGUgPSAnUnVuJyAjIFN0b3AgUnVuXHJcblx0XHRAc3BlZWQgPSAwXHJcblx0XHRAYWNjID0gQG1heEFjY1xyXG5cdFx0QG5leHRTdGFydCA9IG1pbGxpcygpXHJcblx0XHRAYW5nbGUgKj0gdG90YWxEaXN0XHJcblxyXG5cdGNvcnJlY3Rpb24gOiAoYW5nbGUsc3BlZWQsYWNjKSAtPiBjb3JyIGFuZ2xlLHNwZWVkLGFjYyxAYW5nbGUsQHNwZWVkLExFTkdUSCAqIDJcclxuXHJcblx0dXBkYXRlIDogKG5yKSAtPlxyXG5cclxuXHRcdEBuciA9IG5yXHJcblx0XHR0ID0gQG1heFNwZWVkL0BtYXhBY2MgIyA0XHJcblx0XHRzID0gQG1heEFjYyAqIHQqdCAvIDIgIyA4XHJcblx0XHRkdCA9IHRyYWluc1tAbmV4dFRyYWluXS5hbmdsZSAtIEBhbmdsZVxyXG5cdFx0ZHMgPSBzdGF0aW9uc1tAbmV4dFN0YXRpb25dLmFuZ2xlIC0gQGFuZ2xlXHJcblxyXG5cdFx0aWYgZHQ8MCB0aGVuIGR0ICs9IHRvdGFsRGlzdFxyXG5cdFx0aWYgZHM8MCB0aGVuIGRzICs9IHRvdGFsRGlzdFxyXG5cclxuXHRcdGlmIEBzdGF0ZT09J1J1bidcclxuXHJcblx0XHRcdGlmIGRzIDwgMC4wNSAjcGVycm9uZ3N0b3BwXHJcblx0XHRcdFx0QGFjYyA9IDBcclxuXHRcdFx0XHRAc3BlZWQgPSAwXHJcblx0XHRcdFx0QG5leHRTdGFydCA9IG1pbGxpcygpICsgQGR1cmF0aW9uXHJcblx0XHRcdFx0QHN0YXRlID0gJ1N0b3AnXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRAcyA9IHN0YXRpb25zW0BuZXh0U3RhdGlvbl0uY29ycmVjdGlvbiBAYW5nbGUsQHNwZWVkLEBhY2NcclxuXHRcdFx0XHRAdCA9IHRyYWluc1tAbmV4dFRyYWluXS5jb3JyZWN0aW9uIEBhbmdsZSxAc3BlZWQsQGFjY1xyXG5cdFx0XHRcdEBzID0gY29uc3RyYWluIEBzLC0xLDFcclxuXHRcdFx0XHRAdCA9IGNvbnN0cmFpbiBAdCwtMSwxXHJcblx0XHRcdFx0QGFjYyA9IF8ubWluIFtAcyxAdF1cclxuXHJcblx0XHRlbHNlXHJcblx0XHRcdEBhY2MgPSAwXHJcblx0XHRcdGlmIG1pbGxpcygpID4gQG5leHRTdGFydFxyXG5cdFx0XHRcdEBuZXh0U3RhdGlvbiA9IChAbmV4dFN0YXRpb24gKyAxKSAlIHN0YXRpb25zLmxlbmd0aFxyXG5cdFx0XHRcdEBzdGF0ZSA9ICdSdW4nXHJcblx0XHRcdFx0QGFjYyA9IEBtYXhBY2NcclxuXHJcblx0XHRpZiBwYXVzZSB0aGVuIHJldHVyblxyXG5cclxuXHRcdEBzcGVlZCArPSBAYWNjICogRFRcclxuXHRcdGlmIEBzcGVlZCA+IEBtYXhTcGVlZFxyXG5cdFx0XHRAYWNjPTBcclxuXHRcdFx0QHNwZWVkID0gQG1heFNwZWVkXHJcblx0XHRpZiBAc3BlZWQgPCAwIHRoZW4gQHNwZWVkID0gMFxyXG5cdFx0QGFuZ2xlID0gKEBhbmdsZSArIEBzcGVlZCpEVCkgJSUgdG90YWxEaXN0XHJcblxyXG5cdGRyYXcgOiAobnIpIC0+XHJcblx0XHRAdXBkYXRlIG5yXHJcblx0XHRmYygpXHJcblx0XHRzYyBAcixAZyxAYlxyXG5cdFx0c3cgV0lEVEhcclxuXHJcblx0XHRkcmF3TGluZSBAYW5nbGUsQGFuZ2xlLTIuNFxyXG5cdFx0ZHJhd0xpbmUgQGFuZ2xlLTIuNixAYW5nbGUtTEVOR1RIXHJcblxyXG5cdGRyYXdUZXh0IDogKG5yKSAtPlxyXG5cdFx0ZmMgQHIsQGcsQGJcclxuXHRcdHkgPSA0MCsyMCpuclxyXG5cdFx0c2MoKVxyXG5cdFx0dGV4dFNpemUgMTZcclxuXHRcdHRleHRBbGlnbiBSSUdIVCxDRU5URVJcclxuXHRcdHRleHQgQHN0YXRlLCA1MCx5XHJcblx0XHR0ZXh0IHJvdW5kKDEwMCpAYWNjKSwgMTAwLHlcclxuXHRcdHRleHQgcm91bmQoQGFuZ2xlICogMTk2MDAvdG90YWxEaXN0KSwgMTUwLHlcclxuXHRcdHRleHQgcm91bmQoMTAwKkBzcGVlZCksIDIwMCx5XHJcblx0XHRpZiBAbmV4dFN0YXJ0ID4gbWlsbGlzKCkgdGhlbiB0ZXh0IHJvdW5kKChAbmV4dFN0YXJ0IC0gbWlsbGlzKCkpLzEwMDApLCAyNTAseVxyXG5cdFx0dGV4dEFsaWduIExFRlQsQ0VOVEVSXHJcblx0XHRpZiBAbmV4dFN0YXRpb248MjRcclxuXHRcdFx0dGV4dCBuYW1lc1tAbmV4dFN0YXRpb25dLCAyNzAseVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0ZXh0IG5hbWVzWzIzLUBuZXh0U3RhdGlvbiAlJSAyNF0sIDI3MCx5XHJcblxyXG5jbGFzcyBBU2VnbWVudCAjIFN0cmFpZ2h0XHJcblx0Y29uc3RydWN0b3IgOiAoQHAxLEBwMikgLT5cclxuXHRcdEBkaXN0ID0gZGlzdCBAcDFbMF0sQHAxWzFdLCBAcDJbMF0sQHAyWzFdXHJcblx0cG9pbnQgOiAoZCkgLT4gW2QvQGRpc3QqQHAyWzBdKyhAZGlzdC1kKS9AZGlzdCpAcDFbMF0sIGQvQGRpc3QqQHAyWzFdKyhAZGlzdC1kKS9AZGlzdCpAcDFbMV1dXHJcblx0ZHJhdyA6IC0+IGxpbmUgQHAxWzBdLEBwMVsxXSwgQHAyWzBdLEBwMlsxXVxyXG5cclxuY2xhc3MgQlNlZ21lbnQgIyBCZXppZXJcclxuXHRjb25zdHJ1Y3RvciA6IChAcDEsQHAyLEBwMyxAcDQsQHN0ZXBzPTE2KSAtPlxyXG5cdFx0QGRpc3QgID0gMFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQHN0ZXBzKzFcclxuXHRcdFx0eGEgPSBiZXppZXJQb2ludCBAcDFbMF0sQHAyWzBdLEBwM1swXSxAcDRbMF0sIGkgLyBAc3RlcHNcclxuXHRcdFx0eWEgPSBiZXppZXJQb2ludCBAcDFbMV0sQHAyWzFdLEBwM1sxXSxAcDRbMV0sIGkgLyBAc3RlcHNcclxuXHRcdFx0eGIgPSBiZXppZXJQb2ludCBAcDFbMF0sQHAyWzBdLEBwM1swXSxAcDRbMF0sIChpKzEpIC8gQHN0ZXBzXHJcblx0XHRcdHliID0gYmV6aWVyUG9pbnQgQHAxWzFdLEBwMlsxXSxAcDNbMV0sQHA0WzFdLCAoaSsxKSAvIEBzdGVwc1xyXG5cdFx0XHRAZGlzdCArPSBkaXN0IHhhLHlhLCB4Yix5YlxyXG5cdHBvaW50IDogKGQpIC0+IFtiZXppZXJQb2ludChAcDFbMF0sQHAyWzBdLEBwM1swXSxAcDRbMF0sIGQvQGRpc3QpLCBiZXppZXJQb2ludChAcDFbMV0sQHAyWzFdLEBwM1sxXSxAcDRbMV0sIGQvQGRpc3QpXVxyXG5cdGRyYXcgOiAtPiBiZXppZXIgQHAxWzBdLEBwMVsxXSxAcDJbMF0sQHAyWzFdLEBwM1swXSxAcDNbMV0sQHA0WzBdLEBwNFsxXVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNudiA9IGNyZWF0ZUNhbnZhcyAxMDAwLDgwMFxyXG5cdGNudi5tb3VzZVdoZWVsIGNoYW5nZVNjYWxlXHJcblxyXG5cdHN0cm9rZUNhcCBTUVVBUkVcclxuXHJcblx0dGV4dFNpemUgMTZcclxuXHR0ZXh0QWxpZ24gUklHSFRcclxuXHRmcmFtZVJhdGUgNTBcclxuXHJcblx0eDEgPSA0ODBcclxuXHR4MiA9IDUwMFxyXG5cdHkwID0gMFxyXG5cdHkxID0gMTVcclxuXHR5MiA9IDc4NVxyXG5cdHkzID0gODAwXHJcblx0c2VnbWVudHMucHVzaCBuZXcgQVNlZ21lbnQgW3gyLHkxXSxbeDIseTJdXHJcblx0c2VnbWVudHMucHVzaCBuZXcgQlNlZ21lbnQgW3gyLHkyXSxbeDIseTNdLFt4MSx5M10sW3gxLHkyXVxyXG5cdHNlZ21lbnRzLnB1c2ggbmV3IEFTZWdtZW50IFt4MSx5Ml0sW3gxLHkxXVxyXG5cdHNlZ21lbnRzLnB1c2ggbmV3IEJTZWdtZW50IFt4MSx5MV0sW3gxLHkwXSxbeDIseTBdLFt4Mix5MV1cclxuXHJcblx0c2MgMVxyXG5cdHN3IDFcclxuXHJcblx0Zm9yIHNlZ21lbnQgaW4gc2VnbWVudHNcclxuXHRcdHRvdGFsRGlzdCArPSBzZWdtZW50LmRpc3RcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgNDhcclxuXHRcdGlmIGk8MjQgdGhlbiBuYW1lID0gbmFtZXNbaV0gZWxzZSBuYW1lID0gJydcclxuXHRcdHN0YXRpb25zLnB1c2ggbmV3IFN0YXRpb24gMC4wMDA2ICsgaS80OCxuYW1lLDYwXHJcblxyXG5cdHRyYWlucy5wdXNoIG5ldyBUcmFpbiAwLjEwLCAxLDAsMCwgNSwxICMsIE1BWF9TUEVFRCoxLjUsIE1BWF9BQ0MqMS4xLCA1MDAwXHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuMzAsIDEsMSwwLCAxNSwyXHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuNTAsIDAsMSwwLCAyNSwzXHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuNzAsIDAsMSwxLCAzNCw0XHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuOTAsIDAsMCwxLCA0NCwwXHJcblxyXG5kcmF3ID0gLT5cclxuXHRiZyAwLjVcclxuXHJcblx0c2MgMFxyXG5cdGZjIDFcclxuXHRzdyAwXHJcblx0eSA9IDIwXHJcblx0dGV4dFNpemUgMTZcclxuXHR0ZXh0QWxpZ24gUklHSFQsQ0VOVEVSXHJcblx0dGV4dCAnc3RhdGUnLCAgNTAseVxyXG5cdHRleHQgJ2FjYycsICAgMTAwLHlcclxuXHR0ZXh0ICdwb3MnLCAgIDE1MCx5XHJcblx0dGV4dCAnc3AnLCAgICAyMDAseVxyXG5cdHRleHQgJ3NlYycsICAgMjUwLHlcclxuXHR0ZXh0ICdkZXN0JywgIDMwMCx5XHJcblx0dHJhaW4uZHJhd1RleHQgaSBmb3IgdHJhaW4saSBpbiB0cmFpbnNcclxuXHJcblx0dHJhbnNsYXRlIFgwLFkwXHJcblx0c2NhbGUgZmFjdG9yXHJcblxyXG5cdGZvciBzZWdtZW50IGluIHNlZ21lbnRzXHJcblx0XHRzYyAxXHJcblx0XHRzdyBXSURUSFxyXG5cdFx0ZmMoKVxyXG5cdFx0c2VnbWVudC5kcmF3KClcclxuXHJcblx0c3RhdGlvbi5kcmF3KCkgZm9yIHN0YXRpb24gaW4gc3RhdGlvbnNcclxuXHR0cmFpbi5kcmF3IGkgZm9yIHRyYWluLGkgaW4gdHJhaW5zXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPiBtZW1vcnkgPSBbbW91c2VYLG1vdXNlWV1cclxubW91c2VEcmFnZ2VkID0gLT5cclxuXHRYMCArPSAobW91c2VYLW1lbW9yeVswXSlcclxuXHRZMCArPSAobW91c2VZLW1lbW9yeVsxXSlcclxuXHRtZW1vcnkgPSBbbW91c2VYLG1vdXNlWV1cclxuXHJcbmNoYW5nZVNjYWxlID0gKGV2ZW50KSAtPlxyXG5cdGlmIGV2ZW50LmRlbHRhWSA+IDBcclxuXHRcdFgwID0gKFgwK21vdXNlWCkvMlxyXG5cdFx0WTAgPSAoWTArbW91c2VZKS8yXHJcblx0XHRmYWN0b3IgLz0gMlxyXG5cdGVsc2VcclxuXHRcdFgwID0gMipYMC1tb3VzZVhcclxuXHRcdFkwID0gMipZMC1tb3VzZVlcclxuXHRcdGZhY3RvciAqPSAyXHJcbiJdfQ==
//# sourceURL=C:\Lab\2017\075-Tunnelbanesimulator-Linje17\coffee\sketch.coffee