// Generated by CoffeeScript 1.11.1
var ASegment, BSegment, DT, FACTOR, LENGTH, MACC, MAX_ACC, MAX_SPEED, MLEN, MM, MSPEED, MTOTAL, MWIDTH, Station, Train, WIDTH, X0, Y0, changeScale, corr, draw, drawLine, drawLine2, factor, getPoint, memory, midPoint, mouseDragged, mousePressed, names, pause, ref, segments, setup, stations, totalDist, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

MSPEED = 25;

MACC = 1.25;

MLEN = 3 * 46.5;

MWIDTH = 3;

MTOTAL = 2 * 19600;

FACTOR = 24.3;

MM = 0.001 / FACTOR;

MAX_SPEED = MSPEED / FACTOR;

MAX_ACC = MACC / FACTOR;

LENGTH = MLEN / FACTOR;

WIDTH = MWIDTH / FACTOR;

DT = 0.02;

names = 'Åkeshov Brommaplan Abrahamsberg StoraMossen Alvik Kristineberg Thorildsplan Fridhemsplan S:tEriksplan Odenplan Rådmansgatan Hötorget T-centralen GamlaStan Slussen Medborgarplatsen Skanstull Gullmarsplan Skärmarbrink Hammarbyhöjden Björkhagen Kärrtorp Bagarmossen Skarpnäck'.split(' ');

trains = [];

stations = [];

segments = [];

totalDist = 0;

pause = false;

factor = 37.4;

ref = [-483, 1.778], X0 = ref[0], Y0 = ref[1];

memory = [0, 0];

getPoint = function(s) {
  var j, len, segment;
  s = modulo(s, totalDist);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    if (s <= segment.dist) {
      return segment.point(s);
    } else {
      s -= segment.dist;
    }
  }
};

midPoint = function(a, b) {
  return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
};

drawLine = function(s1, s2) {
  var ref1, ref2, x1, x2, y1, y2;
  ref1 = getPoint(s1), x1 = ref1[0], y1 = ref1[1];
  ref2 = getPoint(s2), x2 = ref2[0], y2 = ref2[1];
  return line(x1, y1, x2, y2);
};

drawLine2 = function(a, b) {
  var x1, x2, y1, y2;
  x1 = a[0], y1 = a[1];
  x2 = b[0], y2 = b[1];
  return line(x1, y1, x2, y2);
};

corr = function(a1, sp1, acc1, a2, sp2, security) {
  var d, distance;
  distance = security + sp1 * sp1 / 2 / MAX_ACC;
  d = a2 - a1;
  if (d < 0) {
    d += totalDist;
  }
  if (d <= distance) {
    return sp2 - sp1;
  } else {
    return MAX_ACC;
  }
};

Station = (function() {
  function Station(angle1, name1, duration, speed1, acc2) {
    this.angle = angle1;
    this.name = name1;
    this.duration = duration;
    this.speed = speed1 != null ? speed1 : 0;
    this.acc = acc2 != null ? acc2 : 0;
    this.angle *= totalDist;
  }

  Station.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, this.acc);
  };

  Station.prototype.draw = function() {
    var ref1, x, y;
    fc();
    sc(0.1);
    sw(WIDTH);
    drawLine(this.angle, this.angle - LENGTH);
    ref1 = getPoint(this.angle - 0.5 * LENGTH), x = ref1[0], y = ref1[1];
    sw(0);
    fc(0);
    textSize(5 / 3);
    textAlign(CENTER, CENTER);
    return text(this.name, x - 7.5, y);
  };

  return Station;

})();

Train = (function() {
  function Train(angle1, nextStation, nextTrain, r, g, b1, maxSpeed, maxAcc, duration) {
    this.angle = angle1;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.r = r;
    this.g = g;
    this.b = b1;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 60000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
    this.angle *= totalDist;
  }

  Train.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, LENGTH * 2);
  };

  Train.prototype.update = function(nr) {
    var ds, dt, s, t;
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += totalDist;
    }
    if (ds < 0) {
      ds += totalDist;
    }
    if (this.state === 'Run') {
      if (ds < 0.001) {
        this.acc = 0;
        this.speed = 0;
        this.nextStart = millis() + this.duration;
        this.state = 'Stop';
      } else {
        this.s = stations[this.nextStation].correction(this.angle, this.speed, this.acc);
        this.t = trains[this.nextTrain].correction(this.angle, this.speed, this.acc);
        this.s = constrain(this.s, -MAX_ACC, MAX_ACC);
        this.t = constrain(this.t, -MAX_ACC, MAX_ACC);
        this.acc = _.min([this.s, this.t]);
      }
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, totalDist);
  };

  Train.prototype.draw = function(nr) {
    var a0, a1, a2, a3, a4, a5, a6, a7, i, j, len, offset, ref1, results;
    this.update(nr);
    fc();
    sc(this.r, this.g, this.b);
    sw(WIDTH);
    ref1 = range(3);
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      offset = this.angle - i * LENGTH / 3;
      a0 = getPoint(offset - 0 * LENGTH / 9 - 1500 * MM);
      a2 = getPoint(offset - 1 * LENGTH / 9 + 150 * MM);
      a3 = getPoint(offset - 1 * LENGTH / 9 - 150 * MM);
      a4 = getPoint(offset - 2 * LENGTH / 9 + 150 * MM);
      a5 = getPoint(offset - 2 * LENGTH / 9 - 150 * MM);
      a7 = getPoint(offset - 3 * LENGTH / 9 + 1500 * MM);
      a1 = midPoint(a0, a2);
      a6 = midPoint(a5, a7);
      strokeCap(ROUND);
      drawLine2(a0, a1);
      drawLine2(a6, a7);
      strokeCap(SQUARE);
      drawLine2(a1, a2);
      drawLine2(a3, a4);
      results.push(drawLine2(a5, a6));
    }
    return results;
  };

  Train.prototype.drawText = function(nr) {
    var y;
    fc(this.r, this.g, this.b);
    y = 40 + 20 * nr;
    sc();
    textSize(16);
    textAlign(RIGHT, CENTER);
    text(this.state, 50, y);
    text(nf(FACTOR * this.acc, 0, 2), 100, y);
    text(round(FACTOR * this.speed), 150, y);
    text(round(this.angle / totalDist * MTOTAL), 200, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 250, y);
    }
    textAlign(LEFT, CENTER);
    if (this.nextStation < 24) {
      return text(names[this.nextStation], 270, y);
    } else {
      return text(names[47 - this.nextStation], 270, y);
    }
  };

  return Train;

})();

ASegment = (function() {
  function ASegment(a8, b1, c, d1) {
    this.a = a8;
    this.b = b1;
    this.c = c;
    this.d = d1;
    this.dist = dist(this.a, this.b, this.c, this.d);
  }

  ASegment.prototype.point = function(d) {
    return [d / this.dist * this.c + (this.dist - d) / this.dist * this.a, d / this.dist * this.d + (this.dist - d) / this.dist * this.b];
  };

  ASegment.prototype.draw = function() {
    return line(this.a, this.b, this.c, this.d);
  };

  return ASegment;

})();

BSegment = (function() {
  function BSegment(a8, b1, c, d1, e, f, g, h, steps) {
    var i, j, len, ref1, ref2, ref3, xa, xb, ya, yb;
    this.a = a8;
    this.b = b1;
    this.c = c;
    this.d = d1;
    this.e = e;
    this.f = f;
    this.g = g;
    this.h = h;
    this.steps = steps != null ? steps : 16;
    this.dist = 0;
    ref1 = range(this.steps + 1);
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      ref2 = this.bp(i / this.steps), xa = ref2[0], ya = ref2[1];
      ref3 = this.bp((i + 1) / this.steps), xb = ref3[0], yb = ref3[1];
      this.dist += dist(xa, ya, xb, yb);
    }
  }

  BSegment.prototype.point = function(d) {
    return this.bp(d / this.dist);
  };

  BSegment.prototype.bp = function(t) {
    return [bezierPoint(this.a, this.c, this.e, this.g, t), bezierPoint(this.b, this.d, this.f, this.h, t)];
  };

  BSegment.prototype.draw = function() {
    return bezier(this.a, this.b, this.c, this.d, this.e, this.f, this.g, this.h);
  };

  return BSegment;

})();

setup = function() {
  var cnv, i, j, k, len, len1, name, ref1, segment, x1, x2, y0, y1, y2, y3;
  cnv = createCanvas(windowWidth, windowHeight);
  cnv.mouseWheel(changeScale);
  strokeCap(SQUARE);
  textSize(16);
  textAlign(RIGHT);
  frameRate(50);
  x1 = 485;
  x2 = 500;
  y0 = 0;
  y1 = 10;
  y2 = 790;
  y3 = 800;
  segments.push(new ASegment(x2, y1, x2, y2));
  segments.push(new BSegment(x2, y2, x2, y3, x1, y3, x1, y2));
  segments.push(new ASegment(x1, y2, x1, y1));
  segments.push(new BSegment(x1, y1, x1, y0, x2, y0, x2, y1));
  sc(1);
  sw(1);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    totalDist += segment.dist;
  }
  print(totalDist);
  ref1 = range(48);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    if (i < 24) {
      name = names[i];
    } else {
      name = '';
    }
    stations.push(new Station(0.0042 + i / 48, name, 60));
  }
  trains.push(new Train(0.000, 0, 1, 1, 0, 0));
  trains.push(new Train(0.120, 6, 2, 1, 1, 0));
  trains.push(new Train(0.246, 12, 3, 0, 1, 0));
  trains.push(new Train(0.372, 18, 4, 0, 1, 1));
  trains.push(new Train(0.498, 24, 5, 0, 0, 1));
  trains.push(new Train(0.624, 30, 6, 1, 0, 1));
  trains.push(new Train(0.750, 36, 7, 0.5, 1, 0));
  return trains.push(new Train(0.876, 42, 0, 0.75, 0.75, 0.75));
};

draw = function() {
  var i, j, k, l, len, len1, len2, len3, m, results, segment, station, train, y;
  bg(0.5);
  sc(0);
  fc(1);
  sw(0);
  y = 20;
  textSize(16);
  textAlign(RIGHT, CENTER);
  text('state', 50, y);
  text('m/s2', 100, y);
  text('m/s', 150, y);
  text('m', 200, y);
  text('s', 250, y);
  text('dest', 300, y);
  for (i = j = 0, len = trains.length; j < len; i = ++j) {
    train = trains[i];
    train.drawText(i);
  }
  scale(factor);
  translate(X0, Y0);
  for (k = 0, len1 = segments.length; k < len1; k++) {
    segment = segments[k];
    sc(1);
    sw(WIDTH);
    fc();
    segment.draw();
  }
  for (l = 0, len2 = stations.length; l < len2; l++) {
    station = stations[l];
    station.draw();
  }
  results = [];
  for (i = m = 0, len3 = trains.length; m < len3; i = ++m) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mousePressed = function() {
  return memory = [mouseX, mouseY];
};

mouseDragged = function() {
  X0 += (mouseX - memory[0]) / factor;
  Y0 += (mouseY - memory[1]) / factor;
  return memory = [mouseX, mouseY];
};

changeScale = function(event) {
  var S;
  S = 1.1;
  X0 -= mouseX / factor;
  Y0 -= mouseY / factor;
  factor = event.deltaY > 0 ? factor / S : factor * S;
  X0 += mouseX / factor;
  return Y0 += mouseY / factor;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsZ1RBQUE7RUFBQTs7QUFBQSxNQUFBLEdBQVM7O0FBQ1QsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTyxDQUFBLEdBQUU7O0FBQ1QsTUFBQSxHQUFTOztBQUNULE1BQUEsR0FBUyxDQUFBLEdBQUk7O0FBRWIsTUFBQSxHQUFTOztBQUNULEVBQUEsR0FBSyxLQUFBLEdBQU07O0FBRVgsU0FBQSxHQUFZLE1BQUEsR0FBTzs7QUFDbkIsT0FBQSxHQUFZLElBQUEsR0FBSzs7QUFDakIsTUFBQSxHQUFZLElBQUEsR0FBSzs7QUFDakIsS0FBQSxHQUFZLE1BQUEsR0FBTzs7QUFDbkIsRUFBQSxHQUFZOztBQUVaLEtBQUEsR0FBUSxrUkFBa1IsQ0FBQyxLQUFuUixDQUF5UixHQUF6Ujs7QUFDUixNQUFBLEdBQVM7O0FBQ1QsUUFBQSxHQUFXOztBQUNYLFFBQUEsR0FBVzs7QUFFWCxTQUFBLEdBQVk7O0FBRVosS0FBQSxHQUFROztBQUNSLE1BQUEsR0FBUzs7QUFDVCxNQUFRLENBQUMsQ0FBQyxHQUFGLEVBQU0sS0FBTixDQUFSLEVBQUMsV0FBRCxFQUFJOztBQUNKLE1BQUEsR0FBUyxDQUFDLENBQUQsRUFBRyxDQUFIOztBQUVULFFBQUEsR0FBVyxTQUFDLENBQUQ7QUFDVixNQUFBO0VBQUEsV0FBQSxHQUFNO0FBQ04sT0FBQSwwQ0FBQTs7SUFDQyxJQUFHLENBQUEsSUFBSyxPQUFPLENBQUMsSUFBaEI7QUFBMEIsYUFBTyxPQUFPLENBQUMsS0FBUixDQUFjLENBQWQsRUFBakM7S0FBQSxNQUFBO01BQXNELENBQUEsSUFBSyxPQUFPLENBQUMsS0FBbkU7O0FBREQ7QUFGVTs7QUFLWCxRQUFBLEdBQVcsU0FBQyxDQUFELEVBQUcsQ0FBSDtTQUFTLENBQUMsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFG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RCA9IDI1ICMgbS9zXHJcbk1BQ0MgPSAxLjI1ICMgbS9zMlxyXG5NTEVOID0gMyo0Ni41ICMgbVxyXG5NV0lEVEggPSAzICAjIG1cclxuTVRPVEFMID0gMiAqIDE5NjAwICMgbVxyXG5cclxuRkFDVE9SID0gMjQuMyAjIG0vcGl4ZWwgTVRPVEFMLzE2MTEuNVxyXG5NTSA9IDAuMDAxL0ZBQ1RPUiAjIHBpeGVsL21tXHJcblxyXG5NQVhfU1BFRUQgPSBNU1BFRUQvRkFDVE9SICMgcGl4bGFyL3NcclxuTUFYX0FDQyAgID0gTUFDQy9GQUNUT1IgIyBwaXhsYXIvczJcclxuTEVOR1RIICAgID0gTUxFTi9GQUNUT1IgIyBwaXhsYXJcclxuV0lEVEggICAgID0gTVdJRFRIL0ZBQ1RPUiAjIDAuNSAjIHBpeGxhciAjIDMsNSBvc3YgZ2VyIGlja2Ugc2FtbWFuaMOkbmdhbmRlIGJlemllciBtZWQgbGluZS4gMC41LDIsNCBva1xyXG5EVCAgICAgICAgPSAwLjAyICMgbXNcclxuXHJcbm5hbWVzID0gJ8OFa2VzaG92IEJyb21tYXBsYW4gQWJyYWhhbXNiZXJnIFN0b3JhTW9zc2VuIEFsdmlrIEtyaXN0aW5lYmVyZyBUaG9yaWxkc3BsYW4gRnJpZGhlbXNwbGFuIFM6dEVyaWtzcGxhbiBPZGVucGxhbiBSw6VkbWFuc2dhdGFuIEjDtnRvcmdldCBULWNlbnRyYWxlbiBHYW1sYVN0YW4gU2x1c3NlbiBNZWRib3JnYXJwbGF0c2VuIFNrYW5zdHVsbCBHdWxsbWFyc3BsYW4gU2vDpHJtYXJicmluayBIYW1tYXJieWjDtmpkZW4gQmrDtnJraGFnZW4gS8OkcnJ0b3JwIEJhZ2FybW9zc2VuIFNrYXJwbsOkY2snLnNwbGl0ICcgJ1xyXG50cmFpbnMgPSBbXVxyXG5zdGF0aW9ucyA9IFtdXHJcbnNlZ21lbnRzID0gW11cclxuXHJcbnRvdGFsRGlzdCA9IDAgIyBwaXhsYXJcclxuXHJcbnBhdXNlID0gZmFsc2VcclxuZmFjdG9yID0gMzcuNFxyXG5bWDAsWTBdPVstNDgzLDEuNzc4XVxyXG5tZW1vcnkgPSBbMCwwXVxyXG5cclxuZ2V0UG9pbnQgPSAocykgLT5cclxuXHRzICUlPSB0b3RhbERpc3RcclxuXHRmb3Igc2VnbWVudCBpbiBzZWdtZW50c1xyXG5cdFx0aWYgcyA8PSBzZWdtZW50LmRpc3QgdGhlbiByZXR1cm4gc2VnbWVudC5wb2ludCBzIGVsc2UgcyAtPSBzZWdtZW50LmRpc3RcclxuXHJcbm1pZFBvaW50ID0gKGEsYikgLT5cdFsoYVswXStiWzBdKS8yLCAoYVsxXStiWzFdKS8yXVxyXG5cclxuZHJhd0xpbmUgPSAoczEsczIpIC0+XHJcblx0W3gxLHkxXSA9IGdldFBvaW50IHMxXHJcblx0W3gyLHkyXSA9IGdldFBvaW50IHMyXHJcblx0bGluZSB4MSx5MSx4Mix5MlxyXG5cclxuZHJhd0xpbmUyID0gKGEsYikgLT5cclxuXHRbeDEseTFdID0gYVxyXG5cdFt4Mix5Ml0gPSBiXHJcblx0bGluZSB4MSx5MSx4Mix5MlxyXG5cclxuY29yciA9IChhMSxzcDEsYWNjMSxhMixzcDIsc2VjdXJpdHkpIC0+XHJcblx0ZGlzdGFuY2UgPSBzZWN1cml0eSArIHNwMSpzcDEvMi9NQVhfQUNDXHJcblx0ZCA9IGEyLWExXHJcblx0aWYgZCA8IDAgdGhlbiBkICs9IHRvdGFsRGlzdFxyXG5cdGlmIGQgPD0gZGlzdGFuY2UgdGhlbiBzcDItc3AxIGVsc2UgTUFYX0FDQ1xyXG5cclxuY2xhc3MgU3RhdGlvblxyXG5cdGNvbnN0cnVjdG9yIDogKEBhbmdsZSxAbmFtZSxAZHVyYXRpb24sQHNwZWVkPTAsQGFjYz0wKSAtPiBAYW5nbGUgKj0gdG90YWxEaXN0XHJcblx0Y29ycmVjdGlvbiA6IChhbmdsZSxzcGVlZCxhY2MpIC0+IGNvcnIgYW5nbGUsc3BlZWQsYWNjLEBhbmdsZSxAc3BlZWQsQGFjY1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0ZmMoKVxyXG5cdFx0c2MgMC4xXHJcblx0XHRzdyBXSURUSFxyXG5cdFx0ZHJhd0xpbmUgQGFuZ2xlLEBhbmdsZS1MRU5HVEhcclxuXHRcdFt4LHldID0gZ2V0UG9pbnQgQGFuZ2xlLTAuNSpMRU5HVEhcclxuXHRcdHN3IDBcclxuXHRcdGZjIDBcclxuXHRcdHRleHRTaXplIDUvM1xyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHQgQG5hbWUseC03LjUseVxyXG5cclxuY2xhc3MgVHJhaW5cclxuXHRjb25zdHJ1Y3RvciA6IChAYW5nbGUsIEBuZXh0U3RhdGlvbiwgQG5leHRUcmFpbiwgQHIsQGcsQGIsIEBtYXhTcGVlZD1NQVhfU1BFRUQsIEBtYXhBY2M9TUFYX0FDQywgQGR1cmF0aW9uPTYwMDAwKSAtPlxyXG5cdFx0QHN0YXRlID0gJ1J1bicgIyBTdG9wIFJ1blxyXG5cdFx0QHNwZWVkID0gMFxyXG5cdFx0QGFjYyA9IEBtYXhBY2NcclxuXHRcdEBuZXh0U3RhcnQgPSBtaWxsaXMoKVxyXG5cdFx0QGFuZ2xlICo9IHRvdGFsRGlzdFxyXG5cclxuXHRjb3JyZWN0aW9uIDogKGFuZ2xlLHNwZWVkLGFjYykgLT4gY29yciBhbmdsZSxzcGVlZCxhY2MsQGFuZ2xlLEBzcGVlZCxMRU5HVEggKiAyXHJcblxyXG5cdHVwZGF0ZSA6IChucikgLT5cclxuXHJcblx0XHRAbnIgPSBuclxyXG5cdFx0dCA9IEBtYXhTcGVlZC9AbWF4QWNjICMgNFxyXG5cdFx0cyA9IEBtYXhBY2MgKiB0KnQgLyAyICMgOFxyXG5cdFx0ZHQgPSB0cmFpbnNbQG5leHRUcmFpbl0uYW5nbGUgLSBAYW5nbGVcclxuXHRcdGRzID0gc3RhdGlvbnNbQG5leHRTdGF0aW9uXS5hbmdsZSAtIEBhbmdsZVxyXG5cclxuXHRcdGlmIGR0PDAgdGhlbiBkdCArPSB0b3RhbERpc3RcclxuXHRcdGlmIGRzPDAgdGhlbiBkcyArPSB0b3RhbERpc3RcclxuXHJcblx0XHRpZiBAc3RhdGU9PSdSdW4nXHJcblxyXG5cdFx0XHRpZiBkcyA8IDAuMDAxICNwZXJyb25nc3RvcHAgMSBtbVxyXG5cdFx0XHRcdEBhY2MgPSAwXHJcblx0XHRcdFx0QHNwZWVkID0gMFxyXG5cdFx0XHRcdEBuZXh0U3RhcnQgPSBtaWxsaXMoKSArIEBkdXJhdGlvblxyXG5cdFx0XHRcdEBzdGF0ZSA9ICdTdG9wJ1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0QHMgPSBzdGF0aW9uc1tAbmV4dFN0YXRpb25dLmNvcnJlY3Rpb24gQGFuZ2xlLEBzcGVlZCxAYWNjXHJcblx0XHRcdFx0QHQgPSB0cmFpbnNbQG5leHRUcmFpbl0uY29ycmVjdGlvbiBAYW5nbGUsQHNwZWVkLEBhY2NcclxuXHRcdFx0XHRAcyA9IGNvbnN0cmFpbiBAcywtTUFYX0FDQyxNQVhfQUNDXHJcblx0XHRcdFx0QHQgPSBjb25zdHJhaW4gQHQsLU1BWF9BQ0MsTUFYX0FDQ1xyXG5cdFx0XHRcdEBhY2MgPSBfLm1pbiBbQHMsQHRdXHJcblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRAYWNjID0gMFxyXG5cdFx0XHRpZiBtaWxsaXMoKSA+IEBuZXh0U3RhcnRcclxuXHRcdFx0XHRAbmV4dFN0YXRpb24gPSAoQG5leHRTdGF0aW9uICsgMSkgJSBzdGF0aW9ucy5sZW5ndGhcclxuXHRcdFx0XHRAc3RhdGUgPSAnUnVuJ1xyXG5cdFx0XHRcdEBhY2MgPSBAbWF4QWNjXHJcblxyXG5cdFx0aWYgcGF1c2UgdGhlbiByZXR1cm5cclxuXHJcblx0XHRAc3BlZWQgKz0gQGFjYyAqIERUXHJcblx0XHRpZiBAc3BlZWQgPiBAbWF4U3BlZWRcclxuXHRcdFx0QGFjYz0wXHJcblx0XHRcdEBzcGVlZCA9IEBtYXhTcGVlZFxyXG5cdFx0aWYgQHNwZWVkIDwgMCB0aGVuIEBzcGVlZCA9IDBcclxuXHRcdEBhbmdsZSA9IChAYW5nbGUgKyBAc3BlZWQqRFQpICUlIHRvdGFsRGlzdFxyXG5cclxuXHRkcmF3IDogKG5yKSAtPlxyXG5cdFx0QHVwZGF0ZSBuclxyXG5cdFx0ZmMoKVxyXG5cdFx0c2MgQHIsQGcsQGJcclxuXHRcdHN3IFdJRFRIXHJcblxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgM1xyXG5cdFx0XHRvZmZzZXQgPSBAYW5nbGUgLSBpKkxFTkdUSC8zXHJcblx0XHRcdGEwID0gZ2V0UG9pbnQgb2Zmc2V0IC0gMCpMRU5HVEgvOSAtIDE1MDAqTU1cclxuXHRcdFx0YTIgPSBnZXRQb2ludCBvZmZzZXQgLSAxKkxFTkdUSC85ICsgMTUwKk1NXHJcblx0XHRcdGEzID0gZ2V0UG9pbnQgb2Zmc2V0IC0gMSpMRU5HVEgvOSAtIDE1MCpNTVxyXG5cdFx0XHRhNCA9IGdldFBvaW50IG9mZnNldCAtIDIqTEVOR1RILzkgKyAxNTAqTU1cclxuXHRcdFx0YTUgPSBnZXRQb2ludCBvZmZzZXQgLSAyKkxFTkdUSC85IC0gMTUwKk1NXHJcblx0XHRcdGE3ID0gZ2V0UG9pbnQgb2Zmc2V0IC0gMypMRU5HVEgvOSArIDE1MDAqTU1cclxuXHJcblx0XHRcdGExID0gbWlkUG9pbnQgYTAsYTJcclxuXHRcdFx0YTYgPSBtaWRQb2ludCBhNSxhN1xyXG5cclxuXHRcdFx0c3Ryb2tlQ2FwIFJPVU5EXHJcblx0XHRcdGRyYXdMaW5lMiBhMCxhMVxyXG5cdFx0XHRkcmF3TGluZTIgYTYsYTdcclxuXHJcblx0XHRcdHN0cm9rZUNhcCBTUVVBUkVcclxuXHRcdFx0ZHJhd0xpbmUyIGExLGEyXHJcblx0XHRcdGRyYXdMaW5lMiBhMyxhNFxyXG5cdFx0XHRkcmF3TGluZTIgYTUsYTZcclxuXHJcblx0ZHJhd1RleHQgOiAobnIpIC0+XHJcblx0XHRmYyBAcixAZyxAYlxyXG5cdFx0eSA9IDQwKzIwKm5yXHJcblx0XHRzYygpXHJcblx0XHR0ZXh0U2l6ZSAxNlxyXG5cdFx0dGV4dEFsaWduIFJJR0hULENFTlRFUlxyXG5cdFx0dGV4dCBAc3RhdGUsIDUwLHlcclxuXHRcdHRleHQgbmYoRkFDVE9SKkBhY2MsMCwyKSwgMTAwLHlcclxuXHRcdHRleHQgcm91bmQoRkFDVE9SKkBzcGVlZCksIDE1MCx5XHJcblx0XHR0ZXh0IHJvdW5kKEBhbmdsZS90b3RhbERpc3QgKiBNVE9UQUwpLCAyMDAseVxyXG5cdFx0aWYgQG5leHRTdGFydCA+IG1pbGxpcygpIHRoZW4gdGV4dCByb3VuZCgoQG5leHRTdGFydCAtIG1pbGxpcygpKS8xMDAwKSwgMjUwLHlcclxuXHRcdHRleHRBbGlnbiBMRUZULENFTlRFUlxyXG5cdFx0aWYgQG5leHRTdGF0aW9uPDI0XHJcblx0XHRcdHRleHQgbmFtZXNbQG5leHRTdGF0aW9uXSwgMjcwLHlcclxuXHRcdGVsc2VcclxuXHRcdFx0dGV4dCBuYW1lc1s0Ny1AbmV4dFN0YXRpb25dLCAyNzAseVxyXG5cclxuY2xhc3MgQVNlZ21lbnQgIyBTdHJhaWdodFxyXG5cdGNvbnN0cnVjdG9yIDogKEBhLEBiLCBAYyxAZCkgLT4gQGRpc3QgPSBkaXN0IEBhLEBiLCBAYyxAZFxyXG5cdHBvaW50IDogKGQpIC0+IFtkL0BkaXN0KkBjKyhAZGlzdC1kKS9AZGlzdCpAYSwgZC9AZGlzdCpAZCsoQGRpc3QtZCkvQGRpc3QqQGJdXHJcblx0ZHJhdyA6IC0+IGxpbmUgQGEsQGIsIEBjLEBkXHJcblxyXG5jbGFzcyBCU2VnbWVudCAjIEJlemllclxyXG5cdGNvbnN0cnVjdG9yIDogKEBhLEBiLCBAYyxAZCwgQGUsQGYsIEBnLEBoLEBzdGVwcz0xNikgLT5cclxuXHRcdEBkaXN0ICA9IDBcclxuXHRcdGZvciBpIGluIHJhbmdlIEBzdGVwcysxXHJcblx0XHRcdFt4YSx5YV0gPSBAYnAgaSAvIEBzdGVwc1xyXG5cdFx0XHRbeGIseWJdID0gQGJwIChpKzEpIC8gQHN0ZXBzXHJcblx0XHRcdEBkaXN0ICs9IGRpc3QgeGEseWEsIHhiLHliXHJcblx0cG9pbnQgOiAoZCkgLT4gQGJwIGQvQGRpc3RcclxuXHRicCA6ICh0KSAtPiBbYmV6aWVyUG9pbnQoQGEsQGMsQGUsQGcsdCksIGJlemllclBvaW50KEBiLEBkLEBmLEBoLHQpXVxyXG5cdGRyYXcgOiAtPiBiZXppZXIgQGEsQGIsIEBjLEBkLCBAZSxAZiwgQGcsQGhcclxuXHJcbnNldHVwID0gLT5cclxuXHRjbnYgPSBjcmVhdGVDYW52YXMgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0XHJcblx0Y252Lm1vdXNlV2hlZWwgY2hhbmdlU2NhbGVcclxuXHJcblx0c3Ryb2tlQ2FwIFNRVUFSRVxyXG5cclxuXHR0ZXh0U2l6ZSAxNlxyXG5cdHRleHRBbGlnbiBSSUdIVFxyXG5cdGZyYW1lUmF0ZSA1MFxyXG5cclxuXHR4MSA9IDQ4NVxyXG5cdHgyID0gNTAwXHJcblx0eTAgPSAwXHJcblx0eTEgPSAxMFxyXG5cdHkyID0gNzkwXHJcblx0eTMgPSA4MDBcclxuXHRzZWdtZW50cy5wdXNoIG5ldyBBU2VnbWVudCB4Mix5MSwgeDIseTJcclxuXHRzZWdtZW50cy5wdXNoIG5ldyBCU2VnbWVudCB4Mix5MiwgeDIseTMsIHgxLHkzLCB4MSx5MlxyXG5cdHNlZ21lbnRzLnB1c2ggbmV3IEFTZWdtZW50IHgxLHkyLCB4MSx5MVxyXG5cdHNlZ21lbnRzLnB1c2ggbmV3IEJTZWdtZW50IHgxLHkxLCB4MSx5MCwgeDIseTAsIHgyLHkxXHJcblxyXG5cdHNjIDFcclxuXHRzdyAxXHJcblxyXG5cdGZvciBzZWdtZW50IGluIHNlZ21lbnRzXHJcblx0XHR0b3RhbERpc3QgKz0gc2VnbWVudC5kaXN0XHJcblx0cHJpbnQgdG90YWxEaXN0XHJcblxyXG5cdGZvciBpIGluIHJhbmdlIDQ4XHJcblx0XHRpZiBpPDI0IHRoZW4gbmFtZSA9IG5hbWVzW2ldIGVsc2UgbmFtZSA9ICcnXHJcblx0XHRzdGF0aW9ucy5wdXNoIG5ldyBTdGF0aW9uIDAuMDA0MiArIGkvNDgsbmFtZSw2MFxyXG5cclxuXHR0cmFpbnMucHVzaCBuZXcgVHJhaW4gMC4wMDAsICAwLDEsIDEsMCwwXHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuMTIwLCAgNiwyLCAxLDEsMFxyXG5cdHRyYWlucy5wdXNoIG5ldyBUcmFpbiAwLjI0NiwgMTIsMywgMCwxLDBcclxuXHR0cmFpbnMucHVzaCBuZXcgVHJhaW4gMC4zNzIsIDE4LDQsIDAsMSwxXHJcblx0dHJhaW5zLnB1c2ggbmV3IFRyYWluIDAuNDk4LCAyNCw1LCAwLDAsMVxyXG5cdHRyYWlucy5wdXNoIG5ldyBUcmFpbiAwLjYyNCwgMzAsNiwgMSwwLDFcclxuXHR0cmFpbnMucHVzaCBuZXcgVHJhaW4gMC43NTAsIDM2LDcsIDAuNSwxLDBcclxuXHR0cmFpbnMucHVzaCBuZXcgVHJhaW4gMC44NzYsIDQyLDAsIDAuNzUsMC43NSwwLjc1XHJcblxyXG5kcmF3ID0gLT5cclxuXHRiZyAwLjVcclxuXHJcblx0c2MgMFxyXG5cdGZjIDFcclxuXHRzdyAwXHJcblx0eSA9IDIwXHJcblx0dGV4dFNpemUgMTZcclxuXHR0ZXh0QWxpZ24gUklHSFQsQ0VOVEVSXHJcblx0dGV4dCAnc3RhdGUnLCA1MCx5XHJcblx0dGV4dCAnbS9zMicsIDEwMCx5XHJcblx0dGV4dCAnbS9zJywgIDE1MCx5XHJcblx0dGV4dCAnbScsICAgIDIwMCx5XHJcblx0dGV4dCAncycsICAgIDI1MCx5XHJcblx0dGV4dCAnZGVzdCcsIDMwMCx5XHJcblx0dHJhaW4uZHJhd1RleHQgaSBmb3IgdHJhaW4saSBpbiB0cmFpbnNcclxuXHJcblx0c2NhbGUgZmFjdG9yXHJcblx0dHJhbnNsYXRlIFgwLFkwXHJcblxyXG5cdGZvciBzZWdtZW50IGluIHNlZ21lbnRzXHJcblx0XHRzYyAxXHJcblx0XHRzdyBXSURUSFxyXG5cdFx0ZmMoKVxyXG5cdFx0c2VnbWVudC5kcmF3KClcclxuXHJcblx0c3RhdGlvbi5kcmF3KCkgZm9yIHN0YXRpb24gaW4gc3RhdGlvbnNcclxuXHR0cmFpbi5kcmF3IGkgZm9yIHRyYWluLGkgaW4gdHJhaW5zXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPiBtZW1vcnkgPSBbbW91c2VYLG1vdXNlWV1cclxubW91c2VEcmFnZ2VkID0gLT5cclxuXHRYMCArPSAobW91c2VYIC0gbWVtb3J5WzBdKSAvIGZhY3RvclxyXG5cdFkwICs9IChtb3VzZVkgLSBtZW1vcnlbMV0pIC8gZmFjdG9yXHJcblx0bWVtb3J5ID0gW21vdXNlWCxtb3VzZVldXHJcblxyXG5jaGFuZ2VTY2FsZSA9IChldmVudCkgLT5cclxuXHRTID0gMS4xXHJcblx0WDAgLT0gbW91c2VYIC8gZmFjdG9yXHJcblx0WTAgLT0gbW91c2VZIC8gZmFjdG9yXHJcblx0ZmFjdG9yID0gaWYgZXZlbnQuZGVsdGFZID4gMCB0aGVuIGZhY3Rvci9TIGVsc2UgZmFjdG9yKlNcclxuXHRYMCArPSBtb3VzZVggLyBmYWN0b3JcclxuXHRZMCArPSBtb3VzZVkgLyBmYWN0b3JcclxuIl19
//# sourceURL=C:\Lab\2017\075-Tunnelbanesimulator-Linje17\coffee\sketch.coffee