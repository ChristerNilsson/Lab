// Generated by CoffeeScript 2.0.3
  /*
  eslint-disable 
  */
var App, Button, button, createProblem, handleError, handleExecute, handleScan, millis, myState, print, released, save, sketch,
  indexOf = [].indexOf;

import React, {
  Component
} from 'react';

import QrReader from 'react-qr-reader';

import _ from 'lodash';

import P5Wrapper from 'react-p5-wrapper';

print = console.log;

millis = function() {
  return Date.now();
};

button = null;

released = true;

myState = {
  delay: 500,
  result: 'scan', // INIT 1
  A: "",
  B: "",
  C: "",
  D: "",
  INIT: 'init',
  from: 0,
  to: 0,
  hist: [],
  level: 0,
  bg: '#808080',
  total: 0
};

handleError = function(err) {
  return console.error(err);
};

handleScan = function(result) {
  var goal;
  if (!result) {
    return;
  }
  goal = myState.from === myState.to;
  if (goal && result.indexOf('INIT') !== 0) {
    return;
  }
  myState.result = result;
  myState.bg = '#FFFF00';
  return button.title = result.split(' ')[0];
};

handleExecute = function() {
  var arr, command, commands, from, level, newFrom, op, to;
  myState.result = myState.result.replace("  ", " ");
  arr = myState.result.split(' ');
  op = arr[0];
  command = myState[op];
  newFrom === 0;
  if (command === '+2') {
    newFrom = save(myState.from + 2);
  }
  if (command === '*2') {
    newFrom = save(myState.from * 2);
  }
  if (command === '/2' && myState.from % 2 === 0) {
    newFrom = save(myState.from / 2);
  }
  if (command === 'undo' && myState.hist.length > 0) {
    myState.from = myState.hist.pop();
  }
  if (command === 'init') {
    commands = '+2 *2 /2 undo'.split(' ');
    commands = _.shuffle(commands);
    level = parseInt(arr[1]);
    [from, to] = createProblem(level);
    myState = {
      A: commands[0],
      B: commands[1],
      C: commands[2],
      D: commands[3],
      INIT: 'init',
      from: from,
      to: to,
      hist: [],
      start: millis(),
      operations: 0,
      total: 0,
      result: 'scan',
      sida: 0,
      level: level
    };
  }
  button.title = 'scan';
  return myState.bg = newFrom === myState.to ? '#00FF00' : '#FFFFFF';
};

save = function(value) {
  myState.hist.push(myState.from);
  myState.from = value;
  myState.operations++;
  myState.total = ((millis() - myState.start) / 1000 + 10 * myState.operations).toFixed(3);
  return value;
};

createProblem = function(level) {
  var a, b, item, j, k, l, len, len1, lst, lst2, n, ref, save1, tree;
  n = Math.floor(Math.pow(2, 4 + level / 3)); // nodes
  a = Math.floor(_.random(1, n / 2));
  lst = [a];
  tree = [a];
  lst2 = [];
  save1 = function(item) {
    if (Math.floor(item) === item && item <= n) {
      if (indexOf.call(tree, item) < 0) {
        lst2.push(item);
        return tree.push(item);
      }
    }
  };
  ref = _.range(level);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    lst2 = [];
    for (l = 0, len1 = lst.length; l < len1; l++) {
      item = lst[l];
      save1(item + 2);
      save1(item * 2);
      if (item % 2 === 0) {
        save1(item / 2);
      }
    }
    lst = lst2;
  }
  b = _.sample(lst);
  return [a, b];
};

Button = class Button {
  constructor(p1, x1, y, r, title, f) {
    this.p = p1;
    this.x = x1;
    this.y = y;
    this.r = r;
    this.title = title;
    this.f = f;
  }

  draw() {
    this.p.fill(255);
    this.p.ellipse(this.x, this.y, this.r);
    this.p.fill(0);
    return this.p.text(this.title, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (this.p.dist(this.x, this.y, mx, my) < this.r) {
      return this.f();
    }
  }

};

export default App = class App extends Component {
  render() {
    var h, sida, w;
    w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    sida = w < h ? w / 2 : h / 2;
    myState.previewStyle = {
      height: sida,
      width: sida
    };
    return <div style={{
        backgroundColor: '#808080'
      }}> 
			<table style={{
        width: w
      }}> 
				<tbody style={{
        width: w
      }}>
				<tr>
					<td style={{
        width: (w - sida) / 2
      }}></td>
					<td>
						<QrReader delay={myState.delay} style={myState.previewStyle} onError={handleError} onScan={handleScan} />
					</td>
				</tr>
				</tbody>
			</table>
			<P5Wrapper sketch={sketch} />
		</div>;
  }

};

sketch = function(p) {
  p.setup = function() {
    p.createCanvas(p.windowWidth - 5, p.windowHeight / 2 - 5);
    p.textAlign(p.CENTER, p.CENTER);
    return button = new Button(p, 0.5 * p.width, 0.2 * p.height, 0.3 * p.height, "scan", handleExecute);
  };
  p.draw = function() {
    var i, k, littera, op, s, x;
    s = myState;
    p.background(s.bg);
    op = s.result.split(' ')[0];
    if (op !== 'scan') {
      button.title = s[op];
    }
    p.rectMode(p.CENTER);
    p.textSize(0.1 * p.height);
    button.draw(p);
    p.fill(0);
    for (i = k = 0; k <= 3; i = ++k) {
      littera = 'A B C D'.split(' ')[i];
      x = p.lerp(0.2 * p.width, 0.4 * p.width, i);
      p.text(littera, x, 0.45 * p.height);
      p.text(s[littera], x, 0.6 * p.height);
    }
    p.textSize(0.25 * p.height);
    p.text(s.from, 0.2 * p.width, 0.2 * p.height);
    p.text(s.to, 0.8 * p.width, 0.2 * p.height);
    p.textSize(0.08 * p.height);
    p.textAlign(p.RIGHT, p.CENTER);
    p.text(s.hist.join(' '), 0.95 * p.width, 0.75 * p.height);
    p.textAlign(p.CENTER, p.CENTER);
    p.text(s.level - s.hist.length, 0.2 * p.width, 0.9 * p.height);
    return p.text(s.total, 0.8 * p.width, 0.9 * p.height);
  };
  p.mouseReleased = function() { // to make Android work 
    released = true;
    return false;
  };
  return p.mousePressed = function() {
    if (!released) { // to make Android work 
      return;
    }
    released = false;
    button.mousePressed(p.mouseX, p.mouseY);
    return false;
  };
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\151-react-qr-shortcut\coffee\App.coffee