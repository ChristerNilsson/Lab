// Generated by CoffeeScript 2.0.3
/*
eslint-disable 
*/
var App, Button, button, handleError, handleExecute, handleScan, millis, myState, released, save, sketch;

import React, {
  Component
} from 'react';

import QrReader from 'react-qr-reader';

import _ from 'lodash';

import P5Wrapper from 'react-p5-wrapper';

millis = function() {
  return Date.now();
};

button = null;

released = true;

myState = {
  delay: 500,
  result: 'scan', // INIT 4 8
  A: "",
  B: "",
  C: "",
  D: "",
  INIT: 'init',
  from: 0,
  to: 0,
  hist: [],
  bg: '#808080',
  total: 0
};

handleError = function(err) {
  return console.error(err);
};

handleScan = function(result) {
  var goal;
  if (result) {
    goal = myState.from === myState.to;
    console.log(goal, result.indexOf('INIT'));
    if (goal && result.indexOf('INIT') !== 0) {
      return;
    }
    myState.result = result;
    myState.bg = '#FFFF00';
    return button.title = result.split(' ')[0];
  }
};

handleExecute = function() {
  var arr, command, commands, newFrom, op;
  arr = myState.result.split(' ');
  op = arr[0];
  command = myState[op];
  newFrom === 0;
  if (command === '+2') {
    newFrom = save(myState.from + 2);
  }
  if (command === '*2') {
    newFrom = save(myState.from * 2);
  }
  if (command === '/2' && myState.from % 2 === 0) {
    newFrom = save(myState.from / 2);
  }
  if (command === 'undo' && myState.hist.length > 0) {
    myState.from = myState.hist.pop();
  }
  if (command === 'init') {
    console.log(myState.result);
    commands = '+2 *2 /2 undo'.split(' ');
    commands = _.shuffle(commands);
    myState = {
      A: commands[0],
      B: commands[1],
      C: commands[2],
      D: commands[3],
      INIT: 'init',
      from: parseInt(arr[1]),
      to: parseInt(arr[2]),
      hist: [],
      start: millis(),
      operations: 0,
      total: 0,
      result: 'scan',
      sida: 0
    };
  }
  button.title = 'scan';
  return myState.bg = newFrom === myState.to ? '#00FF00' : '#FFFFFF';
};

save = function(value) {
  myState.hist.push(myState.from);
  myState.from = value;
  myState.operations++;
  myState.total = ((millis() - myState.start) / 1000 + 10 * myState.operations).toFixed(3);
  return value;
};

Button = class Button {
  constructor(p1, x1, y, r, title, f) {
    this.p = p1;
    this.x = x1;
    this.y = y;
    this.r = r;
    this.title = title;
    this.f = f;
  }

  draw() {
    this.p.fill(255);
    this.p.ellipse(this.x, this.y, this.r);
    this.p.fill(0);
    return this.p.text(this.title, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (this.p.dist(this.x, this.y, mx, my) < this.r) {
      return this.f();
    }
  }

};

export default App = class App extends Component {
  render() {
    var h, sida, w;
    w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    sida = w < h ? w / 2 : h / 2;
    myState.previewStyle = {
      height: sida,
      width: sida
    };
    return <div style={{
        backgroundColor: '#808080'
      }}> 
			<table style={{
        width: w
      }}> 
				<tbody style={{
        width: w
      }}>
				<tr>
					<td style={{
        width: (w - sida) / 2
      }}></td>
					<td>
						<QrReader delay={myState.delay} style={myState.previewStyle} onError={handleError} onScan={handleScan} />
					</td>
				</tr>
				</tbody>
			</table>
			<P5Wrapper sketch={sketch} />
		</div>;
  }

};

sketch = function(p) {
  p.setup = function() {
    p.createCanvas(p.windowWidth - 5, p.windowHeight / 2 - 5);
    p.textAlign(p.CENTER, p.CENTER);
    return button = new Button(p, 0.5 * p.width, 0.2 * p.height, 0.35 * p.height, "scan", handleExecute);
  };
  p.draw = function() {
    var i, j, littera, x;
    p.background(myState.bg);
    button.title = myState.result.split(' ')[0];
    p.rectMode(p.CENTER);
    p.textSize(40);
    button.draw(p);
    p.fill(0);
    for (i = j = 0; j <= 3; i = ++j) {
      littera = 'A B C D'.split(' ')[i];
      x = p.lerp(0.2 * p.width, 0.4 * p.width, i);
      p.text(littera, x, 0.45 * p.height);
      p.text(myState[littera], x, 0.6 * p.height);
    }
    p.text(myState.from, 0.4 * p.width, 0.75 * p.height);
    p.text(myState.to, 0.6 * p.width, 0.75 * p.height);
    p.textSize(20);
    p.text(myState.hist.join(' '), p.width / 2, 0.85 * p.height);
    return p.text(myState.total, p.width / 2, 0.95 * p.height);
  };
  p.mouseReleased = function() { // to make Android work 
    released = true;
    return false;
  };
  return p.mousePressed = function() {
    if (!released) { // to make Android work 
      return;
    }
    released = false;
    button.mousePressed(p.mouseX, p.mouseY);
    return false;
  };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXEFwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7QUFBQSxJQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxhQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQTs7QUFJQSxPQUFPLEtBQVAsRUFBQTtFQUFnQixTQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFQLE1BQUE7O0FBQ0EsT0FBTyxTQUFQLE1BQUE7O0FBRUEsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO1NBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBQTtBQUFIOztBQUNULE1BQUEsR0FBUzs7QUFDVCxRQUFBLEdBQVc7O0FBQ1gsT0FBQSxHQUNDO0VBQUEsS0FBQSxFQUFPLEdBQVA7RUFDQSxNQUFBLEVBQVEsTUFEUjtFQUVBLENBQUEsRUFBTyxFQUZQO0VBR0EsQ0FBQSxFQUFPLEVBSFA7RUFJQSxDQUFBLEVBQU8sRUFKUDtFQUtBLENBQUEsRUFBTyxFQUxQO0VBTUEsSUFBQSxFQUFPLE1BTlA7RUFPQSxJQUFBLEVBQU8sQ0FQUDtFQVFBLEVBQUEsRUFBTyxDQVJQO0VBU0EsSUFBQSxFQUFPLEVBVFA7RUFVQSxFQUFBLEVBQU8sU0FWUDtFQVdBLEtBQUEsRUFBUTtBQVhSOztBQWFELFdBQUEsR0FBYyxRQUFBLENBQUMsR0FBRCxDQUFBO1NBQVEsT0FBTyxDQUFDLEtBQVIsQ0FBYyxHQUFkO0FBQVI7O0FBQ2QsVUFBQSxHQUFhLFFBQUEsQ0FBQyxNQUFELENBQUE7QUFDWixNQUFBO0VBQUEsSUFBRyxNQUFIO0lBQ0MsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFSLEtBQWdCLE9BQU8sQ0FBQztJQUMvQixPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBa0IsTUFBTSxDQUFD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QUF4QixFQUEwQixHQUFBLEdBQUksQ0FBQyxDQUFDLE1BQWhDO0lBSkQ7SUFLQSxDQUFDLENBQUMsSUFBRixDQUFPLE9BQU8sQ0FBQyxJQUFmLEVBQW9CLEdBQUEsR0FBSSxDQUFDLENBQUMsS0FBMUIsRUFBZ0MsSUFBQSxHQUFLLENBQUMsQ0FBQyxNQUF2QztJQUNBLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBTyxDQUFDLEVBQWYsRUFBb0IsR0FBQSxHQUFJLENBQUMsQ0FBQyxLQUExQixFQUFnQyxJQUFBLEdBQUssQ0FBQyxDQUFDLE1BQXZDO0lBQ0EsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxFQUFYO0lBQ0EsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQWIsQ0FBa0IsR0FBbEIsQ0FBUCxFQUE4QixDQUFDLENBQUMsS0FBRixHQUFRLENBQXRDLEVBQXdDLElBQUEsR0FBSyxDQUFDLENBQUMsTUFBL0M7V0FDQSxDQUFDLENBQUMsSUFBRixDQUFPLE9BQU8sQ0FBQyxLQUFmLEVBQXFCLENBQUMsQ0FBQyxLQUFGLEdBQVEsQ0FBN0IsRUFBK0IsSUFBQSxHQUFLLENBQUMsQ0FBQyxNQUF0QztFQWpCUTtFQW1CVCxDQUFDLENBQUMsYUFBRixHQUFrQixRQUFBLENBQUEsQ0FBQSxFQUFBO0lBQ2pCLFFBQUEsR0FBVztXQUNYO0VBRmlCO1NBSWxCLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFFBQUEsQ0FBQSxDQUFBO0lBQ2hCLElBQUcsQ0FBQyxRQUFKO0FBQWtCLGFBQWxCOztJQUNBLFFBQUEsR0FBVztJQUNYLE1BQU0sQ0FBQyxZQUFQLENBQW9CLENBQUMsQ0FBQyxNQUF0QixFQUE2QixDQUFDLENBQUMsTUFBL0I7V0FDQTtFQUpnQjtBQTlCVCIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xyXG5lc2xpbnQtZGlzYWJsZSBcclxuIyMjXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBRclJlYWRlciBmcm9tICdyZWFjdC1xci1yZWFkZXInXHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcclxuaW1wb3J0IFA1V3JhcHBlciBmcm9tICdyZWFjdC1wNS13cmFwcGVyJ1xyXG5cclxubWlsbGlzID0gLT4gRGF0ZS5ub3coKVxyXG5idXR0b24gPSBudWxsXHJcbnJlbGVhc2VkID0gdHJ1ZSBcclxubXlTdGF0ZSA9IFxyXG5cdGRlbGF5OiA1MDBcclxuXHRyZXN1bHQ6ICdzY2FuJyAjIElOSVQgNCA4XHJcblx0QSAgICA6IFwiXCJcclxuXHRCICAgIDogXCJcIlxyXG5cdEMgICAgOiBcIlwiXHJcblx0RCAgICA6IFwiXCJcclxuXHRJTklUIDogJ2luaXQnXHJcblx0ZnJvbSA6IDBcclxuXHR0byAgIDogMFxyXG5cdGhpc3QgOiBbXSAgIFxyXG5cdGJnICAgOiAnIzgwODA4MCcgXHJcblx0dG90YWwgOiAwXHJcblxyXG5oYW5kbGVFcnJvciA9IChlcnIpLT4gY29uc29sZS5lcnJvciBlcnJcclxuaGFuZGxlU2NhbiA9IChyZXN1bHQpIC0+IFxyXG5cdGlmIHJlc3VsdCBcclxuXHRcdGdvYWwgPSBteVN0YXRlLmZyb20gPT0gbXlTdGF0ZS50b1xyXG5cdFx0Y29uc29sZS5sb2cgZ29hbCwgcmVzdWx0LmluZGV4T2YoJ0lOSVQnKVxyXG5cdFx0aWYgZ29hbCBhbmQgcmVzdWx0LmluZGV4T2YoJ0lOSVQnKSAhPSAwIHRoZW4gcmV0dXJuIFxyXG5cdFx0bXlTdGF0ZS5yZXN1bHQgPSByZXN1bHRcclxuXHRcdG15U3RhdGUuYmcgPSAnI0ZGRkYwMCdcclxuXHRcdGJ1dHRvbi50aXRsZSA9IHJlc3VsdC5zcGxpdCgnICcpWzBdXHJcblxyXG5oYW5kbGVFeGVjdXRlID0gLT5cclxuXHRhcnIgPSBteVN0YXRlLnJlc3VsdC5zcGxpdCAnICdcclxuXHRvcCA9IGFyclswXVxyXG5cdGNvbW1hbmQgPSBteVN0YXRlW29wXVxyXG5cdG5ld0Zyb20gPT0gMFxyXG5cdGlmIGNvbW1hbmQgPT0nKzInIHRoZW4gbmV3RnJvbSA9IHNhdmUgbXlTdGF0ZS5mcm9tKzJcclxuXHRpZiBjb21tYW5kID09JyoyJyB0aGVuIG5ld0Zyb20gPSBzYXZlIG15U3RhdGUuZnJvbSoyXHJcblx0aWYgY29tbWFuZCA9PScvMicgYW5kIG15U3RhdGUuZnJvbSAlIDIgPT0gMCB0aGVuIG5ld0Zyb20gPSBzYXZlIG15U3RhdGUuZnJvbS8yIFxyXG5cdGlmIGNvbW1hbmQgPT0ndW5kbycgYW5kIG15U3RhdGUuaGlzdC5sZW5ndGggPiAwIHRoZW4gbXlTdGF0ZS5mcm9tID0gbXlTdGF0ZS5oaXN0LnBvcCgpXHJcblx0aWYgY29tbWFuZCA9PSdpbml0JyBcclxuXHRcdGNvbnNvbGUubG9nIG15U3RhdGUucmVzdWx0XHJcblx0XHRjb21tYW5kcyA9ICcrMiAqMiAvMiB1bmRvJy5zcGxpdCAnICdcclxuXHRcdGNvbW1hbmRzID0gXy5zaHVmZmxlIGNvbW1hbmRzXHJcblx0XHRteVN0YXRlID1cclxuXHRcdFx0QSA6IGNvbW1hbmRzWzBdIFxyXG5cdFx0XHRCIDogY29tbWFuZHNbMV0gXHJcblx0XHRcdEMgOiBjb21tYW5kc1syXSBcclxuXHRcdFx0RCA6IGNvbW1hbmRzWzNdIFxyXG5cdFx0XHRJTklUIDogJ2luaXQnXHJcblx0XHRcdGZyb20gOiBwYXJzZUludCBhcnJbMV1cclxuXHRcdFx0dG8gOiBwYXJzZUludCBhcnJbMl1cclxuXHRcdFx0aGlzdCA6IFtdXHJcblx0XHRcdHN0YXJ0IDogbWlsbGlzKClcclxuXHRcdFx0b3BlcmF0aW9ucyA6IDBcclxuXHRcdFx0dG90YWwgOiAwXHJcblx0XHRcdHJlc3VsdCA6ICdzY2FuJ1xyXG5cdFx0XHRzaWRhIDogMFxyXG5cdGJ1dHRvbi50aXRsZSA9ICdzY2FuJ1xyXG5cdG15U3RhdGUuYmcgPSBpZiBuZXdGcm9tID09IG15U3RhdGUudG8gdGhlbiAnIzAwRkYwMCcgZWxzZSAnI0ZGRkZGRidcclxuXHJcbnNhdmUgPSAodmFsdWUpIC0+XHJcblx0bXlTdGF0ZS5oaXN0LnB1c2ggbXlTdGF0ZS5mcm9tXHJcblx0bXlTdGF0ZS5mcm9tID0gdmFsdWVcclxuXHRteVN0YXRlLm9wZXJhdGlvbnMrK1xyXG5cdG15U3RhdGUudG90YWwgPSAoKG1pbGxpcygpLW15U3RhdGUuc3RhcnQpLzEwMDAgKyAxMCAqIG15U3RhdGUub3BlcmF0aW9ucykudG9GaXhlZCgzKVxyXG5cdHZhbHVlXHJcblxyXG5jbGFzcyBCdXR0b24gXHJcblx0Y29uc3RydWN0b3IgOiAoQHAsQHgsQHksQHIsQHRpdGxlLEBmKSAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0QHAuZmlsbCAyNTVcclxuXHRcdEBwLmVsbGlwc2UgQHgsQHksQHJcclxuXHRcdEBwLmZpbGwgMFxyXG5cdFx0QHAudGV4dCBAdGl0bGUsQHgsQHlcclxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+IGlmIEBwLmRpc3QoQHgsQHksbXgsbXkpIDwgQHIgdGhlbiBAZigpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQgXHJcblx0cmVuZGVyIDogLT5cclxuXHRcdHcgPSBNYXRoLm1heCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDBcclxuXHRcdGggPSBNYXRoLm1heCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMFxyXG5cdFx0c2lkYSA9IGlmIHc8aCB0aGVuIHcvMiBlbHNlIGgvMlxyXG5cdFx0bXlTdGF0ZS5wcmV2aWV3U3R5bGUgPSBcclxuXHRcdFx0aGVpZ2h0OiBzaWRhXHJcblx0XHRcdHdpZHRoOiBzaWRhXHJcblxyXG5cdFx0PGRpdiBzdHlsZSA9IHt7YmFja2dyb3VuZENvbG9yOicjODA4MDgwJ319PiBcclxuXHRcdFx0PHRhYmxlIHN0eWxlID0ge3dpZHRoIDogd30gPiBcclxuXHRcdFx0XHQ8dGJvZHkgc3R5bGUgPSB7d2lkdGggOiB3fT5cclxuXHRcdFx0XHQ8dHI+XHJcblx0XHRcdFx0XHQ8dGQgc3R5bGUgPSB7d2lkdGggOiAody1zaWRhKS8yfT48L3RkPlxyXG5cdFx0XHRcdFx0PHRkPlxyXG5cdFx0XHRcdFx0XHQ8UXJSZWFkZXJcclxuXHRcdFx0XHRcdFx0XHRkZWxheSA9IHtteVN0YXRlLmRlbGF5fVxyXG5cdFx0XHRcdFx0XHRcdHN0eWxlID0ge215U3RhdGUucHJldmlld1N0eWxlfVxyXG5cdFx0XHRcdFx0XHRcdG9uRXJyb3IgPSB7aGFuZGxlRXJyb3J9XHJcblx0XHRcdFx0XHRcdFx0b25TY2FuID0ge2hhbmRsZVNjYW59XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8L3RkPlxyXG5cdFx0XHRcdDwvdHI+XHJcblx0XHRcdFx0PC90Ym9keT5cclxuXHRcdFx0PC90YWJsZT5cclxuXHRcdFx0PFA1V3JhcHBlciBza2V0Y2g9e3NrZXRjaH0gLz5cclxuXHRcdDwvZGl2PlxyXG5cclxuc2tldGNoID0gKHApIC0+XHJcblxyXG5cdHAuc2V0dXAgPSAtPiBcclxuXHRcdHAuY3JlYXRlQ2FudmFzIHAud2luZG93V2lkdGgtNSwgcC53aW5kb3dIZWlnaHQvMi01XHJcblx0XHRwLnRleHRBbGlnbiBwLkNFTlRFUixwLkNFTlRFUlxyXG5cdFx0YnV0dG9uID0gbmV3IEJ1dHRvbiBwLDAuNSpwLndpZHRoLDAuMipwLmhlaWdodCwwLjM1KnAuaGVpZ2h0LFwic2NhblwiLCBoYW5kbGVFeGVjdXRlXHJcblxyXG5cdHAuZHJhdyA9IC0+XHJcblx0XHRwLmJhY2tncm91bmQgbXlTdGF0ZS5iZ1xyXG5cdFx0YnV0dG9uLnRpdGxlID0gbXlTdGF0ZS5yZXN1bHQuc3BsaXQoJyAnKVswXVxyXG5cclxuXHRcdHAucmVjdE1vZGUgcC5DRU5URVJcclxuXHRcdHAudGV4dFNpemUgNDBcclxuXHRcdGJ1dHRvbi5kcmF3IHBcclxuXHRcdHAuZmlsbCAwXHJcblx0XHRmb3IgaSBpbiBbMC4uM11cclxuXHRcdFx0bGl0dGVyYSA9ICdBIEIgQyBEJy5zcGxpdCgnICcpW2ldXHJcblx0XHRcdHggPSBwLmxlcnAgMC4yKnAud2lkdGgsMC40KnAud2lkdGgsaVxyXG5cdFx0XHRwLnRleHQgbGl0dGVyYSx4LDAuNDUqcC5oZWlnaHRcclxuXHRcdFx0cC50ZXh0IG15U3RhdGVbbGl0dGVyYV0seCwwLjYqcC5oZWlnaHRcclxuXHRcdHAudGV4dCBteVN0YXRlLmZyb20sMC40KnAud2lkdGgsMC43NSpwLmhlaWdodFxyXG5cdFx0cC50ZXh0IG15U3RhdGUudG8sICAwLjYqcC53aWR0aCwwLjc1KnAuaGVpZ2h0XHJcblx0XHRwLnRleHRTaXplIDIwXHJcblx0XHRwLnRleHQgbXlTdGF0ZS5oaXN0LmpvaW4oJyAnKSxwLndpZHRoLzIsMC44NSpwLmhlaWdodFxyXG5cdFx0cC50ZXh0IG15U3RhdGUudG90YWwscC53aWR0aC8yLDAuOTUqcC5oZWlnaHRcclxuXHJcblx0cC5tb3VzZVJlbGVhc2VkID0gLT4gIyB0byBtYWtlIEFuZHJvaWQgd29yayBcclxuXHRcdHJlbGVhc2VkID0gdHJ1ZSBcclxuXHRcdGZhbHNlXHJcblxyXG5cdHAubW91c2VQcmVzc2VkID0gLT5cclxuXHRcdGlmICFyZWxlYXNlZCB0aGVuIHJldHVybiAjIHRvIG1ha2UgQW5kcm9pZCB3b3JrIFxyXG5cdFx0cmVsZWFzZWQgPSBmYWxzZVxyXG5cdFx0YnV0dG9uLm1vdXNlUHJlc3NlZCBwLm1vdXNlWCxwLm1vdXNlWVxyXG5cdFx0ZmFsc2UgIl19
//# sourceURL=C:\Lab\2017\151-react-qr-shortcut\coffee\App.coffee