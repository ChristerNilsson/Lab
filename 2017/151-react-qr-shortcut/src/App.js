// Generated by CoffeeScript 2.0.3
/*
eslint-disable 
*/
var App, millis;

import React, {
  Component
} from 'react';

import QrReader from 'react-qr-reader';

import _ from 'lodash';

millis = function() {
  return Date.now();
};

export default App = class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      delay: 500,
      result: 'scan', // INIT 4 8
      A: "",
      B: "",
      C: "",
      D: "",
      INIT: "init",
      from: 0,
      to: 0,
      hist: [],
      bg: '#FFFFFF'
    };
    this.handleScan = this.handleScan.bind(this);
    this.handleExecute = this.handleExecute.bind(this);
  }

  handleScan(result) {
    if (result) {
      return this.setState({
        result,
        bg: '#FFFF00'
      });
    }
  }

  handleError(err) {
    return console.error(err);
  }

  handleExecute() {
    var arr, command, commands, n, newFrom, op;
    arr = this.state.result.split(' ');
    op = arr[0];
    command = this.state[op];
    newFrom === 0;
    if (command === '+2') {
      newFrom = this.save(this.state.from + 2);
    }
    if (command === '*2') {
      newFrom = this.save(this.state.from * 2);
    }
    if (command === '/2' && this.state.from % 2 === 0) {
      newFrom = this.save(this.state.from / 2);
    }
    if (command === 'undo') {
      n = this.state.hist.length;
      if (n > 0) {
        this.setState({
          from: this.state.hist[n - 1],
          hist: this.state.hist.slice(0, -1)
        });
      }
    }
    if (command === 'init') {
      commands = '+2 *2 /2 undo'.split(' ');
      commands = _.shuffle(commands);
      this.setState({
        A: commands[0],
        B: commands[1],
        C: commands[2],
        D: commands[3],
        from: parseInt(arr[1]),
        to: parseInt(arr[2]),
        hist: [],
        start: millis(),
        operations: 0,
        total: 0,
        result: 'scan'
      });
    }
    return this.setState({
      bg: newFrom === this.state.to ? '#00FF00' : '#FFFFFF'
    });
  }

  save(value) {
    this.setState({
      from: value,
      hist: this.state.hist.concat([this.state.from]),
      operations: this.state.operations + 1,
      total: (millis() - this.state.start) / 1000 + 10 * this.state.operations
    });
    return value;
  }

  render() {
    var previewStyle;
    previewStyle = {
      height: 320,
      width: 320
    };
    return <div style={{
        backgroundColor: this.state.bg
      }}>
			<QrReader delay={this.state.delay} style={previewStyle} onError={this.handleError} onScan={this.handleScan} />
			<button onClick={this.handleExecute}>{(this.state.result.split(' ')[0])}</button>
			<p>A: {this.state.A} <br /> B: {this.state.B} <br /> C: {this.state.C} <br /> D: {this.state.D}</p>
			<h1>{this.state.from} to {this.state.to}</h1>
			<p>{this.state.hist.join(' ')}</p>
			<p>{this.state.total}</p>
		</div>;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\151-react-qr-shortcut\coffee\App.coffee