// Generated by CoffeeScript 2.0.3
/*
eslint-disable 
*/
var App, Button, button, handleError, handleExecute, handleScan, millis, myState, save, sketch;

import React, {
  Component
} from 'react';

import QrReader from 'react-qr-reader';

import _ from 'lodash';

import P5Wrapper from 'react-p5-wrapper';

millis = function() {
  return Date.now();
};

button = null;

myState = {
  delay: 500,
  result: 'scan', // INIT 4 8
  A: "+2",
  B: "*2",
  C: "/2",
  D: "undo",
  INIT: 'init',
  from: 0,
  to: 0,
  hist: [],
  bg: '#808080',
  total: 0
};

handleError = function(err) {
  return console.error(err);
};

handleScan = function(result) {
  if (result) {
    console.log(result);
    myState.result = result;
    myState.bg = '#FFFF00';
    return button.title = result.split(' ')[0];
  }
};

handleExecute = function() {
  var arr, command, commands, n, newFrom, op;
  console.log('Execute');
  arr = myState.result.split(' ');
  op = arr[0];
  command = myState[op];
  newFrom === 0;
  if (command === '+2') {
    newFrom = save(myState.from + 2);
  }
  if (command === '*2') {
    newFrom = save(myState.from * 2);
  }
  if (command === '/2' && myState.from % 2 === 0) {
    newFrom = save(myState.from / 2);
  }
  if (command === 'undo') {
    n = myState.hist.length;
    if (n > 0) {
      myState.from = myState.hist[n - 1];
      myState.hist = myState.hist.slice(0, -1);
    }
  }
  if (command === 'init') {
    commands = '+2 *2 /2 undo'.split(' ');
    commands = _.shuffle(commands);
    myState = {
      A: commands[0],
      B: commands[1],
      C: commands[2],
      D: commands[3],
      from: parseInt(arr[1]),
      to: parseInt(arr[2]),
      hist: [],
      start: millis(),
      operations: 0,
      total: 0,
      result: 'scan',
      sida: 0
    };
  }
  button.title = 'scan';
  return myState.bg = newFrom === myState.to ? '#00FF00' : '#FFFFFF';
};

save = function(value) {
  myState.from = value;
  myState.hist = myState.hist.concat([myState.from]);
  myState.operations = myState.operations + 1;
  myState.total = (millis() - myState.start) / 1000 + 10 * myState.operations;
  return value;
};

Button = class Button {
  constructor(p1, x1, y, r, title, f) {
    this.p = p1;
    this.x = x1;
    this.y = y;
    this.r = r;
    this.title = title;
    this.f = f;
  }

  draw() {
    this.p.fill(255);
    this.p.ellipse(this.x, this.y, this.r);
    this.p.fill(0);
    return this.p.text(this.title, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (this.p.dist(this.x, this.y, mx, my) < this.r) {
      return this.f();
    }
  }

};

export default App = class App extends Component {
  render() {
    var h, sida, w;
    w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    sida = w < h ? w / 2 : h / 2;
    myState.previewStyle = {
      height: sida,
      width: sida
    };
    return <div style={{
        backgroundColor: '#808080'
      }}> 
			<table style={{
        width: w
      }}> 
				<tbody style={{
        width: w
      }}>
				<tr>
					<td style={{
        width: (w - sida) / 2
      }}></td>
					<td>
						<QrReader delay={myState.delay} style={myState.previewStyle} onError={handleError} onScan={handleScan} />
					</td>
				</tr>
				</tbody>
			</table>
			<P5Wrapper sketch={sketch} />
		</div>;
  }

};

sketch = function(p) {
  p.setup = function() {
    p.createCanvas(p.windowWidth - 5, p.windowHeight / 2 - 5);
    p.textAlign(p.CENTER, p.CENTER);
    p.textSize(20);
    return button = new Button(p, 0.5 * p.width, 0.2 * p.height, 0.2 * p.height, "scan", handleExecute);
  };
  p.draw = function() {
    var i, j, littera, x;
    p.background(myState.bg);
    button.title = myState.result.split(' ')[0];
    p.rectMode(p.CENTER);
    button.draw(p);
    p.fill(0);
    for (i = j = 0; j <= 3; i = ++j) {
      littera = 'A B C D'.split(' ')[i];
      x = p.lerp(0.2 * p.width, 0.4 * p.width, i);
      p.text(littera, x, 0.4 * p.height);
      p.text(myState[littera], x, 0.5 * p.height);
    }
    p.text(myState.from, 0.4 * p.width, 0.7 * p.height);
    p.text(myState.to, 0.6 * p.width, 0.7 * p.height);
    p.text(myState.hist.join(' '), p.width / 2, 0.8 * p.height);
    return p.text(myState.total, p.width / 2, 0.9 * p.height);
  };
  return p.mousePressed = function() {
    return button.mousePressed(p.mouseX, p.mouseY);
  };
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\151-react-qr-shortcut\coffee\App.coffee