// Generated by CoffeeScript 1.11.1
var board, buttons, colorize, draw, level, memory, mousePressed, newGame, op, rita, sense, setup, state, textcolorize, tiles, traverse, turn, turns, undo;

board = [];

memory = null;

state = 0;

level = 0;

turns = [];

buttons = [[40, 140, level], [160, 140, "new"]];

tiles = [[0, 1, 42, 41, 40, 2, 3, 9, 16, 15, 4, 5, 20, 19, 18, 6, 7, 31, 30, 29], [9, 10, 40, 39, 38, 11, 12, 49, 48, 47, 13, 14, 22, 21, 20, 15, 16, 4, 3, 2], [18, 19, 6, 5, 4, 20, 21, 15, 14, 13, 22, 23, 47, 46, 45, 24, 25, 33, 32, 31], [27, 28, 36, 43, 42, 29, 30, 0, 7, 6, 31, 32, 18, 25, 24, 33, 34, 45, 52, 51], [36, 37, 51, 50, 49, 38, 39, 11, 10, 9, 40, 41, 2, 1, 0, 42, 43, 29, 28, 27], [45, 46, 24, 23, 22, 47, 48, 13, 12, 11, 49, 50, 38, 37, 36, 51, 52, 27, 34, 33]];

newGame = function() {
  var i, l, lastSide, len, len1, m, ref, ref1, results, side;
  level = level + (level === turns.length ? 1 : -1);
  level = constrain(level, 1, 100);
  turns = [];
  board = [];
  ref = range(54);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    board.push(i);
  }
  lastSide = -1;
  ref1 = range(level);
  results = [];
  for (m = 0, len1 = ref1.length; m < len1; m++) {
    i = ref1[m];
    side = lastSide;
    while (lastSide === side) {
      side = _.sample(range(6));
    }
    op(side, _.sample([-1, 1]));
    results.push(lastSide = side);
  }
  return results;
};

undo = function() {
  var d, k, ref;
  if (turns.length === 0) {
    return;
  }
  ref = turns.pop(), k = ref[0], d = ref[1];
  return op(k, -d);
};

turn = function(a, b) {
  var d, k;
  if (int(a / 9) !== int(b / 9)) {
    return;
  }
  d = (a % 9 - b % 9) / 2;
  if (d === (-3) || d === 3) {
    d = -d / 3;
  }
  if (d !== (-1) && d !== 1) {
    return;
  }
  k = int(a / 9);
  op(k, d);
  return turns.push([k, d]);
};

op = function(k, d) {
  var arr, carr, i, l, len, limit, ref, results;
  arr = tiles[k];
  carr = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = arr.length; l < len; l++) {
      i = arr[l];
      results.push(board[i]);
    }
    return results;
  })();
  limit = d === 1 ? 5 : 15;
  carr = carr.slice(limit, 21).concat(carr.slice(0, +limit + 1 || 9e9));
  ref = range(20);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push(board[arr[i]] = carr[i]);
  }
  return results;
};

setup = function() {
  createCanvas(200, 200);
  textAlign(CENTER, CENTER);
  return newGame();
};

colorize = function(index) {
  var b, g, k, r, ref;
  k = int(board[index] / 9);
  ref = [[1, 1, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0], [0.97, 0.57, 0], [1, 1, 0]][k], r = ref[0], g = ref[1], b = ref[2];
  return fc(r, g, b);
};

textcolorize = function(index) {
  return fc([0, 1, 1, 0, 0, 0][int(board[index] / 9)]);
};

rita = function(x, y, index, tilt) {
  var a, b;
  a = 16;
  b = 9;
  colorize(index);
  if (tilt === 0) {
    quad(x - a, y, x, y - b, x + a, y, x, y + b);
  }
  if (tilt === 1) {
    quad(x + a / 2, y - b / 2, x - a / 2, y - 3 * b / 2, x - a / 2, y + b / 2, x + a / 2, y + 3 * b / 2);
  }
  if (tilt === 2) {
    quad(x - a / 2, y - b / 2, x + a / 2, y - 3 * b / 2, x + a / 2, y + b / 2, x - a / 2, y + 3 * b / 2);
  }
  textcolorize(index);
  text(board[index], x, y);
  if (index === memory && state === 1) {
    circle(x, y, 4);
  }
  return false;
};

sense = function(x, y, index, tilt) {
  return dist(x, y, mouseX, mouseY) < 9;
};

draw = function() {
  var l, len, ref, results, txt, x, y;
  bg(0.5);
  textSize(12);
  traverse(rita);
  fc(1, 1, 0);
  textSize(20);
  buttons[0][2] = level - turns.length;
  results = [];
  for (l = 0, len = buttons.length; l < len; l++) {
    ref = buttons[l], x = ref[0], y = ref[1], txt = ref[2];
    results.push(text(txt, x, y));
  }
  return results;
};

traverse = function(f) {
  var a, b, i, index, j, l, len, ref, side, y0;
  a = 16;
  b = 9;
  y0 = 60;
  ref = range(54);
  for (l = 0, len = ref.length; l < len; l++) {
    index = ref[l];
    side = int(index / 9);
    if (side === 0) {
      i = [-1, -1, -1, 0, 1, 1, 1, 0, 0][index % 9];
      j = [0, 1, 2, 2, 2, 1, 0, 0, 1][index % 9];
      if (f(100 + a * (i + j - 1), y0 + b * (i - j + 1), index, 0)) {
        return index;
      }
    }
    if (side === 1) {
      i = [-1, -1, -1, 0, 1, 1, 1, 0, 0][index % 9];
      j = [0, 1, 2, 2, 2, 1, 0, 0, 1][index % 9];
      if (f(100 + a * (i + 4.5), y0 + b * (2 * j + i - 3.5), index, 1)) {
        return index;
      }
    }
    if (side === 2) {
      i = [-1, 0, 1, 1, 1, 0, -1, -1, 0][index % 9];
      j = [0, 0, 0, 1, 2, 2, 2, 1, 1][index % 9];
      if (f(100 + a * (i + 1.5), y0 + b * (2 * j - i + 2.5), index, 2)) {
        return index;
      }
    }
    if (side === 3) {
      i = [-1, -1, -1, 0, 1, 1, 1, 0, 0][index % 9];
      j = [2, 1, 0, 0, 0, 1, 2, 2, 1][index % 9];
      if (f(100 + a * (i - 1.5), y0 + b * (2 * j + i + 2.5), index, 1)) {
        return index;
      }
    }
    if (side === 4) {
      i = [-1, 0, 1, 1, 1, 0, -1, -1, 0][index % 9];
      j = [2, 2, 2, 1, 0, 0, 0, 1, 1][index % 9];
      if (f(100 + a * (i - 4.5), y0 + b * (2 * j - i - 3.5), index, 2)) {
        return index;
      }
    }
    if (side === 5) {
      i = [1, 1, 1, 0, -1, -1, -1, 0, 0][index % 9];
      j = [0, 1, 2, 2, 2, 1, 0, 0, 1][index % 9];
      if (f(100 + a * (i + j - 1), y0 + b * (i - j + 13), index, 0)) {
        return index;
      }
    }
  }
};

mousePressed = function() {
  var i, index, l, len, ref, txt, x, y;
  for (i = l = 0, len = buttons.length; l < len; i = ++l) {
    ref = buttons[i], x = ref[0], y = ref[1], txt = ref[2];
    if (dist(mouseX, mouseY, x, y) < 10) {
      if (i === 0) {
        return undo();
      }
      if (i === 1) {
        return newGame();
      }
    }
  }
  if (state === 0) {
    memory = traverse(sense);
    if ((memory != null) && memory % 9 !== 8) {
      return state = 1;
    }
  } else {
    index = traverse(sense);
    if (index != null) {
      turn(memory, index);
    }
    return state = 0;
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\044-RubiksCube\coffee\sketch.coffee