// Generated by CoffeeScript 1.12.7
var BRICKS, Button, HEIGHT, PassButton, RADIE, SIZE, XOFF, YOFF, buttons, legalMoves, message, mousePressed, moves, player, possibleMoves, selectedButton, setup, showBricks, source, target, xdraw,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

XOFF = 220;

YOFF = 380;

SIZE = 600;

RADIE = 130;

HEIGHT = 15;

BRICKS = 12;

buttons = [];

player = 0;

moves = 1;

selectedButton = -1;

source = [BRICKS, BRICKS];

target = [0, 0];

message = '';

legalMoves = function(btn) {
  if (player === 0) {
    if (btn === 0 || btn === 1 || btn === 2) {
      return [4];
    }
    if (btn === 20) {
      return [22, 23, 24];
    }
    return [btn - 5, btn - 6];
  } else {
    if (btn === 22 || btn === 23 || btn === 24) {
      return [20];
    }
    if (btn === 4) {
      return [0, 1, 2];
    }
    return [btn + 5, btn + 6];
  }
};

possibleMoves = function() {
  var button, k, l, len, len1, move, ref, res;
  res = false;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (_.last(button.bricks) === player) {
      if (moves === 2) {
        res = true;
      }
      ref = legalMoves(button.nr);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        move = ref[l];
        if (buttons[move].bricks.length === 0) {
          res = true;
        }
      }
    }
  }
  return res;
};

Button = (function() {
  function Button(nr1) {
    var i, j;
    this.nr = nr1;
    i = this.nr % 5;
    j = int(this.nr / 5);
    this.x = RADIE * (i - 0.5 * j);
    this.y = RADIE * 0.88 * j;
    this.bricks = [];
    this.selected = 0;
  }

  Button.prototype.draw = function() {
    var brick, i, k, len, n, ref, ref1, results;
    if ((ref = this.nr) === 3 || ref === 9 || ref === 15 || ref === 21) {
      return;
    }
    fc(0.25);
    sc(0);
    sw(1);
    if (player === 0 && this.nr === 20 || player === 1 && this.nr === 4) {
      sw(2);
      sc(1);
    }
    circle(this.x, this.y, 0.45 * RADIE);
    sw(2);
    sc(0);
    n = this.bricks.length;
    ref1 = this.bricks;
    results = [];
    for (i = k = 0, len = ref1.length; k < len; i = ++k) {
      brick = ref1[i];
      if (this.selected >= n - i) {
        fc(0, 1, 0, 0.5);
      } else {
        fc(1, brick, 0, 0.5);
      }
      results.push(circle(this.x, this.y - i * HEIGHT, 0.25 * RADIE));
    }
    return results;
  };

  Button.prototype.moveBricks = function() {
    var brick, i, k, len, ref, ref1, ref2;
    if (((ref = this.nr) !== 4 && ref !== 20) && buttons[this.nr].bricks.length > 0) {
      if (moves === 1) {
        return;
      }
      if (moves === 2) {
        moves = 1;
      }
    }
    ref1 = range(buttons[selectedButton].selected);
    for (k = 0, len = ref1.length; k < len; k++) {
      i = ref1[k];
      brick = buttons[selectedButton].bricks.pop();
      if ((ref2 = this.nr) === 4 || ref2 === 20) {
        target[player] += 1;
        if (target[player] === BRICKS) {
          message = ['Red', 'Yellow'][player] + ' won!';
        }
      } else {
        this.bricks.push(brick);
      }
    }
    if (source[player] > 0 && (selectedButton === 4 || selectedButton === 20)) {
      buttons[selectedButton].bricks.push(player);
      source[player] -= 1;
    }
    buttons[selectedButton].selected = 0;
    selectedButton = -1;
    moves -= 1;
    if (moves === 0) {
      player = 1 - player;
      moves = 2;
    }
    return xdraw();
  };

  Button.prototype.inside = function(mx, my) {
    return dist(this.x + XOFF, (this.y + YOFF) / 2, mx, my) < 0.5 * RADIE;
  };

  Button.prototype.topBlock = function(bricks) {
    var count;
    count = 0;
    while (bricks[bricks.length - 1 - count] === player) {
      count += 1;
    }
    return count;
  };

  Button.prototype.mousePressed = function(mx, my) {
    var n, ref;
    if (!this.inside(mx, my)) {
      return;
    }
    if (selectedButton >= 0 && selectedButton !== this.nr) {
      if (ref = this.nr, indexOf.call(legalMoves(selectedButton), ref) >= 0) {
        this.moveBricks();
      }
      return;
    }
    if (selectedButton >= 0 && selectedButton !== this.nr) {
      buttons[selectedButton].selected = 0;
    }
    n = this.topBlock(this.bricks);
    if (n === 0) {
      return;
    }
    this.selected = modulo(this.selected - 1, n + 1);
    selectedButton = this.selected > 0 ? this.nr : -1;
    return xdraw();
  };

  return Button;

})();

PassButton = (function(superClass) {
  extend(PassButton, superClass);

  function PassButton() {
    return PassButton.__super__.constructor.apply(this, arguments);
  }

  PassButton.prototype.mousePressed = function(mx, my) {
    if (!this.inside(mx, my)) {
      return;
    }
    if (possibleMoves()) {
      return;
    }
    if (selectedButton !== -1) {
      buttons[selectedButton].selected = 0;
      selectedButton = -1;
    }
    player = 1 - player;
    return xdraw();
  };

  PassButton.prototype.draw = function() {
    PassButton.__super__.draw.apply(this, arguments);
    fc(0.5);
    textSize(32);
    return text(this.nr, this.x, this.y);
  };

  return PassButton;

})(Button);

setup = function() {
  var button, k, len, nr, ref;
  createCanvas(SIZE + 100, SIZE);
  ref = range(25);
  for (k = 0, len = ref.length; k < len; k++) {
    nr = ref[k];
    buttons.push(new Button(nr));
  }
  buttons[4].x = buttons[1].x;
  buttons[4].y = buttons[1].y - 2 * RADIE;
  buttons[4].bricks = [1];
  source[1] -= 1;
  buttons[20].x = buttons[23].x;
  buttons[20].y = buttons[23].y + 2 * RADIE;
  buttons[20].bricks = [0];
  source[0] -= 1;
  button = new PassButton('Pass');
  buttons.push(button);
  button.x = buttons[10].x;
  button.y = buttons[4].y;
  textSize(32);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  return xdraw();
};

showBricks = function(data, p, x, y) {
  var i, k, len, ref, results;
  ref = range(data[p]);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    fc(1, p, 0, 0.5);
    results.push(circle(x, y - i * HEIGHT, 0.25 * RADIE));
  }
  return results;
};

xdraw = function() {
  var button, k, len;
  bg(0.5);
  push();
  scale(1, 0.5);
  translate(XOFF, YOFF);
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  showBricks(source, 1, 350, -150);
  showBricks(target, 0, 430, -150);
  showBricks(source, 0, 350, 730);
  showBricks(target, 1, 430, 730);
  pop();
  textSize(50);
  return text(message, width / 2, height / 2);
};

mousePressed = function() {
  var button, k, len, results;
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    results.push(button.mousePressed(mouseX, mouseY));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\112-Stacks\coffee\sketch.coffee