// Generated by CoffeeScript 2.0.3
var Action, Button, RADIUS, State, WIDTH, buttonLeft, buttonRight, buttons, draw, mousePressed, mouseReleased, released, setup, state;

RADIUS = null;

WIDTH = null;

released = true;

Button = class Button {
  constructor(i1, j, text1) {
    this.i = i1;
    this.j = j;
    this.text = text1;
    this.x = WIDTH / 2 + WIDTH * this.i;
    this.y = RADIUS + 2 * RADIUS * this.j;
  }

  draw() {
    fc(1);
    circle(this.x, this.y, RADIUS);
    fc(0);
    return text(this.text, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (25 > dist(mx, my, this.x, this.y)) {
      state.digits[this.i] = int(this.text / [10, 1, 10, 1, 10, 1][this.i]);
      return state.memory[this.i] = int(this.text / [10, 1, 10, 1, 10, 1][this.i]);
    }
  }

};

Action = class Action {
  constructor(x1, y1, w, h, text1, f) {
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.text = text1;
    this.f = f;
    this.bg = [1, 1, 1];
    this.disabled = false;
  }

  draw() {
    fc(this.bg[0], this.bg[1], this.bg[2]);
    rect(this.x, this.y, this.w, this.h);
    if (this.disabled) {
      fc(0.5);
    } else {
      fc(0);
    }
    return text(this.text, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (!this.disabled && (this.x - this.w / 2 < mx && mx < this.x + this.w / 2) && (this.y - this.h / 2 < my && my < this.y + this.h / 2)) {
      return this.f();
    }
  }

};

State = class State {
  constructor() {
    this.digits = [
      0,
      0,
      0,
      0,
      0,
      0 // hh mm ss
    ];
    this.memory = [0, 0, 0, 0, 0, 0];
    this.runState = 0; // 0=start 1=pause 2=resume		
  }

  done() {
    var i, j, len, ref;
    if (!_.isEqual(this.digits, this.memory)) {
      ref = range(6);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.digits[i] = this.memory[i];
      }
    } else {
      this.digits = [
        0,
        0,
        0,
        0,
        0,
        0 // hh mm ss
      ];
      this.memory = [0, 0, 0, 0, 0, 0];
    }
    this.runState = 0;
    return this.fix({});
  }

  run() {
    var i, j, len, ref, results;
    this.runState = [1, 2, 1][this.runState];
    if (this.runState === 1) {
      this.start = int(millis() / 1000);
      this.secs = 0;
      ref = range(6);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.secs += [36000, 3600, 600, 60, 10, 1][i] * this.digits[i]);
      }
      return results;
    }
  }

  draw() {
    var i, j, k, len, len1, n, ref, ref1, results, s, t, x, y;
    if (this.runState === 1) {
      s = this.secs - (int(millis() / 1000) - this.start);
      if (s === 0) {
        this.runState = 2;
      }
      ref = range(6);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        n = [36000, 3600, 600, 60, 10, 1][i];
        this.digits[i] = int(s / n);
        s %= n;
      }
    }
    this.fix();
    ref1 = range(3);
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      t = 10 * this.digits[2 * i] + this.digits[2 * i + 1];
      t = t.toString();
      if (t.length === 1) {
        t = "0" + t;
      }
      x = WIDTH / 2 + 2 * WIDTH * i;
      y = height - 5 * RADIUS;
      results.push(text(t, x, y));
    }
    return results;
  }

  fix() {
    if (this.runState === 2 && _.isEqual(this.digits, [0, 0, 0, 0, 0, 0])) {
      this.runState = 0;
    }
    buttonLeft.disabled = this.runState === 1;
    buttonRight.disabled = _.isEqual(this.digits, [0, 0, 0, 0, 0, 0]);
    buttonRight.text = ['Start', 'Pause', 'Resume'][this.runState];
    return buttonRight.bg = [[0, 1, 0], [1, 0, 0], [0, 1, 0]][this.runState];
  }

};

buttons = [];

state = new State;

buttonLeft = null;

buttonRight = null;

setup = function() {
  var i, j, k, l, len, len1, len2, len3, len4, len5, m, o, p, ref, ref1, ref2, ref3, ref4, ref5, results;
  createCanvas(windowWidth, windowHeight);
  RADIUS = height / 20;
  WIDTH = width / 6;
  buttonLeft = new Action(WIDTH * 2.5, height - RADIUS, WIDTH, RADIUS, 'Done', function() {
    return state.done();
  });
  buttonRight = new Action(WIDTH * 4.5, height - RADIUS, WIDTH, RADIUS, 'Start', function() {
    return state.run();
  });
  buttons.push(buttonLeft);
  buttons.push(buttonRight);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  ref = range(3);
  // hh
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons.push(new Button(0, i, i * 10));
  }
  ref1 = range(10);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    buttons.push(new Button(1, i, i));
  }
  ref2 = range(6);
  // mm
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    buttons.push(new Button(2, i, i * 10));
  }
  ref3 = range(10);
  for (m = 0, len3 = ref3.length; m < len3; m++) {
    i = ref3[m];
    buttons.push(new Button(3, i, i));
  }
  ref4 = range(6);
  // ss
  for (o = 0, len4 = ref4.length; o < len4; o++) {
    i = ref4[o];
    buttons.push(new Button(4, i, i * 10));
  }
  ref5 = range(10);
  results = [];
  for (p = 0, len5 = ref5.length; p < len5; p++) {
    i = ref5[p];
    results.push(buttons.push(new Button(5, i, i)));
  }
  return results;
};

draw = function() {
  var button, j, len;
  bg(0.5);
  textSize(RADIUS);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textSize(2 * RADIUS);
  return state.draw();
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  var button, j, len;
  if (!released) {
    return;
  }
  released = false;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.mousePressed(mouseX, mouseY);
  }
  print(state.digits);
  return false;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\143-Timer\coffee\sketch.coffee