// Generated by CoffeeScript 1.12.7
var Button, ENG, PROBLEMS, SWE, block_event, buttons, counter, cursor_activity, dbg, editor, iProblem, key_handled, mouseReleased, my_copy, my_cut, nCommands, nextProblem, setup, target, update;

counter = 0;

nCommands = 0;

ENG = 'Alpha\n\tBravo\n\tCharlie\n\tDelta\n\tEcho';

SWE = 'Adam\n\tBertil\n\tCesar\n\tDavid\n\tErik';

PROBLEMS = [[1, 2, 4, ENG, 'Alpha\n\tBravo\n\tChaxrlie\n\tDelta\n\tEcho'], [1, 2, 4, ENG, 'Alpha\n\tBravo\n\tChrlie\n\tDelta\n\tEcho'], [1, 2, 4, ENG, 'Alpha\n\tBravo\n\tChalie\n\tDelta\n\tEcho'], [1, 2, 4, ENG, 'Alpha\n\tBravo\n\tDelta\n\tEcho'], [2, 2, 4, ENG, 'Alpha\n\tBravo\nCharlie\n\tDelta\n\tEcho'], [2, 2, 4, ENG, 'Alpha\n\tBravo\n\t\tCharlie\n\tDelta\n\tEcho'], [2, 2, 4, ENG, 'xAlpha\n\tBravo\n\tCharlie\n\tDelta\n\tEcho'], [2, 2, 4, SWE, 'Adam\n\tBertil\n\tCes\n\tDavid\n\tErik'], [2, 2, 4, ENG, 'Alpha\n\tBravo\n\txCharlie\n\tDelta\n\tEcho'], [2, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharlie\n\tDelta\n\tEchox'], [2, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharliex\n\tDelta\n\tEcho'], [2, 2, 4, SWE, ''], [2, 2, 4, ENG, 'Alpha\nBravo\n\Charlie\nDelta\nEcho'], [2, 2, 4, ENG, '\tAlpha\n\t\tBravo\n\t\tCharlie\n\t\tDelta\n\t\tEcho'], [1, 2, 4, SWE, 'Adam\n\tCesar\n\tBertil\n\tDavid\n\tErik'], [3, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharlie\n\tDeltax\n\tEcho'], [3, 2, 4, ENG, 'Alphax\n\tBravo\n\tCharlie\n\tDelta\n\tEcho'], [3, 2, 4, ENG, 'Alpha\n\tBravo\nx\tCharlie\n\tDelta\n\tEcho'], [3, 2, 4, ENG, 'Alpha\n\tBravoCharlie\n\tDelta\n\tEcho'], [4, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharlie\n\tCharlie\n\tDelta\n\tEcho'], [4, 2, 4, ENG, 'Alpha\n\tBravo\n\tChar\n\tDelta\n\tEcho'], [4, 2, 4, ENG, 'Alpha\n\tBravo\n\trlieCha\n\tDelta\n\tEcho'], [4, 2, 4, ENG, 'Alpha\n\tBravo\n\tChrlaie\n\tDelta\n\tEcho'], [5, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharlieCharlie\n\tDelta\n\tEcho'], [8, 2, 4, ENG, 'Alpha\n\tBravo\n\tCharlie\n\tBravo\n\tCharlie\n\tDelta\n\tEcho']];

iProblem = 0;

target = null;

editor = null;

Button = (function() {
  function Button(txt, x, y, size, f, r1, g1, b1) {
    this.txt = txt;
    this.x = x;
    this.y = y;
    this.size = size;
    this.f = f != null ? f : null;
    this.r = r1 != null ? r1 : 1;
    this.g = g1 != null ? g1 : 1;
    this.b = b1 != null ? b1 : 1;
  }

  Button.prototype.draw = function() {
    textAlign(CENTER, CENTER);
    fc(this.r, this.g, this.b);
    circle(this.x, this.y, this.size);
    fc(0);
    return text(this.txt, this.x, this.y);
  };

  Button.prototype.execute = function() {
    if (this.f && this.size > dist(mouseX, mouseY, this.x, this.y)) {
      return this.f();
    }
  };

  Button.prototype.setColor = function(r, g, b) {
    var ref;
    return ref = [r, g, b], this.r = ref[0], this.g = ref[1], this.b = ref[2], ref;
  };

  return Button;

})();

buttons = [];

buttons.push(new Button('Prev', 30, 30, 20, function() {
  return nextProblem(-1);
}));

buttons.push(new Button('Next', 170, 30, 20, function() {
  return nextProblem(+1);
}));

buttons.push(new Button('xxx', 100, 100, 20));

buttons.push(new Button('yyy', 100, 30, 20));

buttons.push(new Button('Undo', 100, 150, 20, function() {
  return nextProblem(0);
}));

mouseReleased = function() {
  var button, i, len;
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    button.execute();
  }
  return editor.focus();
};

update = function() {
  var button, diff, i, len, results;
  bg(0.5);
  diff = nCommands - counter;
  buttons[2].txt = diff;
  if (diff > 0) {
    buttons[2].setColor(1, 1, 0);
  } else if (diff === 0 && target.getValue() === editor.getValue()) {
    buttons[2].setColor(0, 1, 0);
  } else {
    buttons[2].setColor(1, 0, 0);
  }
  buttons[3].txt = iProblem;
  results = [];
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    results.push(button.draw());
  }
  return results;
};

cursor_activity = function(doc) {
  counter++;
  return update();
};

key_handled = function(obj, name, event) {};

my_cut = function() {
  return counter--;
};

my_copy = function(obj) {
  counter++;
  return update();
};

block_event = function(obj, event) {
  editor.focus();
  return event.preventDefault();
};

setup = function() {
  var c, cursor, defaultValues;
  c = createCanvas(200, 200);
  c.parent('canvas');
  bg(0);
  defaultValues = {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true,
    matchBrackets: true
  };
  target = CodeMirror.fromTextArea(document.getElementById("target"), defaultValues);
  target.on("mousedown", block_event);
  target.on("touchENG", block_event);
  editor = CodeMirror.fromTextArea(document.getElementById("editor"), defaultValues);
  editor.on("cursorActivity", cursor_activity);
  editor.on("cut", my_cut);
  editor.on("copy", my_copy);
  editor.on("mousedown", block_event);
  editor.on("touchENG", block_event);
  editor.focus();
  cursor = editor.getCursor();
  return nextProblem(0);
};

nextProblem = function(d) {
  var ch, line, ref, slut, start;
  iProblem += d;
  iProblem = constrain(iProblem, 0, PROBLEMS.length - 1);
  ref = PROBLEMS[iProblem], nCommands = ref[0], line = ref[1], ch = ref[2], start = ref[3], slut = ref[4];
  target.setValue(slut);
  target.setCursor(line, ch);
  editor.setValue(start);
  editor.setCursor(line, ch);
  divDbg.innerHTML = "";
  counter = 0;
  update();
  return editor.focus();
};

dbg = function(msg) {
  return divDbg.innerHTML += msg + '<br>';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\132-EditorTrainer\coffee\sketch.coffee