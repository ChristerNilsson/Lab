// Generated by CoffeeScript 1.11.1
var genDir, moves, oneGeneration, recurse, setup, solve, xdraw,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

moves = {
  K: [false, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [1, 1], [1, -1], [-1, 1]]],
  Q: [true, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [1, 1], [1, -1], [-1, 1]]],
  R: [true, [[-1, 0], [1, 0], [0, -1], [0, 1]]],
  B: [true, [[-1, -1], [1, 1], [1, -1], [-1, 1]]],
  N: [false, [[-1, -2], [-1, 2], [1, -2], [1, 2], [-2, -1], [-2, 1], [2, -1], [2, 1]]]
};

setup = function() {
  createCanvas(400, 400);
  return xdraw();
};

genDir = function(multi, sq, dx, dy) {
  var col, i, k, len, maximum, ref, row, squares;
  squares = [];
  if (multi) {
    maximum = 7;
  } else {
    maximum = 1;
  }
  col = sq[0], row = sq[1];
  ref = range(maximum);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    col += dx;
    row += dy;
    if ((0 <= col && col <= 7) && (0 <= row && row <= 7)) {
      squares.push([col, row]);
    }
  }
  return squares;
};

oneGeneration = function(piece, sq) {
  var drag, dx, dy, k, len, multi, ref, ref1, squares;
  ref = moves[piece], multi = ref[0], drag = ref[1];
  squares = [];
  for (k = 0, len = drag.length; k < len; k++) {
    ref1 = drag[k], dx = ref1[0], dy = ref1[1];
    squares = squares.concat(genDir(multi, sq, dx, dy));
  }
  return squares;
};

recurse = function(level, piece, front, reached) {
  var candidate, candidates, k, key, l, len, len1, newFront, sq;
  if (front.length === 0) {
    return reached;
  }
  candidates = [];
  for (k = 0, len = front.length; k < len; k++) {
    sq = front[k];
    candidates = candidates.concat(oneGeneration(piece, sq));
  }
  newFront = [];
  for (l = 0, len1 = candidates.length; l < len1; l++) {
    candidate = candidates[l];
    key = candidate.toString();
    if (indexOf.call(_.keys(reached), key) < 0) {
      reached[key] = level;
      newFront.push(candidate);
    }
  }
  return recurse(level + 1, piece, newFront, reached);
};

solve = function(piece, sq) {
  var reached;
  reached = {};
  reached[sq.toString()] = 0;
  return recurse(1, piece, [sq], reached);
};

xdraw = function() {
  var arr, col, i, j, k, key, l, len, len1, level, reached, ref, ref1, results, row;
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(20);
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fc((i + j) % 2);
      rect(20 + 20 * i, 20 + 20 * j, 20, 20);
    }
  }
  reached = solve('N', [4, 5]);
  fc(1, 0, 0);
  results = [];
  for (key in reached) {
    level = reached[key];
    arr = key.split(',');
    col = 1 + int(arr[0]);
    row = 1 + 7 - int(arr[1]);
    results.push(text(level, 20 * col, 20 * row));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBLElBQUEsMERBQUE7RUFBQTs7QUFBQSxLQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUksQ0FBQyxLQUFELEVBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBRixFQUFJLENBQUosQ0FBRCxFQUFRLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBUixFQUFjLENBQUMsQ0FBRCxFQUFHLENBQUMsQ0FBSixDQUFkLEVBQXFCLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBckIsRUFBMkIsQ0FBQyxDQUFDLENBQUYsRUFBSSxDQUFDLENBQUwsQ0FBM0IsRUFBbUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFuQyxFQUF5QyxDQUFDLENBQUQsRUFBRyxDQUFDLENBQUosQ0FBekMsRUFBZ0QsQ0FBQyxDQUFDLENBQUYsRUFBSSxDQUFKLENBQWhELENBQVAsQ0FBSjtFQUNBLENBQUEsRUFBSSxDQUFDLElBQUQsRUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFGLEVBQUksQ0FBSixDQUFELEVBQVEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFSLEVBQWMsQ0FBQyxDQUFELEVBQUcsQ0FBQyxDQUFKLENBQWQsRUFBcUIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFyQixFQUEyQixDQUFDLENBQUMsQ0FBRixFQUFJLENBQUMsQ0FBTCxDQUEzQixFQUFtQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQW5DLEVBQXlDLENBQUMsQ0FBRCxFQUFHLENBQUMsQ0FBSixDQUF6QyxFQUFnRCxDQUFDLENBQUMsQ0FBRixFQUFJLENBQUosQ0FBaEQsQ0FBTixDQURKO0VBRUEsQ0FBQSxFQUFJLENBQUMsSUFBRCxFQUFNLENBQUMsQ0FBQyxDQUFDLENBQUYsRUFBSSxDQUFKLENBQUQsRUFBUSxDQUFDLENBQUQsRUFBRyxDQUFILENBQVIsRUFBYyxDQUFDLENBQUQsRUFB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QyxLQUFELEVBQU8sRUFBUDtBQUNQLE1BQUE7RUFBQSxPQUFBLEdBQVU7RUFDVixPQUFRLENBQUEsRUFBRSxDQUFDLFFBQUgsQ0FBQSxDQUFBLENBQVIsR0FBeUI7U0FDekIsT0FBQSxDQUFRLENBQVIsRUFBVSxLQUFWLEVBQWdCLENBQUMsRUFBRCxDQUFoQixFQUFxQixPQUFyQjtBQUhPOztBQUtSLEtBQUEsR0FBUSxTQUFBO0FBQ1AsTUFBQTtFQUFBLFFBQUEsQ0FBUyxNQUFUO0VBQ0EsU0FBQSxDQUFVLE1BQVYsRUFBaUIsTUFBakI7RUFDQSxRQUFBLENBQVMsRUFBVDtBQUNBO0FBQUEsT0FBQSxxQ0FBQTs7QUFDQztBQUFBLFNBQUEsd0NBQUE7O01BQ0MsRUFBQSxDQUFHLENBQUMsQ0FBQSxHQUFFLENBQUgsQ0FBQSxHQUFNLENBQVQ7TUFDQSxJQUFBLENBQUssRUFBQSxHQUFHLEVBQUEsR0FBRyxDQUFYLEVBQWEsRUFBQSxHQUFHLEVBQUEsR0FBRyxDQUFuQixFQUFxQixFQUFyQixFQUF3QixFQUF4QjtBQUZEO0FBREQ7RUFLQSxPQUFBLEdBQVUsS0FBQSxDQUFNLEdBQU4sRUFBVSxDQUFDLENBQUQsRUFBRyxDQUFILENBQVY7RUFDVixFQUFBLENBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQO0FBQ0E7T0FBQSxjQUFBOztJQUNDLEdBQUEsR0FBTSxHQUFHLENBQUMsS0FBSixDQUFVLEdBQVY7SUFDTixHQUFBLEdBQU0sQ0FBQSxHQUFFLEdBQUEsQ0FBSSxHQUFJLENBQUEsQ0FBQSxDQUFSO0lBQ1IsR0FBQSxHQUFNLENBQUEsR0FBRSxDQUFGLEdBQUksR0FBQSxDQUFJLEdBQUksQ0FBQSxDQUFBLENBQVI7aUJBQ1YsSUFBQSxDQUFLLEtBQUwsRUFBWSxFQUFBLEdBQUcsR0FBZixFQUFtQixFQUFBLEdBQUcsR0FBdEI7QUFKRDs7QUFYTyIsInNvdXJjZXNDb250ZW50IjpbIiMgVmlzYSBpIGh1ciBtw6VuZ2EgZHJhZyBtYW4ga2FuIG7DpSBlbiB2aXNzIHJ1dGEuXHJcbiMgVsOkbGogcGrDpHNcclxuIyBWw6RsaiBydXRhXHJcbiMgTnUgdmlzYXMgZXR0IHRhbCBpIHZhcmplIHJ1dGEuXHJcblxyXG5tb3ZlcyA9XHJcblx0SyA6IFtmYWxzZSxbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXSxbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxyXG5cdFEgOiBbdHJ1ZSxbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXSxbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxyXG5cdFIgOiBbdHJ1ZSxbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXV1dXHJcblx0QiA6IFt0cnVlLFtbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxyXG5cdE4gOiBbZmFsc2UsW1stMSwtMl0sWy0xLDJdLFsxLC0yXSxbMSwyXSxbLTIsLTFdLFstMiwxXSxbMiwtMV0sWzIsMV1dXVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyA0MDAsNDAwXHJcblx0eGRyYXcoKVxyXG5cclxuZ2VuRGlyID0gKG11bHRpLHNxLGR4LGR5KSAtPlxyXG5cdHNxdWFyZXMgPSBbXVxyXG5cdGlmIG11bHRpIHRoZW4gbWF4aW11bSA9IDcgZWxzZSBtYXhpbXVtID0gMVxyXG5cdFtjb2wscm93XSA9IHNxXHJcblx0Zm9yIGkgaW4gcmFuZ2UgbWF4aW11bVxyXG5cdFx0Y29sICs9IGR4XHJcblx0XHRyb3cgKz0gZHlcclxuXHRcdGlmIDAgPD0gY29sIDw9IDcgYW5kIDA8PXJvdyA8PSA3IHRoZW4gc3F1YXJlcy5wdXNoIFtjb2wscm93XVxyXG5cdHNxdWFyZXNcclxuXHJcbm9uZUdlbmVyYXRpb24gPSAocGllY2Usc3EpIC0+XHJcblx0W211bHRpLGRyYWddID0gbW92ZXNbcGllY2VdXHJcblx0c3F1YXJlcyA9IFtdXHJcblx0Zm9yIFtkeCxkeV0gaW4gZHJhZ1xyXG5cdFx0c3F1YXJlcyA9IHNxdWFyZXMuY29uY2F0IGdlbkRpciBtdWx0aSxzcSxkeCxkeVxyXG5cdHNxdWFyZXNcclxuXHJcbnJlY3Vyc2UgPSAobGV2ZWwscGllY2UsZnJvbnQscmVhY2hlZCkgLT5cclxuXHRpZiBmcm9udC5sZW5ndGg9PTAgdGhlbiByZXR1cm4gcmVhY2hlZFxyXG5cdGNhbmRpZGF0ZXMgPSBbXVxyXG5cdGZvciBzcSBpbiBmcm9udFxyXG5cdFx0Y2FuZGlkYXRlcyA9IGNhbmRpZGF0ZXMuY29uY2F0IG9uZUdlbmVyYXRpb24gcGllY2Usc3FcclxuXHRuZXdGcm9udCA9IFtdXHJcblx0Zm9yIGNhbmRpZGF0ZSBpbiBjYW5kaWRhdGVzXHJcblx0XHRrZXkgPSBjYW5kaWRhdGUudG9TdHJpbmcoKVxyXG5cdFx0aWYga2V5IG5vdCBpbiBfLmtleXMgcmVhY2hlZFxyXG5cdFx0XHRyZWFjaGVkW2tleV0gPSBsZXZlbFxyXG5cdFx0XHRuZXdGcm9udC5wdXNoIGNhbmRpZGF0ZVxyXG5cdHJlY3Vyc2UgbGV2ZWwrMSwgcGllY2UsIG5ld0Zyb250LCByZWFjaGVkXHJcblxyXG5zb2x2ZSA9IChwaWVjZSxzcSkgLT5cclxuXHRyZWFjaGVkID0ge31cclxuXHRyZWFjaGVkW3NxLnRvU3RyaW5nKCldID0gMFxyXG5cdHJlY3Vyc2UgMSxwaWVjZSxbc3FdLHJlYWNoZWRcclxuXHJcbnhkcmF3ID0gLT5cclxuXHRyZWN0TW9kZSBDRU5URVJcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHRleHRTaXplIDIwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgOFxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgOFxyXG5cdFx0XHRmYyAoaStqKSUyXHJcblx0XHRcdHJlY3QgMjArMjAqaSwyMCsyMCpqLDIwLDIwXHJcblxyXG5cdHJlYWNoZWQgPSBzb2x2ZSAnTicsWzQsNV1cclxuXHRmYyAxLDAsMFxyXG5cdGZvciBrZXksbGV2ZWwgb2YgcmVhY2hlZFxyXG5cdFx0YXJyID0ga2V5LnNwbGl0ICcsJ1xyXG5cdFx0Y29sID0gMStpbnQgYXJyWzBdXHJcblx0XHRyb3cgPSAxKzctaW50IGFyclsxXVxyXG5cdFx0dGV4dCBsZXZlbCwgMjAqY29sLDIwKnJvd1xyXG5cclxuIyBhc3NlcnQgW1s1LDVdXSwgZ2VuRGlyIGZhbHNlLDQsNCwxLDFcclxuIyBhc3NlcnQgW1szLDNdLFsyLDJdLFsxLDFdLFswLDBdXSwgZ2VuRGlyIHRydWUsNCw0LC0xLC0xXHJcbiMgYXNzZXJ0IFtbMyw0XSxbNSw0XSxbNCwzXSxbNCw1XSxbMywzXSxbNSw1XSxbNSwzXSxbMyw1XV0sIG9uZUdlbmVyYXRpb24gJ0tpbmcnLDQsNFxyXG4jIGFzc2VydCBbWzMsNF0sWzIsNF0sWzEsNF0sWzAsNF0sWzUsNF0sWzYsNF0sWzcsNF0sWzQsM10sWzQsMl0sWzQsMV0sWzQsMF0sWzQsNV0sWzQsNl0sWzQsN11dLFx0b25lR2VuZXJhdGlvbiAnUm9vaycsNCw0XHJcblxyXG4jcHJpbnQgc29sdmUgJ0tpbmcnLFs0LDRdXHJcbiJdfQ==
//# sourceURL=C:\Lab\2017\106-Chess\coffee\sketch.coffee