// Generated by CoffeeScript 1.11.1
var Bishop, King, Knight, Queen, Rook, genDir, oneGeneration, reached, recurse, setup, solve, xdraw,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

King = [false, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [1, 1], [1, -1], [-1, 1]]];

Queen = [true, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [1, 1], [1, -1], [-1, 1]]];

Rook = [true, [[-1, 0], [1, 0], [0, -1], [0, 1]]];

Bishop = [true, [[-1, -1], [1, 1], [1, -1], [-1, 1]]];

Knight = [false, [[-1, -2], [-1, 2], [1, -2], [1, 2], [-2, -1], [-2, 1], [2, -1], [2, 1]]];

setup = function() {
  createCanvas(400, 400);
  return xdraw();
};

genDir = function(multi, sq, dxdy) {
  var col, dx, dy, i, k, len, maximum, ref, row, squares;
  dx = dxdy[0], dy = dxdy[1];
  squares = [];
  if (multi) {
    maximum = 7;
  } else {
    maximum = 1;
  }
  col = sq[0], row = sq[1];
  ref = range(maximum);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    col += dx;
    row += dy;
    if ((0 <= col && col <= 7) && (0 <= row && row <= 7)) {
      squares.push([col, row]);
    }
  }
  return squares;
};

oneGeneration = function(piece, sq) {
  var drag, dxdy, k, len, multi, squares;
  multi = piece[0], drag = piece[1];
  squares = [];
  for (k = 0, len = drag.length; k < len; k++) {
    dxdy = drag[k];
    squares = squares.concat(genDir(multi, sq, dxdy));
  }
  return squares;
};

recurse = function(level, piece, front, reached) {
  var candidate, candidates, k, key, l, len, len1, newFront, sq;
  if (front.length === 0) {
    return reached;
  }
  candidates = [];
  for (k = 0, len = front.length; k < len; k++) {
    sq = front[k];
    candidates = candidates.concat(oneGeneration(piece, sq));
  }
  newFront = [];
  for (l = 0, len1 = candidates.length; l < len1; l++) {
    candidate = candidates[l];
    key = candidate.toString();
    if (indexOf.call(_.keys(reached), key) < 0) {
      reached[key] = level;
      newFront.push(candidate);
    }
  }
  return recurse(level + 1, piece, newFront, reached);
};

solve = function(piece, sq) {
  var reached;
  reached = {};
  reached[sq.toString()] = 0;
  return recurse(1, piece, [sq], reached);
};

xdraw = function() {
  var arr, col, i, j, k, key, l, len, len1, level, reached, ref, ref1, results, row;
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(20);
  ref = range(8);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      fc((i + j + 1) % 2);
      rect(20 + 20 * i, 20 + 20 * j, 20, 20);
    }
  }
  reached = solve(Knight, [0, 0]);
  fc(1, 0, 0);
  results = [];
  for (key in reached) {
    level = reached[key];
    arr = key.split(',');
    col = int(arr[0]);
    row = 7 - int(arr[1]);
    results.push(text(level, 20 + 20 * col, 20 + 20 * row));
  }
  return results;
};

assert([[5, 5]], genDir(false, [4, 4], [1, 1]));

assert([[3, 3], [2, 2], [1, 1], [0, 0]], genDir(true, [4, 4], [-1, -1]));

assert([[3, 4], [5, 4], [4, 3], [4, 5], [3, 3], [5, 5], [5, 3], [3, 5]], oneGeneration(King, [4, 4]));

assert([[3, 4], [2, 4], [1, 4], [0, 4], [5, 4], [6, 4], [7, 4], [4, 3], [4, 2], [4, 1], [4, 0], [4, 5], [4, 6], [4, 7]], oneGeneration(Rook, [4, 4]));

reached = solve(Knight, [4, 5]);

assert(0, reached['4,5']);

assert(1, reached['2,4']);

assert(2, reached['3,2']);

assert(3, reached['2,0']);

assert(4, reached['0,1']);

reached = solve(Knight, [0, 0]);

assert(6, reached['7,7']);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\106-Chess\coffee\sketch.coffee