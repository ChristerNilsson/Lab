// Generated by CoffeeScript 1.11.1
var DT, LENGTH, MAX_ACC, MAX_SPEED, R, Station, Train, X, Y, draw, mousePressed, pause, setup, stations, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

X = 420;

Y = 420;

R = 400;

MAX_SPEED = 4;

MAX_ACC = 1;

LENGTH = 5;

DT = 0.02;

trains = [];

stations = [];

pause = false;

Station = (function() {
  function Station(angle, duration) {
    this.angle = angle;
    this.duration = duration;
  }

  Station.prototype.draw = function() {
    var start, stopp;
    start = radians(this.angle - LENGTH);
    stopp = radians(this.angle);
    fc();
    sc(0.5);
    sw(5);
    return arc(X, Y, 2 * R, 2 * R, start, stopp);
  };

  return Station;

})();

Train = (function() {
  function Train(angle, r, g, b1, nextStation, nextTrain, maxSpeed, maxAcc, duration) {
    this.angle = angle;
    this.r = r;
    this.g = g;
    this.b = b1;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 10000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
  }

  Train.prototype.dump = function(txt, value, x, y) {
    if (this.nr === -1) {
      sc();
      fc(1);
      return text(txt + ' ' + value, x, y);
    }
  };

  Train.prototype.update = function(nr) {
    var a, b, checkStation, checkTrain, ds, dt, s, t;
    checkStation = (function(_this) {
      return function() {
        var acc;
        if (ds - 20 < s) {
          if (ds < 0.1) {
            acc = 0;
            _this.speed = 0;
            _this.nextStart = millis() + _this.duration;
            _this.state = 'Stop';
          } else if (ds > 5) {
            acc = _this.maxAcc;
          } else {
            acc = -_this.maxAcc;
          }
        } else {
          acc = _this.maxAcc;
        }
        return acc;
      };
    })(this);
    checkTrain = (function(_this) {
      return function() {
        if (dt - 12 < s) {
          return -_this.maxAcc;
        } else {
          return _this.maxAcc;
        }
      };
    })(this);
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += 360;
    }
    if (ds < 0) {
      ds += 360;
    }
    if (this.state === 'Run') {
      a = checkStation();
      b = checkTrain();
      this.acc = _.min([a, b]);
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (nr === 0) {
      this.dump('t', nf(t, 0, 1), 400, 100);
      this.dump('s', nf(s, 0, 1), 400, 125);
      this.dump('dt', round(dt), 400, 150);
      this.dump('ds', round(ds), 400, 175);
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, 360);
  };

  Train.prototype.draw = function(nr) {
    var start, stopp, y;
    this.update(nr);
    start = radians(this.angle - LENGTH);
    stopp = radians(this.angle);
    fc();
    sc(this.r, this.g, this.b);
    sw(5);
    arc(X, Y, 2 * R, 2 * R, start, stopp);
    fc(this.r, this.g, this.b);
    y = 300 + 30 * nr;
    sc();
    text(this.state, 200, y);
    text(nf(this.acc, 0, 1), 300, y);
    text(round(this.angle), 400, y);
    text(nf(this.speed, 0, 1), 500, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 600, y);
    }
    return text(this.nextStation, 700, y);
  };

  return Train;

})();

setup = function() {
  createCanvas(2 * X + 40, 2 * Y + 40);
  textSize(20);
  textAlign(RIGHT);
  frameRate(50);
  stations.push(new Station(50, 60));
  stations.push(new Station(101, 60));
  stations.push(new Station(183, 60));
  stations.push(new Station(224, 60));
  stations.push(new Station(337, 60));
  trains.push(new Train(0, 1, 0, 0, 0, 1, MAX_SPEED * 1.5, MAX_ACC * 1.1, 5000));
  trains.push(new Train(70, 1, 1, 0, 1, 2));
  trains.push(new Train(140, 0, 1, 0, 2, 3));
  trains.push(new Train(211, 0, 1, 1, 3, 4));
  return trains.push(new Train(300, 1, 0, 1, 4, 0));
};

draw = function() {
  var i, j, k, len, len1, results, station, train, y;
  bg(1);
  sc(0);
  sw(4);
  fill(0);
  circle(X, Y, R + 10);
  y = 270;
  fc(1);
  sc();
  sw(0);
  text('state', 200, y);
  text('acc', 300, y);
  text('angle', 400, y);
  text('speed', 500, y);
  text('sec', 600, y);
  text('next', 700, y);
  for (j = 0, len = stations.length; j < len; j++) {
    station = stations[j];
    station.draw();
  }
  results = [];
  for (i = k = 0, len1 = trains.length; k < len1; i = ++k) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mousePressed = function() {
  return pause = !pause;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\071-Tunnelbanesimulator\coffee\sketch.coffee