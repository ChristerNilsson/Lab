// Generated by CoffeeScript 1.11.1
var MAX_ACC, MAX_SPEED, R, Station, Train, X, Y, draw, setup, stations, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

X = 420;

Y = 420;

R = 400;

MAX_SPEED = 10;

MAX_ACC = 0.02;

trains = [];

stations = [];

Station = (function() {
  function Station(angle, duration) {
    this.angle = angle;
    this.duration = duration;
  }

  Station.prototype.draw = function() {
    var start, stopp;
    start = radians(this.angle - 5);
    stopp = radians(this.angle);
    fc();
    sc(0.5);
    sw(5);
    return arc(X, Y, 2 * R, 2 * R, start, stopp);
  };

  return Station;

})();

Train = (function() {
  function Train(angle, r, g, b, nextStation, nextTrain, maxSpeed, duration) {
    this.angle = angle;
    this.r = r;
    this.g = g;
    this.b = b;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.duration = duration != null ? duration : 10000;
    this.state = 'R';
    this.speed = 0;
    this.acc = MAX_ACC;
    this.nextStart = millis();
  }

  Train.prototype.update = function() {
    var d, newSpeed1, newSpeed2, newSpeed3;
    if (this.state === ' ') {
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'R';
        return this.acc = MAX_ACC;
      }
    } else {
      if (this.speed > this.maxSpeed) {
        this.acc = 0;
      }
      if (this.speed < 0) {
        this.acc = 0;
      }
      this.speed += this.acc;
      this.angle = modulo(this.angle + this.speed / 100, 360);
      newSpeed1 = this.speed;
      newSpeed2 = this.speed;
      newSpeed3 = this.speed;
      d = abs(this.angle - stations[this.nextStation].angle);
      if (d < 20) {
        newSpeed1 = map(d, 20, 0, this.maxSpeed, 2);
      }
      if (d < 0.1) {
        this.acc = 0;
        newSpeed2 = 0;
        this.nextStart = millis() + this.duration;
        this.state = ' ';
      }
      d = abs(this.angle - (trains[this.nextTrain].angle - 20));
      if (d < 20) {
        newSpeed3 = map(d, 10, 0, this.maxSpeed, 2);
      }
      return this.speed = _.min([newSpeed1, newSpeed2, newSpeed3]);
    }
  };

  Train.prototype.draw = function(nr) {
    var start, stopp, y;
    this.update();
    start = radians(this.angle - 5);
    stopp = radians(this.angle);
    fc();
    sc(this.r, this.g, this.b);
    sw(5);
    arc(X, Y, 2 * R, 2 * R, start, stopp);
    fc(this.r, this.g, this.b);
    y = 300 + 30 * nr;
    sc();
    text(round(this.speed), 450, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 650, y);
    }
    return text(this.nextStation, 700, y);
  };

  return Train;

})();

setup = function() {
  createCanvas(2 * X + 40, 2 * Y + 40);
  textSize(20);
  textAlign(RIGHT);
  stations.push(new Station(50, 60));
  stations.push(new Station(100, 60));
  stations.push(new Station(180, 60));
  stations.push(new Station(240, 60));
  stations.push(new Station(330, 60));
  trains.push(new Train(0, 1, 0, 0, 0, 1, MAX_SPEED + 2, 5000));
  trains.push(new Train(70, 1, 1, 0, 1, 2));
  trains.push(new Train(140, 0, 1, 0, 2, 3));
  trains.push(new Train(210, 0, 1, 1, 3, 4));
  return trains.push(new Train(300, 1, 0, 1, 4, 0));
};

draw = function() {
  var i, j, k, len, len1, results, station, train, y;
  bg(1);
  sc(0);
  sw(4);
  fill(0);
  circle(X, Y, R + 10);
  y = 270;
  fc(1);
  sc();
  sw(0);
  text('speed', 450, y);
  text('sec', 650, y);
  text('next', 700, y);
  for (j = 0, len = stations.length; j < len; j++) {
    station = stations[j];
    station.draw();
  }
  results = [];
  for (i = k = 0, len1 = trains.length; k < len1; i = ++k) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\071-Tunnelbanesimulator\coffee\sketch.coffee