// Generated by CoffeeScript 2.0.3
var State, a, button, checkbox, code, div, fix, form, h1, h3, header, img, input, label, li, option, p, render, sel, setup, state, strong, table, td, tr,
  indexOf = [].indexOf;

render = function(node) {
  var _props, attr, child, key;
  if (Array.isArray(node)) {
    return ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = node.length; i < len; i++) {
        child = node[i];
        results.push(render(child));
      }
      return results;
    })()).join('');
  }
  if (typeof node !== 'object') {
    return node;
  }
  _props = ((function() {
    var ref, results;
    ref = node.props;
    results = [];
    for (key in ref) {
      attr = ref[key];
      results.push(' ' + key + '="' + attr + '"');
    }
    return results;
  })()).join('');
  return `<${node.tag}${_props}>${render(node.children)}</${node.tag}>\n`;
};

fix = function(tag, ...options) {
  var props;
  if (typeof options[0] === 'object') {
    props = options.shift();
  } else {
    props = {};
  }
  return {
    tag: tag,
    props: props,
    children: options.length === 0 ? [] : options
  };
};

a = function() {
  return fix('a', ...arguments);
};

button = function() {
  return fix('button', ...arguments);
};

code = function() {
  return fix('code', ...arguments);
};

div = function() {
  return fix('div', ...arguments);
};

form = function() {
  return fix('form', ...arguments);
};

header = function() {
  return fix('header', ...arguments);
};

h1 = function() {
  return fix('h1', ...arguments);
};

h3 = function() {
  return fix('h3', ...arguments);
};

img = function() {
  return fix('img', ...arguments);
};

input = function() {
  return fix('input', ...arguments);
};

label = function() {
  return fix('label', ...arguments);
};

li = function() {
  return fix('li', ...arguments);
};

option = function() {
  return fix('option', ...arguments);
};

p = function() {
  return fix('p', ...arguments);
};

sel = function() {
  return fix('select', ...arguments);
};

strong = function() {
  return fix('strong', ...arguments);
};

table = function() {
  return fix('table', ...arguments);
};

tr = function() {
  return fix('tr', ...arguments);
};

td = function() {
  return fix('td', ...arguments);
};

checkbox = function(p, ...options) {
  return input(_.extend(p, {
    type: 'checkbox'
  }, p.value ? {
    checked: true
  } : {}), ...options);
};

// checkbox är svår att avläsa. toggla och håll reda på tillståndet själv.

//##############################

// https://github.com/ahfarmer/calculator
State = class State {
  constructor(x1, y1, z, t, entering) {
    var struktur;
    this.x = x1;
    this.y = y1;
    this.z = z;
    this.t = t;
    this.entering = entering;
    struktur = [
      div({
        id: 'dt'
      },
      this.t),
      div({
        id: 'dz'
      },
      this.z),
      div({
        id: 'dy'
      },
      this.y),
      div({
        id: 'dx'
      },
      this.x),
      div({},
      button({
        onclick: "state.calculate('clr')"
      },
      "clr"),
      button({
        onclick: "state.calculate('chs')"
      },
      "chs"),
      button({
        onclick: "state.calculate('%')"
      },
      "%"),
      button({
        onclick: "state.calculate('÷')"
      },
      "÷")),
      div({},
      button({
        onclick: "state.calculate('7')"
      },
      "7"),
      button({
        onclick: "state.calculate('8')"
      },
      "8"),
      button({
        onclick: "state.calculate('9')"
      },
      "9"),
      button({
        onclick: "state.calculate('x')"
      },
      "x")),
      div({},
      button({
        onclick: "state.calculate('4')"
      },
      "4"),
      button({
        onclick: "state.calculate('5')"
      },
      "5"),
      button({
        onclick: "state.calculate('6')"
      },
      "6"),
      button({
        onclick: "state.calculate('-')"
      },
      "-")),
      div({},
      button({
        onclick: "state.calculate('1')"
      },
      "1"),
      button({
        onclick: "state.calculate('2')"
      },
      "2"),
      button({
        onclick: "state.calculate('3')"
      },
      "3"),
      button({
        onclick: "state.calculate('+')"
      },
      "+")),
      div({},
      button({
        onclick: "state.calculate('0')"
      },
      "0"),
      button({
        onclick: "state.calculate('.')"
      },
      "."),
      button({
        onclick: "state.calculate('enter')"
      },
      "enter"))
    ];
    this.update('body', render(struktur));
  }

  calculate(buttonName) {
    var x, y;
    if (buttonName === 'clr') {
      this.fix({
        x: "0",
        y: "0",
        "z": 0,
        t: "0",
        entering: false
      });
    }
    if (buttonName === 'enter') {
      this.fix({
        x: this.x,
        y: this.x,
        z: this.y,
        t: this.z,
        entering: false
      });
    }
    if (buttonName === 'chs') {
      this.x = -this.x;
    }
    if (indexOf.call("+-x÷%", buttonName) >= 0) {
      x = parseFloat(this.x);
      y = parseFloat(this.y);
      if (buttonName === '+') {
        this.x = y + x;
      }
      if (buttonName === '-') {
        this.x = y - x;
      }
      if (buttonName === 'x') {
        this.x = y * x;
      }
      if (buttonName === '÷') {
        this.x = y / x;
      }
      if (buttonName === '%') {
        this.x = y % x;
      }
      this.fix({
        x: this.x.toString(),
        y: this.z,
        z: this.t,
        entering: false
      });
    }
    if (indexOf.call("0123456789.", buttonName) >= 0) {
      if (this.entering) {
        if (indexOf.call('0123456789', buttonName) >= 0 || !this.x.includes('.')) {
          this.fix({
            x: this.x + buttonName
          });
        }
      } else {
        this.fix({
          x: buttonName,
          y: this.x,
          z: this.y,
          t: this.z,
          entering: true
        });
      }
    }
    return this.fix({
      dx: this.x,
      dy: this.y,
      dz: this.z,
      dt: this.t // display
    });
  }

  fix(hash) {
    var key, results, value;
    results = [];
    for (key in hash) {
      value = hash[key];
      results.push(this.update(key, value));
    }
    return results;
  }

  update(name, value) {
    var obj;
    print(name, value);
    this[name] = value;
    obj = document.getElementById(name);
    if (obj) {
      return obj.innerHTML = value;
    }
  }

};

state = null;

setup = function() {
  return state = new State('3', '2', '1', '0', false);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\141-ReactCalculator\coffee\sketch.coffee