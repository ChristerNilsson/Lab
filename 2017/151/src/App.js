// Generated by CoffeeScript 2.0.3
/*
eslint-disable 
*/
var App, millis;

import React, {
  Component
} from 'react';

import QrReader from 'react-qr-reader';

import _ from 'lodash';

millis = function() {
  var d;
  d = new Date();
  return d.getTime();
};

export default App = class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      delay: 500,
      result: 'scan',
      A: "",
      B: "",
      C: "",
      D: "",
      INIT: "init",
      from: 7,
      to: 1,
      hist: []
    };
    this.handleScan = this.handleScan.bind(this);
    this.handleExecute = this.handleExecute.bind(this);
  }

  handleScan(result) {
    if (result) {
      return this.setState({result});
    }
  }

  handleError(err) {
    return console.error(err);
  }

  handleExecute() {
    var command, commands, n, op;
    op = this.state.result;
    command = this.state[op];
    if (command === '+2') {
      this.save(this.state.from + 2);
    }
    if (command === '*2') {
      this.save(this.state.from * 2);
    }
    if (command === '/2' && this.state.from % 2 === 0) {
      this.save(this.state.from / 2);
    }
    if (command === 'undo') {
      n = this.state.hist.length;
      if (n > 0) {
        this.setState({
          from: this.state.hist[n - 1],
          hist: this.state.hist.slice(0, -1)
        });
      }
    }
    if (command === 'init') {
      commands = '+2 *2 /2 undo'.split(' ');
      commands = _.shuffle(commands);
      return this.setState({
        A: commands[0],
        B: commands[1],
        C: commands[2],
        D: commands[3],
        from: 7,
        to: 1,
        hist: [],
        start: millis(),
        operations: 0,
        total: 0,
        result: 'scan'
      });
    }
  }

  save(value) {
    return this.setState({
      from: value,
      hist: this.state.hist.concat([this.state.from]),
      operations: this.state.operations + 1,
      total: (millis() - this.state.start) / 1000 + 10 * this.state.operations
    });
  }

  render() {
    var previewStyle;
    previewStyle = {
      height: 320,
      width: 320
    };
    return <div>
			<QrReader delay={this.state.delay} style={previewStyle} onError={this.handleError} onScan={this.handleScan} />
			<button onClick={this.handleExecute}>{this.state.result}</button>
			<p>A: {this.state.A} <br /> B: {this.state.B} <br /> C: {this.state.C} <br /> D: {this.state.D}</p>
			<h1>{this.state.from} to {this.state.to}</h1>
			<p>{this.state.hist.join(' ')}</p>
			<p>{this.state.total}</p>
		</div>;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXEFwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7QUFBQSxJQUFBLEdBQUEsRUFBQTs7QUFJQSxPQUFPLEtBQVAsRUFBQTtFQUFnQixTQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFQLE1BQUE7O0FBRUEsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO0FBQ1IsTUFBQTtFQUFBLENBQUEsR0FBSSxJQUFJLElBQUosQ0FBQTtTQUNKLENBQUMsQ0FBQyxPQUFGLENBQUE7QUFGUTs7QUFJVCxPQUFBLFFBQXFCLE1BQU4sTUFBQSxJQUFBLFFBQWtCLFVBQWxCO0VBQ2QsV0FBYyxDQUFDLEtBQUQsQ0FBQTtTQUNiLENBQU0sS0FBTjtJQUNBLElBQUMsQ0FBQSxLQUFELEdBQ0M7TUFBQSxLQUFBLEVBQU8sR0FBUDtNQUNBLE1BQUEsRUFBUSxNQURSO01BRUEsQ0FBQSxFQUFJLEVBRko7TUFHQSxDQUFBLEVBQUksRUFISjtNQUlBLENBQUEsRUFBSSxFQUpKO01BS0EsQ0FBQSxFQUFJLEVBTEo7TUFNQSxJQUFBLEVBQU8sTUFOUDtNQU9BLElBQUEsRUFBTyxDQVBQO01BUUEsRUFBQSxFQUFLLENBUkw7TUFTQSxJQUFBLEVBQU87SUFUUDtJQVVELElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLElBQWpCO0lBQ2QsSUFBQyxDQUFBLGFBQUQsR0FBaUIsSUFBQyxDQUFBLGFBQWEsQ0FBQyxJQUFmLENBQW9CLElBQXBCO0VBZEo7O0VBZ0JkLFVBQWEsQ0FBQyxNQUFELENBQUE7SUFBWSxJQUFHLE1BQUg7YUFBZSxJQUFDLENBQUEsUUFBRCxDQUFVLENBQUUsTUFBRixDQUFWLEVBQWY7O0VBQVo7O0VBQ2IsV0FBYyxDQUFDLEdBQUQsQ0FBQTtXQUFRLE9BQU8sQ0FBQyxLQUFSLENBQWMs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QUFBLENBQVEsQ0FBQyxJQUFDLENBQUEsYUFBRixDQUFmLENBQStCLENBQUUsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFULENBQS9CLEVBQUEsTUFBQTtHQUNBLENBQUEsQ0FBQSxDQUFDLEdBQUEsQ0FBSyxJQUFDLENBQUEsS0FBSyxDQUFDLENBQVosRUFBZ0IsQ0FBQSxFQUFBLEdBQUksSUFBcEIsQ0FBeUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUFoQyxFQUFvQyxDQUFBLEVBQUEsR0FBSSxJQUF4QyxDQUE2QyxJQUFDLENBQUEsS0FBSyxDQUFDLENBQXBELEVBQXdELENBQUEsRUFBQSxHQUFJLElBQTVELENBQWlFLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBeEUsQ0FBRCxFQUFBLENBQUE7R0FDQSxDQUFBLEVBQUEsQ0FBRSxDQUFFLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBVCxDQUFjLElBQWQsQ0FBbUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUExQixDQUFGLEVBQUEsRUFBQTtHQUNBLENBQUEsQ0FBQSxDQUFDLENBQUUsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBWixDQUFpQixHQUFqQixDQUFGLENBQUQsRUFBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBLENBQUMsQ0FBRSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVQsQ0FBRCxFQUFBLENBQUE7RUFYRCxFQUFBLEdBQUE7RUFMTzs7QUF0REsiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbmVzbGludC1kaXNhYmxlIFxuIyMjXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBRclJlYWRlciBmcm9tICdyZWFjdC1xci1yZWFkZXInXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5cbm1pbGxpcyA9IC0+XG5cdGQgPSBuZXcgRGF0ZSgpXG5cdGQuZ2V0VGltZSgpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCBcblx0Y29uc3RydWN0b3IgOiAocHJvcHMpIC0+XG5cdFx0c3VwZXIgcHJvcHNcblx0XHRAc3RhdGUgPSBcblx0XHRcdGRlbGF5OiA1MDBcblx0XHRcdHJlc3VsdDogJ3NjYW4nXG5cdFx0XHRBIDogXCJcIlxuXHRcdFx0QiA6IFwiXCJcblx0XHRcdEMgOiBcIlwiXG5cdFx0XHREIDogXCJcIlxuXHRcdFx0SU5JVCA6IFwiaW5pdFwiXG5cdFx0XHRmcm9tIDogN1xuXHRcdFx0dG8gOiAxXG5cdFx0XHRoaXN0IDogW10gICAgXG5cdFx0QGhhbmRsZVNjYW4gPSBAaGFuZGxlU2Nhbi5iaW5kIEBcblx0XHRAaGFuZGxlRXhlY3V0ZSA9IEBoYW5kbGVFeGVjdXRlLmJpbmQgQFxuXHRcblx0aGFuZGxlU2NhbiA6IChyZXN1bHQpIC0+IGlmIHJlc3VsdCB0aGVuIEBzZXRTdGF0ZSB7IHJlc3VsdCB9IFxuXHRoYW5kbGVFcnJvciA6IChlcnIpLT4gY29uc29sZS5lcnJvciBlcnJcblx0aGFuZGxlRXhlY3V0ZSA6IC0+XG5cdFx0b3AgPSBAc3RhdGUucmVzdWx0XG5cdFx0Y29tbWFuZCA9IEBzdGF0ZVtvcF1cblx0XHRpZiBjb21tYW5kID09JysyJyB0aGVuIEBzYXZlIEBzdGF0ZS5mcm9tKzJcblx0XHRpZiBjb21tYW5kID09JyoyJyB0aGVuIEBzYXZlIEBzdGF0ZS5mcm9tKjJcblx0XHRpZiBjb21tYW5kID09Jy8yJyBhbmQgQHN0YXRlLmZyb20gJSAyID09IDAgdGhlbiBAc2F2ZSBAc3RhdGUuZnJvbS8yIFxuXHRcdGlmIGNvbW1hbmQgPT0ndW5kbydcblx0XHRcdG4gPSBAc3RhdGUuaGlzdC5sZW5ndGhcblx0XHRcdGlmIG4gPiAwXG5cdFx0XHRcdEBzZXRTdGF0ZSBcblx0XHRcdFx0XHRmcm9tIDogQHN0YXRlLmhpc3Rbbi0xXVxuXHRcdFx0XHRcdGhpc3QgOiBAc3RhdGUuaGlzdFswLi4tMl1cblx0XHRpZiBjb21tYW5kID09J2luaXQnIFxuXHRcdFx0Y29tbWFuZHMgPSAnKzIgKjIgLzIgdW5kbycuc3BsaXQgJyAnXG5cdFx0XHRjb21tYW5kcyA9IF8uc2h1ZmZsZSBjb21tYW5kc1xuXHRcdFx0QHNldFN0YXRlXG5cdFx0XHRcdEEgOiBjb21tYW5kc1swXSBcblx0XHRcdFx0QiA6IGNvbW1hbmRzWzFdIFxuXHRcdFx0XHRDIDogY29tbWFuZHNbMl0gXG5cdFx0XHRcdEQgOiBjb21tYW5kc1szXSBcblx0XHRcdFx0ZnJvbSA6IDdcblx0XHRcdFx0dG8gOiAxXG5cdFx0XHRcdGhpc3QgOiBbXVxuXHRcdFx0XHRzdGFydCA6IG1pbGxpcygpXG5cdFx0XHRcdG9wZXJhdGlvbnMgOiAwXG5cdFx0XHRcdHRvdGFsIDogMFxuXHRcdFx0XHRyZXN1bHQgOiAnc2NhbidcblxuXHRzYXZlIDogKHZhbHVlKSAtPlxuXHRcdEBzZXRTdGF0ZSBcblx0XHRcdGZyb20gOiB2YWx1ZVxuXHRcdFx0aGlzdCA6IEBzdGF0ZS5oaXN0LmNvbmNhdCBbQHN0YXRlLmZyb21dXG5cdFx0XHRvcGVyYXRpb25zIDogQHN0YXRlLm9wZXJhdGlvbnMgKyAxXG5cdFx0XHR0b3RhbCA6IChtaWxsaXMoKS1Ac3RhdGUuc3RhcnQpLzEwMDAgKyAxMCAqIEBzdGF0ZS5vcGVyYXRpb25zXG5cblx0cmVuZGVyIDogLT5cblx0XHRwcmV2aWV3U3R5bGUgPSBcblx0XHRcdGhlaWdodDogMzIwXG5cdFx0XHR3aWR0aDogMzIwXG5cblx0XHQ8ZGl2PlxuXHRcdFx0PFFyUmVhZGVyXG5cdFx0XHRcdGRlbGF5ID0ge0BzdGF0ZS5kZWxheX1cblx0XHRcdFx0c3R5bGUgPSB7cHJldmlld1N0eWxlfVxuXHRcdFx0XHRvbkVycm9yID0ge0BoYW5kbGVFcnJvcn1cblx0XHRcdFx0b25TY2FuID0ge0BoYW5kbGVTY2FufVxuXHRcdFx0XHQvPlxuXHRcdFx0PGJ1dHRvbiBvbkNsaWNrPXtAaGFuZGxlRXhlY3V0ZX0+e0BzdGF0ZS5yZXN1bHR9PC9idXR0b24+XG5cdFx0XHQ8cD5BOiB7QHN0YXRlLkF9IDxici8+IEI6IHtAc3RhdGUuQn0gPGJyLz4gQzoge0BzdGF0ZS5DfSA8YnIvPiBEOiB7QHN0YXRlLkR9PC9wPlxuXHRcdFx0PGgxPntAc3RhdGUuZnJvbX0gdG8ge0BzdGF0ZS50b308L2gxPlxuXHRcdFx0PHA+e0BzdGF0ZS5oaXN0LmpvaW4gJyAnfTwvcD5cblx0XHRcdDxwPntAc3RhdGUudG90YWx9PC9wPlxuXHRcdDwvZGl2PlxuIl19
//# sourceURL=C:\Lab\2017\151\coffee\App.coffee