'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Snake,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

Snake = function () {
  function Snake() {
    var head = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : createVector(10, 10);
    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var total = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var tail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    _classCallCheck(this, Snake);

    this.head = head;
    this.dir = dir;
    this.total = total;
    this.tail = tail;
  }

  _createClass(Snake, [{
    key: 'eat',
    value: function eat(pos) {
      var d;
      d = dist(this.head.x, this.head.y, pos.x, pos.y);
      if (d === 0) {
        this.total++;
      }
      return d === 0;
    }
  }, {
    key: 'death',
    value: function death() {
      var d, i, len, pos, ref, results;
      ref = this.tail;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pos = ref[i];
        d = dist(this.head.x, this.head.y, pos.x, pos.y);
        if (d === 0) {
          print('starting over');
          this.total = 1;
          results.push(this.tail = []);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }, {
    key: 'update',
    value: function update() {
      this.tail.unshift(this.head);
      if (this.total <= this.tail.length) {
        this.tail.pop();
      }
      return this.head = createVector(modulo(this.head.x + [1, 0, -1, 0][this.dir], n), modulo(this.head.y + [0, 1, 0, -1][this.dir], n));
    }
  }, {
    key: 'show',
    value: function show() {
      var i, len, pos, ref, results;
      ref = this.tail.concat(this.head);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        pos = ref[i];
        results.push(kvadrat(pos, color(255)));
      }
      return results;
    }
  }]);

  return Snake;
}();
//# sourceMappingURL=snake.js.map
