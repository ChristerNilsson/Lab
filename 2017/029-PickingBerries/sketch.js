// Generated by CoffeeScript 1.11.1
var setup;

setup = function() {
  var N, all, berries, best, bigpath, fixa, generatePermutation, i, i1, i2, j, k, l, len, len1, len2, len3, m, o, path, paths, perm, permutation, permutations, ref, ref1, ref2, s, speeds, x, x1, x2, y, y1, y2;
  N = 200;
  berries = [[100, 107], [189, 175], [124, 138], [196, 188], [13, 37], [187, 78], [12, 168], [153, 31], [32, 20], [131, 188]];
  speeds = [1, 5, 20, 50];
  x = N / 2;
  y = N / 2;
  path = function(xb, yb, steps) {
    var i, k, len, ref, res, s, step;
    res = "";
    x = [0, xb];
    y = [0, yb];
    ref = range(steps.length - 1, -1, -1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      step = steps[i];
      s = '';
      s += fixa('ca', x, step);
      s += fixa('bd', y, step);
      if (s !== "") {
        res += i + s;
      }
    }
    return res;
  };
  fixa = function(letters, pair, step) {
    var res;
    res = "";
    if (pair[0] < pair[1]) {
      while (pair[1] - pair[0] > step / 2) {
        pair[0] += step;
        res += letters[1];
      }
    } else {
      while (pair[0] - pair[1] > step / 2) {
        pair[0] -= step;
        res += letters[0];
      }
    }
    return res;
  };
  assert(path(2, 5, [1, 2]), "1add0d");
  assert(path(0, 5, [1, 2]), "1dd0d");
  assert(path(2, 1, [1, 5]), "0aad");
  assert(path(15, 14, [1, 5]), "1aaaddd0b");
  assert(path(15, 15, [1, 5]), "1aaaddd");
  assert(path(0, 14, [1, 5]), "1ddd0b");
  assert(path(-14, 0, [1, 5]), "1ccc0a");
  assert(path(-15, 1, [1, 5]), "1ccc0d");
  assert(path(-16, -1, [1, 5]), "1ccc0cb");
  all = [[N / 2, N / 2]].concat(berries);
  paths = {};
  for (i = k = 0, len = all.length; k < len; i = ++k) {
    ref = all[i], x1 = ref[0], y1 = ref[1];
    for (j = l = 0, len1 = all.length; l < len1; j = ++l) {
      ref1 = all[j], x2 = ref1[0], y2 = ref1[1];
      paths[i + "," + j] = path(x2 - x1, y2 - y1, speeds);
    }
  }
  generatePermutation = function(perm, pre, post, n) {
    var elem, m, ref2, rest;
    if (n > 0) {
      for (i = m = 0, ref2 = post.length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
        rest = post.slice(0);
        elem = rest.splice(i, 1);
        generatePermutation(perm, pre.concat(elem), rest, n - 1);
      }
    } else {
      perm.push(pre);
    }
  };
  Array.prototype.permutation = function(n) {
    var perm;
    if (n == null) {
      n = this.length;
    }
    perm = [];
    generatePermutation(perm, [], this, n);
    return perm;
  };
  permutations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].permutation(10);
  best = 999;
  for (m = 0, len2 = permutations.length; m < len2; m++) {
    perm = permutations[m];
    permutation = [0].concat(perm);
    bigpath = [];
    ref2 = range(permutation.length - 1);
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      i = ref2[o];
      i1 = permutation[i];
      i2 = permutation[i + 1];
      bigpath.push(paths[i1 + "," + i2]);
    }
    s = bigpath.join("").length;
    if (s < best) {
      best = s;
      print("");
      print(s, permutation);
      print(bigpath);
      print(bigpath.join(""));
    }
  }
  return print("ready");
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBOEJBLElBQUE7O0FBQUEsS0FBQSxHQUFRLFNBQUE7QUFFUCxNQUFBO0VBQUEsQ0FBQSxHQUFJO0VBQ0osT0FBQSxHQUFVLENBQUMsQ0FBQyxHQUFELEVBQUssR0FBTCxDQUFELEVBQVcsQ0FBQyxHQUFELEVBQUssR0FBTCxDQUFYLEVBQXFCLENBQUMsR0FBRCxFQUFLLEdBQUwsQ0FBckIsRUFBK0IsQ0FBQyxHQUFELEVBQUssR0FBTCxDQUEvQixFQUF5QyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQXpDLEVBQWlELENBQUMsR0FBRCxFQUFLLEVBQUwsQ0FBakQsRUFBMEQsQ0FBQyxFQUFELEVBQUksR0FBSixDQUExRCxFQUFtRSxDQUFDLEdBQUQsRUFBSyxFQUFMLENBQW5FLEVBQTRFLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBNUUsRUFBb0YsQ0FBQyxHQUFELEVBQUssR0FBTCxDQUFwRjtFQUNWLE1BQUEsR0FBUyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssRUFBTCxFQUFRLEVBQVI7RUFLVCxDQUFBLEdBQUksQ0FBQSxHQUFJO0VBQ1IsQ0FBQSxHQUFJLENBQUEsR0FBSTtFQUVSLElBQUEsR0FBTyxTQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sS0FBUDtBQUNOLFFBQUE7SUFBQSxHQUFBLEdBQU07SUFDTixDQUFBLEdBQUksQ0FBQyxDQUFELEVBQUcsRUFBSDtJQUNKLENBQUEsR0FBSSxDQUFDLENBQUQsRUFBRyxFQUFIO0FBQ0o7QUFBQSxTQUFBLHFDQUFBOztNQUNDLElBQUEsR0FBTyxLQUFNLENBQUEsQ0FBQTtNQUNiLENBQUEsR0FBSTtNQUNKLENBQUEsSUFBSyxJQUFBLENBQUssSUFBTCxFQUFVLENBQVYsRUFBWSxJQUFaO01BQ0wsQ0FBQSxJQUFLLElBQUEsQ0FBSyxJQUFMLEVBQVUsQ0FBVixFQUFZLElBQVo7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LEtBQUEsQ0FBTSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQWIsQ0FBTixFQUxEOztBQVJEO1NBZUEsS0FBQSxDQUFNLE9BQU47QUF0Rk8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFZhcmplIHNwZWVkIGNoYW5nZSBoYXIga29zdG5hZGVuIDEuXHJcbiMgVmFyamUgbW92ZSBrb3N0YXIgMS5cclxuIyBIdXIgdGEgYWxsYSB0aW8gYsOkcmVuIHRpbGwgc8OlIGzDpWcga29zdG5hZCBzb20gbcO2amxpZ3Q/XHJcbiMgTWFuIHLDtnIgc2lnIGkgZGUgZnlyYSB2w6RkZXJzdHJlY2tlbjogRU5XU1xyXG5cclxuIyBTb2x1dGlvbjogKDY2IGNsaWNrcylcclxuIyAgMTAwIDEwMFxyXG4jICAgMWQwZGQgXHJcbiMgIDEwMCAxMDdcclxuIyBcdDNkMmFiMWEwY2QgXHJcbiMgIDEzMSAxODggXHQgXHJcbiMgXHQzYWQyYTBhYSBcclxuIyAgMTg5IDE3NVxyXG4jICAgM2MyYzFhIFxyXG4jICAxMjQgMTM4IFxyXG4jICAgM2NjMmNiMGEgIFxyXG4jICAxMiAxNjhcclxuIyAgIDNiYmIyYTBkZCAgXHJcbiMgIDMyIDIwXHJcbiMgICAyY2QxYjBhZGQgIFxyXG4jICAxMyAzN1xyXG4jICAgM2FhYTFjY2IwYiAgXHJcbiMgIDE1MyAzMVxyXG4jICAgM2FkMmMxYWIwY2RkICBcclxuIyAgMTg3IDc4XHJcbiMgICAzZGQxYjBhYWRkIFxyXG4jICAxOTYgMTg4XHJcblxyXG4jICAxZDBkZCBjZDJhYjFhM2QgYWQwYWEyYSBjMWEzYyBjYzJjYjBhIGRkM2JiYjJhIGNkMWIwYWRkIGIxY2NiM2FhYSBhZDJjMWFiMGNkZCBhYWRkM2RkMWJcclxuXHJcbnNldHVwID0gLT5cclxuXHRcclxuXHROID0gMjAwXHJcblx0YmVycmllcyA9IFtbMTAwLDEwN10sWzE4OSwxNzVdLFsxMjQsMTM4XSxbMTk2LDE4OF0sWzEzLDM3XSxbMTg3LDc4XSxbMTIsMTY4XSxbMTUzLDMxXSxbMzIsMjBdLFsxMzEsMTg4XV0gXHQgXHJcblx0c3BlZWRzID0gWzEsNSwyMCw1MF1cclxuXHJcblx0I2JlcnJpZXMgPSBbWzY3LDBdLFsxMzMsMF0sWzIwMCwwXSxbMjAwLDY3XSxbMjAwLDEzM10sWzIwMCwyMDBdLFsxMzMsMjAwXSxbNjcsMjAwXSxbMCwyMDBdLFswLDEzM11dIFx0IFxyXG5cclxuXHQjIHN0YXJ0IHBvc2l0aW9uXHJcblx0eCA9IE4gLyAyXHJcblx0eSA9IE4gLyAyXHJcblxyXG5cdHBhdGggPSAoeGIseWIsc3RlcHMpIC0+XHJcblx0XHRyZXMgPSBcIlwiXHJcblx0XHR4ID0gWzAseGJdXHJcblx0XHR5ID0gWzAseWJdXHJcblx0XHRmb3IgaSBpbiByYW5nZSBzdGVwcy5sZW5ndGgtMSwtMSwtMVxyXG5cdFx0XHRzdGVwID0gc3RlcHNbaV1cclxuXHRcdFx0cyA9ICcnXHJcblx0XHRcdHMgKz0gZml4YSAnY2EnLHgsc3RlcFxyXG5cdFx0XHRzICs9IGZpeGEgJ2JkJyx5LHN0ZXBcclxuXHRcdFx0aWYgcyAhPSBcIlwiIHRoZW4gcmVzICs9IGkgKyBzXHJcblx0XHRyZXNcdFx0XHJcblxyXG5cdGZpeGEgPSAobGV0dGVycyxwYWlyLHN0ZXApIC0+XHJcblx0XHRyZXMgPSBcIlwiXHJcblx0XHRpZiBwYWlyWzBdIDwgcGFpclsxXSBcclxuXHRcdFx0d2hpbGUgcGFpclsxXS1wYWlyWzBdID4gc3RlcC8yXHJcblx0XHRcdFx0cGFpclswXSArPSBzdGVwXHJcblx0XHRcdFx0cmVzICs9IGxldHRlcnNbMV1cclxuXHRcdGVsc2VcclxuXHRcdFx0d2hpbGUgcGFpclswXS1wYWlyWzFdID4gc3RlcC8yXHJcblx0XHRcdFx0cGFpclswXSAtPSBzdGVwXHJcblx0XHRcdFx0cmVzICs9IGxldHRlcnNbMF1cclxuXHRcdHJlc1xyXG5cclxuXHRhc3NlcnQgcGF0aCgyLDUsWzEsMl0pLCBcIjFhZGQwZFwiXHJcblx0YXNzZXJ0IHBhdGgoMCw1LFsxLDJdKSwgXCIxZGQwZFwiXHJcblx0YXNzZXJ0IHBhdGgoMiwxLFsxLDVdKSwgXCIwYWFkXCJcclxuXHRhc3NlcnQgcGF0aCgxNSwxNCxbMSw1XSksIFwiMWFhYWRkZDBiXCJcclxuXHRhc3NlcnQgcGF0aCgxNSwxNSxbMSw1XSksIFwiMWFhYWRkZFwiXHJcblx0YXNzZXJ0IHBhdGgoMCwxNCxbMSw1XSksIFwiMWRkZDBiXCJcclxuXHRhc3NlcnQgcGF0aCgtMTQsMCxbMSw1XSksIFwiMWNjYzBhXCJcclxuXHRhc3NlcnQgcGF0aCgtMTUsMSxbMSw1XSksIFwiMWNjYzBkXCJcclxuXHRhc3NlcnQgcGF0aCgtMTYsLTEsWzEsNV0pLCBcIjFjY2MwY2JcIlxyXG5cclxuXHRhbGwgPSBbW04vMixOLzJdXS5jb25jYXQgYmVycmllc1xyXG5cdHBhdGhzID0ge31cclxuXHRmb3IgW3gxLHkxXSxpIGluIGFsbFxyXG5cdFx0Zm9yIFt4Mix5Ml0saiBpbiBhbGxcclxuXHRcdFx0cGF0aHNbaStcIixcIitqXSA9IHBhdGggeDIteDEsIHkyLXkxLCBzcGVlZHNcclxuXHQjcHJpbnQgcGF0aHNcclxuXHJcblx0Z2VuZXJhdGVQZXJtdXRhdGlvbiA9IChwZXJtLCBwcmUsIHBvc3QsIG4pIC0+XHJcblx0ICBpZiBuID4gMFxyXG5cdCAgICBmb3IgaSBpbiBbMC4uLnBvc3QubGVuZ3RoXVxyXG5cdCAgICAgIHJlc3QgPSBwb3N0LnNsaWNlIDBcclxuXHQgICAgICBlbGVtID0gcmVzdC5zcGxpY2UgaSwgMVxyXG5cdCAgICAgIGdlbmVyYXRlUGVybXV0YXRpb24gcGVybSwgcHJlLmNvbmNhdChlbGVtKSwgcmVzdCwgbiAtIDFcclxuXHQgIGVsc2VcclxuXHQgICAgcGVybS5wdXNoIHByZVxyXG5cdCAgcmV0dXJuXHJcblxyXG5cdEFycmF5OjpwZXJtdXRhdGlvbiA9IChuID0gQC5sZW5ndGgpIC0+XHJcblx0ICBwZXJtID0gW11cclxuXHQgIGdlbmVyYXRlUGVybXV0YXRpb24gcGVybSwgW10sIEAsIG5cclxuXHQgIHBlcm1cclxuXHJcblx0cGVybXV0YXRpb25zID0gWzEsMiwzLDQsNSw2LDcsOCw5LDEwXS5wZXJtdXRhdGlvbiAxMFxyXG5cclxuXHRiZXN0ID0gOTk5XHJcblx0Zm9yIHBlcm0gaW4gcGVybXV0YXRpb25zIFxyXG5cdFx0cGVybXV0YXRpb24gPSBbMF0uY29uY2F0IHBlcm1cclxuXHRcdGJpZ3BhdGggPSBbXVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgcGVybXV0YXRpb24ubGVuZ3RoLTFcclxuXHRcdFx0aTEgPSBwZXJtdXRhdGlvbltpXVxyXG5cdFx0XHRpMiA9IHBlcm11dGF0aW9uW2krMV1cclxuXHRcdFx0YmlncGF0aC5wdXNoIHBhdGhzW2kxK1wiLFwiK2kyXVxyXG5cdFx0cyA9IGJpZ3BhdGguam9pbihcIlwiKS5sZW5ndGggXHJcblx0XHRpZiBzIDwgYmVzdFxyXG5cdFx0XHRiZXN0ID0gc1xyXG5cdFx0XHRwcmludCBcIlwiXHJcblx0XHRcdHByaW50IHMsIHBlcm11dGF0aW9uXHJcblx0XHRcdHByaW50IGJpZ3BhdGhcclxuXHRcdFx0cHJpbnQgYmlncGF0aC5qb2luKFwiXCIpXHJcblxyXG5cdHByaW50IFwicmVhZHlcIlxyXG5cclxuIl19
//# sourceURL=C:\Lab\2017\029-PickingBerries\sketch.coffee