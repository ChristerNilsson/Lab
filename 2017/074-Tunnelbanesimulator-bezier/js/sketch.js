// Generated by CoffeeScript 1.11.1
var ASegment, BSegment, DT, LENGTH, MAX_ACC, MAX_SPEED, Station, Train, WIDTH, X0, Y0, changeScale, corr, draw, drawLine, factor, getPoint, memory, mouseDragged, mouseMoved, mousePressed, pause, ref, segments, setup, stations, totalDist, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

MAX_SPEED = 8;

MAX_ACC = 2;

LENGTH = 10;

WIDTH = 2;

DT = 0.02;

trains = [];

stations = [];

segments = [];

totalDist = 0;

pause = false;

factor = 1.0;

ref = [0, 0], X0 = ref[0], Y0 = ref[1];

memory = [0, 0];

getPoint = function(ss) {
  var j, len, s, segment;
  ss = modulo(ss, totalDist);
  s = ss + 0;
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    if (s <= segment.dist) {
      return segment.point(s);
    } else {
      s -= segment.dist;
    }
  }
};

drawLine = function(s1, s2) {
  var ref1, ref2, x1, x2, y1, y2;
  ref1 = getPoint(s1), x1 = ref1[0], y1 = ref1[1];
  ref2 = getPoint(s2), x2 = ref2[0], y2 = ref2[1];
  return line(x1, y1, x2, y2);
};

corr = function(a1, sp1, acc1, a2, sp2, security) {
  var d, distance;
  distance = security + sp1 * sp1 / 2 / MAX_ACC;
  d = a2 - a1;
  if (d < 0) {
    d += totalDist;
  }
  if (d <= distance) {
    return sp2 - sp1;
  } else {
    return MAX_ACC;
  }
};

Station = (function() {
  function Station(angle1, duration, speed1, acc2) {
    this.angle = angle1;
    this.duration = duration;
    this.speed = speed1 != null ? speed1 : 0;
    this.acc = acc2 != null ? acc2 : 0;
    this.angle *= totalDist;
  }

  Station.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, this.acc);
  };

  Station.prototype.draw = function() {
    fc();
    sc(0.1);
    sw(WIDTH);
    return drawLine(this.angle, this.angle - LENGTH);
  };

  return Station;

})();

Train = (function() {
  function Train(angle1, r, g, b, nextStation, nextTrain, maxSpeed, maxAcc, duration) {
    this.angle = angle1;
    this.r = r;
    this.g = g;
    this.b = b;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 10000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
    this.angle *= totalDist;
  }

  Train.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, 3 * LENGTH);
  };

  Train.prototype.update = function(nr) {
    var ds, dt, s, t;
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += totalDist;
    }
    if (ds < 0) {
      ds += totalDist;
    }
    if (this.state === 'Run') {
      if (ds < 0.1) {
        this.acc = 0;
        this.speed = 0;
        this.nextStart = millis() + this.duration;
        this.state = 'Stop';
      } else {
        this.s = stations[this.nextStation].correction(this.angle, this.speed, this.acc);
        this.t = trains[this.nextTrain].correction(this.angle, this.speed, this.acc);
        this.s = constrain(this.s, -1, 1);
        this.t = constrain(this.t, -1, 1);
        this.acc = _.min([this.s, this.t]);
      }
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, totalDist);
  };

  Train.prototype.draw = function(nr) {
    var y;
    this.update(nr);
    fc();
    sc(this.r, this.g, this.b);
    sw(WIDTH);
    drawLine(this.angle, this.angle - LENGTH);
    fc(this.r, this.g, this.b);
    y = 40 + 20 * nr;
    sc();
    text(this.state, 50, y);
    text(nf(this.acc, 0, 1), 100, y);
    text(round(this.angle), 150, y);
    text(nf(this.speed, 0, 1), 200, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 250, y);
    }
    return text(this.nextStation, 300, y);
  };

  return Train;

})();

ASegment = (function() {
  function ASegment(x11, y11, x21, y21) {
    this.x1 = x11;
    this.y1 = y11;
    this.x2 = x21;
    this.y2 = y21;
    this.dist = dist(this.x1, this.y1, this.x2, this.y2);
  }

  ASegment.prototype.point = function(d) {
    return [d / this.dist * this.x2 + (this.dist - d) / this.dist * this.x1, d / this.dist * this.y2 + (this.dist - d) / this.dist * this.y1];
  };

  ASegment.prototype.draw = function() {
    return line(this.x1, this.y1, this.x2, this.y2);
  };

  return ASegment;

})();

BSegment = (function() {
  function BSegment(x11, y11, x21, y21, x3, y31, x4, y4, steps) {
    var i, j, len, ref1, xa, xb, ya, yb;
    this.x1 = x11;
    this.y1 = y11;
    this.x2 = x21;
    this.y2 = y21;
    this.x3 = x3;
    this.y3 = y31;
    this.x4 = x4;
    this.y4 = y4;
    this.steps = steps != null ? steps : 10;
    this.dist = 0;
    ref1 = range(this.steps + 1);
    for (j = 0, len = ref1.length; j < len; j++) {
      i = ref1[j];
      xa = bezierPoint(this.x1, this.x2, this.x3, this.x4, i / this.steps);
      ya = bezierPoint(this.y1, this.y2, this.y3, this.y4, i / this.steps);
      xb = bezierPoint(this.x1, this.x2, this.x3, this.x4, (i + 1) / this.steps);
      yb = bezierPoint(this.y1, this.y2, this.y3, this.y4, (i + 1) / this.steps);
      this.dist += dist(xa, ya, xb, yb);
    }
  }

  BSegment.prototype.point = function(d) {
    return [bezierPoint(this.x1, this.x2, this.x3, this.x4, d / this.dist), bezierPoint(this.y1, this.y2, this.y3, this.y4, d / this.dist)];
  };

  BSegment.prototype.draw = function() {
    return bezier(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3, this.x4, this.y4);
  };

  return BSegment;

})();

setup = function() {
  var cnv, i, j, k, len, len1, ref1, segment, x0, x1, x2, y0, y1, y2, y3;
  cnv = createCanvas(800, 800);
  cnv.mouseWheel(changeScale);
  textSize(20);
  textAlign(RIGHT);
  frameRate(50);
  x0 = 320;
  x1 = 400;
  x2 = 480;
  y0 = -5;
  y1 = 95;
  y2 = 695 + 20;
  y3 = 795 + 20;
  sc(1);
  sw(1);
  segments.push(new BSegment(x0, y1, x0, y0, x2, y0, x2, y1));
  segments.push(new ASegment(x2, y1, x2, y2));
  segments.push(new BSegment(x2, y2, x2, y3, x0, y3, x0, y2));
  segments.push(new ASegment(x0, y2, x0, y1));
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    totalDist += segment.dist;
  }
  ref1 = range(48);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    stations.push(new Station(i / 48, 60));
  }
  trains.push(new Train(0.10, 1, 0, 0, 0, 1, MAX_SPEED * 1.5, MAX_ACC * 1.1, 5000));
  trains.push(new Train(0.30, 1, 1, 0, 1, 2));
  trains.push(new Train(0.50, 0, 1, 0, 2, 3));
  trains.push(new Train(0.70, 0, 1, 1, 3, 4));
  return trains.push(new Train(0.90, 0, 0, 1, 4, 0));
};

draw = function() {
  var i, j, k, l, len, len1, len2, results, segment, station, train, y;
  bg(0.5);
  translate(X0, Y0);
  scale(factor);
  sc(0);
  fc(1);
  sw(0);
  y = 20;
  text('state', 50, y);
  text('acc', 100, y);
  text('pos', 150, y);
  text('sp', 200, y);
  text('sec', 250, y);
  text('next', 300, y);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    sc(1);
    sw(2);
    fc();
    segment.draw();
  }
  for (k = 0, len1 = stations.length; k < len1; k++) {
    station = stations[k];
    station.draw();
  }
  results = [];
  for (i = l = 0, len2 = trains.length; l < len2; i = ++l) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mouseDragged = function() {
  X0 += mouseX - memory[0];
  Y0 += mouseY - memory[1];
  memory = [mouseX, mouseY];
  return print(X0, Y0);
};

mousePressed = function() {
  return memory = [mouseX, mouseY];
};

mouseMoved = function() {};

changeScale = function(event) {
  if (event.deltaY > 0) {
    factor /= 2;
    X0 = X0 + mouseX * factor;
    Y0 = Y0 + mouseY * factor;
  } else {
    X0 = X0 - mouseX * factor;
    Y0 = Y0 - mouseY * factor;
    factor *= 2;
  }
  return print(X0, Y0);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\074-Tunnelbanesimulator-bezier\coffee\sketch.coffee