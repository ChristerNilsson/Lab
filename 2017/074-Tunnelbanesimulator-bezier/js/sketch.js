// Generated by CoffeeScript 1.11.1
var DT, LENGTH, MAX_ACC, MAX_SPEED, R, Segment, Station, Train, X, Y, corr, draw, drawLine, getPoint, mousePressed, pause, segments, setup, stations, totalDist, trains,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

X = 400;

Y = 400;

R = 400;

MAX_SPEED = 4;

MAX_ACC = 1;

LENGTH = 5;

DT = 0.02;

trains = [];

stations = [];

segments = [];

totalDist = 0;

pause = false;

getPoint = function(s) {
  var j, len, segment;
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    if (s < segment.dist) {
      return segment.point(s);
    } else {
      s -= segment.dist;
    }
  }
};

drawLine = function(s1, s2) {
  var ref, ref1, x1, x2, y1, y2;
  ref = getPoint(s1 / 360 * totalDist), x1 = ref[0], y1 = ref[1];
  ref1 = getPoint(s2 / 360 * totalDist), x2 = ref1[0], y2 = ref1[1];
  return line(x1, y1, x2, y2);
};

corr = function(a1, sp1, acc1, a2, sp2, security) {
  var d, distance;
  distance = security + sp1 * sp1 / 2 / MAX_ACC;
  d = a2 - a1;
  if (d < 0) {
    d += 360;
  }
  if (d <= distance) {
    return sp2 - sp1;
  } else {
    return MAX_ACC;
  }
};

Station = (function() {
  function Station(angle1, duration, speed1, acc2) {
    this.angle = angle1;
    this.duration = duration;
    this.speed = speed1 != null ? speed1 : 0;
    this.acc = acc2 != null ? acc2 : 0;
  }

  Station.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, this.acc);
  };

  Station.prototype.draw = function() {
    fc();
    sc(0.1);
    sw(5);
    return drawLine(this.angle, this.angle - LENGTH);
  };

  return Station;

})();

Train = (function() {
  function Train(angle1, r, g, b, nextStation, nextTrain, maxSpeed, maxAcc, duration) {
    this.angle = angle1;
    this.r = r;
    this.g = g;
    this.b = b;
    this.nextStation = nextStation;
    this.nextTrain = nextTrain;
    this.maxSpeed = maxSpeed != null ? maxSpeed : MAX_SPEED;
    this.maxAcc = maxAcc != null ? maxAcc : MAX_ACC;
    this.duration = duration != null ? duration : 10000;
    this.state = 'Run';
    this.speed = 0;
    this.acc = this.maxAcc;
    this.nextStart = millis();
  }

  Train.prototype.correction = function(angle, speed, acc) {
    return corr(angle, speed, acc, this.angle, this.speed, 2 * LENGTH);
  };

  Train.prototype.update = function(nr) {
    var ds, dt, s, t;
    this.nr = nr;
    t = this.maxSpeed / this.maxAcc;
    s = this.maxAcc * t * t / 2;
    dt = trains[this.nextTrain].angle - this.angle;
    ds = stations[this.nextStation].angle - this.angle;
    if (dt < 0) {
      dt += 360;
    }
    if (ds < 0) {
      ds += 360;
    }
    if (this.state === 'Run') {
      if (ds < 0.1) {
        this.acc = 0;
        this.speed = 0;
        this.nextStart = millis() + this.duration;
        this.state = 'Stop';
      } else {
        this.s = stations[this.nextStation].correction(this.angle, this.speed, this.acc);
        this.t = trains[this.nextTrain].correction(this.angle, this.speed, this.acc);
        this.s = constrain(this.s, -1, 1);
        this.t = constrain(this.t, -1, 1);
        this.acc = _.min([this.s, this.t]);
      }
    } else {
      this.acc = 0;
      if (millis() > this.nextStart) {
        this.nextStation = (this.nextStation + 1) % stations.length;
        this.state = 'Run';
        this.acc = this.maxAcc;
      }
    }
    if (pause) {
      return;
    }
    this.speed += this.acc * DT;
    if (this.speed > this.maxSpeed) {
      this.acc = 0;
      this.speed = this.maxSpeed;
    }
    if (this.speed < 0) {
      this.speed = 0;
    }
    return this.angle = modulo(this.angle + this.speed * DT, 360);
  };

  Train.prototype.draw = function(nr) {
    var y;
    this.update(nr);
    fc();
    sc(this.r, this.g, this.b);
    sw(5);
    drawLine(this.angle, this.angle - LENGTH);
    fc(this.r, this.g, this.b);
    y = 300 + 30 * nr;
    sc();
    text(this.state, 200, y);
    text(nf(this.acc, 0, 1), 300, y);
    text(round(this.angle), 400, y);
    text(nf(this.speed, 0, 1), 500, y);
    if (this.nextStart > millis()) {
      text(round((this.nextStart - millis()) / 1000), 600, y);
    }
    return text(this.nextStation, 700, y);
  };

  return Train;

})();

Segment = (function() {
  function Segment(x11, y11, x21, y21, x31, y31, x41, y41, steps) {
    var i, j, len, ref, xa, xb, ya, yb;
    this.x1 = x11;
    this.y1 = y11;
    this.x2 = x21;
    this.y2 = y21;
    this.x3 = x31;
    this.y3 = y31;
    this.x4 = x41;
    this.y4 = y41;
    this.steps = steps != null ? steps : 32;
    this.dist = 0;
    ref = range(this.steps + 1);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      xa = bezierPoint(this.x1, this.x2, this.x3, this.x4, i / this.steps);
      ya = bezierPoint(this.y1, this.y2, this.y3, this.y4, i / this.steps);
      xb = bezierPoint(this.x1, this.x2, this.x3, this.x4, (i + 1) / this.steps);
      yb = bezierPoint(this.y1, this.y2, this.y3, this.y4, (i + 1) / this.steps);
      this.dist += dist(xa, ya, xb, yb);
    }
  }

  Segment.prototype.point = function(d) {
    return [bezierPoint(this.x1, this.x2, this.x3, this.x4, d / this.dist), bezierPoint(this.y1, this.y2, this.y3, this.y4, d / this.dist)];
  };

  Segment.prototype.draw = function() {
    return bezier(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3, this.x4, this.y4);
  };

  return Segment;

})();

setup = function() {
  var x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6;
  createCanvas(800, 800);
  textSize(20);
  textAlign(RIGHT);
  frameRate(50);
  stations.push(new Station(50, 60));
  stations.push(new Station(101, 60));
  stations.push(new Station(183, 60));
  stations.push(new Station(224, 60));
  stations.push(new Station(337, 60));
  trains.push(new Train(0, 1, 0, 0, 0, 1, MAX_SPEED * 1.5, MAX_ACC * 1.1, 5000));
  trains.push(new Train(75, 1, 1, 0, 1, 2));
  trains.push(new Train(135, 0, 1, 0, 2, 3));
  trains.push(new Train(220, 0, 1, 1, 3, 4));
  trains.push(new Train(260, 0, 0, 1, 4, 0));
  x1 = width / 2;
  y1 = 0;
  x2 = 1.164 * width;
  y2 = 0;
  x3 = 1.164 * width;
  y3 = height;
  x4 = width / 2;
  y4 = height;
  x5 = -0.164 * width;
  y5 = height;
  x6 = -0.164 * width;
  y6 = 0;
  segments.push(new Segment(x1, y1, x2, y2, x3, y3, x4, y4));
  segments.push(new Segment(x4, y4, x5, y5, x6, y6, x1, y1));
  totalDist = segments[0].dist + segments[1].dist;
  return print(totalDist);
};

draw = function() {
  var i, j, k, l, len, len1, len2, results, segment, station, train, y;
  bg(0.5);
  scale(0.9);
  sc(0);
  sw(1);
  fc(1);
  y = 270;
  fc(1);
  sc();
  sw(0);
  text('state', 200, y);
  text('acc', 300, y);
  text('angle', 400, y);
  text('speed', 500, y);
  text('sec', 600, y);
  text('next', 700, y);
  for (j = 0, len = segments.length; j < len; j++) {
    segment = segments[j];
    sc(1);
    sw(1);
    fc();
    segment.draw();
  }
  for (k = 0, len1 = stations.length; k < len1; k++) {
    station = stations[k];
    station.draw();
  }
  results = [];
  for (i = l = 0, len2 = trains.length; l < len2; i = ++l) {
    train = trains[i];
    results.push(train.draw(i));
  }
  return results;
};

mousePressed = function() {
  return pause = !pause;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\074-Tunnelbanesimulator-bezier\coffee\sketch.coffee