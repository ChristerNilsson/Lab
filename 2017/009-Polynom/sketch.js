// Generated by CoffeeScript 1.11.1
var Polynom, f, g, p1, p2, p3;

Polynom = (function() {
  function Polynom(lst1) {
    this.lst = lst1;
  }

  Polynom.prototype.add = function(other) {
    var h, i, j, k, len, len1, ref, ref1, value;
    h = [];
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      value = ref[i];
      h[i] = (h[i] || 0) + value;
    }
    ref1 = other.lst;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      value = ref1[i];
      h[i] = (h[i] || 0) + value;
    }
    return new Polynom(h);
  };

  Polynom.prototype.mul = function(other) {
    var h, i, i1, i2, j, k, len, len1, ref, ref1, value1, value2;
    h = (function() {
      var j, len, ref, results;
      ref = range(this.lst.length + other.lst.length - 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(0);
      }
      return results;
    }).call(this);
    ref = this.lst;
    for (i1 = j = 0, len = ref.length; j < len; i1 = ++j) {
      value1 = ref[i1];
      ref1 = other.lst;
      for (i2 = k = 0, len1 = ref1.length; k < len1; i2 = ++k) {
        value2 = ref1[i2];
        i = i1 + i2;
        h[i] = (h[i] || 0) + value1 * value2;
      }
    }
    return new Polynom(h);
  };

  Polynom.prototype.power = function(n) {
    var i, j, len, ref, res;
    res = new Polynom([1]);
    ref = range(n);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      res = res.mul(this);
    }
    return res;
  };

  Polynom.prototype.compose = function(other) {
    var i, j, len, ref, res, value;
    res = new Polynom([]);
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      value = ref[i];
      res = res.add((new Polynom([value])).mul(other.power(i)));
    }
    return res;
  };

  Polynom.prototype.value = function(x) {
    var i, j, len, ref, res, value;
    res = 0;
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      value = ref[i];
      res += value * Math.pow(x, i);
    }
    return res;
  };

  Polynom.prototype.diff = function() {
    var i, j, len, lst, ref, value;
    lst = [];
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      value = ref[i];
      if (i !== 0) {
        lst[i - 1] = i * value;
      }
    }
    return new Polynom(lst);
  };

  Polynom.prototype.integ = function() {
    var i, j, len, lst, ref, value;
    lst = [0];
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      value = ref[i];
      i += 1;
      lst[i] = value / i;
    }
    return new Polynom(lst);
  };

  Polynom.prototype.to_s = function() {
    var arr, i, item, j, len, ref;
    arr = [];
    ref = this.lst;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      if (item === 0) {
        continue;
      }
      if (item === 1) {
        if (i === 0) {
          arr.push("1");
        } else if (i === 1) {
          arr.push("x");
        } else {
          arr.push("x^" + i);
        }
      } else {
        if (i === 0) {
          arr.push("" + item);
        } else if (i === 1) {
          arr.push(item + "*x");
        } else {
          arr.push(item + "*x^" + i);
        }
      }
    }
    arr.reverse();
    return arr.join("+");
  };

  return Polynom;

})();

p1 = new Polynom([5, 4, 3]);

p2 = new Polynom([4, 3]);

p3 = new Polynom([0, 0, 1]);

assert(p1.lst, [5, 4, 3]);

assert(p1.to_s(), "3*x^2+4*x+5");

assert(p1.add(p2).to_s(), "3*x^2+7*x+9");

assert(p1.mul(p2).to_s(), "9*x^3+24*x^2+31*x+20");

assert(p1.value(2), 25);

assert(p1.diff().lst, [4, 6]);

assert(p1.integ().lst, [0, 5, 2, 1]);

assert(p3.to_s(), "x^2");

assert(p3.integ().to_s(), "0.3333333333333333*x^3");

assert(p3.integ().value(3), 9);

assert(p1.power(2).lst, [25, 40, 46, 24, 9]);

assert(p2.power(3).lst, [64, 144, 108, 27]);

f = new Polynom([3, 2]);

g = new Polynom([5, 0, -1]);

assert(f.compose(f).lst, [9, 4]);

assert(f.compose(g).lst, [13, 0, -2]);

assert(g.compose(f).lst, [-4, -12, -4]);

assert(g.compose(g).lst, [-20, 0, 10, 0, -1]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\009-Polynom\sketch.coffee