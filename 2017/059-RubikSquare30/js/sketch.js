// Generated by CoffeeScript 1.11.1
var Button, RS30, START, buttons, draw, mousePressed, rs, setup,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

rs = null;

buttons = [];

START = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5];

Button = (function() {
  function Button(x, y, action) {
    this.x = x;
    this.y = y;
    this.action = action != null ? action : function() {};
  }

  Button.prototype.draw = function(col) {
    var b, g, r, ref;
    ref = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1]][col], r = ref[0], g = ref[1], b = ref[2];
    fc(r, g, b);
    return rect(this.x, this.y, 100, 100);
  };

  Button.prototype.inside = function(mx, my) {
    return (this.x < mx && mx < this.x + 100) && (this.y < my && my < this.y + 100);
  };

  return Button;

})();

RS30 = (function() {
  function RS30() {
    this.level = 0;
    this.generate();
    this.square = START;
    this.startNewGame(1);
  }

  RS30.prototype.draw = function() {
    var index, k, l, len, ref;
    textAlign(CENTER, CENTER);
    textSize(50);
    ref = [6, 7, 8, 11, 12, 13, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 9, 14, 19, 23, 22, 21, 15, 10, 5];
    for (k = l = 0, len = ref.length; l < len; k = ++l) {
      index = ref[k];
      if (index !== 0) {
        buttons[index].draw(this.square[k]);
      }
    }
    fc(0);
    return text(this.level - this.history.length, 250, 250);
  };

  RS30.prototype.startNewGame = function(dlevel) {
    this.state = 0;
    if (this.level < 8) {
      this.level += dlevel;
    }
    this.history = [];
    return this.square = _.sample(this.positions[this.level]);
  };

  RS30.prototype.mousePressed = function(mx, my) {
    var button, l, len, results;
    if (this.state > 0) {
      return this.startNewGame(this.state - 1);
    } else {
      results = [];
      for (l = 0, len = buttons.length; l < len; l++) {
        button = buttons[l];
        if (button.inside(mx, my)) {
          results.push(button.action());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  RS30.prototype.undo = function() {
    if (this.history.length > 0) {
      return this.square = this.history.pop();
    }
  };

  RS30.prototype.move = function(index) {
    this.history.push(this.square);
    this.square = this.moveOne(index, this.square);
    if (_.isEqual(this.square, START)) {
      return this.state = this.level === this.history.length ? 2 : void 0;
    } else {
      return 1;
    }
  };

  RS30.prototype.moveOne = function(index, square) {
    if (index === 0) {
      return this.gen(square, [[0, 11], [1, 10], [2, 9], [21, 29], [18, 20]]);
    }
    if (index === 1) {
      return this.gen(square, [[0, 15], [3, 12], [6, 9], [18, 26], [27, 29]]);
    }
    if (index === 2) {
      return this.gen(square, [[2, 17], [5, 14], [8, 11], [20, 24], [21, 23]]);
    }
    if (index === 3) {
      return this.gen(square, [[6, 17], [7, 16], [8, 15], [23, 27], [24, 26]]);
    }
  };

  RS30.prototype.generate = function() {
    var generation, hash, i, key, l, len, queue, ref, res, results, sq, square;
    this.positions = [[], [], [], [], [], [], [], [], []];
    hash = {};
    queue = [];
    sq = START;
    this.positions[0].push(sq);
    queue.push(sq);
    hash[sq.join('')] = 0;
    results = [];
    while (queue.length > 0) {
      square = queue.shift();
      generation = hash[square.join('')];
      res = [];
      ref = range(4);
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        res.push(this.moveOne(i, square));
      }
      results.push((function() {
        var len1, m, results1;
        results1 = [];
        for (m = 0, len1 = res.length; m < len1; m++) {
          sq = res[m];
          key = sq.join('');
          if (indexOf.call(_.keys(hash), key) < 0) {
            hash[key] = generation + 1;
            this.positions[generation + 1].push(sq);
            results1.push(queue.push(sq));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  RS30.prototype.gen = function(square, moves) {
    var i, j, l, len, ref, ref1, res;
    res = square.slice();
    for (l = 0, len = moves.length; l < len; l++) {
      ref = moves[l], i = ref[0], j = ref[1];
      ref1 = [res[j], res[i]], res[i] = ref1[0], res[j] = ref1[1];
    }
    return res;
  };

  return RS30;

})();

setup = function() {
  var i, j, l, len, len1, m, ref, ref1;
  createCanvas(501, 501);
  buttons = [];
  ref = range(5);
  for (l = 0, len = ref.length; l < len; l++) {
    j = ref[l];
    ref1 = range(5);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      buttons.push(new Button(100 * j, 100 * i));
    }
  }
  buttons[7].action = function() {
    return rs.move(0);
  };
  buttons[11].action = function() {
    return rs.move(1);
  };
  buttons[13].action = function() {
    return rs.move(2);
  };
  buttons[17].action = function() {
    return rs.move(3);
  };
  buttons[12].action = function() {
    return rs.undo();
  };
  return rs = new RS30;
};

draw = function() {
  return rs.draw();
};

mousePressed = function() {
  return rs.mousePressed(mouseX, mouseY);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLElBQUEsMkRBQUE7RUFBQTs7QUFBQSxFQUFBLEdBQUs7O0FBQ0wsT0FBQSxHQUFVOztBQUNWLEtBQUEsR0FBUSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFRLENBQVIsRUFBVSxDQUFWLEVBQVksQ0FBWixFQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBK0IsQ0FBL0IsRUFBaUMsQ0FBakMsRUFBb0MsQ0FBcEMsRUFBc0MsQ0FBdEMsRUFBd0MsQ0FBeEMsRUFBMkMsQ0FBM0MsRUFBNkMsQ0FBN0MsRUFBK0MsQ0FBL0MsRUFBa0QsQ0FBbEQsRUFBb0QsQ0FBcEQsRUFBc0QsQ0FBdEQsRUFBeUQsQ0FBekQsRUFBMkQsQ0FBM0QsRUFBNkQsQ0FBN0QsRUFBZ0UsQ0FBaEUsRUFBa0UsQ0FBbEUsRUFBb0UsQ0FBcEU7O0FBRUY7RUFDUyxnQkFBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVA7SUFBQyxJQUFDLENBQUEsSUFBRDtJQUFHLElBQUMsQ0FBQSxJQUFEO0lBQUcsSUFBQyxDQUFBLDBCQUFELFNBQVUsU0FBQSxHQUFBO0VBQWpCOzttQkFDZCxJQUFBLEdBQU8sU0FBQyxHQUFEO0FBQ04sUUFBQTtJQUFBLE1BQVUsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFELEVBQVMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsQ0FBVCxFQUFpQixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFqQixFQUF5QixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUF6QixFQUFpQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxDQUFq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Q0FBQSxFQUFBLENBQUcsQ0FBQyxNQUFaLEdBQXFCLFNBQUE7V0FBRyxFQUFFLENBQUMsSUFBSCxDQUFBO0VBQUg7U0FDckIsRUFBQSxHQUFLLElBQUk7QUFYRjs7QUFhUixJQUFBLEdBQU8sU0FBQTtTQUFHLEVBQUUsQ0FBQyxJQUFILENBQUE7QUFBSDs7QUFDUCxZQUFBLEdBQWUsU0FBQTtTQUFHLEVBQUUsQ0FBQyxZQUFILENBQWdCLE1BQWhCLEVBQXVCLE1BQXZCO0FBQUgiLCJzb3VyY2VzQ29udGVudCI6WyIjIDN4M3gxLCB0dsOlIHNpZG9yLCAxOTIgcG9zaXRpb25lci4gTWF4IDggZHJhZy5cclxuIyAzeDN4MiArIDR4MyA9IDMwIHRpbGVzXHJcbiMgaHR0cDovL25ld3MubWl0LmVkdS8yMDExL3J1Ymlrcy1jdWJlLTA2MjlcclxuXHJcbnJzID0gbnVsbFxyXG5idXR0b25zID0gW11cclxuU1RBUlQgPSBbMCwwLDAsIDAsMCwwLCAwLDAsMCwgMSwxLDEsIDEsMSwxLCAxLDEsMSwgMiwyLDIsIDMsMywzLCA0LDQsNCwgNSw1LDVdXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAYWN0aW9uID0gLT4gKSAtPlxyXG5cdGRyYXcgOiAoY29sKSAtPlxyXG5cdFx0W3IsZyxiXSA9IFtbMSwwLDBdLFsxLDEsMF0sWzAsMSwwXSxbMCwwLDFdLFsxLDAsMV0sWzAsMSwxXV1bY29sXVxyXG5cdFx0ZmMgcixnLGJcclxuXHRcdHJlY3QgQHgsQHksMTAwLDEwMFxyXG5cdGluc2lkZSA6IChteCxteSkgLT4gQHggPCBteCA8IEB4KzEwMCBhbmQgQHkgPCBteSA8IEB5KzEwMFxyXG5cclxuY2xhc3MgUlMzMFxyXG5cdGNvbnN0cnVjdG9yIDogKCkgLT5cclxuXHRcdEBsZXZlbCA9IDBcclxuXHRcdEBnZW5lcmF0ZSgpXHJcblx0XHRAc3F1YXJlID0gU1RBUlRcclxuXHRcdEBzdGFydE5ld0dhbWUgMVxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSA1MFxyXG5cdFx0Zm9yIGluZGV4LGsgaW4gWzYsNyw4LCAxMSwxMiwxMywgMTYsMTcsMTgsIDAsMCwwLCAwLDAsMCwgMCwwLDAsIDEsMiwzLCA5LDE0LDE5LCAyMywyMiwyMSwgMTUsMTAsNV1cclxuXHRcdFx0aWYgaW5kZXghPTAgdGhlbiBidXR0b25zW2luZGV4XS5kcmF3IEBzcXVhcmVba11cclxuXHRcdGZjIDBcclxuXHRcdHRleHQgQGxldmVsIC0gQGhpc3RvcnkubGVuZ3RoLDI1MCwyNTBcclxuXHJcblx0c3RhcnROZXdHYW1lIDogKGRsZXZlbCkgLT5cclxuXHRcdEBzdGF0ZSA9IDBcclxuXHRcdGlmIEBsZXZlbCA8IDggdGhlbiBAbGV2ZWwgKz0gZGxldmVsXHJcblx0XHRAaGlzdG9yeSA9IFtdXHJcblx0XHRAc3F1YXJlID0gXy5zYW1wbGUgQHBvc2l0aW9uc1tAbGV2ZWxdXHJcblxyXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cclxuXHRcdGlmIEBzdGF0ZSA+IDAgdGhlbiBAc3RhcnROZXdHYW1lIEBzdGF0ZS0xXHJcblx0XHRlbHNlXHJcblx0XHRcdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0XHRcdGlmIGJ1dHRvbi5pbnNpZGUgbXgsbXkgdGhlblx0YnV0dG9uLmFjdGlvbigpXHJcblxyXG5cdHVuZG8gOiAtPiBpZiBAaGlzdG9yeS5sZW5ndGggPiAwIHRoZW4gQHNxdWFyZSA9IEBoaXN0b3J5LnBvcCgpXHJcblxyXG5cdG1vdmUgOiAoaW5kZXgpIC0+XHJcblx0XHRAaGlzdG9yeS5wdXNoIEBzcXVhcmVcclxuXHRcdEBzcXVhcmUgPSBAbW92ZU9uZSBpbmRleCwgQHNxdWFyZVxyXG5cdFx0aWYgXy5pc0VxdWFsIEBzcXVhcmUsU1RBUlQgdGhlbiBAc3RhdGUgPSBpZiBAbGV2ZWw9PUBoaXN0b3J5Lmxlbmd0aCB0aGVuIDIgZWxzZSAxXHJcblxyXG5cdG1vdmVPbmUgOiAoaW5kZXgsc3F1YXJlKSAtPlxyXG5cdFx0aWYgaW5kZXggPT0gMCB0aGVuIHJldHVybiBAZ2VuIHNxdWFyZSxbWzAsMTFdLFsxLDEwXSxbMiw5XSxbMjEsMjldLFsxOCwyMF1dXHJcblx0XHRpZiBpbmRleCA9PSAxIHRoZW4gcmV0dXJuIEBnZW4gc3F1YXJlLFtbMCwxNV0sWzMsMTJdLFs2LDldLFsxOCwyNl0sWzI3LDI5XV1cclxuXHRcdGlmIGluZGV4ID09IDIgdGhlbiByZXR1cm4gQGdlbiBzcXVhcmUsW1syLDE3XSxbNSwxNF0sWzgsMTFdLFsyMCwyNCxdLFsyMSwyM11dXHJcblx0XHRpZiBpbmRleCA9PSAzIHRoZW4gcmV0dXJuIEBnZW4gc3F1YXJlLFtbNiwxN10sWzcsMTZdLFs4LDE1XSxbMjMsMjddLFsyNCwyNl1dXHJcblxyXG5cdGdlbmVyYXRlIDogKCkgLT5cclxuXHRcdEBwb3NpdGlvbnMgPSBbW10sW10sW10sW10sW10sW10sW10sW10sW11dXHJcblx0XHRoYXNoID0ge31cclxuXHRcdHF1ZXVlID0gW11cclxuXHRcdHNxID0gU1RBUlRcclxuXHRcdEBwb3NpdGlvbnNbMF0ucHVzaCBzcVxyXG5cdFx0cXVldWUucHVzaCBzcVxyXG5cdFx0aGFzaFtzcS5qb2luICcnXSA9IDAgI1snJywwXVxyXG5cdFx0d2hpbGUgcXVldWUubGVuZ3RoID4gMFxyXG5cdFx0XHRzcXVhcmUgPSBxdWV1ZS5zaGlmdCgpXHJcblx0XHRcdGdlbmVyYXRpb24gPSBoYXNoW3NxdWFyZS5qb2luICcnXVxyXG5cdFx0XHRyZXMgPSBbXVxyXG5cdFx0XHRmb3IgaSBpbiByYW5nZSA0XHJcblx0XHRcdFx0cmVzLnB1c2ggQG1vdmVPbmUgaSwgc3F1YXJlXHJcblx0XHRcdGZvciBzcSBpbiByZXNcclxuXHRcdFx0XHRrZXkgPSBzcS5qb2luICcnXHJcblx0XHRcdFx0aWYga2V5IG5vdCBpbiBfLmtleXMgaGFzaFxyXG5cdFx0XHRcdFx0aGFzaFtrZXldID0gZ2VuZXJhdGlvbiArIDFcclxuXHRcdFx0XHRcdEBwb3NpdGlvbnNbZ2VuZXJhdGlvbiArIDFdLnB1c2ggc3FcclxuXHRcdFx0XHRcdHF1ZXVlLnB1c2ggc3FcclxuXHJcblx0Z2VuIDogKHNxdWFyZSxtb3ZlcykgLT5cclxuXHRcdHJlcyA9IHNxdWFyZS5zbGljZSgpXHJcblx0XHRmb3IgW2ksal0gaW4gbW92ZXNcclxuXHRcdFx0W3Jlc1tpXSxyZXNbal1dID0gW3Jlc1tqXSxyZXNbaV1dXHJcblx0XHRyZXNcclxuXHJcbnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgNTAxLDUwMVxyXG5cdGJ1dHRvbnMgPSBbXVxyXG5cdGZvciBqIGluIHJhbmdlIDVcclxuXHRcdGZvciBpIGluIHJhbmdlIDVcclxuXHRcdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gMTAwKmosMTAwKmlcclxuXHRidXR0b25zWyA3XS5hY3Rpb24gPSAtPiBycy5tb3ZlIDBcclxuXHRidXR0b25zWzExXS5hY3Rpb24gPSAtPiBycy5tb3ZlIDFcclxuXHRidXR0b25zWzEzXS5hY3Rpb24gPSAtPiBycy5tb3ZlIDJcclxuXHRidXR0b25zWzE3XS5hY3Rpb24gPSAtPiBycy5tb3ZlIDNcclxuXHRidXR0b25zWzEyXS5hY3Rpb24gPSAtPiBycy51bmRvKClcclxuXHRycyA9IG5ldyBSUzMwXHJcblxyXG5kcmF3ID0gLT4gcnMuZHJhdygpXHJcbm1vdXNlUHJlc3NlZCA9IC0+IHJzLm1vdXNlUHJlc3NlZCBtb3VzZVgsbW91c2VZIl19
//# sourceURL=C:\Lab\2017\059-RubikSquare30\coffee\sketch.coffee