// Generated by CoffeeScript 1.12.7
var Button, RS30, START, buttons, draw, mousePressed, mouseReleased, released, rs, setup, sida,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

rs = null;

buttons = [];

sida = null;

released = true;

START = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5];

Button = (function() {
  function Button(x, y, action) {
    this.x = x;
    this.y = y;
    this.action = action != null ? action : function() {};
  }

  Button.prototype.draw = function(col) {
    var b, g, r, ref;
    ref = [[1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1]][col], r = ref[0], g = ref[1], b = ref[2];
    fc(r, g, b);
    return rect(this.x, this.y, sida, sida);
  };

  Button.prototype.inside = function(mx, my) {
    return (this.x - sida / 2 < mx && mx < this.x + sida / 2) && (this.y - sida / 2 < my && my < this.y + sida / 2);
  };

  return Button;

})();

RS30 = (function() {
  function RS30() {
    this.level = 0;
    this.generate();
    this.square = START;
    this.startNewGame(1);
  }

  RS30.prototype.draw = function() {
    var index, k, l, len, ref;
    textAlign(CENTER, CENTER);
    textSize(50);
    ref = [6, 7, 8, 11, 12, 13, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 9, 14, 19, 23, 22, 21, 15, 10, 5];
    for (k = l = 0, len = ref.length; l < len; k = ++l) {
      index = ref[k];
      if (index !== 0) {
        buttons[index].draw(this.square[k]);
      }
    }
    fc(0);
    return text(this.level - this.history.length, width / 2, height / 2);
  };

  RS30.prototype.startNewGame = function(dlevel) {
    this.state = 0;
    if (this.level < 8) {
      this.level += dlevel;
    }
    this.history = [];
    return this.square = _.sample(this.positions[this.level]);
  };

  RS30.prototype.mousePressed = function(mx, my) {
    var button, l, len, results;
    if (this.state > 0) {
      return this.startNewGame(this.state - 1);
    } else {
      results = [];
      for (l = 0, len = buttons.length; l < len; l++) {
        button = buttons[l];
        if (button.inside(mx, my)) {
          results.push(button.action());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  RS30.prototype.undo = function() {
    if (this.history.length > 0) {
      return this.square = this.history.pop();
    }
  };

  RS30.prototype.move = function(index) {
    this.history.push(this.square);
    this.square = this.moveOne(index, this.square);
    if (_.isEqual(this.square, START)) {
      return this.state = this.level === this.history.length ? 2 : void 0;
    } else {
      return 1;
    }
  };

  RS30.prototype.moveOne = function(index, square) {
    if (index === 0) {
      return this.gen(square, [[0, 11], [1, 10], [2, 9], [21, 29], [18, 20]]);
    }
    if (index === 1) {
      return this.gen(square, [[0, 15], [3, 12], [6, 9], [18, 26], [27, 29]]);
    }
    if (index === 2) {
      return this.gen(square, [[2, 17], [5, 14], [8, 11], [20, 24], [21, 23]]);
    }
    if (index === 3) {
      return this.gen(square, [[6, 17], [7, 16], [8, 15], [23, 27], [24, 26]]);
    }
  };

  RS30.prototype.generate = function() {
    var generation, hash, i, key, l, len, queue, ref, res, results, sq, square;
    this.positions = [[], [], [], [], [], [], [], [], []];
    hash = {};
    queue = [];
    sq = START;
    this.positions[0].push(sq);
    queue.push(sq);
    hash[sq.join('')] = 0;
    results = [];
    while (queue.length > 0) {
      square = queue.shift();
      generation = hash[square.join('')];
      res = [];
      ref = range(4);
      for (l = 0, len = ref.length; l < len; l++) {
        i = ref[l];
        res.push(this.moveOne(i, square));
      }
      results.push((function() {
        var len1, m, results1;
        results1 = [];
        for (m = 0, len1 = res.length; m < len1; m++) {
          sq = res[m];
          key = sq.join('');
          if (indexOf.call(_.keys(hash), key) < 0) {
            hash[key] = generation + 1;
            this.positions[generation + 1].push(sq);
            results1.push(queue.push(sq));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  RS30.prototype.gen = function(square, moves) {
    var i, j, l, len, ref, ref1, res;
    res = square.slice();
    for (l = 0, len = moves.length; l < len; l++) {
      ref = moves[l], i = ref[0], j = ref[1];
      ref1 = [res[j], res[i]], res[i] = ref1[0], res[j] = ref1[1];
    }
    return res;
  };

  return RS30;

})();

setup = function() {
  var i, j, l, len, len1, m, ref, ref1;
  createCanvas(windowWidth, windowHeight);
  rectMode(CENTER);
  buttons = [];
  sida = min(width, height) / 6;
  ref = range(5);
  for (l = 0, len = ref.length; l < len; l++) {
    j = ref[l];
    ref1 = range(5);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      buttons.push(new Button(width / 2 + sida * (j - 2), height / 2 + sida * (i - 2)));
    }
  }
  buttons[7].action = function() {
    return rs.move(0);
  };
  buttons[11].action = function() {
    return rs.move(1);
  };
  buttons[13].action = function() {
    return rs.move(2);
  };
  buttons[17].action = function() {
    return rs.move(3);
  };
  buttons[12].action = function() {
    return rs.undo();
  };
  return rs = new RS30;
};

draw = function() {
  return rs.draw();
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  if (!released) {
    return;
  }
  released = false;
  return rs.mousePressed(mouseX, mouseY);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\059-RubikSquare30\coffee\sketch.coffee