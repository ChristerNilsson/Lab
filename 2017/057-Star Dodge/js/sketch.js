// Generated by CoffeeScript 1.11.1
var StarDodge, draw, setup, stardodge;

stardodge = null;

StarDodge = (function() {
  function StarDodge(level, delta) {
    this.level = level != null ? level : 0;
    this.delta = delta != null ? delta : 50;
    this.startNewGame(1);
  }

  StarDodge.prototype.startNewGame = function(dlevel) {
    var i, j, k, len, len1, len2, ref, ref1, ref2, ref3, ref4, x, y;
    if (dlevel === 1) {
      this.stars = [];
      ref = range(this.delta, width, this.delta);
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        ref1 = range(this.delta, height, this.delta);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          y = ref1[j];
          this.stars.push([x + int(random(-this.delta / 4, this.delta / 4)), y + int(random(-this.delta / 4, this.delta / 4))]);
        }
      }
    }
    this.level += dlevel;
    ref2 = [0, height / 2], this.x = ref2[0], this.y = ref2[1];
    bg(0.5);
    sc(0);
    ref3 = this.stars;
    for (k = 0, len2 = ref3.length; k < len2; k++) {
      ref4 = ref3[k], x = ref4[0], y = ref4[1];
      circle(x, y, this.level);
    }
    return rect(width - 3, 0.4 * height, 2, 0.2 * height);
  };

  StarDodge.prototype.draw = function() {
    var i, len, ref, ref1, ref2, ref3, x, y;
    ref = [this.x + 1, this.y + (keyIsDown(32) ? 1 : -1)], this.x = ref[0], this.y = ref[1];
    sc(1);
    point(this.x, this.y);
    if (this.x > width && (0.4 * height < (ref1 = this.y) && ref1 < 0.6 * height)) {
      return this.startNewGame(1);
    }
    if (this.y < 0 || this.y > height || this.x > width) {
      return this.startNewGame(0);
    }
    ref2 = this.stars;
    for (i = 0, len = ref2.length; i < len; i++) {
      ref3 = ref2[i], x = ref3[0], y = ref3[1];
      if (dist(this.x, this.y, x, y) < this.level) {
        return this.startNewGame(0);
      }
    }
  };

  return StarDodge;

})();

setup = function() {
  createCanvas(windowWidth, windowHeight);
  return stardodge = new StarDodge;
};

draw = function() {
  return stardodge.draw();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLElBQUE7O0FBQUEsU0FBQSxHQUFZOztBQUNOO0VBQ1MsbUJBQUMsS0FBRCxFQUFXLEtBQVg7SUFBQyxJQUFDLENBQUEsd0JBQUQsUUFBTztJQUFHLElBQUMsQ0FBQSx3QkFBRCxRQUFPO0lBQU8sSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkO0VBQXpCOztzQkFDZCxZQUFBLEdBQWUsU0FBQyxNQUFEO0FBQ2QsUUFBQTtJQUFBLElBQUcsTUFBQSxLQUFRLENBQVg7TUFDQyxJQUFDLENBQUEsS0FBRCxHQUFTO0FBQ1Q7QUFBQSxXQUFBLHFDQUFBOztBQUNDO0FBQUEsYUFBQSx3Q0FBQTs7VUFDQyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxDQUFDLENBQUEsR0FBSSxHQUFBLENBQUksTUFBQSxDQUFPLENBQUMsSUFBQyxDQUFBLEtBQUYsR0FBUSxDQUFmLEVBQWlCLElBQUMsQ0FBQSxLQUFELEdBQU8sQ0FBeEIsQ0FBSixDQUFMLEVBQXNDLENBQUEsR0FBSSxHQUFBLENBQUksTUFBQSxDQUFPLENBQUMsSUFBQyxDQUFBLEtBQUYsR0FBUSxDQUFmLEVBQWlCLElBQUMsQ0FBQSxLQUFELEdBQU8sQ0FBeEIsQ0FBSixDQUExQyxDQUFaO0FBREQ7QUFERCxPQUZEOztJQUtBLElBQUMsQ0FBQSxLQUFELElBQVU7SUFDVixPQUFVLENBQUMsQ0FBRCxFQUFHLE1BQUEsR0FBTyxDQUFWLENBQVYsRUFBQyxJQUFDLENBQUEsV0FBRixFQUFJLElBQUMsQ0FBQTtJQUNMLEVBQUEsQ0FBRyxHQUFIO0lBQ0EsRUFBQSxDQUFHLENBQUg7QUFDQTtBQUFBLFNBQUEsd0NBQUE7c0JBQUssYUFBRTtNQUNOLE1BQUEsQ0FBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLElBQUMsQ0FBQSxLQUFaO0FBREQ7V0FFQSxJQUFBLENBQUssS0FBQSxHQUFNLENBQVgsRUFBYSxHQUFBLEdBQUksTUFBakIsRUFBd0IsQ0FBeEIsRUFBMEIsR0FBQSxHQUFJLE1BQTlCO0VBWmM7O3NCQWFmLElBQUEsR0FBTyxTQUFBO0FBQ04sUUFBQTtJQUFBLE1BQVUsQ0FBQyxJQUFDLENBQUEsQ0FBRCxHQUFHLENBQUosRUFBTyxJQUFDLENBQUEsQ0FBRCxHQUFLLENBQUcsU0FBQSxDQUFVLEVBQVYsQ0FBSCxHQUFxQixDQUFyQixHQUE0QixDQUFDLENBQTdCLENBQVosQ0FBVixFQUFDLElBQUMsQ0FBQSxVQUFGLEVBQUksSUFBQyxDQUFBO0lBQ0wsRUFBQSxDQUFHLENBQUg7SUFDQSxLQUFBLENBQU0sSUFBQyxDQUFBLENBQVAsRUFBUyxJQUFDLENBQUEsQ0FBVjtJQUNBLElBQUcsSUFBQyxDQUFBLENBQUQsR0FBSyxLQUFMLElBQWUsQ0FBQSxHQUFBLEdBQUksTUFBSixXQUFhLElBQUMsQ0FBQSxFQUFkLFFBQUEsR0FBa0IsR0FBQSxHQUFJLE1BQXRCLENBQWxCO0FBQW9ELGFBQU8sSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkLEVBQTNEOztJQUNBLElBQUcsSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFILElBQVEsSUFBQyxDQUFBLENBQUQsR0FBRyxNQUFYLElBQXFCLElBQUMsQ0FBQSxDQUFELEdBQUcsS0FBM0I7QUFBc0MsYUFBTyxJQUFDLENBQUEsWUFBRCxDQUFjLENBQWQsRUFBN0M7O0FBQ0E7QUFBQSxTQUFBLHNDQUFBO3NCQUFLLGFBQUU7TUFDTixJQUFHLElBQUEsQ0FBSyxJQUFDLENBQUEsQ0FBTixFQUFRLElBQUMsQ0FBQSxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsQ0FBQSxHQUFrQixJQUFDLENBQUEsS0FBdEI7QUFBaUMsZUFBTyxJQUFDLENBQUEsWUFBRCxDQUFjLENBQWQsRUFBeEM7O0FBREQ7RUFOTTs7Ozs7O0FBUVIsS0FBQSxHQUFRLFNBQUE7RUFDUCxZQUFBLENBQWEsV0FBYixFQUF5QixZQUF6QjtTQUNBLFNBQUEsR0FBWSxJQUFJO0FBRlQ7O0FBR1IsSUFBQSxHQUFPLFNBQUE7U0FBRyxTQUFTLENBQUMsSUFBVixDQUFBO0FBQUgiLCJzb3VyY2VzQ29udGVudCI6WyIjIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWYzMS9zdGFyLWRvZGdlLWNsb25lIDIwMCBMT0NcclxuIyBodHRwczovL3J1bmVsbS5pby9jL3U0eSA0MDAgTE9DXHJcbnN0YXJkb2RnZSA9IG51bGxcclxuY2xhc3MgU3RhckRvZGdlXHJcblx0Y29uc3RydWN0b3IgOiAoQGxldmVsPTAsIEBkZWx0YT01MCkgLT4gQHN0YXJ0TmV3R2FtZSAxXHJcblx0c3RhcnROZXdHYW1lIDogKGRsZXZlbCkgLT5cclxuXHRcdGlmIGRsZXZlbD09MVxyXG5cdFx0XHRAc3RhcnMgPSBbXVxyXG5cdFx0XHRmb3IgeCBpbiByYW5nZSBAZGVsdGEsd2lkdGgsQGRlbHRhXHJcblx0XHRcdFx0Zm9yIHkgaW4gcmFuZ2UgQGRlbHRhLGhlaWdodCxAZGVsdGFcclxuXHRcdFx0XHRcdEBzdGFycy5wdXNoIFt4ICsgaW50KHJhbmRvbSgtQGRlbHRhLzQsQGRlbHRhLzQpKSwgeSArIGludChyYW5kb20oLUBkZWx0YS80LEBkZWx0YS80KSldXHJcblx0XHRAbGV2ZWwgKz0gZGxldmVsXHJcblx0XHRbQHgsQHldID0gWzAsaGVpZ2h0LzJdXHJcblx0XHRiZyAwLjVcclxuXHRcdHNjIDBcclxuXHRcdGZvciBbeCx5XSBpbiBAc3RhcnNcclxuXHRcdFx0Y2lyY2xlIHgseSxAbGV2ZWxcclxuXHRcdHJlY3Qgd2lkdGgtMywwLjQqaGVpZ2h0LDIsMC4yKmhlaWdodFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0W0B4LEB5XSA9IFtAeCsxLCBAeSArIGlmIGtleUlzRG93biAzMiB0aGVuIDEgZWxzZSAtMV1cclxuXHRcdHNjIDFcclxuXHRcdHBvaW50IEB4LEB5XHJcblx0XHRpZiBAeCA+IHdpZHRoIGFuZCAwLjQqaGVpZ2h0IDwgQHkgPCAwLjYqaGVpZ2h0IHRoZW4gcmV0dXJuIEBzdGFydE5ld0dhbWUgMVxyXG5cdFx0aWYgQHk8MCBvciBAeT5oZWlnaHQgb3IgQHg+d2lkdGggdGhlbiByZXR1cm4gQHN0YXJ0TmV3R2FtZSAwXHJcblx0XHRmb3IgW3gseV0gaW4gQHN0YXJzXHJcblx0XHRcdGlmIGRpc3QoQHgsQHkseCx5KSA8IEBsZXZlbCB0aGVuIHJldHVybiBAc3RhcnROZXdHYW1lIDBcclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCx3aW5kb3dIZWlnaHRcclxuXHRzdGFyZG9kZ2UgPSBuZXcgU3RhckRvZGdlXHJcbmRyYXcgPSAtPiBzdGFyZG9kZ2UuZHJhdygpIl19
//# sourceURL=C:\Lab\2017\057-Star Dodge\coffee\sketch.coffee