// Generated by CoffeeScript 1.11.1
var Bodies, Engine, Events, World, bounds, cols, draw, engine, newParticle, particles, plinkos, rows, setup, world;

Engine = Matter.Engine;

World = Matter.World;

Events = Matter.Events;

Bodies = Matter.Bodies;

engine = null;

world = null;

particles = [];

plinkos = [];

bounds = [];

cols = 22;

rows = 10;

setup = function() {
  var i, j, k, l, len, len1, len2, m, ref, ref1, ref2, results, spacing, x, y;
  createCanvas(1200, 800);
  fill(255);
  noStroke();
  rectMode(CENTER);
  engine = Engine.create();
  world = engine.world;
  world.gravity.y = 0.1;
  newParticle();
  spacing = width / cols;
  ref = range(rows);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    ref1 = range(cols + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      x = i * spacing;
      if (j % 2 === 1) {
        x += spacing / 2;
      }
      y = spacing + j * spacing;
      plinkos.push(new Plinko(x, y, 2));
    }
  }
  bounds.push(new Boundary(width / 2, height + 50, width, 100));
  bounds.push(new Boundary(0, height / 2, 5, height));
  bounds.push(new Boundary(width, height / 2, 5, height));
  ref2 = range(2 * cols + 1);
  results = [];
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    results.push(bounds.push(new Boundary(i * spacing / 2, height - 100 / 2, 2, 100)));
  }
  return results;
};

newParticle = function() {
  return particles.push(new Particle(width / 2, 0, 5));
};

draw = function() {
  var bound, k, l, len, len1, len2, m, particle, plinko, results;
  background(0);
  if (frameCount % 20 === 0) {
    newParticle();
  }
  Engine.update(engine, 1000 / 30);
  for (k = 0, len = particles.length; k < len; k++) {
    particle = particles[k];
    particle.show();
  }
  for (l = 0, len1 = plinkos.length; l < len1; l++) {
    plinko = plinkos[l];
    plinko.show();
  }
  results = [];
  for (m = 0, len2 = bounds.length; m < len2; m++) {
    bound = bounds[m];
    results.push(bound.show());
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDOztBQUNoQixLQUFBLEdBQVEsTUFBTSxDQUFDOztBQUNmLE1BQUEsR0FBUyxNQUFNLENBQUM7O0FBQ2hCLE1BQUEsR0FBUyxNQUFNLENBQUM7O0FBRWhCLE1BQUEsR0FBUzs7QUFDVCxLQUFBLEdBQVE7O0FBQ1IsU0FBQSxHQUFZOztBQUNaLE9BQUEsR0FBVTs7QUFDVixNQUFBLEdBQVM7O0FBQ1QsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTzs7QUFFUCxLQUFBLEdBQVEsU0FBQTtBQUNOLE1BQUE7RUFBQSxZQUFBLENBQWEsSUFBYixFQUFtQixHQUFuQjtFQUNBLElBQUEsQ0FBSyxHQUFMO0VBQ0EsUUFBQSxDQUFBO0VBQ0EsUUFBQSxDQUFTLE1BQVQ7RUFDQSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBQTtFQUNULEtBQUEsR0FBUSxNQUFNLENBQUM7RUFDZixLQUFLLENBQUMsT0FBTyxDQUFDLENBQWQsR0FBa0I7RUFDbEIsV0FBQSxDQUFBO0VBQ0EsT0FBQSxHQUFVLEtBQUEsR0FBUTtBQUNsQjtBQUFBLE9BQUEscUNBQUE7O0FBQ0U7QUFBQSxTQUFBLHdDQUFBOztNQUNFLENBQUEsR0FBSSxDQUFBLEdBQUk7TUFDUixJQUFHLENBQUEsR0FBSSxDQUFKLEtBQVMsQ0FBWjtRQUFtQixDQUFBLElBQUssT0FBQSxHQUFVLEVBQWxDOztNQUNBLENBQUEsR0FBSSxPQUFBLEdBQVUsQ0FBQSxHQUFJO01BQ2xCLE9BQU8sQ0FBQyxJQUFSLENBQWlCLElBQUEsTUFBQSxDQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFqQjtBQUpGO0FBREY7RUFPQSxNQUFNLENBQUMsSUFBUCxDQUFnQixJQUFBLFFBQUEsQ0FBUyxLQUFBLEdBQVEsQ0FBakIsRUFBb0IsTUFBQSxHQUFTLEVBQTdCLEVBQWlDLEtBQWpDLEVBQXdDLEdBQXhDLENBQWhCO0VBQ0EsTUFBTSxDQUFDLElBQVAsQ0FBZ0IsSUFBQSxRQUFBLENBQVMsQ0FBVCxFQUFZLE1BQUEsR0FBTyxDQUFuQixFQUFzQixDQUF0QixFQUF5QixNQUF6QixDQUFoQjtFQUNBLE1BQU0sQ0FBQyxJQUFQLENBQWdCLElBQUEsUUFBQSxDQUFTLEtBQVQsRUFBZ0IsTUFBQSxHQUFPLENBQXZCLEVBQTBCLENBQTFCLEVBQTZCLE1BQTdCLENBQWhCO0FBRUE7QUFBQTtPQUFBLHdDQUFBOztpQkFDRSxNQUFNLENBQUMsSUFBUCxDQUFnQixJQUFBLFFBQUEsQ0FBUyxDQUFBLEdBQUksT0FBSixHQUFZLENBQXJCLEVBQXdCLE1BQUEsR0FBUyxHQUFBLEdBQU0sQ0FBdkMsRUFBMEMsQ0FBMUMsRUFBNkMsR0FBN0MsQ0FBaEI7QUFERjs7QUFyQk07O0FBd0JSLFdBQUEsR0FBYyxTQUFBO1NBQUcsU0FBUyxDQUFDLElBQVYsQ0FBbUIsSUFBQSxRQUFBLENBQVMsS0FBQSxHQUFNLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBbkI7QUFBSDs7QUFFZCxJQUFBLEdBQU8sU0FBQTtBQUNMLE1BQUE7RUFBQSxVQUFBLENBQVcsQ0FBWDtFQUNBLElBQUcsVUFBQSxHQUFhLEVBQWIsS0FBbUIsQ0FBdEI7SUFBNkIsV0FBQSxDQUFBLEVBQTdCOztFQUNBLE1BQU0sQ0FBQyxNQUFQLENBQWMsTUFBZCxFQUFzQixJQUFBLEdBQU8sRUFBN0I7QUFDQSxPQUFBLDJDQUFBOztJQUFBLFFBQVEsQ0FBQyxJQUFULENBQUE7QUFBQTtBQUNBLE9BQUEsMkNBQUE7O0lBQUEsTUFBTSxDQUFDLElBQVAsQ0FBQTtBQUFBO0FBQ0E7T0FBQSwwQ0FBQTs7aUJBQUEsS0FBSyxDQUFDLElBQU4sQ0FBQTtBQUFBOztBQU5LIiwic291cmNlc0NvbnRlbnQiOlsiRW5naW5lID0gTWF0dGVyLkVuZ2luZVxyXG5Xb3JsZCA9IE1hdHRlci5Xb3JsZFxyXG5FdmVudHMgPSBNYXR0ZXIuRXZlbnRzXHJcbkJvZGllcyA9IE1hdHRlci5Cb2RpZXNcclxuXHJcbmVuZ2luZSA9IG51bGxcclxud29ybGQgPSBudWxsXHJcbnBhcnRpY2xlcyA9IFtdXHJcbnBsaW5rb3MgPSBbXVxyXG5ib3VuZHMgPSBbXVxyXG5jb2xzID0gMjJcclxucm93cyA9IDEwXHJcblxyXG5zZXR1cCA9IC0+XHJcbiAgY3JlYXRlQ2FudmFzIDEyMDAsIDgwMFxyXG4gIGZpbGwgMjU1XHJcbiAgbm9TdHJva2UoKVxyXG4gIHJlY3RNb2RlIENFTlRFUlxyXG4gIGVuZ2luZSA9IEVuZ2luZS5jcmVhdGUoKVxyXG4gIHdvcmxkID0gZW5naW5lLndvcmxkXHJcbiAgd29ybGQuZ3Jhdml0eS55ID0gMC4xO1xyXG4gIG5ld1BhcnRpY2xlKCk7XHJcbiAgc3BhY2luZyA9IHdpZHRoIC8gY29sc1xyXG4gIGZvciBqIGluIHJhbmdlIHJvd3NcclxuICAgIGZvciBpIGluIHJhbmdlIGNvbHMrMVxyXG4gICAgICB4ID0gaSAqIHNwYWNpbmdcclxuICAgICAgaWYgaiAlIDIgPT0gMSB0aGVuIHggKz0gc3BhY2luZyAvIDJcclxuICAgICAgeSA9IHNwYWNpbmcgKyBqICogc3BhY2luZ1xyXG4gICAgICBwbGlua29zLnB1c2ggbmV3IFBsaW5rbyB4LCB5LCAyXHJcblxyXG4gIGJvdW5kcy5wdXNoIG5ldyBCb3VuZGFyeSB3aWR0aCAvIDIsIGhlaWdodCArIDUwLCB3aWR0aCwgMTAwXHJcbiAgYm91bmRzLnB1c2ggbmV3IEJvdW5kYXJ5IDAsIGhlaWdodC8yLCA1LCBoZWlnaHRcclxuICBib3VuZHMucHVzaCBuZXcgQm91bmRhcnkgd2lkdGgsIGhlaWdodC8yLCA1LCBoZWlnaHRcclxuXHJcbiAgZm9yIGkgaW4gcmFuZ2UgMipjb2xzKzFcclxuICAgIGJvdW5kcy5wdXNoIG5ldyBCb3VuZGFyeSBpICogc3BhY2luZy8yLCBoZWlnaHQgLSAxMDAgLyAyLCAyLCAxMDBcclxuXHJcbm5ld1BhcnRpY2xlID0gLT4gcGFydGljbGVzLnB1c2ggbmV3IFBhcnRpY2xlIHdpZHRoLzIsIDAsIDVcclxuXHJcbmRyYXcgPSAtPlxyXG4gIGJhY2tncm91bmQgMFxyXG4gIGlmIGZyYW1lQ291bnQgJSAyMCA9PSAwIHRoZW4gbmV3UGFydGljbGUoKVxyXG4gIEVuZ2luZS51cGRhdGUgZW5naW5lLCAxMDAwIC8gMzBcclxuICBwYXJ0aWNsZS5zaG93KCkgZm9yIHBhcnRpY2xlIGluIHBhcnRpY2xlc1xyXG4gIHBsaW5rby5zaG93KCkgZm9yIHBsaW5rbyBpbiBwbGlua29zXHJcbiAgYm91bmQuc2hvdygpIGZvciBib3VuZCBpbiBib3VuZHMgICAgICJdfQ==
//# sourceURL=C:\Lab\2017\028-Plinko\sketch.coffee