// Generated by CoffeeScript 1.12.7
var Action, Button, State, buttonLeft, buttonRight, buttons, draw, mousePressed, setup, state;

Button = (function() {
  function Button(i1, j, text1) {
    this.i = i1;
    this.j = j;
    this.text = text1;
    this.x = 50 + 100 * this.i;
    this.y = 25 + 50 * this.j;
  }

  Button.prototype.draw = function() {
    fc(1);
    circle(this.x, this.y, 25);
    fc(0);
    return text(this.text, this.x, this.y);
  };

  Button.prototype.mousePressed = function(mx, my) {
    if (25 > dist(mx, my, this.x, this.y)) {
      state.digits[this.i] = int(this.text / [10, 1, 10, 1, 10, 1][this.i]);
      return state.memory[this.i] = int(this.text / [10, 1, 10, 1, 10, 1][this.i]);
    }
  };

  return Button;

})();

Action = (function() {
  function Action(x1, y1, w, h, text1, f) {
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.text = text1;
    this.f = f;
    this.bg = [1, 1, 1];
    this.disabled = false;
  }

  Action.prototype.draw = function() {
    fc(this.bg[0], this.bg[1], this.bg[2]);
    rect(this.x, this.y, this.w, this.h);
    if (this.disabled) {
      fc(0.5);
    } else {
      fc(0);
    }
    return text(this.text, this.x, this.y);
  };

  Action.prototype.mousePressed = function(mx, my) {
    if (!this.disabled && (this.x - this.w / 2 < mx && mx < this.x + this.w / 2) && (this.y - this.h / 2 < my && my < this.y + this.h / 2)) {
      return this.f();
    }
  };

  return Action;

})();

State = (function() {
  function State() {
    this.digits = [0, 0, 0, 0, 0, 0];
    this.memory = [0, 0, 0, 0, 0, 0];
    this.runState = 0;
  }

  State.prototype.done = function() {
    var i, j, len, ref;
    if (!_.isEqual(this.digits, this.memory)) {
      ref = range(6);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        this.digits[i] = this.memory[i];
      }
    } else {
      this.digits = [0, 0, 0, 0, 0, 0];
      this.memory = [0, 0, 0, 0, 0, 0];
    }
    this.runState = 0;
    return this.fix({});
  };

  State.prototype.run = function() {
    var i, j, len, ref, results;
    this.runState = [1, 2, 1][this.runState];
    if (this.runState === 1) {
      this.start = int(millis() / 1000);
      this.secs = 0;
      ref = range(6);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(this.secs += [36000, 3600, 600, 60, 10, 1][i] * this.digits[i]);
      }
      return results;
    }
  };

  State.prototype.draw = function() {
    var i, j, k, len, len1, n, ref, ref1, results, s, t, x, y;
    if (this.runState === 1) {
      s = this.secs - (int(millis() / 1000) - this.start);
      if (s === 0) {
        this.runState = 2;
      }
      ref = range(6);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        n = [36000, 3600, 600, 60, 10, 1][i];
        this.digits[i] = int(s / n);
        s %= n;
      }
    }
    this.fix();
    ref1 = range(3);
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      t = 10 * this.digits[2 * i] + this.digits[2 * i + 1];
      t = t.toString();
      if (t.length === 1) {
        t = "0" + t;
      }
      x = 100 + 200 * i;
      y = 570;
      results.push(text(t, x, y));
    }
    return results;
  };

  State.prototype.fix = function() {
    if (this.runState === 2 && _.isEqual(this.digits, [0, 0, 0, 0, 0, 0])) {
      this.runState = 0;
    }
    buttonLeft.disabled = this.runState === 1;
    buttonRight.disabled = _.isEqual(this.digits, [0, 0, 0, 0, 0, 0]);
    buttonRight.text = ['Start', 'Pause', 'Resume'][this.runState];
    return buttonRight.bg = [[0, 1, 0], [1, 0, 0], [0, 1, 0]][this.runState];
  };

  return State;

})();

buttons = [];

state = new State;

buttonLeft = new Action(200, 660, 100, 40, 'Done', function() {
  return state.done();
});

buttonRight = new Action(400, 660, 100, 40, 'Start', function() {
  return state.run();
});

buttons.push(buttonLeft);

buttons.push(buttonRight);

setup = function() {
  var i, j, k, l, len, len1, len2, len3, len4, len5, m, o, p, ref, ref1, ref2, ref3, ref4, ref5, results;
  createCanvas(600, 700);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  ref = range(3);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons.push(new Button(0, i, i * 10));
  }
  ref1 = range(10);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    buttons.push(new Button(1, i, i));
  }
  ref2 = range(6);
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    buttons.push(new Button(2, i, i * 10));
  }
  ref3 = range(10);
  for (m = 0, len3 = ref3.length; m < len3; m++) {
    i = ref3[m];
    buttons.push(new Button(3, i, i));
  }
  ref4 = range(6);
  for (o = 0, len4 = ref4.length; o < len4; o++) {
    i = ref4[o];
    buttons.push(new Button(4, i, i * 10));
  }
  ref5 = range(10);
  results = [];
  for (p = 0, len5 = ref5.length; p < len5; p++) {
    i = ref5[p];
    results.push(buttons.push(new Button(5, i, i)));
  }
  return results;
};

draw = function() {
  var button, j, len;
  bg(0.5);
  textSize(24);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textSize(150);
  return state.draw();
};

mousePressed = function() {
  var button, j, len;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.mousePressed(mouseX, mouseY);
  }
  return print(state.digits);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\143-Timer\coffee\sketch.coffee