// Generated by CoffeeScript 1.12.7
var RubikSquare9, app, draw, mousePressed, mouseReleased, released, setup, sida;

released = true;

sida = null;

RubikSquare9 = (function() {
  function RubikSquare9() {}

  RubikSquare9.prototype.reset = function() {
    var sid3, x0, y0;
    x0 = width / 2;
    y0 = height / 2;
    sid3 = sida / 3;
    this.BUTTONS = [[x0 - sida, y0 - 1 * sida, sida, sida], [x0, y0 - 1 * sida, sida, sida], [x0 + sida, y0 - 1 * sida, sida, sida], [x0 - sida, y0 + 0 * sida, sida, sida], [x0, y0 + 0 * sida, sida, sida], [x0 + sida, y0 + 0 * sida, sida, sida], [x0 - sida, y0 + 1 * sida, sida, sida], [x0, y0 + 1 * sida, sida, sida], [x0 + sida, y0 + 1 * sida, sida, sida], [x0 - sida, y0 + 2 * sida, sida, sid3], [x0, y0 + 2 * sida, sida, sid3], [x0 + sida, y0 + 2 * sida, sida, sid3]];
    this.level = 1;
    this.history = [];
    this.memory = -1;
    return this.createGame();
  };

  RubikSquare9.prototype.randint = function(n) {
    return int(n * random());
  };

  RubikSquare9.prototype.newGame = function() {
    var d;
    if (this.level >= this.history.length && _.isEqual(this.board, [0, 1, 2, 0, 1, 2, 0, 1, 2])) {
      d = 1;
    } else {
      d = -1;
    }
    this.level = constrain(this.level + d, 1, 6);
    this.history = [];
    return this.createGame();
  };

  RubikSquare9.prototype.createGame = function() {
    var arr, bigstring, ch, s;
    bigstring = rubikSquareData[this.level];
    arr = bigstring.split(' ');
    s = arr[this.randint(arr.length)];
    return this.board = (function() {
      var l, len, results;
      results = [];
      for (l = 0, len = s.length; l < len; l++) {
        ch = s[l];
        results.push(parseInt(ch));
      }
      return results;
    })();
  };

  RubikSquare9.prototype.move = function(m, d, board) {
    var a, b, bd, c, i, j, k, ref, ref1, ref2, ref3, ref4;
    ref = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8]][m], i = ref[0], j = ref[1], k = ref[2];
    bd = board.slice(0);
    ref1 = [bd[i], bd[j], bd[k]], a = ref1[0], b = ref1[1], c = ref1[2];
    if (d === 0) {
      ref2 = [b, c, a], a = ref2[0], b = ref2[1], c = ref2[2];
    } else {
      ref3 = [c, a, b], a = ref3[0], b = ref3[1], c = ref3[2];
    }
    ref4 = [a, b, c], bd[i] = ref4[0], bd[j] = ref4[1], bd[k] = ref4[2];
    return bd;
  };

  RubikSquare9.prototype.draw = function() {
    var c, h, i, l, len, ref, ref1, ref2, ref3, ref4, ref5, w, x, y;
    bg(0);
    textAlign(CENTER, CENTER);
    textSize(sida / 2);
    rectMode(CENTER, CENTER);
    ref = this.board;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      c = ref[i];
      sc(1);
      if (c === 0) {
        fc(1, 0, 0);
      }
      if (c === 1) {
        fc(0, 1, 0);
      }
      if (c === 2) {
        fc(0, 0, 1);
      }
      ref1 = this.BUTTONS[i], x = ref1[0], y = ref1[1], w = ref1[2], h = ref1[3];
      rect(x, y, w, h);
    }
    if (this.memory >= 0) {
      ref2 = this.BUTTONS[this.memory], x = ref2[0], y = ref2[1], w = ref2[2], h = ref2[3];
      fc(0);
      sc();
      circle(x, y, sida / 5);
    }
    ref3 = this.BUTTONS[10], x = ref3[0], y = ref3[1], w = ref3[2], h = ref3[3];
    fc(1, 1, 0);
    sc();
    text(this.level - this.history.length, x, y);
    if (this.history.length > 0) {
      ref4 = this.BUTTONS[9], x = ref4[0], y = ref4[1], w = ref4[2], h = ref4[3];
      text("undo", x, y);
      ref5 = this.BUTTONS[11], x = ref5[0], y = ref5[1], w = ref5[2], h = ref5[3];
      return text("new", x, y);
    }
  };

  RubikSquare9.prototype.undo = function() {
    if (this.history.length === 0) {
      return;
    }
    this.board = this.history.pop();
    return this.memory = -1;
  };

  RubikSquare9.prototype.mousePressed = function(mx, my) {
    var d, h, hash, i, index, l, len, m, pair, ref, ref1, w, x, y;
    index = -1;
    ref = this.BUTTONS;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      ref1 = ref[i], x = ref1[0], y = ref1[1], w = ref1[2], h = ref1[3];
      if ((x - w / 2 <= mx && mx <= x + w / 2) && (y - h / 2 <= my && my <= y + h / 2)) {
        index = i;
      }
    }
    if ((0 <= index && index < 9)) {
      if (this.memory === -1) {
        this.memory = index;
      } else if (this.memory === index) {
        this.memory = -1;
      } else {
        hash = {
          "01": [0, 1],
          "02": [0, 0],
          "10": [0, 0],
          "12": [0, 1],
          "20": [0, 1],
          "21": [0, 0],
          "34": [1, 1],
          "35": [1, 0],
          "43": [1, 0],
          "45": [1, 1],
          "53": [1, 1],
          "54": [1, 0],
          "67": [2, 1],
          "68": [2, 0],
          "76": [2, 0],
          "78": [2, 1],
          "86": [2, 1],
          "87": [2, 0],
          "03": [3, 1],
          "06": [3, 0],
          "30": [3, 0],
          "36": [3, 1],
          "60": [3, 1],
          "63": [3, 0],
          "14": [4, 1],
          "17": [4, 0],
          "41": [4, 0],
          "47": [4, 1],
          "71": [4, 1],
          "74": [4, 0],
          "25": [5, 1],
          "28": [5, 0],
          "52": [5, 0],
          "58": [5, 1],
          "82": [5, 1],
          "85": [5, 0]
        };
        pair = hash["" + this.memory + index];
        if (pair) {
          m = pair[0], d = pair[1];
          this.history.push(this.board.slice(0));
          this.board = this.move(m, d, this.board);
          this.memory = -1;
        }
      }
    }
    if (index === 9) {
      this.undo();
    }
    if (index === 11) {
      return this.newGame();
    }
  };

  return RubikSquare9;

})();

app = new RubikSquare9;

setup = function() {
  createCanvas(windowWidth, windowHeight);
  sida = min(width, height) / 5;
  return app.reset();
};

draw = function() {
  return app.draw();
};

mouseReleased = function() {
  released = true;
  return false;
};

mousePressed = function() {
  if (!released) {
    return;
  }
  released = false;
  return app.mousePressed(mouseX, mouseY);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\060-RubikSquare9\coffee\sketch.coffee