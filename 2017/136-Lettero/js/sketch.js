// Generated by CoffeeScript 2.0.3
var Button, angle, buttons, currentLanguage, direction, draw, dt, fetchFromLocalStorage, findWords, handleMousePressed, index, language, languages, level, maxWord, maxWordSize, mousePressed, mouseReleased, newGame, possibleWords, radius1, radius2, radius3, radius4, radius5, released, reverseString, saveToLocalStorage, selLanguage, selectWords, setup, showWordInfo, size, solution, touchEnded, touchStarted, word, wordList, words, wrap,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

wordList = null;

words = null;

index = 0;

word = '';

level = 0;

angle = 0;

direction = 1;

size = null;

radius1 = null; // avst책nd till gul cirkels mittpunkt

radius2 = null; // gul cirkels radie

radius3 = null; // avst책nd till siffra

radius4 = null; // gr채ns mellan siffror och bokst채ver

radius5 = null; // siffrans radie

possibleWords = [];

solution = "";

dt = 0;

maxWord = 4; // 4..15

languages = 'dan eng fra ger isl ita nor rus spa swe'.split(' ');

language = 9;

currentLanguage = language;

released = true;

buttons = [];

Button = class Button {
  constructor(txt, r1, degrees, r2, f) {
    this.txt = txt;
    this.r1 = r1;
    this.degrees = degrees;
    this.r2 = r2;
    this.f = f;
    this.x = this.r1 * cos(radians(this.degrees));
    this.y = this.r1 * sin(radians(this.degrees));
  }

  draw() {
    fc(0.45);
    circle(this.x, this.y, this.r2);
    fc(0);
    return text(this.txt, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (this.r2 > dist(mx, my, width / 2 + this.x, height / 2 + this.y)) {
      return this.f();
    }
  }

};

fetchFromLocalStorage = function() {
  var arr, lang, s;
  lang = languages[language];
  s = localStorage[`lettero-${lang}`];
  //print 'fetch',s
  if (s) {
    arr = s.split(' ');
    maxWord = parseInt(arr[0]);
    return level = parseInt(arr[1]);
  } else {
    maxWord = 4;
    return level = 0;
  }
};

saveToLocalStorage = function() {
  var lang;
  lang = languages[language];
  return localStorage[`lettero-${lang}`] = `${maxWord} ${level}`;
};

//print 'save',localStorage
setup = function() {
  var i, j, len, radius6;
  language = languages.indexOf(document.title.toLowerCase().split(' ')[1]);
  currentLanguage = language;
  //url = new URL window.location.href
  //params = url.searchParams
  //maxWord = params.get "a"
  //maxWord = if maxWord then parseInt maxWord else 4   
  fetchFromLocalStorage();
  createCanvas(windowWidth, windowHeight);
  size = min(width, height);
  radius2 = size / 12;
  radius1 = 0.5 * size - radius2;
  radius3 = 0.6 * radius1;
  radius4 = radius1 - radius2;
  radius5 = 0.05 * size;
  radius6 = 0.59 * size;
  wordList = _.shuffle(ordlista.split(' '));
  words = selectWords();
  for (i = j = 0, len = words.length; j < len; i = ++j) {
    word = words[i];
    words[i] = words[i].toLowerCase();
  }
  textAlign(CENTER, CENTER);
  print(wordList.length);
  buttons.push(new Button('15', radius6, 45, radius2, () => {
    return maxWordSize(1);
  }));
  buttons.push(new Button('4', radius6, 45 + 90, radius2, () => {
    return maxWordSize(-1);
  }));
  buttons.push(new Button('spa', radius6, 45 + 270, radius2, () => {
    return selLanguage(1);
  }));
  buttons.push(new Button('dan', radius6, 45 + 180, radius2, () => {
    return selLanguage(-1);
  }));
  return newGame(0);
};

maxWordSize = function(d) {
  maxWord = 4 + modulo(maxWord - 4 + d, 15 - 4 + 1);
  saveToLocalStorage();
  return words = selectWords();
};

selLanguage = function(d) {
  var n;
  n = languages.length;
  return language = modulo(language + d, n);
};

newGame = function(dLevel) {
  var extra;
  if (language !== currentLanguage) {
    
    // go to another html file
    window.location.href = `${languages[language]}.html`;
  }
  solution = possibleWords.join(' ');
  direction = dLevel;
  extra = int(level / 10); // straffa med 10% av level.
  if (dLevel < 0 && extra !== 0) {
    dLevel *= extra;
  }
  level += dLevel;
  if (level < 0) {
    level = 0;
  }
  word = words[index];
  index++;
  index %= words.length;
  possibleWords = findWords(word);
  if (0.5 < random()) {
    word = reverseString(word);
  }
  word = word.toUpperCase();
  angle = 360 * random();
  saveToLocalStorage();
  return false; // to prevent double click on Android
};

wrap = function(first, last, value) {
  return first + modulo(value - first, last - first + 1);
};

draw = function() {
  var button, ch, dAngle, i, j, k, len, len1, n;
  bg(0.5);
  push();
  translate(width / 2, height / 2);
  buttons[0].txt = wrap(4, 15, maxWord + 1);
  buttons[1].txt = wrap(4, 15, maxWord - 1);
  n = languages.length;
  buttons[2].txt = languages[modulo(language + 1, n)];
  buttons[3].txt = languages[modulo(language - 1, n)];
  textSize(0.09 * size);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textSize(0.11 * size);
  text(`${languages[language]}-${maxWord}`, 0, -0.2 * size);
  textSize(0.06 * size);
  text(solution, 0, 0.18 * size);
  pop();
  //text solution + '|' + possibleWords.join(' '), width/2,height-size/10
  textSize(size / 4);
  if (direction === 1) {
    fc(0, 1, 0);
  } else {
    fc(1, 0, 0);
  }
  text(level, width / 2, height / 2);
  fc(0);
  translate(width / 2, height / 2);
  n = word.length;
  dAngle = 360 / n;
  rd(angle);
  textSize(size / 10);
  for (i = k = 0, len1 = word.length; k < len1; i = ++k) {
    ch = word[i];
    push();
    translate(radius1, 0);
    rd(90);
    fc(1, 1, 0);
    circle(0, 0, radius2);
    fc(0);
    text(ch, 0, 0);
    pop();
    rd(dAngle);
  }
  angle += (millis() - dt) / 50;
  return dt = millis();
};

selectWords = function() {
  var j, len, results, w;
  wordList = _.shuffle(ordlista.split(' '));
  index = 0;
  results = [];
  for (j = 0, len = wordList.length; j < len; j++) {
    w = wordList[j];
    if (w.length <= maxWord) {
      results.push(w);
    }
  }
  return results;
};

showWordInfo = function() {
  var arr, lan, url;
  arr = solution.split(' ');
  if (arr.length === 0) {
    return;
  }
  released = true;
  url = '';
  lan = languages[language];
  if (lan === 'swe') {
    url = `https://svenska.se/tre/?sok=${arr[0]}`;
  }
  //if lan == 'eng' then url = "https://en.oxforddictionaries.com/definition/#{arr[0]}"
  if (url !== '') {
    return window.open(url, '_blank');
  }
};

handleMousePressed = function() {
  var button, ch, dword, i, j, k, len, len1, n, results, rw, w, x, y;
  if (released) {
    released = false; // to make Android work 
  } else {
    return;
  }
  if (dist(mouseX, mouseY, width / 2, height / 2) < radius2) {
    return showWordInfo();
  } else if (dist(mouseX, mouseY, width / 2, height / 2) > radius1 + radius2) {
    results = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      results.push(button.mousePressed(mouseX, mouseY));
    }
    return results;
  } else {
    // letter	
    n = word.length;
    dword = (word + word).toLowerCase();
    for (i = k = 0, len1 = word.length; k < len1; i = ++k) {
      ch = word[i];
      x = width / 2 + radius1 * cos(radians(angle + i / n * 360));
      y = height / 2 + radius1 * sin(radians(angle + i / n * 360));
      if (radius2 > dist(mouseX, mouseY, x, y)) {
        w = dword.slice(i, i + n);
        rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
        if (indexOf.call(possibleWords, w) >= 0 || indexOf.call(possibleWords, rw) >= 0) {
          return newGame(1);
        } else {
          return newGame(-1);
        }
      }
    }
  }
};

reverseString = function(str) {
  return str.split("").reverse().join("");
};

mousePressed = function() {
  handleMousePressed();
  return false; // to prevent double click on Android
};

touchStarted = function() {
  handleMousePressed();
  return false; // to prevent double click on Android
};

mouseReleased = function() {
  released = true;
  return false; // to prevent double click on Android
};

touchEnded = function() {
  released = true;
  return false; // to prevent double click on Android
};

findWords = function(word) {
  var ch, dword, i, j, len, n, res, rw, w;
  n = word.length;
  dword = (word + word).toLowerCase();
  res = [];
  for (i = j = 0, len = word.length; j < len; i = ++j) {
    ch = word[i];
    w = dword.slice(i, i + n);
    rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
    if (indexOf.call(words, w) >= 0) {
      res.push(w);
    }
    if (indexOf.call(words, rw) >= 0) {
      res.push(rw);
    }
  }
  return _.uniq(res);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\136-Lettero\coffee\sketch.coffee