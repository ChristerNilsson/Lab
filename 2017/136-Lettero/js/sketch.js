// Generated by CoffeeScript 2.0.3
  // Originalkod i 136-Lettero
  // Kopieras till 140-LetteroEng
var angle, direction, draw, drawMaxWord, dt, findWords, handleMousePressed, index, level, maxWord, maxWords, mousePressed, mouseReleased, newGame, possibleWords, radius1, radius2, radius3, radius4, radius5, released, reverseString, selectWords, setup, size, solution, touchStarted, word, wordList, words,
  indexOf = [].indexOf;

wordList = null;

words = null;

index = 0;

word = '';

level = -1;

angle = 0;

direction = 1;

size = null;

radius1 = null; // avst책nd till gul cirkels mittpunkt

radius2 = null; // gul cirkels radie

radius3 = null; // avst책nd till siffra

radius4 = null; // gr채ns mellan siffror och bokst채ver

radius5 = null; // siffrans radie

possibleWords = [];

solution = "";

dt = 0;

maxWords = [4, 5, 6, 7, 8, 9];

maxWord = 0;

released = true;

setup = function() {
  createCanvas(windowWidth, windowHeight);
  size = min(width, height);
  radius2 = size / 10;
  radius1 = size / 2 - radius2;
  radius3 = 0.6 * radius1;
  radius4 = radius1 - radius2;
  radius5 = size / 20;
  wordList = _.shuffle(ordlista.split(' '));
  words = selectWords();
  textAlign(CENTER, CENTER);
  //listCircular()
  print(wordList.length);
  return newGame(1);
};

newGame = function(dLevel) {
  var extra;
  solution = possibleWords.join(' ');
  direction = dLevel;
  extra = int(level / 10); // straffa med 10% av level.
  if (dLevel < 0 && extra !== 0) {
    dLevel *= extra;
  }
  level += dLevel;
  if (level < 0) {
    level = 0;
  }
  word = words[index];
  index++;
  index %= words.length;
  possibleWords = findWords(word);
  if (0.5 < random()) {
    word = reverseString(word);
  }
  word = word.toUpperCase();
  angle = 360 * random();
  return false; // to prevent double click on Android
};

drawMaxWord = function() {
  var ch, i, j, len;
  push();
  translate(width / 2, height / 2);
  textSize(2 * radius5);
  for (i = j = 0, len = maxWords.length; j < len; i = ++j) {
    ch = maxWords[i];
    push();
    translate(radius3, 0);
    rd(90);
    if (maxWord === i) {
      fc(1);
    } else {
      fc(0);
    }
    text(ch, 0, 0);
    pop();
    rd(60);
  }
  return pop();
};

draw = function() {
  var ch, dAngle, i, j, len, n;
  bg(0.5);
  drawMaxWord();
  textSize(size / 12);
  text(solution, width / 2, height - size / 10);
  textSize(size / 4);
  if (direction === 1) {
    fc(0, 1, 0);
  } else {
    fc(1, 0, 0);
  }
  text(level, width / 2, height / 2);
  fc(0);
  translate(width / 2, height / 2);
  n = word.length;
  dAngle = 360 / n;
  rd(angle);
  textSize(size / 10);
  for (i = j = 0, len = word.length; j < len; i = ++j) {
    ch = word[i];
    push();
    translate(radius1, 0);
    rd(90);
    fc(1, 1, 0);
    circle(0, 0, radius2);
    fc(0);
    text(ch, 0, 0);
    pop();
    rd(dAngle);
  }
  angle += (millis() - dt) / 50;
  return dt = millis();
};

selectWords = function() {
  var j, len, results, w;
  wordList = _.shuffle(ordlista.split(' '));
  index = 0;
  results = [];
  for (j = 0, len = wordList.length; j < len; j++) {
    w = wordList[j];
    if (w.length <= maxWords[maxWord]) {
      results.push(w);
    }
  }
  return results;
};

handleMousePressed = function() {
  var ch, dword, i, j, k, len, len1, n, ref, rw, w, x, y;
  if (dist(mouseX, mouseY, width / 2, height / 2) < radius1 - radius2) {
    
    // digit
    n = maxWords.length;
    ref = range(n);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      x = width / 2 + radius3 * cos(radians(i / n * 360));
      y = height / 2 + radius3 * sin(radians(i / n * 360));
      if (radius5 > dist(mouseX, mouseY, x, y)) {
        maxWord = i;
        words = selectWords();
      }
    }
  } else {
    // letter	
    n = word.length;
    dword = (word + word).toLowerCase();
    for (i = k = 0, len1 = word.length; k < len1; i = ++k) {
      ch = word[i];
      x = width / 2 + radius1 * cos(radians(angle + i / n * 360));
      y = height / 2 + radius1 * sin(radians(angle + i / n * 360));
      if (radius2 > dist(mouseX, mouseY, x, y)) {
        w = dword.slice(i, i + n);
        rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
        if (indexOf.call(possibleWords, w) >= 0 || indexOf.call(possibleWords, rw) >= 0) {
          return newGame(1);
        } else {
          return newGame(-1);
        }
      }
    }
  }
  return false; // to prevent double click on Android
};

reverseString = function(str) {
  return str.split("").reverse().join("");
};

mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

mousePressed = function() {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  return handleMousePressed();
};

touchStarted = function() {
  return handleMousePressed();
};

findWords = function(word) {
  var ch, dword, i, j, len, n, res, rw, w;
  n = word.length;
  dword = (word + word).toLowerCase();
  res = [];
  for (i = j = 0, len = word.length; j < len; i = ++j) {
    ch = word[i];
    w = dword.slice(i, i + n);
    rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
    if (indexOf.call(words, w) >= 0) {
      res.push(w);
    }
    if (indexOf.call(words, rw) >= 0) {
      res.push(rw);
    }
  }
  return _.uniq(res);
};

// listCircular = () ->
// 	print words.length
// 	antal = 0
// 	for word in words
// 		res = findWords word
// 		if res.length==2
// 			print res.join ' '
// 			antal++
// 	print antal

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2017\136-Lettero\coffee\sketch.coffee