// Generated by CoffeeScript 2.0.3
var Button, angle, buttons, direction, draw, dt, findWords, handleMousePressed, index, language, languages, level, maxWord, maxWordSize, mousePressed, mouseReleased, newGame, possibleWords, radius1, radius2, radius3, radius4, radius5, released, reverseString, selLanguage, selectWords, setup, size, solution, touchStarted, word, wordList, words, wrap,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

wordList = null;

words = null;

index = 0;

word = '';

level = -1;

angle = 0;

direction = 1;

size = null;

radius1 = null; // avst책nd till gul cirkels mittpunkt

radius2 = null; // gul cirkels radie

radius3 = null; // avst책nd till siffra

radius4 = null; // gr채ns mellan siffror och bokst채ver

radius5 = null; // siffrans radie

possibleWords = [];

solution = "";

dt = 0;

maxWord = 4; // 4..15

languages = 'dan eng fra ger isl ita nor rus spa swe'.split(' ');

language = 9;

released = true;

buttons = [];

Button = class Button {
  constructor(txt, r1, degrees, r2, f) {
    this.txt = txt;
    this.r1 = r1;
    this.degrees = degrees;
    this.r2 = r2;
    this.f = f;
    this.x = this.r1 * cos(radians(this.degrees));
    this.y = this.r1 * sin(radians(this.degrees));
  }

  draw() {
    fc(1);
    circle(this.x, this.y, this.r2);
    fc(0);
    return text(this.txt, this.x, this.y);
  }

  mousePressed(mx, my) {
    if (this.r2 > dist(mx, my, width / 2 + this.x, height / 2 + this.y)) {
      return this.f();
    }
  }

};

setup = function() {
  var i, j, len, params, radius6, url;
  language = languages.indexOf(document.title.toLowerCase().split(' ')[1]);
  url = new URL(window.location.href);
  params = url.searchParams;
  maxWord = params.get("a");
  maxWord = maxWord ? parseInt(maxWord) : 4;
  createCanvas(windowWidth, windowHeight);
  size = min(width, height);
  radius2 = size / 12;
  radius1 = 0.5 * size - radius2;
  radius3 = 0.6 * radius1;
  radius4 = radius1 - radius2;
  radius5 = 0.05 * size;
  radius6 = 0.59 * size;
  wordList = _.shuffle(ordlista.split(' '));
  words = selectWords();
  for (i = j = 0, len = words.length; j < len; i = ++j) {
    word = words[i];
    words[i] = words[i].toLowerCase();
  }
  textAlign(CENTER, CENTER);
  print(wordList.length);
  buttons.push(new Button('15', radius6, 45, radius2, () => {
    return maxWordSize(1);
  }));
  buttons.push(new Button('4', radius6, 45 + 90, radius2, () => {
    return maxWordSize(-1);
  }));
  buttons.push(new Button('spa', radius6, 45 + 270, radius2, () => {
    return selLanguage(1);
  }));
  buttons.push(new Button('dan', radius6, 45 + 180, radius2, () => {
    return selLanguage(-1);
  }));
  return newGame(1);
};

maxWordSize = function(d) {
  maxWord = 4 + modulo(maxWord - 4 + d, 15 - 4 + 1);
  return words = selectWords();
};

selLanguage = function(d) {
  var n;
  n = languages.length;
  language = modulo(language + d, n);
  
  // go to another html file
  return window.location.href = `${languages[language]}.html?a=${maxWord}`;
};

newGame = function(dLevel) {
  var extra;
  solution = possibleWords.join(' ');
  direction = dLevel;
  extra = int(level / 10); // straffa med 10% av level.
  if (dLevel < 0 && extra !== 0) {
    dLevel *= extra;
  }
  level += dLevel;
  if (level < 0) {
    level = 0;
  }
  word = words[index];
  index++;
  index %= words.length;
  possibleWords = findWords(word);
  if (0.5 < random()) {
    word = reverseString(word);
  }
  word = word.toUpperCase();
  angle = 360 * random();
  return false; // to prevent double click on Android
};

wrap = function(first, last, value) {
  return first + modulo(value - first, last - first + 1);
};

draw = function() {
  var button, ch, dAngle, i, j, k, len, len1, n;
  bg(0.5);
  push();
  translate(width / 2, height / 2);
  buttons[0].txt = wrap(4, 15, maxWord + 1);
  buttons[1].txt = wrap(4, 15, maxWord - 1);
  n = languages.length;
  buttons[2].txt = languages[modulo(language + 1, n)];
  buttons[3].txt = languages[modulo(language - 1, n)];
  textSize(0.09 * size);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textSize(0.11 * size);
  text(`${languages[language]}-${maxWord}`, 0, -0.2 * size);
  textSize(0.06 * size);
  text(solution, 0, 0.18 * size);
  pop();
  //text solution + '|' + possibleWords.join(' '), width/2,height-size/10
  textSize(size / 4);
  if (direction === 1) {
    fc(0, 1, 0);
  } else {
    fc(1, 0, 0);
  }
  text(level, width / 2, height / 2);
  fc(0);
  translate(width / 2, height / 2);
  n = word.length;
  dAngle = 360 / n;
  rd(angle);
  textSize(size / 10);
  for (i = k = 0, len1 = word.length; k < len1; i = ++k) {
    ch = word[i];
    push();
    translate(radius1, 0);
    rd(90);
    fc(1, 1, 0);
    circle(0, 0, radius2);
    fc(0);
    text(ch, 0, 0);
    pop();
    rd(dAngle);
  }
  angle += (millis() - dt) / 50;
  return dt = millis();
};

selectWords = function() {
  var j, len, results, w;
  wordList = _.shuffle(ordlista.split(' '));
  index = 0;
  results = [];
  for (j = 0, len = wordList.length; j < len; j++) {
    w = wordList[j];
    if (w.length <= maxWord) {
      results.push(w);
    }
  }
  return results;
};

handleMousePressed = function() {
  var button, ch, dword, i, j, k, len, len1, n, results, rw, w, x, y;
  if (dist(mouseX, mouseY, width / 2, height / 2) > radius1 + radius2) {
    print(mouseX, mouseY);
    results = [];
    for (j = 0, len = buttons.length; j < len; j++) {
      button = buttons[j];
      results.push(button.mousePressed(mouseX, mouseY));
    }
    return results;
  } else {
    // letter	
    n = word.length;
    dword = (word + word).toLowerCase();
    for (i = k = 0, len1 = word.length; k < len1; i = ++k) {
      ch = word[i];
      x = width / 2 + radius1 * cos(radians(angle + i / n * 360));
      y = height / 2 + radius1 * sin(radians(angle + i / n * 360));
      if (radius2 > dist(mouseX, mouseY, x, y)) {
        w = dword.slice(i, i + n);
        rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
        if (indexOf.call(possibleWords, w) >= 0 || indexOf.call(possibleWords, rw) >= 0) {
          return newGame(1);
        } else {
          return newGame(-1);
        }
      }
    }
  }
};

reverseString = function(str) {
  return str.split("").reverse().join("");
};

mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

mousePressed = function() {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  handleMousePressed();
  return false; // to prevent double click on Android
};

touchStarted = function() {
  return handleMousePressed();
};

findWords = function(word) {
  var ch, dword, i, j, len, n, res, rw, w;
  n = word.length;
  dword = (word + word).toLowerCase();
  res = [];
  for (i = j = 0, len = word.length; j < len; i = ++j) {
    ch = word[i];
    w = dword.slice(i, i + n);
    rw = reverseString(dword).slice(n - i - 1, n - i + n - 1);
    if (indexOf.call(words, w) >= 0) {
      res.push(w);
    }
    if (indexOf.call(words, rw) >= 0) {
      res.push(rw);
    }
  }
  return _.uniq(res);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsU0FBQSxFQUFBLGtCQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxXQUFBLEVBQUEsWUFBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLFlBQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBO0VBQUE7OztBQUFBLFFBQUEsR0FBVzs7QUFDWCxLQUFBLEdBQVE7O0FBQ1IsS0FBQSxHQUFROztBQUNSLElBQUEsR0FBTzs7QUFDUCxLQUFBLEdBQVEsQ0FBQzs7QUFDVCxLQUFBLEdBQVE7O0FBQ1IsU0FBQSxHQUFZOztBQUNaLElBQUEsR0FBTzs7QUFFUCxPQUFBLEdBQVUsS0FUVjs7QUFVQSxPQUFBLEdBQVUsS0FWVjs7QUFXQSxPQUFBLEdBQVUsS0FYVjs7QUFZQSxPQUFBLEdBQVUsS0FaVjs7QUFhQSxPQUFBLEdBQVUsS0FiVjs7QUFlQSxhQUFBLEdBQWdCOztBQUNoQixRQUFBLEdBQVc7O0FBQ1gsRUFBQSxHQUFLOztBQUNMLE9BQUEsR0FBVSxFQWxCVjs7QUFtQkEsU0FBQSxHQUFZLHlDQUF5QyxDQUFDLEtBQTFDLENBQWdELEdBQWhEOztBQUNaLFFBQUEsR0FBVzs7QUFFWCxRQUFBLEdBQVc7O0FBQ1gsT0FBQSxHQUFVOztBQUVKLFNBQU4sTUFBQSxPQUFBO0VB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bndvcmRzID0gbnVsbFxyXG5pbmRleCA9IDBcclxud29yZCA9ICcnXHJcbmxldmVsID0gLTFcclxuYW5nbGUgPSAwXHJcbmRpcmVjdGlvbiA9IDFcclxuc2l6ZSA9IG51bGxcclxuXHJcbnJhZGl1czEgPSBudWxsICMgYXZzdMOlbmQgdGlsbCBndWwgY2lya2VscyBtaXR0cHVua3RcclxucmFkaXVzMiA9IG51bGwgIyBndWwgY2lya2VscyByYWRpZVxyXG5yYWRpdXMzID0gbnVsbCAjIGF2c3TDpW5kIHRpbGwgc2lmZnJhXHJcbnJhZGl1czQgPSBudWxsICMgZ3LDpG5zIG1lbGxhbiBzaWZmcm9yIG9jaCBib2tzdMOkdmVyXHJcbnJhZGl1czUgPSBudWxsICMgc2lmZnJhbnMgcmFkaWVcclxuXHJcbnBvc3NpYmxlV29yZHMgPSBbXVxyXG5zb2x1dGlvbiA9IFwiXCJcclxuZHQgPSAwIFxyXG5tYXhXb3JkID0gNCAjIDQuLjE1XHJcbmxhbmd1YWdlcyA9ICdkYW4gZW5nIGZyYSBnZXIgaXNsIGl0YSBub3IgcnVzIHNwYSBzd2UnLnNwbGl0ICcgJ1xyXG5sYW5ndWFnZSA9IDlcclxuXHJcbnJlbGVhc2VkID0gdHJ1ZSBcclxuYnV0dG9ucyA9IFtdXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAdHh0LEByMSxAZGVncmVlcyxAcjIsQGYpIC0+XHJcblx0XHRAeCA9IEByMSAqIGNvcyByYWRpYW5zIEBkZWdyZWVzXHJcblx0XHRAeSA9IEByMSAqIHNpbiByYWRpYW5zIEBkZWdyZWVzXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0ZmMgMVxyXG5cdFx0Y2lyY2xlIEB4LEB5LEByMlxyXG5cdFx0ZmMgMFxyXG5cdFx0dGV4dCBAdHh0LEB4LEB5XHJcblxyXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT4gaWYgQHIyID4gZGlzdChteCxteSx3aWR0aC8yK0B4LGhlaWdodC8yK0B5KSB0aGVuIEBmKClcclxuXHJcbnNldHVwID0gLT5cclxuXHJcblx0bGFuZ3VhZ2UgPSBsYW5ndWFnZXMuaW5kZXhPZiBkb2N1bWVudC50aXRsZS50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJylbMV0gXHJcblx0dXJsID0gbmV3IFVSTCB3aW5kb3cubG9jYXRpb24uaHJlZlxyXG5cdHBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXNcclxuXHRtYXhXb3JkID0gcGFyYW1zLmdldCBcImFcIlxyXG5cdG1heFdvcmQgPSBpZiBtYXhXb3JkIHRoZW4gcGFyc2VJbnQgbWF4V29yZCBlbHNlIDQgICBcclxuXHJcblx0Y3JlYXRlQ2FudmFzIHdpbmRvd1dpZHRoLHdpbmRvd0hlaWdodFxyXG5cdHNpemUgPSBtaW4gd2lkdGgsaGVpZ2h0XHJcblx0cmFkaXVzMiA9IHNpemUvMTJcclxuXHRyYWRpdXMxID0gMC41KnNpemUtcmFkaXVzMiBcclxuXHRyYWRpdXMzID0gMC42KnJhZGl1czFcclxuXHRyYWRpdXM0ID0gcmFkaXVzMSAtIHJhZGl1czJcclxuXHRyYWRpdXM1ID0gMC4wNSpzaXplXHJcblx0cmFkaXVzNiA9IDAuNTkqc2l6ZSBcclxuXHR3b3JkTGlzdCA9IF8uc2h1ZmZsZSBvcmRsaXN0YS5zcGxpdCAnICdcclxuXHR3b3JkcyA9IHNlbGVjdFdvcmRzKClcclxuXHRmb3Igd29yZCxpIGluIHdvcmRzXHJcblx0XHR3b3Jkc1tpXSA9IHdvcmRzW2ldLnRvTG93ZXJDYXNlKClcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHByaW50IHdvcmRMaXN0Lmxlbmd0aFxyXG5cclxuXHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiAnMTUnLCAgcmFkaXVzNiwgNDUsICAgICByYWRpdXMyLCAoKSA9PiBtYXhXb3JkU2l6ZSAxIFxyXG5cdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uICc0JywgICByYWRpdXM2LCA0NSs5MCwgIHJhZGl1czIsICgpID0+IG1heFdvcmRTaXplIC0xXHJcblx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24gJ3NwYScsIHJhZGl1czYsIDQ1KzI3MCwgcmFkaXVzMiwgKCkgPT4gc2VsTGFuZ3VhZ2UgMVxyXG5cdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uICdkYW4nLCByYWRpdXM2LCA0NSsxODAsIHJhZGl1czIsICgpID0+IHNlbExhbmd1YWdlIC0xXHJcblx0bmV3R2FtZSAxXHJcblxyXG5tYXhXb3JkU2l6ZSA9IChkKSAtPlxyXG5cdG1heFdvcmQgPSA0ICsgKG1heFdvcmQtNCtkKSAlJSAoMTUtNCsxKSBcclxuXHR3b3JkcyA9IHNlbGVjdFdvcmRzKClcclxuXHJcbnNlbExhbmd1YWdlID0gKGQpIC0+XHJcblx0biA9IGxhbmd1YWdlcy5sZW5ndGhcclxuXHRsYW5ndWFnZSA9IChsYW5ndWFnZStkKSAlJSBuIFxyXG5cdCMgZ28gdG8gYW5vdGhlciBodG1sIGZpbGVcclxuXHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiI3tsYW5ndWFnZXNbbGFuZ3VhZ2VdfS5odG1sP2E9I3ttYXhXb3JkfVwiXHJcblxyXG5uZXdHYW1lID0gKGRMZXZlbCkgLT5cclxuXHRzb2x1dGlvbiA9IHBvc3NpYmxlV29yZHMuam9pbiAnICdcclxuXHRkaXJlY3Rpb24gPSBkTGV2ZWxcclxuXHRleHRyYSA9IGludCBsZXZlbC8xMCAjIHN0cmFmZmEgbWVkIDEwJSBhdiBsZXZlbC5cclxuXHRpZiBkTGV2ZWwgPCAwIGFuZCBleHRyYSAhPSAwIHRoZW4gZExldmVsICo9IGV4dHJhXHJcblx0bGV2ZWwgKz0gZExldmVsXHJcblx0aWYgbGV2ZWwgPCAwIHRoZW4gbGV2ZWwgPSAwXHJcblx0d29yZCA9IHdvcmRzW2luZGV4XVxyXG5cdGluZGV4KytcclxuXHRpbmRleCAlPSB3b3Jkcy5sZW5ndGhcclxuXHRwb3NzaWJsZVdvcmRzID0gZmluZFdvcmRzIHdvcmRcclxuXHRpZiAwLjUgPCByYW5kb20oKSB0aGVuIHdvcmQgPSByZXZlcnNlU3RyaW5nIHdvcmRcclxuXHR3b3JkID0gd29yZC50b1VwcGVyQ2FzZSgpXHJcblx0YW5nbGUgPSAzNjAgKiByYW5kb20oKVxyXG5cdGZhbHNlICMgdG8gcHJldmVudCBkb3VibGUgY2xpY2sgb24gQW5kcm9pZFxyXG5cclxud3JhcCA9IChmaXJzdCxsYXN0LHZhbHVlKSAtPiBmaXJzdCArICh2YWx1ZS1maXJzdCkgJSUgKGxhc3QtZmlyc3QrMSlcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJnIDAuNVxyXG5cclxuXHRwdXNoKClcclxuXHR0cmFuc2xhdGUgd2lkdGgvMixoZWlnaHQvMlxyXG5cclxuXHRidXR0b25zWzBdLnR4dCA9IHdyYXAoNCwxNSxtYXhXb3JkKzEpXHJcblx0YnV0dG9uc1sxXS50eHQgPSB3cmFwKDQsMTUsbWF4V29yZC0xKVxyXG5cdG4gPSBsYW5ndWFnZXMubGVuZ3RoXHJcblx0YnV0dG9uc1syXS50eHQgPSBsYW5ndWFnZXNbKGxhbmd1YWdlKzEpJSVuXVxyXG5cdGJ1dHRvbnNbM10udHh0ID0gbGFuZ3VhZ2VzWyhsYW5ndWFnZS0xKSUlbl1cdFxyXG5cclxuXHR0ZXh0U2l6ZSAwLjA5ICogc2l6ZSBcclxuXHRmb3IgYnV0dG9uIGluIGJ1dHRvbnNcclxuXHRcdGJ1dHRvbi5kcmF3KClcclxuXHRcdFxyXG5cdHRleHRTaXplIDAuMTEgKiBzaXplIFxyXG5cdHRleHQgXCIje2xhbmd1YWdlc1tsYW5ndWFnZV19LSN7bWF4V29yZH1cIiwwLC0wLjIqc2l6ZSBcclxuXHR0ZXh0U2l6ZSAwLjA2ICogc2l6ZSBcclxuXHR0ZXh0IHNvbHV0aW9uLCAwLCAwLjE4KnNpemVcclxuXHJcblx0cG9wKClcclxuXHJcblx0I3RleHQgc29sdXRpb24gKyAnfCcgKyBwb3NzaWJsZVdvcmRzLmpvaW4oJyAnKSwgd2lkdGgvMixoZWlnaHQtc2l6ZS8xMFxyXG5cclxuXHR0ZXh0U2l6ZSBzaXplLzRcclxuXHRpZiBkaXJlY3Rpb24gPT0gMSB0aGVuIGZjIDAsMSwwIGVsc2UgZmMgMSwwLDBcclxuXHR0ZXh0IGxldmVsLHdpZHRoLzIsaGVpZ2h0LzIgXHJcblx0ZmMgMFxyXG5cdHRyYW5zbGF0ZSB3aWR0aC8yLGhlaWdodC8yXHJcblx0biA9IHdvcmQubGVuZ3RoXHJcblx0ZEFuZ2xlID0gMzYwL25cclxuXHRyZCBhbmdsZVxyXG5cdHRleHRTaXplIHNpemUvMTBcclxuXHRmb3IgY2gsaSBpbiB3b3JkXHJcblx0XHRwdXNoKClcclxuXHRcdHRyYW5zbGF0ZSByYWRpdXMxLDBcclxuXHRcdHJkIDkwXHJcblx0XHRmYyAxLDEsMFxyXG5cdFx0Y2lyY2xlIDAsMCxyYWRpdXMyXHJcblx0XHRmYyAwXHJcblx0XHR0ZXh0IGNoLDAsMFxyXG5cdFx0cG9wKClcclxuXHRcdHJkIGRBbmdsZVxyXG5cdGFuZ2xlICs9IChtaWxsaXMoKS1kdCkvNTBcclxuXHRkdCA9IG1pbGxpcygpXHJcblxyXG5zZWxlY3RXb3JkcyA9IC0+IFxyXG5cdHdvcmRMaXN0ID0gXy5zaHVmZmxlIG9yZGxpc3RhLnNwbGl0ICcgJ1xyXG5cdGluZGV4ID0gMFxyXG5cdHcgZm9yIHcgaW4gd29yZExpc3Qgd2hlbiB3Lmxlbmd0aCA8PSBtYXhXb3JkXHJcblxyXG5oYW5kbGVNb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmIGRpc3QobW91c2VYLG1vdXNlWSx3aWR0aC8yLGhlaWdodC8yKSA+IHJhZGl1czErcmFkaXVzMiBcclxuXHRcdHByaW50IG1vdXNlWCxtb3VzZVlcclxuXHRcdGZvciBidXR0b24gaW4gYnV0dG9uc1xyXG5cdFx0XHRidXR0b24ubW91c2VQcmVzc2VkIG1vdXNlWCxtb3VzZVlcclxuXHRlbHNlXHJcblx0XHQjIGxldHRlclx0XHJcblx0XHRuID0gd29yZC5sZW5ndGhcclxuXHRcdGR3b3JkID0gKHdvcmQrd29yZCkudG9Mb3dlckNhc2UoKVxyXG5cdFx0Zm9yIGNoLGkgaW4gd29yZFxyXG5cdFx0XHR4ID0gd2lkdGgvMiAgKyByYWRpdXMxICogY29zIHJhZGlhbnMgYW5nbGUgKyBpL24gKiAzNjBcclxuXHRcdFx0eSA9IGhlaWdodC8yICsgcmFkaXVzMSAqIHNpbiByYWRpYW5zIGFuZ2xlICsgaS9uICogMzYwXHJcblx0XHRcdGlmIHJhZGl1czIgPiBkaXN0IG1vdXNlWCxtb3VzZVkseCx5IFxyXG5cdFx0XHRcdHcgPSBkd29yZC5zbGljZSBpLGkrblxyXG5cdFx0XHRcdHJ3ID0gcmV2ZXJzZVN0cmluZyhkd29yZCkuc2xpY2Ugbi1pLTEsbi1pK24tMVxyXG5cdFx0XHRcdGlmIHcgaW4gcG9zc2libGVXb3JkcyBvciBydyBpbiBwb3NzaWJsZVdvcmRzXHJcblx0XHRcdFx0XHRyZXR1cm4gbmV3R2FtZSAxXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0cmV0dXJuIG5ld0dhbWUgLTFcclxuXHJcbnJldmVyc2VTdHJpbmcgPSAoc3RyKSAtPiBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4gXCJcIlxyXG5cclxubW91c2VSZWxlYXNlZCA9IC0+ICMgdG8gbWFrZSBBbmRyb2lkIHdvcmsgXHJcblx0cmVsZWFzZWQgPSB0cnVlIFxyXG5cdGZhbHNlXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmICFyZWxlYXNlZCB0aGVuIHJldHVybiAjIHRvIG1ha2UgQW5kcm9pZCB3b3JrIFxyXG5cdHJlbGVhc2VkID0gZmFsc2VcclxuXHRoYW5kbGVNb3VzZVByZXNzZWQoKVxyXG5cdGZhbHNlICMgdG8gcHJldmVudCBkb3VibGUgY2xpY2sgb24gQW5kcm9pZFxyXG5cclxudG91Y2hTdGFydGVkID0gLT4gaGFuZGxlTW91c2VQcmVzc2VkKClcclxuXHJcbmZpbmRXb3JkcyA9ICh3b3JkKSAtPlxyXG5cdG4gPSB3b3JkLmxlbmd0aFxyXG5cdGR3b3JkID0gKHdvcmQrd29yZCkudG9Mb3dlckNhc2UoKVxyXG5cdHJlcyA9IFtdXHJcblx0Zm9yIGNoLGkgaW4gd29yZFxyXG5cdFx0dyA9IGR3b3JkLnNsaWNlIGksaStuXHJcblx0XHRydyA9IHJldmVyc2VTdHJpbmcoZHdvcmQpLnNsaWNlIG4taS0xLG4taStuLTFcclxuXHRcdGlmIHcgaW4gd29yZHMgdGhlbiByZXMucHVzaCB3XHJcblx0XHRpZiBydyBpbiB3b3JkcyB0aGVuIHJlcy5wdXNoIHJ3XHJcblx0Xy51bmlxIHJlc1xyXG4iXX0=
//# sourceURL=C:\Lab\2017\136-Lettero\coffee\sketch.coffee