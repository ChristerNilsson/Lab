// Generated by CoffeeScript 2.4.1
// https://codegolf.stackexchange.com/questions/190727/the-fastest-sudoku-solver

// 'use strict';
var BIT, BLOCK, BLOCK_NDX, N_BIT, ZERO, filename, fs, i, init, j, len, len1, output, p, puzzle, range, res, showGrid, sol, solve;

fs = require('fs');

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

BLOCK = [];

BLOCK_NDX = [];

N_BIT = [];

ZERO = [];

BIT = [];

showGrid = function(prompt, m) {
  var count, digit, j, len1;
  count = 0;
  for (j = 0, len1 = m.length; j < len1; j++) {
    digit = m[j];
    if (digit !== -1) {
      count += 1;
    }
  }
  
  //m.map((digit) => {if (digit != -1) count+=1 })
  return console.log(prompt, m.map((digit) => {
    return digit + 1;
  }).join(''), count);
};

// initialization of lookup tables
init = function() {
  var j, l, len1, len2, len3, len4, n, o, ptr, q, ref, ref1, ref2, ref3, res, results, x, y;
  ref = range(0x200);
  //ptr=null
  //x=null
  //y=null
  for (j = 0, len1 = ref.length; j < len1; j++) {
    x = ref[j];
    // N_BIT[x] = [0, 1, 2, 3, 4, 5, 6, 7, 8]
    // 	.reduce ((s, n) => s + (x >> n & 1), 0)
    res = 0;
    ref1 = range(9);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      n = ref1[l];
      res += x >> n & 1;
    }
    N_BIT[x] = res; // [0, 1, 2, 3, 4, 5, 6, 7, 8].reduce ((s, n) => s + (x >> n & 1)), 0
    ZERO[x] = ~x & -(~x);
  }
  ref2 = range(9);
  for (o = 0, len3 = ref2.length; o < len3; o++) {
    x = ref2[o];
    BIT[1 << x] = x;
  }
  ptr = 0;
  ref3 = range(9);
  results = [];
  for (q = 0, len4 = ref3.length; q < len4; q++) {
    y = ref3[q];
    results.push((function() {
      var len5, r, ref4, results1;
      ref4 = range(9);
      results1 = [];
      for (r = 0, len5 = ref4.length; r < len5; r++) {
        x = ref4[r];
        BLOCK[ptr] = (y / 3 | 0) * 3 + (x / 3 | 0);
        BLOCK_NDX[ptr] = (y % 3) * 3 + x % 3;
        results1.push(ptr++);
      }
      return results1;
    })());
  }
  return results;
};

// console.log 'N_BIT',N_BIT
// console.log 'ZERO',ZERO
// console.log 'BIT',BIT
// console.log 'BLOCK',BLOCK
// console.log 'BLOCK_NDX',BLOCK_NDX

// solver
solve = function(p) {
  var blk, col, count, j, l, len1, len2, m, play, ptr, ref, ref1, row, search, undo, v, x, xres, y;
  console.log('solve', p);
  //ptr = null
  //x = null
  //y = null
  //v = null
  count = 81;
  m = Array(81).fill(-1);
  row = Array(9).fill(0);
  col = Array(9).fill(0);
  blk = Array(9).fill(0);
  // convert the puzzle into our own format
  ptr = 0;
  ref = range(9);
  for (j = 0, len1 = ref.length; j < len1; j++) {
    y = ref[j];
    ref1 = range(9);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      x = ref1[l];
      if (~(v = p[ptr] - 1)) {
        col[x] |= 1 << v;
        row[y] |= 1 << v;
        blk[BLOCK[ptr]] |= 1 << v;
        count--;
        m[ptr] = v;
      }
      ptr++;
    }
  }
  // main recursive search function
  // helper function to check and play a move
  play = function(msg, stack, x, y, n) {
    var b, item, msk;
    p = y * 9 + x;
    if (~m[p]) {
      if (m[p] === n) {
        return true;
      }
      undo(stack);
      return false;
    }
    msk = 1 << n;
    b = BLOCK[p];
    if ((col[x] | row[y] | blk[b]) & msk) {
      undo(stack);
      return false;
    }
    count--;
    col[x] ^= msk;
    row[y] ^= msk;
    blk[b] ^= msk;
    m[p] = n;
    stack.push(x << 8 | y << 4 | n);
    console.log('play', msg, (function() {
      var len3, o, results;
      results = [];
      for (o = 0, len3 = stack.length; o < len3; o++) {
        item = stack[o];
        results.push(item.toString(16));
      }
      return results;
    })(), x, y, n);
    showGrid('m    ', m);
    return true;
  };
  // helper function to undo all moves on the stack
  undo = function(stack) {
    var b, item, len3, o, results, vv;
    console.log('undo', (function() {
      var len3, o, results;
      results = [];
      for (o = 0, len3 = stack.length; o < len3; o++) {
        item = stack[o];
        results.push(item.toString(16));
      }
      return results;
    })());
    results = [];
    for (o = 0, len3 = stack.length; o < len3; o++) {
      v = stack[o];
      //stack.map (v) =>
      x = v >> 8;
      y = v >> 4 & 15;
      p = y * 9 + x;
      b = BLOCK[p];
      vv = 1 << (v & 15);
      count++;
      col[x] ^= vv;
      row[y] ^= vv;
      blk[b] ^= vv;
      m[p] = -1;
      results.push(showGrid('u    ', m));
    }
    return results;
  };
  search = function() {
    var b, best, dBlk, dCol, dRow, i, k, len3, len4, len5, len6, max, n, o, q, r, ref2, ref3, ref4, ref5, s, stack, v0;
    if (!count) {
      return true;
    }
    //ptr = null
    // x = null
    // y = null 
    //v = null
    //n = null
    //max = null
    //best = null
    //k = null 
    //i = null
    stack = [];
    dCol = Array(81).fill(0);
    dRow = Array(81).fill(0);
    dBlk = Array(81).fill(0);
    //b = null
    //v0 = null

    // scan the grid:
    // - keeping track of where each digit can go on a given column, row or block
    // - looking for a cell with the fewest number of legal moves
    max = 0;
    ptr = 0;
    ref2 = range(9);
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      y = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        x = ref3[q];
        if (m[ptr] === -1) {
          v = col[x] | row[y] | blk[BLOCK[ptr]];
          n = N_BIT[v];
          //abort if there's no legal move on this cell
          if (n === 9) {
            return false;
          }
          
          // update dCol[], dRow[] and dBlk[]
          v0 = v ^ 0x1FF;
          while (true) {
            b = v0 & -v0;
            dCol[x * 9 + BIT[b]] |= 1 << y;
            dRow[y * 9 + BIT[b]] |= 1 << x;
            dBlk[BLOCK[ptr] * 9 + BIT[b]] |= 1 << BLOCK_NDX[ptr];
            v0 ^= b;
            if (!v0) {
              break;
            }
          }
          
          //console.log 'v0', v0

          // update the cell with the fewest number of moves
          if (n > max) {
            best = {
              x: x,
              y: y,
              ptr: ptr,
              msk: v
            };
            max = n;
          }
        }
        ptr++;
      }
    }
    console.log('best', best, max);
    ref4 = range(9);
    // play all forced moves (unique candidates on a given column, row or block)
    // and make sure that it doesn't lead to any inconsistency
    for (r = 0, len5 = ref4.length; r < len5; r++) {
      k = ref4[r];
      ref5 = range(9);
      for (s = 0, len6 = ref5.length; s < len6; s++) {
        n = ref5[s];
        if (N_BIT[dCol[k * 9 + n]] === 1) {
          i = BIT[dCol[k * 9 + n]];
          if (!play('col', stack, k, i, n)) {
            return false;
          }
        }
        if (N_BIT[dRow[k * 9 + n]] === 1) {
          i = BIT[dRow[k * 9 + n]];
          if (!play('row', stack, i, k, n)) {
            return false;
          }
        }
        if (N_BIT[dBlk[k * 9 + n]] === 1) {
          i = BIT[dBlk[k * 9 + n]];
          if (!play('blk', stack, (k % 3) * 3 + i % 3, (k / 3 | 0) * 3 + (i / 3 | 0), n)) {
            return false;
          }
        }
      }
    }
    // if we've played at least one forced move, do a recursive call right away
    if (stack.length) {
      if (search()) {
        return true;
      }
      undo(stack);
      return false;
    }
    // otherwise, try all moves on the cell with the fewest number of moves
    while ((v = ZERO[best.msk]) < 0x200) {
      console.log('v', v, BIT[v]);
      col[best.x] ^= v;
      row[best.y] ^= v;
      blk[BLOCK[best.ptr]] ^= v;
      m[best.ptr] = BIT[v];
      count--;
      console.log('guess', best.x, best.y, BIT[v]);
      showGrid('mm   ', m);
      console.log('stack', stack.map((item) => {
        return item.toString(16);
      }));
      if (search()) {
        return true;
      }
      count++;
      m[best.ptr] = -1;
      col[best.x] ^= v;
      row[best.y] ^= v;
      blk[BLOCK[best.ptr]] ^= v;
      best.msk ^= v;
    }
    return false;
  };
  xres = search();
  console.log('res=', xres);
  if (xres) {
    return m.map((n) => {
      return n + 1;
    }).join('');
  } else {
    return false;
  }
};

// # debugging
// dump = (m) ->
// 	x = null
// 	y = null
// 	c = 81
// 	s = ''

// 	# for y in range 9 #(y = 0; y < 9; y++) {
// 	# 	for x in range 9 #(x = 0; x < 9; x++) {
// 	# 		s += (if ~m[y * 9 + x] 
// 	# 			c--
// 	# 			m[y * 9 + x] + 1 
// 	# 		else '-') + (if x % 3 < 2 || x == 8 then ' ' else ' | ');
// 	# 	s += if y % 3 < 2 || y == 8 then '\n' else '\n------+-------+------\n';
// 	console.log c
// 	console.log s
console.time('Processing time');

init();

filename = process.argv[2];

puzzle = fs.readFileSync(filename).toString().split('\n');

len = puzzle.shift();

output = len + '\n';

console.log("File '" + filename + "': " + len + " puzzles");

// solve all puzzles
for (i = j = 0, len1 = puzzle.length; j < len1; i = ++j) {
  p = puzzle[i];
  sol = null;
  res = null;
  if (i !== 7) {
    continue;
  }
  [p, sol] = p.split(',');
  //console.log p,i
  if (p.length === 81) {
    if (!(++i % 2000)) {
      console.log((i * 100 / len).toFixed(1) + '%');
    }
    if (!(res = solve(p))) {
      throw "Failed on puzzle " + i;
    }
    if (sol && res !== sol) {
      throw "Invalid solution for puzzle " + i;
    }
    console.log(p);
    console.log(res);
    output += p + ',' + res + '\n';
  }
}

// results
console.timeEnd('Processing time');

fs.writeFileSync('sudoku.log', output);

console.log("MD5 = " + require('crypto').createHash('md5').update(output).digest("hex"));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\030-SudokuDLXnodejs\coffee\sudoku.coffee