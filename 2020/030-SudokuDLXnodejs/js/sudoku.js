// Generated by CoffeeScript 2.4.1
// https://codegolf.stackexchange.com/questions/190727/the-fastest-sudoku-solver
// This code works, but I had to introduce a class to handle variable scopes in coffeescript
// This adds about 25% to the exec time.
// node js/sudoku tests/data/collections/all_17
var BIT, BLOCK, BLOCK_NDX, N_BIT, Sudoku, TRACE, ZERO, blk, col, count, filename, fs, i, j, len, len1, m, output, puzzle, puzzles, range, res, row, showGrid, sudoku;

TRACE = false;

BLOCK = []; // 81 digits

BLOCK_NDX = []; // 81 digits

N_BIT = []; // 512 integers

ZERO = []; // 512 integers

BIT = []; // 512 integers

count = 0;

m = []; // 81 digits

col = []; // 9 bit patterns

row = []; // 9 bit patterns

blk = []; // 9 bit patternsnull

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

showGrid = function(prompt, m) {
  var counter, digit, j, len1;
  counter = 0;
  for (j = 0, len1 = m.length; j < len1; j++) {
    digit = m[j];
    if (digit !== -1) {
      counter++;
    }
  }
  return console.log(prompt, m.map((digit) => {
    return digit + 1;
  }).join(''), counter);
};

Sudoku = class Sudoku {
  constructor() { // initialization of lookup tables 
    var j, l, len1, len2, len3, len4, o, ptr, q, ref, ref1, ref2, ref3, x, y;
    ref = range(0x200);
    for (j = 0, len1 = ref.length; j < len1; j++) {
      x = ref[j];
      N_BIT[x] = range(9).reduce((function(s, n) {
        return s + (x >> n & 1);
      }), 0);
      ZERO[x] = ~x & -(~x);
    }
    ref1 = range(9);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      x = ref1[l];
      BIT[1 << x] = x;
    }
    ref2 = range(9);
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      y = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        x = ref3[q];
        ptr = 9 * y + x;
        BLOCK[ptr] = (y / 3 | 0) * 3 + (x / 3 | 0);
        BLOCK_NDX[ptr] = (y % 3) * 3 + x % 3;
      }
    }
  }

  // helper function to check and play a move
  play(level, stack, x, y, n) {
    var b, msk, p;
    p = y * 9 + x;
    if (~m[p]) {
      if (m[p] === n) {
        return true;
      }
      this.undo(level, stack);
      return false;
    }
    msk = 1 << n;
    b = BLOCK[p];
    if ((col[x] | row[y] | blk[b]) & msk) {
      this.undo(level, stack);
      return false;
    }
    count--;
    col[x] ^= msk;
    row[y] ^= msk;
    blk[b] ^= msk;
    m[p] = n;
    stack.push(x << 8 | y << 4 | n);
    if (TRACE) {
      console.log('play ' + ' '.repeat(level), 81 - count, x, y, n);
    }
    //showGrid 'm    ', m
    return true;
  }

  undo(level, stack) { // helper function to undo all moves on the stack
    var b, index, j, len1, msk, ref, results, v, x, y;
    ref = stack.reverse();
    // console.log 'undo', (item.toString(16) for item in stack)
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      v = ref[j];
      x = v >> 8;
      y = v >> 4 & 15;
      index = y * 9 + x;
      b = BLOCK[index];
      if (TRACE) {
        console.log('undo ' + ' '.repeat(level), 81 - count, x, y, v & 15);
      }
      msk = 1 << (v & 15);
      count++;
      col[x] ^= msk;
      row[y] ^= msk;
      blk[b] ^= msk;
      results.push(m[index] = -1);
    }
    return results;
  }

  // showGrid 'u    ',m
  solve(p) {
    var digit, index, j, l, len1, len2, msk, ref, ref1, x, xres, y;
    count = 81;
    row = Array(9).fill(0);
    col = Array(9).fill(0);
    blk = Array(9).fill(0);
    m = Array(81).fill(-1);
    ref = range(9);
    // convert the puzzle into our own format
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        index = 9 * y + x;
        if (~(digit = p[index] - 1)) {
          msk = 1 << digit;
          col[x] |= msk;
          row[y] |= msk;
          blk[BLOCK[index]] |= msk;
          count--;
          m[index] = digit;
        }
      }
    }
    xres = this.search();
    if (xres) {
      return m.map((n) => {
        return n + 1;
      }).join('');
    } else {
      return false;
    }
  }

  search(level = 0) { // main recursive search function
    var b, best, dBlk, dCol, dRow, i, j, k, l, len1, len2, len3, len4, max, msk, n, o, ptr, q, ref, ref1, ref2, ref3, stack, v, v0, x, y;
    if (!count) {
      return true;
    }
    //console.log('search',level)

    // Local variables
    max = 0;
    best = null;
    stack = [];
    dCol = Array(81).fill(0);
    dRow = Array(81).fill(0);
    dBlk = Array(81).fill(0);
    ref = range(9);
    // scan the grid:
    // - keeping track of where each digit can go on a given column, row or block
    // - looking for a cell with the fewest number of legal moves
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        ptr = 9 * y + x;
        if (m[ptr] === -1) {
          v = col[x] | row[y] | blk[BLOCK[ptr]];
          n = N_BIT[v];
          //abort if there's no legal move on this cell
          if (n === 9) {
            return false;
          }
          
          // update dCol[], dRow[] and dBlk[]
          v0 = v ^ 0x1FF;
          while (true) {
            b = v0 & -v0;
            dCol[x * 9 + BIT[b]] |= 1 << y;
            dRow[y * 9 + BIT[b]] |= 1 << x;
            dBlk[BLOCK[ptr] * 9 + BIT[b]] |= 1 << BLOCK_NDX[ptr];
            v0 ^= b;
            if (!v0) {
              break;
            }
          }
          
          //console.log 'v0', v0

          // update the cell with the fewest number of moves
          if (n > max) {
            best = {
              x: x,
              y: y,
              ptr: ptr,
              msk: v
            };
            max = n;
          }
        }
      }
    }
    ref2 = range(9);
    //ptr++
    //console.log('best',best,max)

    // play all forced moves (unique candidates on a given column, row or block)
    // and make sure that it doesn't lead to any inconsistency
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      k = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        n = ref3[q];
        ptr = k * 9 + n;
        if (N_BIT[dCol[ptr]] === 1) {
          i = BIT[dCol[ptr]];
          if (!this.play(level, stack, k, i, n)) {
            return false;
          }
        }
        if (N_BIT[dRow[ptr]] === 1) {
          i = BIT[dRow[ptr]];
          if (!this.play(level, stack, i, k, n)) {
            return false;
          }
        }
        if (N_BIT[dBlk[ptr]] === 1) {
          i = BIT[dBlk[ptr]];
          if (!this.play(level, stack, (k % 3) * 3 + i % 3, (k / 3 | 0) * 3 + (i / 3 | 0), n)) {
            return false;
          }
        }
      }
    }
    // if we've played at least one forced move, do a recursive call right away
    if (stack.length) {
      if (this.search(level + 1)) {
        return true;
      }
      this.undo(level, stack);
      return false;
    }
    //console.log 'best', best.msk.toString(16), N_BIT[best.msk]

    // otherwise, try all moves on the cell with the fewest number of moves
    while ((msk = ZERO[best.msk]) < 0x200) {
      //console.log('v',v,BIT[v])
      col[best.x] ^= msk;
      row[best.y] ^= msk;
      blk[BLOCK[best.ptr]] ^= msk;
      m[best.ptr] = BIT[msk];
      count--;
      //showGrid('mm   ',m)
      //console.log('stack',stack.map((item) => item.toString(16)))
      if (TRACE) {
        console.log('guess' + ' '.repeat(level), 81 - count, best.x, best.y, BIT[msk]);
      }
      if (this.search(level + 1)) {
        return true;
      }
      if (TRACE) {
        console.log('ungue' + ' '.repeat(level), 81 - count, best.x, best.y, BIT[msk]);
      }
      count++;
      m[best.ptr] = -1;
      col[best.x] ^= msk;
      row[best.y] ^= msk;
      blk[BLOCK[best.ptr]] ^= msk;
      best.msk ^= msk;
    }
    return false;
  }

};

fs = require('fs');

sudoku = new Sudoku();

filename = process.argv[2];

puzzles = fs.readFileSync(filename).toString().split('\n');

len = puzzles.shift();

output = len + '\n';

console.log("File '" + filename + "': " + len + " puzzles");

console.time('Processing time');

// solve all puzzles
for (i = j = 0, len1 = puzzles.length; j < len1; i = ++j) {
  puzzle = puzzles[i];
  if (puzzle.length !== 81) {
    continue;
  }
  if (!(++i % 2000)) {
    console.log((i * 100 / len).toFixed(1) + '%');
  }
  if (!(res = sudoku.solve(puzzle))) {
    throw "Failed on puzzle " + i;
  }
  //console.timeEnd 'start'
  output += puzzle + ',' + res + '\n';
}

// results
console.timeEnd('Processing time');

fs.writeFileSync('sudoku.log', output);

console.log("MD5 = " + require('crypto').createHash('md5').update(output).digest("hex"));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vkb2t1LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHN1ZG9rdS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0FBQUEsSUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQTs7QUFLQSxLQUFBLEdBQVE7O0FBRVIsS0FBQSxHQUFZLEdBUFo7O0FBUUEsU0FBQSxHQUFZLEdBUlo7O0FBU0EsS0FBQSxHQUFZLEdBVFo7O0FBVUEsSUFBQSxHQUFZLEdBVlo7O0FBV0EsR0FBQSxHQUFZLEdBWFo7O0FBYUEsS0FBQSxHQUFROztBQUNSLENBQUEsR0FBSSxHQWRKOztBQWVBLEdBQUEsR0FBTSxHQWZOOztBQWdCQSxHQUFBLEdBQU0sR0FoQk47O0FBaUJBLEdBQUEsR0FBTSxHQWpCTjs7QUFtQkEsS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTzs7Ozs7QUFBUDs7QUFFUixRQUFBLEdBQVcsUUFBQSxDQUFDLE1BQUQsRUFBUSxDQUFSLENBQUE7QUFDVixNQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUEsT0FBQSxHQUFVO0VBQ1YsS0FBQSxxQ0FBQTs7SUFDQyxJQUFHLEtBQUEsS0FBUyxDQUFDLENBQWI7TUFBb0IsT0FBQSxHQUFwQjs7RUFERDtTQUVBLE9BQU8sQ0FBQyxHQUFSLENBQVksTUFBWixFQUFvQixDQUFDLENBQUMsR0FBRixDQUFPLENBQUMsS0FBRCxDQUFBLEdBQUE7V0FBVyxLQUFB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O0VBQ0EsSUFBRyxDQUFDLENBQUMsRUFBRSxDQUFGLEdBQU0sSUFBUCxDQUFKO0lBQXNCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxDQUFBLEdBQUksR0FBSixHQUFVLEdBQVgsQ0FBZSxDQUFDLE9BQWhCLENBQXdCLENBQXhCLENBQUEsR0FBNkIsR0FBekMsRUFBdEI7O0VBRUEsSUFBRyxDQUFDLENBQUMsR0FBQSxHQUFNLE1BQU0sQ0FBQyxLQUFQLENBQWEsTUFBYixDQUFQLENBQUo7SUFBcUMsTUFBTSxtQkFBQSxHQUFzQixFQUFqRTtHQUhBOztFQUtBLE1BQUEsSUFBVSxNQUFBLEdBQVMsR0FBVCxHQUFlLEdBQWYsR0FBcUI7QUFOaEMsQ0F4TkE7OztBQWlPQSxPQUFPLENBQUMsT0FBUixDQUFnQixpQkFBaEI7O0FBQ0EsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsWUFBakIsRUFBK0IsTUFBL0I7O0FBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFBLEdBQVcsT0FBQSxDQUFRLFFBQVIsQ0FBaUIsQ0FBQyxVQUFsQixDQUE2QixLQUE3QixDQUFtQyxDQUFDLE1BQXBDLENBQTJDLE1BQTNDLENBQWtELENBQUMsTUFBbkQsQ0FBMEQsS0FBMUQsQ0FBdkIiLCJzb3VyY2VzQ29udGVudCI6WyIjIGh0dHBzOi8vY29kZWdvbGYuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzE5MDcyNy90aGUtZmFzdGVzdC1zdWRva3Utc29sdmVyXHJcbiMgVGhpcyBjb2RlIHdvcmtzLCBidXQgSSBoYWQgdG8gaW50cm9kdWNlIGEgY2xhc3MgdG8gaGFuZGxlIHZhcmlhYmxlIHNjb3BlcyBpbiBjb2ZmZWVzY3JpcHRcclxuIyBUaGlzIGFkZHMgYWJvdXQgMjUlIHRvIHRoZSBleGVjIHRpbWUuXHJcbiMgbm9kZSBqcy9zdWRva3UgdGVzdHMvZGF0YS9jb2xsZWN0aW9ucy9hbGxfMTdcclxuXHJcblRSQUNFID0gZmFsc2VcclxuXHJcbkJMT0NLICAgICA9IFtdICMgODEgZGlnaXRzXHJcbkJMT0NLX05EWCA9IFtdICMgODEgZGlnaXRzXHJcbk5fQklUICAgICA9IFtdICMgNTEyIGludGVnZXJzXHJcblpFUk8gICAgICA9IFtdICMgNTEyIGludGVnZXJzXHJcbkJJVCAgICAgICA9IFtdICMgNTEyIGludGVnZXJzXHJcblxyXG5jb3VudCA9IDBcclxubSA9IFtdICMgODEgZGlnaXRzXHJcbmNvbCA9IFtdICMgOSBiaXQgcGF0dGVybnNcclxucm93ID0gW10gIyA5IGJpdCBwYXR0ZXJuc1xyXG5ibGsgPSBbXSAjIDkgYml0IHBhdHRlcm5zbnVsbFxyXG5cclxucmFuZ2UgPSAobikgLT4gWzAuLi5uXVxyXG5cclxuc2hvd0dyaWQgPSAocHJvbXB0LG0pIC0+XHJcblx0Y291bnRlciA9IDBcclxuXHRmb3IgZGlnaXQgaW4gbVxyXG5cdFx0aWYgZGlnaXQgIT0gLTEgdGhlbiBjb3VudGVyKytcclxuXHRjb25zb2xlLmxvZyBwcm9tcHQsIG0ubWFwKCAoZGlnaXQpID0+IGRpZ2l0KzEpLmpvaW4oJycpLCBjb3VudGVyXHJcblxyXG5jbGFzcyBTdWRva3VcclxuXHRjb25zdHJ1Y3RvciA6IC0+ICMgaW5pdGlhbGl6YXRpb24gb2YgbG9va3VwIHRhYmxlcyBcclxuXHJcblx0XHRmb3IgeCBpbiByYW5nZSAweDIwMFxyXG5cdFx0XHROX0JJVFt4XSA9IHJhbmdlKDkpLnJlZHVjZSAoKHMsbikgLT4gcyArICh4ID4+IG4gJiAxKSksIDBcclxuXHRcdFx0WkVST1t4XSA9IH54ICYgLX54XHJcblx0XHRmb3IgeCBpbiByYW5nZSA5XHJcblx0XHRcdEJJVFsxIDw8IHhdID0geFxyXG5cclxuXHRcdGZvciB5IGluIHJhbmdlIDlcclxuXHRcdFx0Zm9yIHggaW4gcmFuZ2UgOVxyXG5cdFx0XHRcdHB0ciA9IDkgKiB5ICsgeFxyXG5cdFx0XHRcdEJMT0NLW3B0cl0gPSAoeSAvIDMgfCAwKSAqIDMgKyAoeCAvIDMgfCAwKVxyXG5cdFx0XHRcdEJMT0NLX05EWFtwdHJdID0gKHkgJSAzKSAqIDMgKyB4ICUgM1xyXG5cclxuXHQjIGhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBhbmQgcGxheSBhIG1vdmVcclxuXHRwbGF5IDogKGxldmVsLCBzdGFjaywgeCwgeSwgbikgLT5cclxuXHRcdHAgPSB5ICogOSArIHhcclxuXHJcblx0XHRpZiB+bVtwXVxyXG5cdFx0XHRpZiBtW3BdID09IG4gdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0XHRAdW5kbyBsZXZlbCxzdGFja1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdFxyXG5cdFx0bXNrID0gMSA8PCBuXHJcblx0XHRiID0gQkxPQ0tbcF1cclxuXHJcblx0XHRpZiAoY29sW3hdIHwgcm93W3ldIHwgYmxrW2JdKSAmIG1za1xyXG5cdFx0XHRAdW5kbyBsZXZlbCxzdGFja1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdFxyXG5cdFx0Y291bnQtLVxyXG5cdFx0Y29sW3hdIF49IG1za1xyXG5cdFx0cm93W3ldIF49IG1za1xyXG5cdFx0YmxrW2JdIF49IG1za1xyXG5cdFx0bVtwXSA9IG5cclxuXHRcdHN0YWNrLnB1c2ggeCA8PCA4IHwgeSA8PCA0IHwgblxyXG5cdFx0aWYgVFJBQ0UgdGhlbiBjb25zb2xlLmxvZyAncGxheSAnICsgJyAnLnJlcGVhdChsZXZlbCksIDgxLWNvdW50LCB4LCB5LCBuXHJcblx0XHQjc2hvd0dyaWQgJ20gICAgJywgbVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHJcblx0dW5kbyA6IChsZXZlbCxzdGFjaykgLT4gIyBoZWxwZXIgZnVuY3Rpb24gdG8gdW5kbyBhbGwgbW92ZXMgb24gdGhlIHN0YWNrXHJcblx0XHQjIGNvbnNvbGUubG9nICd1bmRvJywgKGl0ZW0udG9TdHJpbmcoMTYpIGZvciBpdGVtIGluIHN0YWNrKVxyXG5cdFx0Zm9yIHYgaW4gc3RhY2sucmV2ZXJzZSgpXHJcblx0XHRcdHggPSB2ID4+IDhcclxuXHRcdFx0eSA9IHYgPj4gNCAmIDE1XHJcblx0XHRcdGluZGV4ID0geSAqIDkgKyB4XHJcblx0XHRcdGIgPSBCTE9DS1tpbmRleF1cclxuXHRcdFx0aWYgVFJBQ0UgdGhlbiBjb25zb2xlLmxvZyAndW5kbyAnKycgJy5yZXBlYXQobGV2ZWwpLCA4MS1jb3VudCwgeCwgeSwgdiAmIDE1XHJcblxyXG5cdFx0XHRtc2sgPSAxIDw8ICh2ICYgMTUpXHJcblxyXG5cdFx0XHRjb3VudCsrXHJcblx0XHRcdGNvbFt4XSBePSBtc2tcclxuXHRcdFx0cm93W3ldIF49IG1za1xyXG5cdFx0XHRibGtbYl0gXj0gbXNrXHJcblx0XHRcdG1baW5kZXhdID0gLTFcclxuXHRcdFx0IyBzaG93R3JpZCAndSAgICAnLG1cclxuXHJcblx0c29sdmUgOiAocCkgLT5cclxuXHRcdGNvdW50ID0gODFcclxuXHRcdHJvdyA9IEFycmF5KDkpLmZpbGwgMFxyXG5cdFx0Y29sID0gQXJyYXkoOSkuZmlsbCAwXHJcblx0XHRibGsgPSBBcnJheSg5KS5maWxsIDBcclxuXHRcdG0gPSBBcnJheSg4MSkuZmlsbCAtMVxyXG5cclxuXHRcdCMgY29udmVydCB0aGUgcHV6emxlIGludG8gb3VyIG93biBmb3JtYXRcclxuXHRcdGZvciB5IGluIHJhbmdlIDlcclxuXHRcdFx0Zm9yIHggaW4gcmFuZ2UgOVxyXG5cdFx0XHRcdGluZGV4ID0gOSAqIHkgKyB4XHJcblx0XHRcdFx0aWYgfihkaWdpdCA9IHBbaW5kZXhdIC0gMSlcclxuXHRcdFx0XHRcdG1zayA9IDEgPDwgZGlnaXRcclxuXHRcdFx0XHRcdGNvbFt4XSB8PSBtc2tcclxuXHRcdFx0XHRcdHJvd1t5XSB8PSBtc2tcclxuXHRcdFx0XHRcdGJsa1tCTE9DS1tpbmRleF1dIHw9IG1za1xyXG5cdFx0XHRcdFx0Y291bnQtLVxyXG5cdFx0XHRcdFx0bVtpbmRleF0gPSBkaWdpdFxyXG5cclxuXHRcdHhyZXMgPSBAc2VhcmNoKClcclxuXHRcdHJldHVybiBpZiB4cmVzIHRoZW4gbS5tYXAoKG4pID0+IG4gKyAxKS5qb2luKCcnKSBlbHNlIGZhbHNlXHJcblxyXG5cdHNlYXJjaCA6IChsZXZlbD0wKSAtPiAjIG1haW4gcmVjdXJzaXZlIHNlYXJjaCBmdW5jdGlvblxyXG5cdFx0aWYgIWNvdW50IHRoZW4gcmV0dXJuIHRydWVcclxuXHJcblx0XHQjY29uc29sZS5sb2coJ3NlYXJjaCcsbGV2ZWwpXHJcblxyXG5cdFx0IyBMb2NhbCB2YXJpYWJsZXNcclxuXHRcdG1heCA9IDBcclxuXHRcdGJlc3QgPSBudWxsXHJcblx0XHRzdGFjayA9IFtdXHJcblx0XHRkQ29sID0gQXJyYXkoODEpLmZpbGwgMFxyXG5cdFx0ZFJvdyA9IEFycmF5KDgxKS5maWxsIDBcclxuXHRcdGRCbGsgPSBBcnJheSg4MSkuZmlsbCAwXHJcblxyXG5cdFx0IyBzY2FuIHRoZSBncmlkOlxyXG5cdFx0IyAtIGtlZXBpbmcgdHJhY2sgb2Ygd2hlcmUgZWFjaCBkaWdpdCBjYW4gZ28gb24gYSBnaXZlbiBjb2x1bW4sIHJvdyBvciBibG9ja1xyXG5cdFx0IyAtIGxvb2tpbmcgZm9yIGEgY2VsbCB3aXRoIHRoZSBmZXdlc3QgbnVtYmVyIG9mIGxlZ2FsIG1vdmVzXHJcblx0XHRmb3IgeSBpbiByYW5nZSA5XHJcblx0XHRcdGZvciB4IGluIHJhbmdlIDlcclxuXHRcdFx0XHRwdHIgPSA5ICogeSArIHhcclxuXHRcdFx0XHRpZiBtW3B0cl0gPT0gLTFcclxuXHRcdFx0XHRcdHYgPSBjb2xbeF0gfCByb3dbeV0gfCBibGtbQkxPQ0tbcHRyXV1cclxuXHRcdFx0XHRcdG4gPSBOX0JJVFt2XVxyXG5cdFx0XHRcdFx0I2Fib3J0IGlmIHRoZXJlJ3Mgbm8gbGVnYWwgbW92ZSBvbiB0aGlzIGNlbGxcclxuXHRcdFx0XHRcdGlmIG4gPT0gOSB0aGVuIHJldHVybiBmYWxzZVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQjIHVwZGF0ZSBkQ29sW10sIGRSb3dbXSBhbmQgZEJsa1tdXHJcblx0XHRcdFx0XHR2MCA9IHYgXiAweDFGRlxyXG5cdFx0XHRcdFx0d2hpbGUgdHJ1ZVxyXG5cdFx0XHRcdFx0XHRiID0gdjAgJiAtdjBcclxuXHRcdFx0XHRcdFx0ZENvbFt4ICogOSArIEJJVFtiXV0gfD0gMSA8PCB5XHJcblx0XHRcdFx0XHRcdGRSb3dbeSAqIDkgKyBCSVRbYl1dIHw9IDEgPDwgeFxyXG5cdFx0XHRcdFx0XHRkQmxrW0JMT0NLW3B0cl0gKiA5ICsgQklUW2JdXSB8PSAxIDw8IEJMT0NLX05EWFtwdHJdXHJcblx0XHRcdFx0XHRcdHYwIF49IGJcclxuXHRcdFx0XHRcdFx0aWYgIXYwIHRoZW4gYnJlYWsgXHJcblx0XHRcdFx0XHQjY29uc29sZS5sb2cgJ3YwJywgdjBcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0IyB1cGRhdGUgdGhlIGNlbGwgd2l0aCB0aGUgZmV3ZXN0IG51bWJlciBvZiBtb3Zlc1xyXG5cdFx0XHRcdFx0aWYgbiA+IG1heFxyXG5cdFx0XHRcdFx0XHRiZXN0ID0ge3g6IHgsIHk6IHksIHB0cjogcHRyLCBtc2s6IHZ9XHJcblx0XHRcdFx0XHRcdG1heCA9IG5cclxuXHRcdFx0XHQjcHRyKytcclxuXHRcdCNjb25zb2xlLmxvZygnYmVzdCcsYmVzdCxtYXgpXHJcblxyXG5cdFx0IyBwbGF5IGFsbCBmb3JjZWQgbW92ZXMgKHVuaXF1ZSBjYW5kaWRhdGVzIG9uIGEgZ2l2ZW4gY29sdW1uLCByb3cgb3IgYmxvY2spXHJcblx0XHQjIGFuZCBtYWtlIHN1cmUgdGhhdCBpdCBkb2Vzbid0IGxlYWQgdG8gYW55IGluY29uc2lzdGVuY3lcclxuXHRcdGZvciBrIGluIHJhbmdlIDlcclxuXHRcdFx0Zm9yIG4gaW4gcmFuZ2UgOVxyXG5cdFx0XHRcdHB0ciA9IGsgKiA5ICsgblxyXG5cdFx0XHRcdGlmIE5fQklUW2RDb2xbcHRyXV0gPT0gMVxyXG5cdFx0XHRcdFx0aSA9IEJJVFtkQ29sW3B0cl1dXHJcblx0XHRcdFx0XHRpZiAhQHBsYXkobGV2ZWwsc3RhY2ssIGssIGksIG4pIHRoZW4gcmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0XHRcdGlmIE5fQklUW2RSb3dbcHRyXV0gPT0gMVxyXG5cdFx0XHRcdFx0aSA9IEJJVFtkUm93W3B0cl1dO1xyXG5cdFx0XHRcdFx0aWYgIUBwbGF5KGxldmVsLHN0YWNrLCBpLCBrLCBuKSB0aGVuIHJldHVybiBmYWxzZVxyXG5cclxuXHRcdFx0XHRpZiBOX0JJVFtkQmxrW3B0cl1dID09IDFcclxuXHRcdFx0XHRcdGkgPSBCSVRbZEJsa1twdHJdXVxyXG5cdFx0XHRcdFx0aWYgIUBwbGF5KGxldmVsLHN0YWNrLCAoayAlIDMpICogMyArIGkgJSAzLCAoayAvIDMgfCAwKSAqIDMgKyAoaSAvIDMgfCAwKSwgbikgdGhlbiByZXR1cm4gZmFsc2VcclxuXHJcblx0XHQjIGlmIHdlJ3ZlIHBsYXllZCBhdCBsZWFzdCBvbmUgZm9yY2VkIG1vdmUsIGRvIGEgcmVjdXJzaXZlIGNhbGwgcmlnaHQgYXdheVxyXG5cdFx0aWYgc3RhY2subGVuZ3RoXHJcblx0XHRcdGlmIEBzZWFyY2ggbGV2ZWwrMSB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRcdEB1bmRvIGxldmVsLHN0YWNrXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cclxuXHRcdCNjb25zb2xlLmxvZyAnYmVzdCcsIGJlc3QubXNrLnRvU3RyaW5nKDE2KSwgTl9CSVRbYmVzdC5tc2tdXHJcblxyXG5cdFx0IyBvdGhlcndpc2UsIHRyeSBhbGwgbW92ZXMgb24gdGhlIGNlbGwgd2l0aCB0aGUgZmV3ZXN0IG51bWJlciBvZiBtb3Zlc1xyXG5cdFx0d2hpbGUgKG1zayA9IFpFUk9bYmVzdC5tc2tdKSA8IDB4MjAwXHJcblx0XHRcdCNjb25zb2xlLmxvZygndicsdixCSVRbdl0pXHJcblx0XHRcdGNvbFtiZXN0LnhdIF49IG1za1xyXG5cdFx0XHRyb3dbYmVzdC55XSBePSBtc2tcclxuXHRcdFx0YmxrW0JMT0NLW2Jlc3QucHRyXV0gXj0gbXNrXHJcblx0XHRcdG1bYmVzdC5wdHJdID0gQklUW21za11cclxuXHRcdFx0Y291bnQtLVxyXG5cclxuXHRcdFx0I3Nob3dHcmlkKCdtbSAgICcsbSlcclxuXHRcdFx0I2NvbnNvbGUubG9nKCdzdGFjaycsc3RhY2subWFwKChpdGVtKSA9PiBpdGVtLnRvU3RyaW5nKDE2KSkpXHJcblxyXG5cdFx0XHRpZiBUUkFDRSB0aGVuIGNvbnNvbGUubG9nKCdndWVzcycrJyAnLnJlcGVhdChsZXZlbCksODEtY291bnQsYmVzdC54LCBiZXN0LnksIEJJVFttc2tdKVxyXG5cdFx0XHRpZiBAc2VhcmNoIGxldmVsKzEgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0XHRpZiBUUkFDRSB0aGVuIGNvbnNvbGUubG9nKCd1bmd1ZScrJyAnLnJlcGVhdChsZXZlbCksODEtY291bnQsYmVzdC54LCBiZXN0LnksIEJJVFttc2tdKVxyXG5cdFx0XHRcclxuXHRcdFx0Y291bnQrK1xyXG5cdFx0XHRtW2Jlc3QucHRyXSA9IC0xXHJcblx0XHRcdGNvbFtiZXN0LnhdIF49IG1za1xyXG5cdFx0XHRyb3dbYmVzdC55XSBePSBtc2tcclxuXHRcdFx0YmxrW0JMT0NLW2Jlc3QucHRyXV0gXj0gbXNrXHJcblxyXG5cdFx0XHRiZXN0Lm1zayBePSBtc2tcclxuXHRcdFxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5mcyA9IHJlcXVpcmUgJ2ZzJ1xyXG5cclxuc3Vkb2t1ID0gbmV3IFN1ZG9rdSgpXHJcblxyXG5maWxlbmFtZSA9IHByb2Nlc3MuYXJndlsyXVxyXG5wdXp6bGVzID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lKS50b1N0cmluZygpLnNwbGl0ICdcXG4nXHJcbmxlbiA9IHB1enpsZXMuc2hpZnQoKVxyXG5vdXRwdXQgPSBsZW4gKyAnXFxuJ1xyXG5cclxuY29uc29sZS5sb2cgXCJGaWxlICdcIiArIGZpbGVuYW1lICsgXCInOiBcIiArIGxlbiArIFwiIHB1enpsZXNcIlxyXG5cclxuY29uc29sZS50aW1lICdQcm9jZXNzaW5nIHRpbWUnXHJcblxyXG4jIHNvbHZlIGFsbCBwdXp6bGVzXHJcbmZvciBwdXp6bGUsaSBpbiBwdXp6bGVzXHJcblx0aWYgcHV6emxlLmxlbmd0aCAhPSA4MSB0aGVuIGNvbnRpbnVlXHJcblx0aWYgISgrK2kgJSAyMDAwKSB0aGVuIGNvbnNvbGUubG9nIChpICogMTAwIC8gbGVuKS50b0ZpeGVkKDEpICsgJyUnXHJcblx0I2NvbnNvbGUudGltZSAnc3RhcnQnXHJcblx0aWYgIShyZXMgPSBzdWRva3Uuc29sdmUgcHV6emxlKSB0aGVuIHRocm93IFwiRmFpbGVkIG9uIHB1enpsZSBcIiArIGlcclxuXHQjY29uc29sZS50aW1lRW5kICdzdGFydCdcclxuXHRvdXRwdXQgKz0gcHV6emxlICsgJywnICsgcmVzICsgJ1xcbidcclxuXHJcbiMgcmVzdWx0c1xyXG5jb25zb2xlLnRpbWVFbmQgJ1Byb2Nlc3NpbmcgdGltZSdcclxuZnMud3JpdGVGaWxlU3luYyAnc3Vkb2t1LmxvZycsIG91dHB1dFxyXG5jb25zb2xlLmxvZyBcIk1ENSA9IFwiICsgcmVxdWlyZSgnY3J5cHRvJykuY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKG91dHB1dCkuZGlnZXN0IFwiaGV4XCJcclxuIl19
//# sourceURL=c:\Lab\2020\030-SudokuDLXnodejs\coffee\sudoku.coffee