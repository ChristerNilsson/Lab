// Generated by CoffeeScript 2.4.1
// https://codegolf.stackexchange.com/questions/190727/the-fastest-sudoku-solver
// This code works, but I had to introduce a class to handle variable scopes in coffeescript
// This adds about 25% to the exec time.
// node js/sudoku tests/data/collections/all_17
var BIT, BLOCK, BLOCK_NDX, N_BIT, Sudoku, TRACE, ZERO, blk, col, count, duration, filename, fs, i, j, len, len1, m, output, perf, puzzle, puzzles, range, res, row, showGrid, start, sudoku, trace;

TRACE = false;

BLOCK = []; // 81 digits

BLOCK_NDX = []; // 81 digits

N_BIT = []; // 512 integers

ZERO = []; // 512 integers

BIT = []; // 512 integers

count = 0;

m = []; // 81 digits

col = []; // 9 bit patterns

row = []; // 9 bit patterns

blk = []; // 9 bit patternsnull

perf = {};

output = [];

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

trace = function(prompt, level, s) {
  console.log(prompt + ' '.repeat(level) + s);
  output.push(prompt + ' '.repeat(level) + s);
  return perf[prompt]++;
};

showGrid = function(prompt, m) {
  var counter, digit, j, len1;
  counter = 0;
  for (j = 0, len1 = m.length; j < len1; j++) {
    digit = m[j];
    if (digit !== -1) {
      counter++;
    }
  }
  return console.log(prompt, m.map((digit) => {
    return digit + 1;
  }).join(''), counter);
};

Sudoku = class Sudoku {
  constructor() { // initialization of lookup tables 
    var j, l, len1, len2, len3, len4, o, ptr, q, ref, ref1, ref2, ref3, x, y;
    ref = range(0x200);
    for (j = 0, len1 = ref.length; j < len1; j++) {
      x = ref[j];
      N_BIT[x] = range(9).reduce((function(s, n) {
        return s + (x >> n & 1);
      }), 0);
      ZERO[x] = ~x & -(~x);
    }
    ref1 = range(9);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      x = ref1[l];
      BIT[1 << x] = x;
    }
    ref2 = range(9);
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      y = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        x = ref3[q];
        ptr = 9 * y + x;
        BLOCK[ptr] = (y / 3 | 0) * 3 + (x / 3 | 0);
        BLOCK_NDX[ptr] = (y % 3) * 3 + x % 3;
      }
    }
  }

  // helper function to check and play a move
  play(level, stack, x, y, n) {
    var b, msk, p;
    p = y * 9 + x;
    if (~m[p]) {
      if (m[p] === n) {
        return true;
      }
      this.undo(level, stack);
      return false;
    }
    msk = 1 << n;
    b = BLOCK[p];
    if ((col[x] | row[y] | blk[b]) & msk) {
      this.undo(level, stack);
      return false;
    }
    count--;
    col[x] ^= msk;
    row[y] ^= msk;
    blk[b] ^= msk;
    m[p] = n;
    stack.push(x << 8 | y << 4 | n);
    if (TRACE) {
      trace('play ', level, `${81 - count} ${x} ${y} ${n}`);
    }
    //showGrid 'm    ', m
    return true;
  }

  undo(level, stack) { // helper function to undo all moves on the stack
    var b, index, j, len1, msk, ref, results, v, x, y;
    ref = stack.reverse();
    // console.log 'undo', (item.toString(16) for item in stack)
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      v = ref[j];
      x = v >> 8;
      y = v >> 4 & 15;
      index = y * 9 + x;
      b = BLOCK[index];
      if (TRACE) {
        trace('undo ', level, `${81 - count} ${x} ${y} ${v & 15}`);
      }
      msk = 1 << (v & 15);
      count++;
      col[x] ^= msk;
      row[y] ^= msk;
      blk[b] ^= msk;
      results.push(m[index] = -1);
    }
    return results;
  }

  // showGrid 'u    ',m
  solve(p) {
    var digit, index, j, l, len1, len2, msk, ref, ref1, x, xres, y;
    perf = {
      'play ': 0,
      'undo ': 0,
      'guess': 0,
      'ungue': 0
    };
    count = 81;
    row = Array(9).fill(0);
    col = Array(9).fill(0);
    blk = Array(9).fill(0);
    m = Array(81).fill(-1);
    ref = range(9);
    // convert the puzzle into our own format
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        index = 9 * y + x;
        if (~(digit = p[index] - 1)) {
          msk = 1 << digit;
          col[x] |= msk;
          row[y] |= msk;
          blk[BLOCK[index]] |= msk;
          count--;
          m[index] = digit;
        }
      }
    }
    xres = this.search();
    if (xres) {
      return m.map((n) => {
        return n + 1;
      }).join('');
    } else {
      return false;
    }
  }

  search(level = 0) { // main recursive search function
    var b, best, dBlk, dCel, dCol, dRow, i, j, k, l, len1, len2, len3, len4, max, msk, n, o, ptr, q, ref, ref1, ref2, ref3, stack, v, v0, x, y;
    if (!count) {
      return true;
    }
    // Local variables
    max = 0;
    best = null;
    stack = [];
    dCol = Array(81).fill(0);
    dRow = Array(81).fill(0);
    dBlk = Array(81).fill(0);
    dCel = Array(81).fill(0); // saves 10% of exec time
    ref = range(9);
    
    // scan the grid:
    // - keeping track of where each digit can go on a given column, row or block
    // - looking for a cell with the fewest number of legal moves
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        ptr = 9 * y + x;
        if (m[ptr] === -1) {
          v = col[x] | row[y] | blk[BLOCK[ptr]];
          n = N_BIT[v];
          //abort if there's no legal move on this cell
          if (n === 9) {
            return false;
          }
          
          // update dCol[], dRow[] and dBlk[]
          v0 = v ^ 0x1FF;
          while (true) {
            b = v0 & -v0;
            dCol[x * 9 + BIT[b]] |= 1 << y;
            dRow[y * 9 + BIT[b]] |= 1 << x;
            dBlk[BLOCK[ptr] * 9 + BIT[b]] |= 1 << BLOCK_NDX[ptr];
            v0 ^= b;
            if (!v0) {
              break;
            }
          }
          dCel[ptr] = v;
          //console.log 'v0', v0

          // update the cell with the fewest number of moves
          if (n > max && n !== 1) {
            best = {
              x: x,
              y: y,
              ptr: ptr,
              msk: v
            };
            max = n;
          }
        }
      }
    }
    ref2 = range(9);
    //ptr++
    //console.log('best',best,max)

    // play all forced moves (unique candidates on a given column, row or block)
    // and make sure that it doesn't lead to any inconsistency
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      k = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        n = ref3[q];
        ptr = k * 9 + n;
        if (N_BIT[dCol[ptr]] === 1) {
          i = BIT[dCol[ptr]];
          if (!this.play(level, stack, k, i, n)) {
            return false;
          }
        }
        if (N_BIT[dRow[ptr]] === 1) {
          i = BIT[dRow[ptr]];
          if (!this.play(level, stack, i, k, n)) {
            return false;
          }
        }
        if (N_BIT[dBlk[ptr]] === 1) {
          i = BIT[dBlk[ptr]];
          if (!this.play(level, stack, (k % 3) * 3 + i % 3, (k / 3 | 0) * 3 + (i / 3 | 0), n)) {
            return false;
          }
        }
        if (N_BIT[dCel[ptr]] === 8) {
          i = BIT[ZERO[dCel[ptr]]];
          if (!this.play(level, stack, n, k, i)) {
            return false;
          }
        }
      }
    }
    // if we've played at least one forced move, do a recursive call right away
    if (stack.length) {
      if (this.search(level + 1)) {
        return true;
      }
      this.undo(level, stack);
      return false;
    }
    //console.log 'best', best.msk.toString(16), N_BIT[best.msk]

    // otherwise, try all moves on the cell with the fewest number of moves
    while ((msk = ZERO[best.msk]) < 0x200) {
      col[best.x] ^= msk;
      row[best.y] ^= msk;
      blk[BLOCK[best.ptr]] ^= msk;
      m[best.ptr] = BIT[msk];
      count--;
      //showGrid('mm   ',m)
      //console.log('stack',stack.map((item) => item.toString(16)))
      if (TRACE) {
        trace('guess', level, `${81 - count} ${best.x} ${best.y} ${BIT[msk]}`);
      }
      if (this.search(level + 1)) {
        return true;
      }
      if (TRACE) {
        trace('ungue', level, `${81 - count} ${best.x} ${best.y} ${BIT[msk]}`);
      }
      count++;
      m[best.ptr] = -1;
      col[best.x] ^= msk;
      row[best.y] ^= msk;
      blk[BLOCK[best.ptr]] ^= msk;
      best.msk ^= msk;
    }
    return false;
  }

};

fs = require('fs');

sudoku = new Sudoku();

filename = process.argv[2];

puzzles = fs.readFileSync(filename).toString().split('\n');

len = puzzles.shift();

output = []; //len + '\n'

console.log("File '" + filename + "': " + len + " puzzles");

console.time('Processing time');

// solve all puzzles
for (i = j = 0, len1 = puzzles.length; j < len1; i = ++j) {
  puzzle = puzzles[i];
  //if i != 4 then continue
  if (puzzle.length !== 81) {
    continue;
  }
  start = process.hrtime();
  if (!(res = sudoku.solve(puzzle))) {
    throw "Failed on puzzle " + i;
  }
  duration = process.hrtime(start)[1] / 1000000;
  //if true or duration < 0.08 then console.log puzzle, i, duration.toFixed 3
  //console.log puzzle
  //console.log res
  if (TRACE) {
    console.log(perf);
  }
  if (!(++i % 2000)) {
    console.log((i * 100 / len).toFixed(1) + '%');
  }
}

//output.push puzzle + ',' + res

// results
console.timeEnd('Processing time');

fs.writeFileSync('sudoku.log', output.join('\n'));

console.log("MD5 = " + require('crypto').createHash('md5').update(output.join('\n')).digest("hex"));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\030-SudokuDLXnodejs\coffee\sudoku.coffee