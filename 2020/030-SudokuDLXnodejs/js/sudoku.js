// Generated by CoffeeScript 2.4.1
// https://codegolf.stackexchange.com/questions/190727/the-fastest-sudoku-solver
// This code works, but I had to introduce a class to handle variable scopes
// This adds about 25% to the exec time.

// 'use strict';
var BIT, BLOCK, BLOCK_NDX, N_BIT, Sudoku, ZERO, filename, fs, i, j, len, len1, output, p, puzzles, range, res, showGrid, sol, sudoku;

fs = require('fs');

BLOCK = [];

BLOCK_NDX = [];

N_BIT = [];

ZERO = [];

BIT = [];

range = function(n) {
  return (function() {
    var results = [];
    for (var j = 0; 0 <= n ? j < n : j > n; 0 <= n ? j++ : j--){ results.push(j); }
    return results;
  }).apply(this);
};

showGrid = function(prompt, m) {
  var counter, digit, j, len1;
  counter = 0;
  for (j = 0, len1 = m.length; j < len1; j++) {
    digit = m[j];
    if (digit !== -1) {
      counter++;
    }
  }
  return console.log(prompt, m.map((digit) => {
    return digit + 1;
  }).join(''), counter);
};

Sudoku = class Sudoku {
  constructor() { // initialization of lookup tables 
    var j, l, len1, len2, len3, len4, o, ptr, q, ref, ref1, ref2, ref3, x, y;
    ref = range(0x200);
    for (j = 0, len1 = ref.length; j < len1; j++) {
      x = ref[j];
      N_BIT[x] = range(9).reduce((function(s, n) {
        return s + (x >> n & 1);
      }), 0);
      ZERO[x] = ~x & -(~x);
    }
    ref1 = range(9);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      x = ref1[l];
      BIT[1 << x] = x;
    }
    ref2 = range(9);
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      y = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        x = ref3[q];
        ptr = 9 * y + x;
        BLOCK[ptr] = (y / 3 | 0) * 3 + (x / 3 | 0);
        BLOCK_NDX[ptr] = (y % 3) * 3 + x % 3;
      }
    }
  }

  // helper function to check and play a move
  play(msg, stack, x, y, n) {
    var b, msk, p;
    p = y * 9 + x;
    if (~this.m[p]) {
      if (this.m[p] === n) {
        return true;
      }
      this.undo(stack);
      return false;
    }
    msk = 1 << n;
    b = BLOCK[p];
    if ((this.col[x] | this.row[y] | this.blk[b]) & msk) {
      this.undo(stack);
      return false;
    }
    this.count--;
    this.col[x] ^= msk;
    this.row[y] ^= msk;
    this.blk[b] ^= msk;
    this.m[p] = n;
    stack.push(x << 8 | y << 4 | n);
    // console.log 'play', msg, (item.toString(16) for item in stack), x, y, n
    //showGrid 'm    ', @m
    return true;
  }

  undo(stack) { // helper function to undo all moves on the stack
    var b, index, j, len1, msk, results, v, x, y;
// console.log 'undo', (item.toString(16) for item in stack)
    results = [];
    for (j = 0, len1 = stack.length; j < len1; j++) {
      v = stack[j];
      x = v >> 8;
      y = v >> 4 & 15;
      index = y * 9 + x;
      b = BLOCK[index];
      msk = 1 << (v & 15);
      this.count++;
      this.col[x] ^= msk;
      this.row[y] ^= msk;
      this.blk[b] ^= msk;
      results.push(this.m[index] = -1);
    }
    return results;
  }

  // showGrid 'u    ',@m
  solve(p) {
    var index, j, l, len1, len2, msk, ref, ref1, v, x, xres, y;
    this.count = 81;
    this.row = Array(9).fill(0);
    this.col = Array(9).fill(0);
    this.blk = Array(9).fill(0);
    this.m = Array(81).fill(-1);
    ref = range(9);
    // convert the puzzle into our own format
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        index = 9 * y + x;
        if (~(v = p[index] - 1)) {
          msk = 1 << v;
          this.col[x] |= msk;
          this.row[y] |= msk;
          this.blk[BLOCK[index]] |= msk;
          this.count--;
          this.m[index] = v;
        }
      }
    }
    xres = this.search();
    if (xres) {
      return this.m.map((n) => {
        return n + 1;
      }).join('');
    } else {
      return false;
    }
  }

  search() { // main recursive search function
    var b, best, dBlk, dCol, dRow, i, j, k, l, len1, len2, len3, len4, max, msk, n, o, ptr, q, ref, ref1, ref2, ref3, stack, v, v0, x, y;
    if (!this.count) {
      return true;
    }
    // Local variables
    max = 0;
    best = null;
    stack = [];
    dCol = Array(81).fill(0);
    dRow = Array(81).fill(0);
    dBlk = Array(81).fill(0);
    ref = range(9);
    // scan the grid:
    // - keeping track of where each digit can go on a given column, row or block
    // - looking for a cell with the fewest number of legal moves
    for (j = 0, len1 = ref.length; j < len1; j++) {
      y = ref[j];
      ref1 = range(9);
      for (l = 0, len2 = ref1.length; l < len2; l++) {
        x = ref1[l];
        ptr = 9 * y + x;
        if (this.m[ptr] === -1) {
          v = this.col[x] | this.row[y] | this.blk[BLOCK[ptr]];
          n = N_BIT[v];
          //abort if there's no legal move on this cell
          if (n === 9) {
            return false;
          }
          
          // update dCol[], dRow[] and dBlk[]
          v0 = v ^ 0x1FF;
          while (true) {
            b = v0 & -v0;
            dCol[x * 9 + BIT[b]] |= 1 << y;
            dRow[y * 9 + BIT[b]] |= 1 << x;
            dBlk[BLOCK[ptr] * 9 + BIT[b]] |= 1 << BLOCK_NDX[ptr];
            v0 ^= b;
            if (!v0) {
              break;
            }
          }
          
          //console.log 'v0', v0

          // update the cell with the fewest number of moves
          if (n > max) {
            best = {
              x: x,
              y: y,
              ptr: ptr,
              msk: v
            };
            max = n;
          }
        }
      }
    }
    ref2 = range(9);
    //ptr++
    //console.log('best',best,max)

    // play all forced moves (unique candidates on a given column, row or block)
    // and make sure that it doesn't lead to any inconsistency
    for (o = 0, len3 = ref2.length; o < len3; o++) {
      k = ref2[o];
      ref3 = range(9);
      for (q = 0, len4 = ref3.length; q < len4; q++) {
        n = ref3[q];
        ptr = k * 9 + n;
        if (N_BIT[dCol[ptr]] === 1) {
          i = BIT[dCol[ptr]];
          if (!this.play('col', stack, k, i, n)) {
            return false;
          }
        }
        if (N_BIT[dRow[ptr]] === 1) {
          i = BIT[dRow[ptr]];
          if (!this.play('row', stack, i, k, n)) {
            return false;
          }
        }
        if (N_BIT[dBlk[ptr]] === 1) {
          i = BIT[dBlk[ptr]];
          if (!this.play('blk', stack, (k % 3) * 3 + i % 3, (k / 3 | 0) * 3 + (i / 3 | 0), n)) {
            return false;
          }
        }
      }
    }
    // if we've played at least one forced move, do a recursive call right away
    if (stack.length) {
      if (this.search()) {
        return true;
      }
      this.undo(stack);
      return false;
    }
    // otherwise, try all moves on the cell with the fewest number of moves
    while ((msk = ZERO[best.msk]) < 0x200) {
      //console.log('v',v,BIT[v])
      this.col[best.x] ^= msk;
      this.row[best.y] ^= msk;
      this.blk[BLOCK[best.ptr]] ^= msk;
      this.m[best.ptr] = BIT[msk];
      this.count--;
      //console.log('guess',best.x, best.y, BIT[v])
      //showGrid('mm   ',@m)
      //console.log('stack',stack.map((item) => item.toString(16)))
      if (this.search()) {
        return true;
      }
      this.count++;
      this.m[best.ptr] = -1;
      this.col[best.x] ^= msk;
      this.row[best.y] ^= msk;
      this.blk[BLOCK[best.ptr]] ^= msk;
      best.msk ^= msk;
    }
    return false;
  }

};

// # debugging
// dump = (m) ->
// 	x = null
// 	y = null
// 	c = 81
// 	s = ''

// 	# for y in range 9 #(y = 0; y < 9; y++) {
// 	# 	for x in range 9 #(x = 0; x < 9; x++) {
// 	# 		s += (if ~m[y * 9 + x] 
// 	# 			c--
// 	# 			m[y * 9 + x] + 1 
// 	# 		else '-') + (if x % 3 < 2 || x == 8 then ' ' else ' | ');
// 	# 	s += if y % 3 < 2 || y == 8 then '\n' else '\n------+-------+------\n';
// 	console.log c
// 	console.log s
console.time('Processing time');

sudoku = new Sudoku();

filename = process.argv[2];

puzzles = fs.readFileSync(filename).toString().split('\n');

len = puzzles.shift();

output = len + '\n';

console.log("File '" + filename + "': " + len + " puzzles");

// solve all puzzles
for (i = j = 0, len1 = puzzles.length; j < len1; i = ++j) {
  p = puzzles[i];
  //if i>100 then break

  //if i != 7 then continue
  [p, sol] = p.split(',');
  if (p.length === 81) {
    if (!(++i % 2000)) {
      console.log((i * 100 / len).toFixed(1) + '%');
    }
    if (!(res = sudoku.solve(p))) {
      throw "Failed on puzzle " + i;
    }
    if (sol && res !== sol) {
      throw "Invalid solution for puzzle " + i;
    }
    console.log(p);
    console.log(res);
    output += p + ',' + res + '\n';
  }
}

// results
console.timeEnd('Processing time');

fs.writeFileSync('sudoku.log', output);

console.log("MD5 = " + require('crypto').createHash('md5').update(output).digest("hex"));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vkb2t1LmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHN1ZG9rdS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztBQUFBLElBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBOztBQUtBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7QUFFTCxLQUFBLEdBQVk7O0FBQ1osU0FBQSxHQUFZOztBQUNaLEtBQUEsR0FBWTs7QUFDWixJQUFBLEdBQVk7O0FBQ1osR0FBQSxHQUFZOztBQUVaLEtBQUEsR0FBUSxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU87Ozs7O0FBQVA7O0FBRVIsUUFBQSxHQUFXLFFBQUEsQ0FBQyxNQUFELEVBQVEsQ0FBUixDQUFBO0FBQ1YsTUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQTtFQUFBLE9BQUEsR0FBVTtFQUNWLEtBQUEscUNBQUE7O0lBQ0MsSUFBRyxLQUFBLEtBQVMsQ0FBQyxDQUFiO01BQW9CLE9BQUEsR0FBcEI7O0VBREQ7U0FFQSxPQUFPLENBQUMsR0FBUixDQUFZLE1BQVosRUFBb0IsQ0FBQyxDQUFDLEdBQUYsQ0FBTyxDQUFDLEtBQUQsQ0FBQSxHQUFBO1dBQVcsS0FBQSxHQUFNO0VBQWpCLENBQVAsQ0FBMEIsQ0FBQyxJQUEzQixDQUFnQyxFQUFoQyxDQUFwQixFQUF5RCxPQUF6RDtBQUpVOztBQU1MLFNBQU4sTUFBQSxPQUFBO0VBQ0MsV0FBYyxDQUFBLENBQUEsRUFBQTtBQUViLFFBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFB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QyxPQUFSLENBQWdCLGlCQUFoQjs7QUFDQSxFQUFFLENBQUMsYUFBSCxDQUFpQixZQUFqQixFQUErQixNQUEvQjs7QUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQUEsR0FBVyxPQUFBLENBQVEsUUFBUixDQUFpQixDQUFDLFVBQWxCLENBQTZCLEtBQTdCLENBQW1DLENBQUMsTUFBcEMsQ0FBMkMsTUFBM0MsQ0FBa0QsQ0FBQyxNQUFuRCxDQUEwRCxLQUExRCxDQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIiMgaHR0cHM6Ly9jb2RlZ29sZi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTkwNzI3L3RoZS1mYXN0ZXN0LXN1ZG9rdS1zb2x2ZXJcclxuIyBUaGlzIGNvZGUgd29ya3MsIGJ1dCBJIGhhZCB0byBpbnRyb2R1Y2UgYSBjbGFzcyB0byBoYW5kbGUgdmFyaWFibGUgc2NvcGVzXHJcbiMgVGhpcyBhZGRzIGFib3V0IDI1JSB0byB0aGUgZXhlYyB0aW1lLlxyXG5cclxuIyAndXNlIHN0cmljdCc7XHJcbmZzID0gcmVxdWlyZSAnZnMnXHJcblxyXG5CTE9DSyAgICAgPSBbXVxyXG5CTE9DS19ORFggPSBbXVxyXG5OX0JJVCAgICAgPSBbXVxyXG5aRVJPICAgICAgPSBbXVxyXG5CSVQgICAgICAgPSBbXVxyXG5cclxucmFuZ2UgPSAobikgLT4gWzAuLi5uXVxyXG5cclxuc2hvd0dyaWQgPSAocHJvbXB0LG0pIC0+XHJcblx0Y291bnRlciA9IDBcclxuXHRmb3IgZGlnaXQgaW4gbVxyXG5cdFx0aWYgZGlnaXQgIT0gLTEgdGhlbiBjb3VudGVyKytcclxuXHRjb25zb2xlLmxvZyBwcm9tcHQsIG0ubWFwKCAoZGlnaXQpID0+IGRpZ2l0KzEpLmpvaW4oJycpLCBjb3VudGVyXHJcblxyXG5jbGFzcyBTdWRva3VcclxuXHRjb25zdHJ1Y3RvciA6IC0+ICMgaW5pdGlhbGl6YXRpb24gb2YgbG9va3VwIHRhYmxlcyBcclxuXHJcblx0XHRmb3IgeCBpbiByYW5nZSAweDIwMFxyXG5cdFx0XHROX0JJVFt4XSA9IHJhbmdlKDkpLnJlZHVjZSAoKHMsbikgLT4gcyArICh4ID4+IG4gJiAxKSksIDBcclxuXHRcdFx0WkVST1t4XSA9IH54ICYgLX54XHJcblx0XHRmb3IgeCBpbiByYW5nZSA5XHJcblx0XHRcdEJJVFsxIDw8IHhdID0geFxyXG5cclxuXHRcdGZvciB5IGluIHJhbmdlIDlcclxuXHRcdFx0Zm9yIHggaW4gcmFuZ2UgOVxyXG5cdFx0XHRcdHB0ciA9IDkgKiB5ICsgeFxyXG5cdFx0XHRcdEJMT0NLW3B0cl0gPSAoeSAvIDMgfCAwKSAqIDMgKyAoeCAvIDMgfCAwKVxyXG5cdFx0XHRcdEJMT0NLX05EWFtwdHJdID0gKHkgJSAzKSAqIDMgKyB4ICUgM1xyXG5cclxuXHQjIGhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBhbmQgcGxheSBhIG1vdmVcclxuXHRwbGF5IDogKG1zZywgc3RhY2ssIHgsIHksIG4pIC0+XHJcblx0XHRwID0geSAqIDkgKyB4XHJcblxyXG5cdFx0aWYgfkBtW3BdXHJcblx0XHRcdGlmIEBtW3BdID09IG4gdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0XHRAdW5kbyBzdGFja1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdFxyXG5cdFx0bXNrID0gMSA8PCBuXHJcblx0XHRiID0gQkxPQ0tbcF1cclxuXHJcblx0XHRpZiAoQGNvbFt4XSB8IEByb3dbeV0gfCBAYmxrW2JdKSAmIG1za1xyXG5cdFx0XHRAdW5kbyBzdGFja1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdFxyXG5cdFx0QGNvdW50LS1cclxuXHRcdEBjb2xbeF0gXj0gbXNrXHJcblx0XHRAcm93W3ldIF49IG1za1xyXG5cdFx0QGJsa1tiXSBePSBtc2tcclxuXHRcdEBtW3BdID0gblxyXG5cdFx0c3RhY2sucHVzaCB4IDw8IDggfCB5IDw8IDQgfCBuXHJcblx0XHQjIGNvbnNvbGUubG9nICdwbGF5JywgbXNnLCAoaXRlbS50b1N0cmluZygxNikgZm9yIGl0ZW0gaW4gc3RhY2spLCB4LCB5LCBuXHJcblx0XHQjc2hvd0dyaWQgJ20gICAgJywgQG1cclxuXHRcdHJldHVybiB0cnVlXHJcblxyXG5cdHVuZG8gOiAoc3RhY2spIC0+ICMgaGVscGVyIGZ1bmN0aW9uIHRvIHVuZG8gYWxsIG1vdmVzIG9uIHRoZSBzdGFja1xyXG5cdFx0IyBjb25zb2xlLmxvZyAndW5kbycsIChpdGVtLnRvU3RyaW5nKDE2KSBmb3IgaXRlbSBpbiBzdGFjaylcclxuXHRcdGZvciB2IGluIHN0YWNrXHJcblx0XHRcdHggPSB2ID4+IDhcclxuXHRcdFx0eSA9IHYgPj4gNCAmIDE1XHJcblx0XHRcdGluZGV4ID0geSAqIDkgKyB4XHJcblx0XHRcdGIgPSBCTE9DS1tpbmRleF1cclxuXHJcblx0XHRcdG1zayA9IDEgPDwgKHYgJiAxNSlcclxuXHJcblx0XHRcdEBjb3VudCsrXHJcblx0XHRcdEBjb2xbeF0gXj0gbXNrXHJcblx0XHRcdEByb3dbeV0gXj0gbXNrXHJcblx0XHRcdEBibGtbYl0gXj0gbXNrXHJcblx0XHRcdEBtW2luZGV4XSA9IC0xXHJcblx0XHRcdCMgc2hvd0dyaWQgJ3UgICAgJyxAbVxyXG5cclxuXHRzb2x2ZSA6IChwKSAtPlxyXG5cdFx0QGNvdW50ID0gODFcclxuXHRcdEByb3cgPSBBcnJheSg5KS5maWxsIDBcclxuXHRcdEBjb2wgPSBBcnJheSg5KS5maWxsIDBcclxuXHRcdEBibGsgPSBBcnJheSg5KS5maWxsIDBcclxuXHRcdEBtID0gQXJyYXkoODEpLmZpbGwgLTFcclxuXHJcblx0XHQjIGNvbnZlcnQgdGhlIHB1enpsZSBpbnRvIG91ciBvd24gZm9ybWF0XHJcblx0XHRmb3IgeSBpbiByYW5nZSA5XHJcblx0XHRcdGZvciB4IGluIHJhbmdlIDlcclxuXHRcdFx0XHRpbmRleCA9IDkgKiB5ICsgeFxyXG5cdFx0XHRcdGlmIH4odiA9IHBbaW5kZXhdIC0gMSlcclxuXHRcdFx0XHRcdG1zayA9IDEgPDwgdlxyXG5cdFx0XHRcdFx0QGNvbFt4XSB8PSBtc2tcclxuXHRcdFx0XHRcdEByb3dbeV0gfD0gbXNrXHJcblx0XHRcdFx0XHRAYmxrW0JMT0NLW2luZGV4XV0gfD0gbXNrXHJcblx0XHRcdFx0XHRAY291bnQtLVxyXG5cdFx0XHRcdFx0QG1baW5kZXhdID0gdlxyXG5cclxuXHRcdHhyZXMgPSBAc2VhcmNoKClcclxuXHRcdHJldHVybiBpZiB4cmVzIHRoZW4gQG0ubWFwKChuKSA9PiBuICsgMSkuam9pbignJykgZWxzZSBmYWxzZVxyXG5cclxuXHRzZWFyY2ggOiAtPiAjIG1haW4gcmVjdXJzaXZlIHNlYXJjaCBmdW5jdGlvblxyXG5cdFx0aWYgIUBjb3VudCB0aGVuIHJldHVybiB0cnVlXHJcblxyXG5cdFx0IyBMb2NhbCB2YXJpYWJsZXNcclxuXHRcdG1heCA9IDBcclxuXHRcdGJlc3QgPSBudWxsXHJcblx0XHRzdGFjayA9IFtdXHJcblx0XHRkQ29sID0gQXJyYXkoODEpLmZpbGwgMFxyXG5cdFx0ZFJvdyA9IEFycmF5KDgxKS5maWxsIDBcclxuXHRcdGRCbGsgPSBBcnJheSg4MSkuZmlsbCAwXHJcblxyXG5cdFx0IyBzY2FuIHRoZSBncmlkOlxyXG5cdFx0IyAtIGtlZXBpbmcgdHJhY2sgb2Ygd2hlcmUgZWFjaCBkaWdpdCBjYW4gZ28gb24gYSBnaXZlbiBjb2x1bW4sIHJvdyBvciBibG9ja1xyXG5cdFx0IyAtIGxvb2tpbmcgZm9yIGEgY2VsbCB3aXRoIHRoZSBmZXdlc3QgbnVtYmVyIG9mIGxlZ2FsIG1vdmVzXHJcblx0XHRmb3IgeSBpbiByYW5nZSA5XHJcblx0XHRcdGZvciB4IGluIHJhbmdlIDlcclxuXHRcdFx0XHRwdHIgPSA5ICogeSArIHhcclxuXHRcdFx0XHRpZiBAbVtwdHJdID09IC0xXHJcblx0XHRcdFx0XHR2ID0gQGNvbFt4XSB8IEByb3dbeV0gfCBAYmxrW0JMT0NLW3B0cl1dXHJcblx0XHRcdFx0XHRuID0gTl9CSVRbdl1cclxuXHRcdFx0XHRcdCNhYm9ydCBpZiB0aGVyZSdzIG5vIGxlZ2FsIG1vdmUgb24gdGhpcyBjZWxsXHJcblx0XHRcdFx0XHRpZiBuID09IDkgdGhlbiByZXR1cm4gZmFsc2VcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0IyB1cGRhdGUgZENvbFtdLCBkUm93W10gYW5kIGRCbGtbXVxyXG5cdFx0XHRcdFx0djAgPSB2IF4gMHgxRkZcclxuXHRcdFx0XHRcdHdoaWxlIHRydWVcclxuXHRcdFx0XHRcdFx0YiA9IHYwICYgLXYwXHJcblx0XHRcdFx0XHRcdGRDb2xbeCAqIDkgKyBCSVRbYl1dIHw9IDEgPDwgeVxyXG5cdFx0XHRcdFx0XHRkUm93W3kgKiA5ICsgQklUW2JdXSB8PSAxIDw8IHhcclxuXHRcdFx0XHRcdFx0ZEJsa1tCTE9DS1twdHJdICogOSArIEJJVFtiXV0gfD0gMSA8PCBCTE9DS19ORFhbcHRyXVxyXG5cdFx0XHRcdFx0XHR2MCBePSBiXHJcblx0XHRcdFx0XHRcdGlmICF2MCB0aGVuIGJyZWFrIFxyXG5cdFx0XHRcdFx0I2NvbnNvbGUubG9nICd2MCcsIHYwXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdCMgdXBkYXRlIHRoZSBjZWxsIHdpdGggdGhlIGZld2VzdCBudW1iZXIgb2YgbW92ZXNcclxuXHRcdFx0XHRcdGlmIG4gPiBtYXhcclxuXHRcdFx0XHRcdFx0YmVzdCA9IHt4OiB4LCB5OiB5LCBwdHI6IHB0ciwgbXNrOiB2fVxyXG5cdFx0XHRcdFx0XHRtYXggPSBuXHJcblx0XHRcdFx0I3B0cisrXHJcblx0XHQjY29uc29sZS5sb2coJ2Jlc3QnLGJlc3QsbWF4KVxyXG5cclxuXHRcdCMgcGxheSBhbGwgZm9yY2VkIG1vdmVzICh1bmlxdWUgY2FuZGlkYXRlcyBvbiBhIGdpdmVuIGNvbHVtbiwgcm93IG9yIGJsb2NrKVxyXG5cdFx0IyBhbmQgbWFrZSBzdXJlIHRoYXQgaXQgZG9lc24ndCBsZWFkIHRvIGFueSBpbmNvbnNpc3RlbmN5XHJcblx0XHRmb3IgayBpbiByYW5nZSA5XHJcblx0XHRcdGZvciBuIGluIHJhbmdlIDlcclxuXHRcdFx0XHRwdHIgPSBrICogOSArIG5cclxuXHRcdFx0XHRpZiBOX0JJVFtkQ29sW3B0cl1dID09IDFcclxuXHRcdFx0XHRcdGkgPSBCSVRbZENvbFtwdHJdXVxyXG5cdFx0XHRcdFx0aWYgIUBwbGF5KCdjb2wnLHN0YWNrLCBrLCBpLCBuKSB0aGVuIHJldHVybiBmYWxzZVxyXG5cclxuXHRcdFx0XHRpZiBOX0JJVFtkUm93W3B0cl1dID09IDFcclxuXHRcdFx0XHRcdGkgPSBCSVRbZFJvd1twdHJdXTtcclxuXHRcdFx0XHRcdGlmICFAcGxheSgncm93JyxzdGFjaywgaSwgaywgbikgdGhlbiByZXR1cm4gZmFsc2VcclxuXHJcblx0XHRcdFx0aWYgTl9CSVRbZEJsa1twdHJdXSA9PSAxXHJcblx0XHRcdFx0XHRpID0gQklUW2RCbGtbcHRyXV1cclxuXHRcdFx0XHRcdGlmICFAcGxheSgnYmxrJyxzdGFjaywgKGsgJSAzKSAqIDMgKyBpICUgMywgKGsgLyAzIHwgMCkgKiAzICsgKGkgLyAzIHwgMCksIG4pIHRoZW4gcmV0dXJuIGZhbHNlXHJcblxyXG5cdFx0IyBpZiB3ZSd2ZSBwbGF5ZWQgYXQgbGVhc3Qgb25lIGZvcmNlZCBtb3ZlLCBkbyBhIHJlY3Vyc2l2ZSBjYWxsIHJpZ2h0IGF3YXlcclxuXHRcdGlmIHN0YWNrLmxlbmd0aFxyXG5cdFx0XHRpZiBAc2VhcmNoKCkgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cdFx0XHRAdW5kbyBzdGFja1xyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHJcblx0XHQjIG90aGVyd2lzZSwgdHJ5IGFsbCBtb3ZlcyBvbiB0aGUgY2VsbCB3aXRoIHRoZSBmZXdlc3QgbnVtYmVyIG9mIG1vdmVzXHJcblx0XHR3aGlsZSAobXNrID0gWkVST1tiZXN0Lm1za10pIDwgMHgyMDBcclxuXHRcdFx0I2NvbnNvbGUubG9nKCd2Jyx2LEJJVFt2XSlcclxuXHRcdFx0QGNvbFtiZXN0LnhdIF49IG1za1xyXG5cdFx0XHRAcm93W2Jlc3QueV0gXj0gbXNrXHJcblx0XHRcdEBibGtbQkxPQ0tbYmVzdC5wdHJdXSBePSBtc2tcclxuXHRcdFx0QG1bYmVzdC5wdHJdID0gQklUW21za11cclxuXHRcdFx0QGNvdW50LS1cclxuXHJcblx0XHRcdCNjb25zb2xlLmxvZygnZ3Vlc3MnLGJlc3QueCwgYmVzdC55LCBCSVRbdl0pXHJcblx0XHRcdCNzaG93R3JpZCgnbW0gICAnLEBtKVxyXG5cdFx0XHQjY29uc29sZS5sb2coJ3N0YWNrJyxzdGFjay5tYXAoKGl0ZW0pID0+IGl0ZW0udG9TdHJpbmcoMTYpKSlcclxuXHJcblx0XHRcdGlmIEBzZWFyY2goKSB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRcdFxyXG5cdFx0XHRAY291bnQrK1xyXG5cdFx0XHRAbVtiZXN0LnB0cl0gPSAtMVxyXG5cdFx0XHRAY29sW2Jlc3QueF0gXj0gbXNrXHJcblx0XHRcdEByb3dbYmVzdC55XSBePSBtc2tcclxuXHRcdFx0QGJsa1tCTE9DS1tiZXN0LnB0cl1dIF49IG1za1xyXG5cclxuXHRcdFx0YmVzdC5tc2sgXj0gbXNrXHJcblx0XHRcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuIyAjIGRlYnVnZ2luZ1xyXG4jIGR1bXAgPSAobSkgLT5cclxuIyBcdHggPSBudWxsXHJcbiMgXHR5ID0gbnVsbFxyXG4jIFx0YyA9IDgxXHJcbiMgXHRzID0gJydcclxuXHJcbiMgXHQjIGZvciB5IGluIHJhbmdlIDkgIyh5ID0gMDsgeSA8IDk7IHkrKykge1xyXG4jIFx0IyBcdGZvciB4IGluIHJhbmdlIDkgIyh4ID0gMDsgeCA8IDk7IHgrKykge1xyXG4jIFx0IyBcdFx0cyArPSAoaWYgfm1beSAqIDkgKyB4XSBcclxuIyBcdCMgXHRcdFx0Yy0tXHJcbiMgXHQjIFx0XHRcdG1beSAqIDkgKyB4XSArIDEgXHJcbiMgXHQjIFx0XHRlbHNlICctJykgKyAoaWYgeCAlIDMgPCAyIHx8IHggPT0gOCB0aGVuICcgJyBlbHNlICcgfCAnKTtcclxuIyBcdCMgXHRzICs9IGlmIHkgJSAzIDwgMiB8fCB5ID09IDggdGhlbiAnXFxuJyBlbHNlICdcXG4tLS0tLS0rLS0tLS0tLSstLS0tLS1cXG4nO1xyXG4jIFx0Y29uc29sZS5sb2cgY1xyXG4jIFx0Y29uc29sZS5sb2cgc1xyXG5cclxuY29uc29sZS50aW1lICdQcm9jZXNzaW5nIHRpbWUnXHJcblxyXG5zdWRva3UgPSBuZXcgU3Vkb2t1KClcclxuXHJcbmZpbGVuYW1lID0gcHJvY2Vzcy5hcmd2WzJdXHJcbnB1enpsZXMgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpLnRvU3RyaW5nKCkuc3BsaXQgJ1xcbidcclxubGVuID0gcHV6emxlcy5zaGlmdCgpXHJcbm91dHB1dCA9IGxlbiArICdcXG4nXHJcblxyXG5jb25zb2xlLmxvZyBcIkZpbGUgJ1wiICsgZmlsZW5hbWUgKyBcIic6IFwiICsgbGVuICsgXCIgcHV6emxlc1wiXHJcblxyXG4jIHNvbHZlIGFsbCBwdXp6bGVzXHJcbmZvciBwLGkgaW4gcHV6emxlc1xyXG5cdCNpZiBpPjEwMCB0aGVuIGJyZWFrXHJcblxyXG5cdCNpZiBpICE9IDcgdGhlbiBjb250aW51ZVxyXG5cclxuXHRbcCwgc29sXSA9IHAuc3BsaXQgJywnXHJcblxyXG5cdGlmIHAubGVuZ3RoID09IDgxXHJcblx0XHRpZiAhKCsraSAlIDIwMDApXHJcblx0XHRcdGNvbnNvbGUubG9nIChpICogMTAwIC8gbGVuKS50b0ZpeGVkKDEpICsgJyUnXHJcblx0XHRcclxuXHRcdGlmICEocmVzID0gc3Vkb2t1LnNvbHZlIHApXHJcblx0XHRcdHRocm93IFwiRmFpbGVkIG9uIHB1enpsZSBcIiArIGlcclxuXHRcdFxyXG5cdFx0aWYgc29sICYmIHJlcyAhPSBzb2xcclxuXHRcdFx0dGhyb3cgXCJJbnZhbGlkIHNvbHV0aW9uIGZvciBwdXp6bGUgXCIgKyBpXHJcblx0XHRcclxuXHRcdGNvbnNvbGUubG9nIHBcclxuXHRcdGNvbnNvbGUubG9nIHJlc1xyXG5cdFx0b3V0cHV0ICs9IHAgKyAnLCcgKyByZXMgKyAnXFxuJ1xyXG5cclxuIyByZXN1bHRzXHJcbmNvbnNvbGUudGltZUVuZCAnUHJvY2Vzc2luZyB0aW1lJ1xyXG5mcy53cml0ZUZpbGVTeW5jICdzdWRva3UubG9nJywgb3V0cHV0XHJcbmNvbnNvbGUubG9nIFwiTUQ1ID0gXCIgKyByZXF1aXJlKCdjcnlwdG8nKS5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUob3V0cHV0KS5kaWdlc3QgXCJoZXhcIlxyXG4iXX0=
//# sourceURL=c:\Lab\2020\030-SudokuDLXnodejs\coffee\sudoku.coffee