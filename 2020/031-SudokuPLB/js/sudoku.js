// Generated by CoffeeScript 2.4.1
// Implementation of Knuth's Dancing Links technique for Algorithm X (exact cover).
var dlx_cover, dlx_search, dlx_solve, dlx_uncover, filename, fs, g, i, iter, j, l, len, len1, len2, m, puzzle, puzzles, r, range, ref, s, solve_sudoku;

fs = require('fs');

range = function(n) {
  return (function() {
    var results = [];
    for (var l = 0; 0 <= n ? l < n : l > n; 0 <= n ? l++ : l--){ results.push(l); }
    return results;
  }).apply(this);
};

iter = function(dir, c, body) { // replacing while with iter seems to slow down by 100%
  var i, results;
  i = c[dir];
  results = [];
  while (i !== c) {
    body(i);
    results.push(i = i[dir]);
  }
  return results;
};

dlx_cover = function(c) {
  c.right.left = c.left;
  c.left.right = c.right;
  return iter('down', c, function(i) {
    return iter('right', i, function(j) {
      j.down.up = j.up;
      j.up.down = j.down;
      return j.column.size--;
    });
  });
};

dlx_uncover = function(c) {
  iter('up', c, function(i) {
    return iter('left', i, function(j) {
      j.column.size++;
      j.down.up = j;
      return j.up.down = j;
    });
  });
  c.right.left = c;
  return c.left.right = c;
};

dlx_search = function(head, solution, k, solutions, maxsolutions) {
  var c, j, r, s;
  if (head.right === head) {
    solutions.push(solution.slice(0));
    if (solutions.length >= maxsolutions) {
      return solutions;
    }
    return null;
  }
  c = null;
  s = 99999;
  j = head.right;
  while (j !== head) {
    if (j.size === 0) {
      return null;
    }
    if (j.size < s) {
      s = j.size;
      c = j;
    }
    j = j.right;
  }
  dlx_cover(c);
  r = c.down;
  while (r !== c) {
    solution[k] = r.row;
    iter('right', r, function(j) {
      return dlx_cover(j.column);
    });
    s = dlx_search(head, solution, k + 1, solutions, maxsolutions);
    if (s !== null) {
      return s;
    }
    iter('left', r, function(j) {
      return dlx_uncover(j.column);
    });
    r = r.down;
  }
  dlx_uncover(c);
  return null;
};

dlx_solve = function(matrix, skip, maxsolutions) {
  var columns, head, i, j, l, last, len1, len2, len3, len4, m, node, o, p, ref, ref1, ref2, ref3, solutions;
  columns = new Array(matrix[0].length);
  ref = range(columns.length);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    columns[i] = {};
  }
  ref1 = range(columns.length);
  for (m = 0, len2 = ref1.length; m < len2; m++) {
    i = ref1[m];
    columns[i].index = i;
    columns[i].up = columns[i];
    columns[i].down = columns[i];
    if (i >= skip) {
      if (i - 1 >= skip) {
        columns[i].left = columns[i - 1];
      }
      if (i + 1 < columns.length) {
        columns[i].right = columns[i + 1];
      }
    } else {
      columns[i].left = columns[i];
      columns[i].right = columns[i];
    }
    columns[i].size = 0;
  }
  ref2 = range(matrix.length);
  for (o = 0, len3 = ref2.length; o < len3; o++) {
    i = ref2[o];
    last = null;
    ref3 = range(matrix[i].length);
    for (p = 0, len4 = ref3.length; p < len4; p++) {
      j = ref3[p];
      if (matrix[i][j]) {
        node = {};
        node.row = i;
        node.column = columns[j];
        node.up = columns[j].up;
        node.down = columns[j];
        if (last) {
          node.left = last;
          node.right = last.right;
          last.right.left = node;
          last.right = node;
        } else {
          node.left = node;
          node.right = node;
        }
        columns[j].up.down = node;
        columns[j].up = node;
        columns[j].size++;
        last = node;
      }
    }
  }
  head = {};
  head.right = columns[skip];
  head.left = columns[columns.length - 1];
  columns[skip].left = head;
  columns[columns.length - 1].right = head;
  solutions = [];
  dlx_search(head, [], 0, solutions, maxsolutions);
  return solutions;
};

solve_sudoku = function(grid) {
  var g, i, j, l, len1, len2, len3, len4, m, mat, n, o, p, r, ref, ref1, ref2, ref3, rinfo, row, solutions;
  mat = [];
  rinfo = [];
  ref = range(9);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(9);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      g = grid[i][j] - 1;
      if (g >= 0) {
        row = new Array(324);
        row[i * 9 + j] = 1;
        row[9 * 9 + i * 9 + g] = 1;
        row[9 * 9 * 2 + j * 9 + g] = 1;
        row[9 * 9 * 3 + (Math.floor(i / 3) * 3 + Math.floor(j / 3)) * 9 + g] = 1;
        mat.push(row);
        rinfo.push({
          'row': i,
          'col': j,
          'n': g + 1
        });
      } else {
        ref2 = range(9);
        for (o = 0, len3 = ref2.length; o < len3; o++) {
          n = ref2[o];
          row = new Array(324);
          row[i * 9 + j] = 1;
          row[9 * 9 + i * 9 + n] = 1;
          row[9 * 9 * 2 + j * 9 + n] = 1;
          row[9 * 9 * 3 + (Math.floor(i / 3) * 3 + Math.floor(j / 3)) * 9 + n] = 1;
          mat.push(row);
          rinfo.push({
            'row': i,
            'col': j,
            'n': n + 1
          });
        }
      }
    }
  }
  solutions = dlx_solve(mat, 0, 2);
  if (solutions.length > 0) {
    r = solutions[0];
    ref3 = range(r.length);
    for (p = 0, len4 = ref3.length; p < len4; p++) {
      i = ref3[p];
      grid[rinfo[r[i]]['row']][rinfo[r[i]]['col']] = rinfo[r[i]]['n'];
    }
    return solutions.length;
  }
  return 0;
};

filename = process.argv[2];

puzzles = fs.readFileSync(filename).toString().split('\n');

len = puzzles.shift();

console.time('puzzle');

for (l = 0, len1 = puzzles.length; l < len1; l++) {
  puzzle = puzzles[l];
  if (puzzle.length >= 81) {
    g = (function() {
      var len2, m, ref, results;
      ref = range(9);
      results = [];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        i = ref[m];
        results.push((function() {
          var len3, o, ref1, results1;
          ref1 = range(9);
          results1 = [];
          for (o = 0, len3 = ref1.length; o < len3; o++) {
            j = ref1[o];
            results1.push(parseInt(puzzle[i * 9 + j]));
          }
          return results1;
        })());
      }
      return results;
    })();
    r = solve_sudoku(g); // this is the number of solutions
    if (r > 0) {
      s = '';
      ref = range(81);
      for (m = 0, len2 = ref.length; m < len2; m++) {
        i = ref[m];
        s += g[Math.floor(i / 9)][i % 9];
      }
    }
  }
}

//console.log puzzle
//console.log s
console.timeEnd('puzzle');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\031-SudokuPLB\coffee\sudoku.coffee