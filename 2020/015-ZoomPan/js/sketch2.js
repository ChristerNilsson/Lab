// Generated by CoffeeScript 2.4.1
var clearLog, enableLog, end_handler, handle_pinch_zoom, init, log, logEvents, move_handler, set_handlers, start_handler, tpCache, update_background;

logEvents = false;

tpCache = [];

enableLog = function(ev) {
  return logEvents = !logEvents;
};

log = function(name, ev, printTargetIds) {
  var j, len, o, ref, s, t;
  o = document.getElementsByTagName('output')[0];
  s = name + ": touches = " + ev.touches.length + " ; targetTouches = " + ev.targetTouches.length + " ; changedTouches = " + ev.changedTouches.length;
  o.innerHTML += s + " <br>";
  if (printTargetIds) {
    s = "";
    ref = ev.targetTouches;
    for (j = 0, len = ref.length; j < len; j++) {
      t = ref[j];
      s += "... id = " + t.identifier + " <br>";
    }
    return o.innerHTML += s;
  }
};

clearLog = function(event) {
  var o;
  o = document.getElementsByTagName('output')[0];
  return o.innerHTML = "";
};

update_background = function(ev) {
  var n;
  n = ev.targetTouches.length;
  if (n === 1) {
    return ev.target.style.background = "yellow";
  } else if (n === 2) {
    return ev.target.style.background = "pink";
  } else {
    return ev.target.style.background = "lightblue";
  }
};

// This is a very basic 2-touch move/pinch/zoom handler that does not include
// error handling, only handles horizontal moves, etc.
handle_pinch_zoom = function(ev) {
  var PINCH_THRESHHOLD, diff1, diff2, i, j, len, point1, point2, ref, results;
  if (ev.targetTouches.length === 2 && ev.changedTouches.length === 2) {
    // Check if the two target touches are the same ones that started
    // the 2-touch
    point1 = -1;
    point2 = -1;
    ref = range(tpCache.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (tpCache[i].identifier === ev.targetTouches[0].identifier) {
        point1 = i;
      }
      if (tpCache[i].identifier === ev.targetTouches[1].identifier) {
        point2 = i;
      }
      if (point1 >= 0 && point2 >= 0) {
        
        // Calculate the difference between the start and move coordinates
        diff1 = Math.abs(tpCache[point1].clientX - ev.targetTouches[0].clientX);
        diff2 = Math.abs(tpCache[point2].clientX - ev.targetTouches[1].clientX);
        // This threshold is device dependent as well as application specific
        PINCH_THRESHHOLD = ev.target.clientWidth / 10;
        if (diff1 >= PINCH_THRESHHOLD && diff2 >= PINCH_THRESHHOLD) {
          results.push(ev.target.style.background = "green");
        } else {
          results.push(void 0);
        }
      } else {
        results.push(tpCache = []);
      }
    }
    return results;
  }
};

start_handler = function(ev) {
  var j, len, ref, t;
  // If the user makes simultaneious touches, the browser will fire a
  // separate touchstart event for each touch point. Thus if there are
  // three simultaneous touches, the first touchstart event will have
  // targetTouches length of one, the second event will have a length
  // of two, and so on.
  ev.preventDefault();
  // Cache the touch points for later processing of 2-touch pinch/zoom
  if (ev.targetTouches.length === 2) {
    ref = ev.targetTouches;
    for (j = 0, len = ref.length; j < len; j++) {
      t = ref[j];
      tpCache.push(t);
    }
  }
  if (logEvents) {
    log("touchStart", ev, true);
  }
  return update_background(ev);
};

move_handler = function(ev) {
  // Note: if the user makes more than one "simultaneous" touches, most browsers
  // fire at least one touchmove event and some will fire several touchmoves.
  // Consequently, an application might want to "ignore" some touchmoves.

  // This function sets the target element's outline to "dashed" to visualy
  // indicate the target received a move event.

  ev.preventDefault();
  if (logEvents) {
    log("touchMove", ev, false);
  }
  // To avoid too much color flashing many touchmove events are started,
  // don't update the background if two touch points are active
  if (!(ev.touches.length === 2 && ev.targetTouches.length === 2)) {
    update_background(ev);
  }
  // Set the target element's outline to dashed to give a clear visual
  // indication the element received a move event.
  ev.target.style.outline = "dashed";
  // Check this event for 2-touch Move/Pinch/Zoom gesture
  return handle_pinch_zoom(ev);
};

end_handler = function(ev) {
  ev.preventDefault();
  if (logEvents) {
    log(ev.type, ev, false);
  }
  if (ev.targetTouches.length === 0) {
    // Restore background and outline to original values
    ev.target.style.background = "white";
    return ev.target.style.outline = "1px solid black";
  }
};

set_handlers = function(name) {
  var el;
  // Install event handlers for the given element
  el = document.getElementById(name);
  el.ontouchstart = start_handler;
  el.ontouchmove = move_handler;
  // Use same handler for touchcancel and touchend
  el.ontouchcancel = end_handler;
  return el.ontouchend = end_handler;
};

init = function() {
  set_handlers("target1");
  set_handlers("target2");
  set_handlers("target3");
  return set_handlers("target4");
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoMi5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxza2V0Y2gyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQSxpQkFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLFlBQUEsRUFBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQTs7QUFBQSxTQUFBLEdBQVk7O0FBQ1osT0FBQSxHQUFVOztBQUVWLFNBQUEsR0FBWSxRQUFBLENBQUMsRUFBRCxDQUFBO1NBQVEsU0FBQSxHQUFZLENBQUk7QUFBeEI7O0FBRVosR0FBQSxHQUFNLFFBQUEsQ0FBQyxJQUFELEVBQU8sRUFBUCxFQUFXLGNBQVgsQ0FBQTtBQUNMLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtFQUFBLENBQUEsR0FBSSxRQUFRLENBQUMsb0JBQVQsQ0FBOEIsUUFBOUIsQ0FBd0MsQ0FBQSxDQUFBO0VBQzVDLENBQUEsR0FBSSxJQUFBLEdBQU8sY0FBUCxHQUF3QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQW5DLEdBQTRDLHFCQUE1QyxHQUFvRSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQXJGLEdBQThGLHNCQUE5RixHQUF1SCxFQUFFLENBQUMsY0FBYyxDQUFDO0VBQzdJLENBQUMsQ0FBQyxTQUFGLElBQWUsQ0FBQSxHQUFJO0VBRW5CLElBQUcsY0FBSDtJQUNDLENBQUEsR0FBSTtBQUNKO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxDQUFBLElBQUssV0FBQSxHQUFjLENBQUMsQ0FBQyxVQUFoQixHQUE2QjtJQURuQztXQUVBLENBQUMsQ0FBQyxTQUFGLElBQWUsRUFKaEI7O0FBTEs7O0FBV04sUUFBQSxHQUFXLFFBQUEsQ0FBQyxLQUFELENBQUE7QUFDVixNQUFBO0VBQUEsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxv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QUEsQ0FBYSxTQUFiO1NBQ0EsWUFBQSxDQUFhLFNBQWI7QUFKTSIsInNvdXJjZXNDb250ZW50IjpbImxvZ0V2ZW50cyA9IGZhbHNlXHJcbnRwQ2FjaGUgPSBbXVxyXG5cclxuZW5hYmxlTG9nID0gKGV2KSAtPiBsb2dFdmVudHMgPSBub3QgbG9nRXZlbnRzXHJcblxyXG5sb2cgPSAobmFtZSwgZXYsIHByaW50VGFyZ2V0SWRzKSAtPlxyXG5cdG8gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3V0cHV0JylbMF1cclxuXHRzID0gbmFtZSArIFwiOiB0b3VjaGVzID0gXCIgKyBldi50b3VjaGVzLmxlbmd0aCArIFwiIDsgdGFyZ2V0VG91Y2hlcyA9IFwiICsgZXYudGFyZ2V0VG91Y2hlcy5sZW5ndGggKyBcIiA7IGNoYW5nZWRUb3VjaGVzID0gXCIgKyBldi5jaGFuZ2VkVG91Y2hlcy5sZW5ndGhcclxuXHRvLmlubmVySFRNTCArPSBzICsgXCIgPGJyPlwiXHJcblxyXG5cdGlmIHByaW50VGFyZ2V0SWRzXHJcblx0XHRzID0gXCJcIlxyXG5cdFx0Zm9yIHQgaW4gZXYudGFyZ2V0VG91Y2hlc1xyXG5cdFx0XHRzICs9IFwiLi4uIGlkID0gXCIgKyB0LmlkZW50aWZpZXIgKyBcIiA8YnI+XCJcclxuXHRcdG8uaW5uZXJIVE1MICs9IHNcclxuXHJcbmNsZWFyTG9nID0gKGV2ZW50KSAtPlxyXG5cdG8gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3V0cHV0JylbMF1cclxuXHRvLmlubmVySFRNTCA9IFwiXCJcclxuXHJcbnVwZGF0ZV9iYWNrZ3JvdW5kID0gKGV2KSAtPlxyXG5cdG4gPSBldi50YXJnZXRUb3VjaGVzLmxlbmd0aFxyXG5cdGlmIG49PTEgdGhlbiBldi50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9IFwieWVsbG93XCJcclxuXHRlbHNlIGlmIG49PTIgdGhlbiBldi50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9IFwicGlua1wiXHJcblx0ZWxzZSBldi50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9IFwibGlnaHRibHVlXCJcclxuXHJcbiMgVGhpcyBpcyBhIHZlcnkgYmFzaWMgMi10b3VjaCBtb3ZlL3BpbmNoL3pvb20gaGFuZGxlciB0aGF0IGRvZXMgbm90IGluY2x1ZGVcclxuIyBlcnJvciBoYW5kbGluZywgb25seSBoYW5kbGVzIGhvcml6b250YWwgbW92ZXMsIGV0Yy5cclxuaGFuZGxlX3BpbmNoX3pvb20gPSAoZXYpIC0+XHJcblx0aWYgZXYudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT0gMiBhbmQgZXYuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID09IDJcclxuXHRcdCMgQ2hlY2sgaWYgdGhlIHR3byB0YXJnZXQgdG91Y2hlcyBhcmUgdGhlIHNhbWUgb25lcyB0aGF0IHN0YXJ0ZWRcclxuXHRcdCMgdGhlIDItdG91Y2hcclxuXHRcdHBvaW50MSA9IC0xXHJcblx0XHRwb2ludDIgPSAtMVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgdHBDYWNoZS5sZW5ndGhcclxuXHRcdFx0aWYgdHBDYWNoZVtpXS5pZGVudGlmaWVyID09IGV2LnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllciB0aGVuIHBvaW50MSA9IGlcclxuXHRcdFx0aWYgdHBDYWNoZVtpXS5pZGVudGlmaWVyID09IGV2LnRhcmdldFRvdWNoZXNbMV0uaWRlbnRpZmllciB0aGVuIHBvaW50MiA9IGlcclxuXHJcblx0XHRcdGlmIChwb2ludDEgPj0wICYmIHBvaW50MiA+PSAwKSBcclxuXHRcdFx0XHQjIENhbGN1bGF0ZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgbW92ZSBjb29yZGluYXRlc1xyXG5cdFx0XHRcdGRpZmYxID0gTWF0aC5hYnModHBDYWNoZVtwb2ludDFdLmNsaWVudFggLSBldi50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFgpXHJcblx0XHRcdFx0ZGlmZjIgPSBNYXRoLmFicyh0cENhY2hlW3BvaW50Ml0uY2xpZW50WCAtIGV2LnRhcmdldFRvdWNoZXNbMV0uY2xpZW50WClcclxuXHJcblx0XHRcdFx0IyBUaGlzIHRocmVzaG9sZCBpcyBkZXZpY2UgZGVwZW5kZW50IGFzIHdlbGwgYXMgYXBwbGljYXRpb24gc3BlY2lmaWNcclxuXHRcdFx0XHRQSU5DSF9USFJFU0hIT0xEID0gZXYudGFyZ2V0LmNsaWVudFdpZHRoIC8gMTBcclxuXHRcdFx0XHRpZiBkaWZmMSA+PSBQSU5DSF9USFJFU0hIT0xEIGFuZCBkaWZmMiA+PSBQSU5DSF9USFJFU0hIT0xEIHRoZW4gZXYudGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSBcImdyZWVuXCJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRwQ2FjaGUgPSBbXVxyXG5cclxuc3RhcnRfaGFuZGxlciA9IChldikgLT5cclxuXHQjIElmIHRoZSB1c2VyIG1ha2VzIHNpbXVsdGFuZWlvdXMgdG91Y2hlcywgdGhlIGJyb3dzZXIgd2lsbCBmaXJlIGFcclxuXHQjIHNlcGFyYXRlIHRvdWNoc3RhcnQgZXZlbnQgZm9yIGVhY2ggdG91Y2ggcG9pbnQuIFRodXMgaWYgdGhlcmUgYXJlXHJcblx0IyB0aHJlZSBzaW11bHRhbmVvdXMgdG91Y2hlcywgdGhlIGZpcnN0IHRvdWNoc3RhcnQgZXZlbnQgd2lsbCBoYXZlXHJcblx0IyB0YXJnZXRUb3VjaGVzIGxlbmd0aCBvZiBvbmUsIHRoZSBzZWNvbmQgZXZlbnQgd2lsbCBoYXZlIGEgbGVuZ3RoXHJcblx0IyBvZiB0d28sIGFuZCBzbyBvbi5cclxuXHRldi5wcmV2ZW50RGVmYXVsdCgpXHJcblx0IyBDYWNoZSB0aGUgdG91Y2ggcG9pbnRzIGZvciBsYXRlciBwcm9jZXNzaW5nIG9mIDItdG91Y2ggcGluY2gvem9vbVxyXG5cdGlmIGV2LnRhcmdldFRvdWNoZXMubGVuZ3RoID09IDJcclxuXHRcdGZvciB0IGluIGV2LnRhcmdldFRvdWNoZXNcclxuXHRcdFx0dHBDYWNoZS5wdXNoIHRcclxuXHRpZiBsb2dFdmVudHMgdGhlbiBsb2cgXCJ0b3VjaFN0YXJ0XCIsIGV2LCB0cnVlXHJcblx0dXBkYXRlX2JhY2tncm91bmQgZXZcclxuXHJcbm1vdmVfaGFuZGxlciA9IChldikgLT5cclxuXHQjIE5vdGU6IGlmIHRoZSB1c2VyIG1ha2VzIG1vcmUgdGhhbiBvbmUgXCJzaW11bHRhbmVvdXNcIiB0b3VjaGVzLCBtb3N0IGJyb3dzZXJzXHJcblx0IyBmaXJlIGF0IGxlYXN0IG9uZSB0b3VjaG1vdmUgZXZlbnQgYW5kIHNvbWUgd2lsbCBmaXJlIHNldmVyYWwgdG91Y2htb3Zlcy5cclxuXHQjIENvbnNlcXVlbnRseSwgYW4gYXBwbGljYXRpb24gbWlnaHQgd2FudCB0byBcImlnbm9yZVwiIHNvbWUgdG91Y2htb3Zlcy5cclxuXHQjXHJcblx0IyBUaGlzIGZ1bmN0aW9uIHNldHMgdGhlIHRhcmdldCBlbGVtZW50J3Mgb3V0bGluZSB0byBcImRhc2hlZFwiIHRvIHZpc3VhbHlcclxuXHQjIGluZGljYXRlIHRoZSB0YXJnZXQgcmVjZWl2ZWQgYSBtb3ZlIGV2ZW50LlxyXG5cdCNcclxuXHRldi5wcmV2ZW50RGVmYXVsdCgpXHJcblx0aWYgbG9nRXZlbnRzIHRoZW4gbG9nIFwidG91Y2hNb3ZlXCIsIGV2LCBmYWxzZVxyXG5cclxuXHQjIFRvIGF2b2lkIHRvbyBtdWNoIGNvbG9yIGZsYXNoaW5nIG1hbnkgdG91Y2htb3ZlIGV2ZW50cyBhcmUgc3RhcnRlZCxcclxuXHQjIGRvbid0IHVwZGF0ZSB0aGUgYmFja2dyb3VuZCBpZiB0d28gdG91Y2ggcG9pbnRzIGFyZSBhY3RpdmVcclxuXHRpZiBub3QgKGV2LnRvdWNoZXMubGVuZ3RoID09IDIgYW5kIGV2LnRhcmdldFRvdWNoZXMubGVuZ3RoID09IDIpXHJcblx0XHR1cGRhdGVfYmFja2dyb3VuZCBldlxyXG5cclxuXHQjIFNldCB0aGUgdGFyZ2V0IGVsZW1lbnQncyBvdXRsaW5lIHRvIGRhc2hlZCB0byBnaXZlIGEgY2xlYXIgdmlzdWFsXHJcblx0IyBpbmRpY2F0aW9uIHRoZSBlbGVtZW50IHJlY2VpdmVkIGEgbW92ZSBldmVudC5cclxuXHRldi50YXJnZXQuc3R5bGUub3V0bGluZSA9IFwiZGFzaGVkXCJcclxuXHJcblx0IyBDaGVjayB0aGlzIGV2ZW50IGZvciAyLXRvdWNoIE1vdmUvUGluY2gvWm9vbSBnZXN0dXJlXHJcblx0aGFuZGxlX3BpbmNoX3pvb20gZXZcclxuXHJcbmVuZF9oYW5kbGVyID0gKGV2KSAtPlxyXG5cdGV2LnByZXZlbnREZWZhdWx0KClcclxuXHRpZiBsb2dFdmVudHMgdGhlbiBsb2cgZXYudHlwZSwgZXYsIGZhbHNlXHJcblx0aWYgZXYudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT0gMFxyXG5cdFx0IyBSZXN0b3JlIGJhY2tncm91bmQgYW5kIG91dGxpbmUgdG8gb3JpZ2luYWwgdmFsdWVzXHJcblx0XHRldi50YXJnZXQuc3R5bGUuYmFja2dyb3VuZCA9IFwid2hpdGVcIlxyXG5cdFx0ZXYudGFyZ2V0LnN0eWxlLm91dGxpbmUgPSBcIjFweCBzb2xpZCBibGFja1wiXHJcblxyXG5zZXRfaGFuZGxlcnMgPSAobmFtZSkgLT5cclxuXHQjIEluc3RhbGwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiBlbGVtZW50XHJcblx0ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBuYW1lXHJcblx0ZWwub250b3VjaHN0YXJ0ID0gc3RhcnRfaGFuZGxlclxyXG5cdGVsLm9udG91Y2htb3ZlID0gbW92ZV9oYW5kbGVyXHJcblx0IyBVc2Ugc2FtZSBoYW5kbGVyIGZvciB0b3VjaGNhbmNlbCBhbmQgdG91Y2hlbmRcclxuXHRlbC5vbnRvdWNoY2FuY2VsID0gZW5kX2hhbmRsZXJcclxuXHRlbC5vbnRvdWNoZW5kID0gZW5kX2hhbmRsZXJcclxuXHJcbmluaXQgPSAtPlxyXG5cdHNldF9oYW5kbGVycyBcInRhcmdldDFcIlxyXG5cdHNldF9oYW5kbGVycyBcInRhcmdldDJcIlxyXG5cdHNldF9oYW5kbGVycyBcInRhcmdldDNcIlxyXG5cdHNldF9oYW5kbGVycyBcInRhcmdldDRcIlxyXG4iXX0=
//# sourceURL=c:\Lab\2020\015-ZoomPan\coffee\sketch2.coffee