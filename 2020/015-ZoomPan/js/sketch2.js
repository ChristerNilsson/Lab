// Generated by CoffeeScript 2.4.1
var Button, SCALE, VERSION, bakgrund, buttons, cx, cy, draw, msg0, msg1, msg2, setup, startX, startY, touchEnded, touchMoved, touchStarted;

VERSION = 7;

bakgrund = '#888';

SCALE = 1;

cx = 0;

cy = 0;

msg0 = VERSION;

msg1 = "";

msg2 = "";

buttons = [];

startX = 0;

startY = 0;

Button = class Button {
  constructor(prompt, x1, y1, click) {
    this.prompt = prompt;
    this.x = x1;
    this.y = y1;
    this.click = click;
    this.r = 50;
  }

  draw() {
    circle(this.x, this.y, this.r);
    return text(this.prompt, this.x, this.y);
  }

  inside(x, y) {
    return this.r > dist(x, y, this.x, this.y);
  }

};

setup = function() {
  createCanvas(windowWidth - 20, windowHeight - 20);
  textAlign(CENTER, CENTER);
  textSize(50);
  cx = width / 2;
  cy = height / 2;
  buttons.push(new Button('+', 50, 50, function() {
    bakgrund = '#f00';
    return SCALE *= 1.5;
  }));
  return buttons.push(new Button('-', 150, 50, function() {
    bakgrund = '#0f0';
    return SCALE /= 1.5;
  }));
};

draw = function() {
  var button, i, len;
  background(bakgrund);
  push();
  translate(cx, cy);
  scale(SCALE);
  circle(0, 0, 100);
  pop();
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    button.draw();
  }
  text(msg0, width / 2, height / 2);
  text(msg1, width / 2, height / 2 + 100);
  return text(msg2, width / 2, height / 2 + 200);
};

touchStarted = function(e) {
  msg0 = `started ${mouseX} `;
  startX = mouseX;
  return startY = mouseY;
};

touchMoved = function(e) {
  msg1 = `moved ${mouseX} `;
  cx += mouseX - startX;
  cy += mouseY - startY;
  startX = mouseX;
  return startY = mouseY;
};

touchEnded = function(e) {
  var button, i, len, results;
  msg2 = `ended ${mouseX}`;
  if (mouseX === startX && mouseY === startY) {
    results = [];
    for (i = 0, len = buttons.length; i < len; i++) {
      button = buttons[i];
      if (button.inside(mouseX, mouseY)) {
        results.push(button.click());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

// touchStarted = (ev) ->
// 	try
// 		dump.store 'touchStarted', true
// 		ev.preventDefault()
// 		if touches.length == 2
// 			for t in touches
// 				tpCache.push t
// 		update_background ev
// 	catch e
// 		dump.store "error in Started"

// touchMoved = (ev) ->
// 	try
// 		dump.store 'touchMoved'
// 		ev.preventDefault()
// 		if not touches.length == 2 then update_background ev
// 		ev.target.style.outline = "dashed"
// 		handle_pinch_zoom ev
// 	catch 
// 		dump.store "error in Moved"

// touchEnded = (ev) ->
// 	try	
// 		dump.store 'touchEnded'
// 		ev.preventDefault()
// 		if touches.length == 1
// 			touch = touches[0]
// 			for button in buttons	
// 				if button.inside touch.x,touch.y then button.click()
// 			# Restore background and outline to original values
// 			#ev.target.style.background = "white"
// 			#ev.target.style.outline = "1px solid black"
// 	catch e
// 		dump.store "error in Ended"

//enableLog = -> loggaEvents = not loggaEvents

// logga = (name, printTargetIds=false) ->
// 	if not loggaEvents then return
// 	o = document.getElementsByTagName('output')[0]
// 	o.innerHTML += "#{name}: touches = #{touches.length} <br>"
// 	if printTargetIds then o.innerHTML += ("... id = #{t.id}" for t in touches).join '<br>'

// clearLog = ->
// 	o = document.getElementsByTagName('output')[0]
// 	o.innerHTML = ""

// update_background = (ev) ->
// 	n = touches.length
// 	bakgrund = "lightblue"
// 	if n==1 then bakgrund = "yellow"
// 	if n==2 then bakgrund = "pink"
// 	dump.store "update_background #{bakgrund}"

// handle_pinch_zoom = (ev) ->
// 	try
// 		dump.store "--HPZ #{tpCache.length} #{touches.length}"
// 		if touches.length == 2
// 			# Check if the two target touches are the same ones that started the 2-touch
// 			index0 = -1
// 			index1 = -1
// 			for i in range tpCache.length
// 				if tpCache[i].id == touches[0].id then index0 = i
// 				if tpCache[i].id == touches[1].id then index1 = i
// 			dump.store "----index #{index0} #{index1}"
// 			if index0 >=0 and index1 >= 0
// 				# Calculate the difference between the start and move coordinates
// 				diff0 = int dist tpCache[index0].x, tpCache[index0].y, touches[0].x, touches[0].y
// 				diff1 = int dist tpCache[index1].x, tpCache[index1].y, touches[1].x, touches[1].y

// 				# This threshold is device dependent as well as application specific
// 				PINCH_THRESHHOLD = ev.target.clientWidth / 10
// 				dump.store "----diff #{diff0} #{diff1} #{PINCH_THRESHHOLD}"
// 				if diff0 >= PINCH_THRESHHOLD and diff1 >= PINCH_THRESHHOLD then bakgrund = "green"
// 				dump.store "----bakgrund #{bakgrund}"
// 			else
// 				tpCache = []
// 	catch e
// 		dump.store "error in HPZ #{e}"

// class Dump
// 	constructor : ->
// 		@data = []
// 		@active = false
// 	store : (msg) ->
// 		if @active
// 			console.log msg
// 			@data.push msg
// 	get : ->
// 		result = @data.join BR
// 		@data = []
// 		result + BR + BR
// dump = new Dump()

// sendMail = (subject) ->
// 	mail.href = encodeURI "mailto:janchrister.nilsson@gmail.com?subject=#{subject}&body=#{dump.get()}"
// 	mail.click()

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\015-ZoomPan\coffee\sketch2.coffee