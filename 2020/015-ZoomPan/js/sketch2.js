// Generated by CoffeeScript 2.4.1
var bakgrund, clearLog, draw, enableLog, handle_pinch_zoom, logga, loggaEvents, setup, touchEnded, touchMoved, touchStarted, tpCache, update_background;

loggaEvents = true;

tpCache = [];

bakgrund = '#888';

setup = function() {
  createCanvas(windowWidth, windowHeight / 2);
  return logga("Hej HÃ¤pp 21!");
};

draw = function() {
  return background(bakgrund);
};

enableLog = function() {
  return loggaEvents = !loggaEvents;
};

logga = function(name, printTargetIds = false) {
  var o, s, t;
  if (!loggaEvents) {
    return;
  }
  o = document.getElementsByTagName('output')[0];
  return o.innerHTML += `${name}: touches = ${touches.length
    // + "  ; targetTouches = " + ev.targetTouches.length + " ; changedTouches = " + ev.changedTouches.length
} <BR>` + (function() {
    var j, len;
    if (printTargetIds) {
      s = "";
      for (j = 0, len = touches.length; j < len; j++) {
        t = touches[j];
        s += `... id = ${JSON.stringify(t)
      // t.id
} <br>`;
      }
      return o.innerHTML += s;
    }
  })();
};

clearLog = function() {
  var o;
  o = document.getElementsByTagName('output')[0];
  return o.innerHTML = "";
};

update_background = function(ev) {
  var n;
  logga('update_background');
  n = touches.length;
  if (n === 1) {
    return bakgrund = "yellow";
  } else if (n === 2) {
    return bakgrund = "pink";
  } else {
    return bakgrund = "lightblue";
  }
};

// This is a very basic 2-touch move/pinch/zoom handler that does not include
// error handling, only handles horizontal moves, etc.
handle_pinch_zoom = function(ev) {
  var PINCH_THRESHHOLD, diff1, diff2, e, i, j, len, point1, point2, ref, results;
  try {
    logga("HPZ");
    if (touches.length === 2) { // and ev.changedTouches.length == 2
      // Check if the two target touches are the same ones that started
      // the 2-touch
      point1 = -1;
      point2 = -1;
      ref = range(tpCache.length);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (tpCache[i].id === touches[0].id) {
          point1 = i;
        }
        if (tpCache[i].id === touches[1].id) {
          point2 = i;
        }
        if (point1 >= 0 && point2 >= 0) {
          // Calculate the difference between the start and move coordinates
          diff1 = Math.abs(tpCache[point1].clientX - touches[0].clientX);
          diff2 = Math.abs(tpCache[point2].clientX - touches[1].clientX);
          // This threshold is device dependent as well as application specific
          PINCH_THRESHHOLD = ev.target.clientWidth / 10;
          if (diff1 >= PINCH_THRESHHOLD && diff2 >= PINCH_THRESHHOLD) {
            results.push(bakgrund = "green");
          } else {
            results.push(void 0);
          }
        } else {
          results.push(tpCache = []);
        }
      }
      return results;
    }
  } catch (error) {
    e = error;
    return logga(`error in HPZ ${e}`);
  }
};

touchStarted = function(ev) {
  var e, j, len, t;
  try {
    logga(ev.type, true);
    // If the user makes simultaneious touches, the browser will fire a
    // separate touchstart event for each touch point. Thus if there are
    // three simultaneous touches, the first touchstart event will have
    // targetTouches length of one, the second event will have a length
    // of two, and so on.
    ev.preventDefault();
    // Cache the touch points for later processing of 2-touch pinch/zoom
    if (touches.length === 2) {
      for (j = 0, len = touches.length; j < len; j++) {
        t = touches[j];
        tpCache.push(t);
      }
    }
    return update_background(ev);
  } catch (error) {
    e = error;
    return logga("error in Started");
  }
};

touchMoved = function(ev) {
  try {
    logga(ev.type);
    // Note: if the user makes more than one "simultaneous" touches, most browsers
    // fire at least one touchmove event and some will fire several touchmoves.
    // Consequently, an application might want to "ignore" some touchmoves.

    // This function sets the target element's outline to "dashed" to visualy
    // indicate the target received a move event.

    ev.preventDefault();
    // To avoid too much color flashing many touchmove events are started,
    // don't update the background if two touch points are active
    if (!touches.length === 2) { // and ev.targetTouches.length == 2)
      update_background(ev);
    }
    // Set the target element's outline to dashed to give a clear visual
    // indication the element received a move event.
    ev.target.style.outline = "dashed";
    // Check this event for 2-touch Move/Pinch/Zoom gesture
    return handle_pinch_zoom(ev);
  } catch (error) {
    return logga("error in Moved");
  }
};

touchEnded = function(ev) {
  var e;
  try {
    logga(ev.type);
    ev.preventDefault();
    if (touches.length === 0) {
      // Restore background and outline to original values
      ev.target.style.background = "white";
      return ev.target.style.outline = "1px solid black";
    }
  } catch (error) {
    e = error;
    return logga("error in Ended");
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\015-ZoomPan\coffee\sketch2.coffee