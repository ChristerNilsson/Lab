// Generated by CoffeeScript 2.4.1
var bakgrund, clearLog, draw, enableLog, handle_pinch_zoom, log, logEvents, setup, touchEnded, touchMoved, touchStarted, tpCache, update_background;

logEvents = true;

tpCache = [];

bakgrund = '#888';

setup = function() {
  return createCanvas(windowWidth, windowHeight / 2);
};

draw = function() {
  background(bakgrund);
  return text('15', 100, 100);
};

enableLog = function() {
  return logEvents = !logEvents;
};

log = function(name, ev, printTargetIds = false) {
  var j, len, o, s, t;
  o = document.getElementsByTagName('output')[0];
  s = name + ": touches = " + touches.length; // + "  ; targetTouches = " + ev.targetTouches.length + " ; changedTouches = " + ev.changedTouches.length
  o.innerHTML += s + " <br>";
  if (printTargetIds) {
    s = "";
    for (j = 0, len = touches.length; j < len; j++) {
      t = touches[j];
      s += "... id = " + t.id + " <br>";
    }
    return o.innerHTML += s;
  }
};

clearLog = function() {
  var o;
  o = document.getElementsByTagName('output')[0];
  return o.innerHTML = "";
};

update_background = function(ev) {
  var n;
  log('update_background', ev);
  n = touches.length;
  if (n === 1) {
    return bakgrund = "yellow";
  } else if (n === 2) {
    return bakgrund = "pink";
  } else {
    return bakgrund = "lightblue";
  }
};

// This is a very basic 2-touch move/pinch/zoom handler that does not include
// error handling, only handles horizontal moves, etc.
handle_pinch_zoom = function(ev) {
  var PINCH_THRESHHOLD, diff1, diff2, e, i, j, len, point1, point2, ref, results;
  try {
    console.log(ev);
    if (touches.length === 2 && ev.changedTouches.length === 2) {
      // Check if the two target touches are the same ones that started
      // the 2-touch
      point1 = -1;
      point2 = -1;
      ref = range(tpCache.length);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (tpCache[i].id === touches[0].id) {
          point1 = i;
        }
        if (tpCache[i].id === touches[1].id) {
          point2 = i;
        }
        if (point1 >= 0 && point2 >= 0) {
          // Calculate the difference between the start and move coordinates
          diff1 = Math.abs(tpCache[point1].clientX - touches[0].clientX);
          diff2 = Math.abs(tpCache[point2].clientX - touches[1].clientX);
          // This threshold is device dependent as well as application specific
          PINCH_THRESHHOLD = ev.target.clientWidth / 10;
          if (diff1 >= PINCH_THRESHHOLD && diff2 >= PINCH_THRESHHOLD) {
            results.push(bakgrund = "green");
          } else {
            results.push(void 0);
          }
        } else {
          results.push(tpCache = []);
        }
      }
      return results;
    }
  } catch (error) {
    e = error;
    return log("error in HPZ", e, ev);
  }
};

touchStarted = function(ev) {
  var e, j, len, t;
  try {
    console.log(ev);
    // If the user makes simultaneious touches, the browser will fire a
    // separate touchstart event for each touch point. Thus if there are
    // three simultaneous touches, the first touchstart event will have
    // targetTouches length of one, the second event will have a length
    // of two, and so on.
    ev.preventDefault();
    // Cache the touch points for later processing of 2-touch pinch/zoom
    if (touches.length === 2) {
      for (j = 0, len = touches.length; j < len; j++) {
        t = touches[j];
        tpCache.push(t);
      }
    }
    if (logEvents) {
      log("touchStart", ev, true);
    }
    return update_background(ev);
  } catch (error) {
    e = error;
    return log("error in Started", e, ev);
  }
};

touchMoved = function(ev) {
  try {
    console.log(ev);
    // Note: if the user makes more than one "simultaneous" touches, most browsers
    // fire at least one touchmove event and some will fire several touchmoves.
    // Consequently, an application might want to "ignore" some touchmoves.

    // This function sets the target element's outline to "dashed" to visualy
    // indicate the target received a move event.

    ev.preventDefault();
    if (logEvents) {
      log("touchMove", ev, false);
    }
    // To avoid too much color flashing many touchmove events are started,
    // don't update the background if two touch points are active
    if (!touches.length === 2) { // and ev.targetTouches.length == 2)
      update_background(ev);
    }
    // Set the target element's outline to dashed to give a clear visual
    // indication the element received a move event.
    ev.target.style.outline = "dashed";
    // Check this event for 2-touch Move/Pinch/Zoom gesture
    return handle_pinch_zoom(ev);
  } catch (error) {
    return log("error in Moved", ev);
  }
};

touchEnded = function(ev) {
  var e;
  try {
    console.log(ev);
    ev.preventDefault();
    if (logEvents) {
      log(ev.type, ev, false);
    }
    if (touches.length === 0) {
      // Restore background and outline to original values
      ev.target.style.background = "white";
      return ev.target.style.outline = "1px solid black";
    }
  } catch (error) {
    e = error;
    return log("error in Ended", e, ev);
  }
};

// set_handlers = (name) ->
// 	# Install event handlers for the given element
// 	el = document.getElementById name
// 	el.ontouchstart = start_handler
// 	el.ontouchmove = move_handler
// 	# Use same handler for touchcancel and touchend
// 	el.ontouchcancel = end_handler
// 	el.ontouchend = end_handler

// init = ->
// 	set_handlers "target1"
// 	set_handlers "target2"
// 	set_handlers "target3"
// 	set_handlers "target4"

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoMi5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxza2V0Y2gyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsaUJBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUE7O0FBQUEsU0FBQSxHQUFZOztBQUNaLE9BQUEsR0FBVTs7QUFDVixRQUFBLEdBQVc7O0FBRVgsS0FBQSxHQUFRLFFBQUEsQ0FBQSxDQUFBO1NBQ1AsWUFBQSxDQUFhLFdBQWIsRUFBeUIsWUFBQSxHQUFhLENBQXRDO0FBRE87O0FBR1IsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0VBQ04sVUFBQSxDQUFXLFFBQVg7U0FDQSxJQUFBLENBQUssSUFBTCxFQUFVLEdBQVYsRUFBYyxHQUFkO0FBRk07O0FBSVAsU0FBQSxHQUFZLFFBQUEsQ0FBQSxDQUFBO1NBQUcsU0FBQSxHQUFZLENBQUk7QUFBbkI7O0FBRVosR0FBQSxHQUFNLFFBQUEsQ0FBQyxJQUFELEVBQU8sRUFBUCxFQUFXLGlCQUFlLEtBQTFCLENBQUE7QUFDTCxNQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFBLENBQUEsR0FBSSxRQUFRLENBQUMsb0JBQVQsQ0FBOEIsUUFBOUIsQ0FBd0MsQ0FBQSxDQUFBO0VBQzVDLENBQUEsR0FBSSxJQUFBLEdBQU8sY0FBUCxHQUF3QixPQUFPLENBQUMsT0FEcEM7RUFFQSxDQUFDLENBQUMsU0FBRixJQUFlLENBQUEsR0FBSTtFQUVuQixJQUFHLGNBQUg7SUFDQyxDQUFBLEdBQUk7SUFDSixLQUFBLHlDQUFBOztNQUNDLENBQUEsSUFBSyxXQUFBLEdBQWMsQ0FBQyxDQUFDLEVBQWhCLEdBQXFCO0lBRDNCO1dBRUEsQ0FBQyxDQUFDLFNB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IjpbImxvZ0V2ZW50cyA9IHRydWVcclxudHBDYWNoZSA9IFtdXHJcbmJha2dydW5kID0gJyM4ODgnXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0Y3JlYXRlQ2FudmFzIHdpbmRvd1dpZHRoLHdpbmRvd0hlaWdodC8yXHJcblxyXG5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kIGJha2dydW5kXHJcblx0dGV4dCAnMTUnLDEwMCwxMDBcclxuXHJcbmVuYWJsZUxvZyA9IC0+IGxvZ0V2ZW50cyA9IG5vdCBsb2dFdmVudHNcclxuXHJcbmxvZyA9IChuYW1lLCBldiwgcHJpbnRUYXJnZXRJZHM9ZmFsc2UpIC0+XHJcblx0byA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvdXRwdXQnKVswXVxyXG5cdHMgPSBuYW1lICsgXCI6IHRvdWNoZXMgPSBcIiArIHRvdWNoZXMubGVuZ3RoICMgKyBcIiAgOyB0YXJnZXRUb3VjaGVzID0gXCIgKyBldi50YXJnZXRUb3VjaGVzLmxlbmd0aCArIFwiIDsgY2hhbmdlZFRvdWNoZXMgPSBcIiArIGV2LmNoYW5nZWRUb3VjaGVzLmxlbmd0aFxyXG5cdG8uaW5uZXJIVE1MICs9IHMgKyBcIiA8YnI+XCJcclxuXHJcblx0aWYgcHJpbnRUYXJnZXRJZHNcclxuXHRcdHMgPSBcIlwiXHJcblx0XHRmb3IgdCBpbiB0b3VjaGVzXHJcblx0XHRcdHMgKz0gXCIuLi4gaWQgPSBcIiArIHQuaWQgKyBcIiA8YnI+XCJcclxuXHRcdG8uaW5uZXJIVE1MICs9IHNcclxuXHJcbmNsZWFyTG9nID0gLT5cclxuXHRvID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ291dHB1dCcpWzBdXHJcblx0by5pbm5lckhUTUwgPSBcIlwiXHJcblxyXG51cGRhdGVfYmFja2dyb3VuZCA9IChldikgLT5cclxuXHRsb2cgJ3VwZGF0ZV9iYWNrZ3JvdW5kJyxldlxyXG5cdG4gPSB0b3VjaGVzLmxlbmd0aFxyXG5cdGlmIG49PTEgdGhlbiBiYWtncnVuZCA9IFwieWVsbG93XCJcclxuXHRlbHNlIGlmIG49PTIgdGhlbiBiYWtncnVuZCA9IFwicGlua1wiXHJcblx0ZWxzZSBiYWtncnVuZCA9IFwibGlnaHRibHVlXCJcclxuXHJcbiMgVGhpcyBpcyBhIHZlcnkgYmFzaWMgMi10b3VjaCBtb3ZlL3BpbmNoL3pvb20gaGFuZGxlciB0aGF0IGRvZXMgbm90IGluY2x1ZGVcclxuIyBlcnJvciBoYW5kbGluZywgb25seSBoYW5kbGVzIGhvcml6b250YWwgbW92ZXMsIGV0Yy5cclxuaGFuZGxlX3BpbmNoX3pvb20gPSAoZXYpIC0+XHJcblx0dHJ5XHJcblx0XHRjb25zb2xlLmxvZyBldlxyXG5cdFx0aWYgdG91Y2hlcy5sZW5ndGggPT0gMiBhbmQgZXYuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID09IDJcclxuXHRcdFx0IyBDaGVjayBpZiB0aGUgdHdvIHRhcmdldCB0b3VjaGVzIGFyZSB0aGUgc2FtZSBvbmVzIHRoYXQgc3RhcnRlZFxyXG5cdFx0XHQjIHRoZSAyLXRvdWNoXHJcblx0XHRcdHBvaW50MSA9IC0xXHJcblx0XHRcdHBvaW50MiA9IC0xXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIHRwQ2FjaGUubGVuZ3RoXHJcblx0XHRcdFx0aWYgdHBDYWNoZVtpXS5pZCA9PSB0b3VjaGVzWzBdLmlkIHRoZW4gcG9pbnQxID0gaVxyXG5cdFx0XHRcdGlmIHRwQ2FjaGVbaV0uaWQgPT0gdG91Y2hlc1sxXS5pZCB0aGVuIHBvaW50MiA9IGlcclxuXHJcblx0XHRcdFx0aWYgcG9pbnQxID49MCBhbmQgcG9pbnQyID49IDBcclxuXHRcdFx0XHRcdCMgQ2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBtb3ZlIGNvb3JkaW5hdGVzXHJcblx0XHRcdFx0XHRkaWZmMSA9IE1hdGguYWJzKHRwQ2FjaGVbcG9pbnQxXS5jbGllbnRYIC0gdG91Y2hlc1swXS5jbGllbnRYKVxyXG5cdFx0XHRcdFx0ZGlmZjIgPSBNYXRoLmFicyh0cENhY2hlW3BvaW50Ml0uY2xpZW50WCAtIHRvdWNoZXNbMV0uY2xpZW50WClcclxuXHJcblx0XHRcdFx0XHQjIFRoaXMgdGhyZXNob2xkIGlzIGRldmljZSBkZXBlbmRlbnQgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbiBzcGVjaWZpY1xyXG5cdFx0XHRcdFx0UElOQ0hfVEhSRVNISE9MRCA9IGV2LnRhcmdldC5jbGllbnRXaWR0aCAvIDEwXHJcblx0XHRcdFx0XHRpZiBkaWZmMSA+PSBQSU5DSF9USFJFU0hIT0xEIGFuZCBkaWZmMiA+PSBQSU5DSF9USFJFU0hIT0xEIHRoZW4gYmFrZ3J1bmQgPSBcImdyZWVuXCJcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR0cENhY2hlID0gW11cclxuXHRjYXRjaCBlXHJcblx0XHRsb2cgXCJlcnJvciBpbiBIUFpcIixlLGV2XHJcblxyXG50b3VjaFN0YXJ0ZWQgPSAoZXYpIC0+XHJcblx0dHJ5XHJcblx0XHRjb25zb2xlLmxvZyBldlxyXG5cdFx0IyBJZiB0aGUgdXNlciBtYWtlcyBzaW11bHRhbmVpb3VzIHRvdWNoZXMsIHRoZSBicm93c2VyIHdpbGwgZmlyZSBhXHJcblx0XHQjIHNlcGFyYXRlIHRvdWNoc3RhcnQgZXZlbnQgZm9yIGVhY2ggdG91Y2ggcG9pbnQuIFRodXMgaWYgdGhlcmUgYXJlXHJcblx0XHQjIHRocmVlIHNpbXVsdGFuZW91cyB0b3VjaGVzLCB0aGUgZmlyc3QgdG91Y2hzdGFydCBldmVudCB3aWxsIGhhdmVcclxuXHRcdCMgdGFyZ2V0VG91Y2hlcyBsZW5ndGggb2Ygb25lLCB0aGUgc2Vjb25kIGV2ZW50IHdpbGwgaGF2ZSBhIGxlbmd0aFxyXG5cdFx0IyBvZiB0d28sIGFuZCBzbyBvbi5cclxuXHRcdGV2LnByZXZlbnREZWZhdWx0KClcclxuXHRcdCMgQ2FjaGUgdGhlIHRvdWNoIHBvaW50cyBmb3IgbGF0ZXIgcHJvY2Vzc2luZyBvZiAyLXRvdWNoIHBpbmNoL3pvb21cclxuXHRcdGlmIHRvdWNoZXMubGVuZ3RoID09IDJcclxuXHRcdFx0Zm9yIHQgaW4gdG91Y2hlc1xyXG5cdFx0XHRcdHRwQ2FjaGUucHVzaCB0XHJcblx0XHRpZiBsb2dFdmVudHMgdGhlbiBsb2cgXCJ0b3VjaFN0YXJ0XCIsIGV2LCB0cnVlXHJcblx0XHR1cGRhdGVfYmFja2dyb3VuZCBldlxyXG5cdGNhdGNoIGVcclxuXHRcdGxvZyBcImVycm9yIGluIFN0YXJ0ZWRcIixlLGV2XHJcblxyXG50b3VjaE1vdmVkID0gKGV2KSAtPlxyXG5cdHRyeVxyXG5cdFx0Y29uc29sZS5sb2cgZXZcclxuXHRcdCMgTm90ZTogaWYgdGhlIHVzZXIgbWFrZXMgbW9yZSB0aGFuIG9uZSBcInNpbXVsdGFuZW91c1wiIHRvdWNoZXMsIG1vc3QgYnJvd3NlcnNcclxuXHRcdCMgZmlyZSBhdCBsZWFzdCBvbmUgdG91Y2htb3ZlIGV2ZW50IGFuZCBzb21lIHdpbGwgZmlyZSBzZXZlcmFsIHRvdWNobW92ZXMuXHJcblx0XHQjIENvbnNlcXVlbnRseSwgYW4gYXBwbGljYXRpb24gbWlnaHQgd2FudCB0byBcImlnbm9yZVwiIHNvbWUgdG91Y2htb3Zlcy5cclxuXHRcdCNcclxuXHRcdCMgVGhpcyBmdW5jdGlvbiBzZXRzIHRoZSB0YXJnZXQgZWxlbWVudCdzIG91dGxpbmUgdG8gXCJkYXNoZWRcIiB0byB2aXN1YWx5XHJcblx0XHQjIGluZGljYXRlIHRoZSB0YXJnZXQgcmVjZWl2ZWQgYSBtb3ZlIGV2ZW50LlxyXG5cdFx0I1xyXG5cdFx0ZXYucHJldmVudERlZmF1bHQoKVxyXG5cdFx0aWYgbG9nRXZlbnRzIHRoZW4gbG9nIFwidG91Y2hNb3ZlXCIsIGV2LCBmYWxzZVxyXG5cclxuXHRcdCMgVG8gYXZvaWQgdG9vIG11Y2ggY29sb3IgZmxhc2hpbmcgbWFueSB0b3VjaG1vdmUgZXZlbnRzIGFyZSBzdGFydGVkLFxyXG5cdFx0IyBkb24ndCB1cGRhdGUgdGhlIGJhY2tncm91bmQgaWYgdHdvIHRvdWNoIHBvaW50cyBhcmUgYWN0aXZlXHJcblx0XHRpZiBub3QgdG91Y2hlcy5sZW5ndGggPT0gMiAjIGFuZCBldi50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PSAyKVxyXG5cdFx0XHR1cGRhdGVfYmFja2dyb3VuZCBldlxyXG5cclxuXHRcdCMgU2V0IHRoZSB0YXJnZXQgZWxlbWVudCdzIG91dGxpbmUgdG8gZGFzaGVkIHRvIGdpdmUgYSBjbGVhciB2aXN1YWxcclxuXHRcdCMgaW5kaWNhdGlvbiB0aGUgZWxlbWVudCByZWNlaXZlZCBhIG1vdmUgZXZlbnQuXHJcblx0XHRldi50YXJnZXQuc3R5bGUub3V0bGluZSA9IFwiZGFzaGVkXCJcclxuXHJcblx0XHQjIENoZWNrIHRoaXMgZXZlbnQgZm9yIDItdG91Y2ggTW92ZS9QaW5jaC9ab29tIGdlc3R1cmVcclxuXHRcdGhhbmRsZV9waW5jaF96b29tIGV2XHJcblx0Y2F0Y2ggXHJcblx0XHRsb2cgXCJlcnJvciBpbiBNb3ZlZFwiLGV2XHJcblxyXG50b3VjaEVuZGVkID0gKGV2KSAtPlxyXG5cdHRyeVx0XHJcblx0XHRjb25zb2xlLmxvZyBldlxyXG5cdFx0ZXYucHJldmVudERlZmF1bHQoKVxyXG5cdFx0aWYgbG9nRXZlbnRzIHRoZW4gbG9nIGV2LnR5cGUsIGV2LCBmYWxzZVxyXG5cdFx0aWYgdG91Y2hlcy5sZW5ndGggPT0gMFxyXG5cdFx0XHQjIFJlc3RvcmUgYmFja2dyb3VuZCBhbmQgb3V0bGluZSB0byBvcmlnaW5hbCB2YWx1ZXNcclxuXHRcdFx0ZXYudGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSBcIndoaXRlXCJcclxuXHRcdFx0ZXYudGFyZ2V0LnN0eWxlLm91dGxpbmUgPSBcIjFweCBzb2xpZCBibGFja1wiXHJcblx0Y2F0Y2ggZVxyXG5cdFx0bG9nIFwiZXJyb3IgaW4gRW5kZWRcIixlLGV2XHJcblxyXG4jIHNldF9oYW5kbGVycyA9IChuYW1lKSAtPlxyXG4jIFx0IyBJbnN0YWxsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudFxyXG4jIFx0ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBuYW1lXHJcbiMgXHRlbC5vbnRvdWNoc3RhcnQgPSBzdGFydF9oYW5kbGVyXHJcbiMgXHRlbC5vbnRvdWNobW92ZSA9IG1vdmVfaGFuZGxlclxyXG4jIFx0IyBVc2Ugc2FtZSBoYW5kbGVyIGZvciB0b3VjaGNhbmNlbCBhbmQgdG91Y2hlbmRcclxuIyBcdGVsLm9udG91Y2hjYW5jZWwgPSBlbmRfaGFuZGxlclxyXG4jIFx0ZWwub250b3VjaGVuZCA9IGVuZF9oYW5kbGVyXHJcblxyXG4jIGluaXQgPSAtPlxyXG4jIFx0c2V0X2hhbmRsZXJzIFwidGFyZ2V0MVwiXHJcbiMgXHRzZXRfaGFuZGxlcnMgXCJ0YXJnZXQyXCJcclxuIyBcdHNldF9oYW5kbGVycyBcInRhcmdldDNcIlxyXG4jIFx0c2V0X2hhbmRsZXJzIFwidGFyZ2V0NFwiXHJcbiJdfQ==
//# sourceURL=c:\Lab\2020\015-ZoomPan\coffee\sketch2.coffee