// Generated by CoffeeScript 2.4.1
var COLOR, MAYBE, N, NO, SIZE, SUPPORT, UNKNOWN, YES, calc3x3, calcCell, calcCol, calcRow, calcSingle, calcTabu, click, digits, draw, drawBackground, drawDigit, drawDividers, drawLittera, drawTabu, drawUndo, expert, i, mousePressed, postnord, range, setup, single, stack, tabu, undo;

range = _.range;

N = 9;

SIZE = 30;

COLOR = '#ccc #f00'.split(' ');

MAYBE = 0;

NO = 1; // RED

YES = 1; // GREEN

UNKNOWN = -1;

//SUPPORT = 0 # no support
SUPPORT = 1; // show green digit

digits = []; // 0..8 or UNKNOWN length=81

tabu = []; // [0,0,0,0,0,0,0,0,0] 0..1 length=81

single = (function() {
  var l, len, ref, results;
  ref = range(81);
  // 0..8 or UNKNOWN length=81
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push(UNKNOWN);
  }
  return results;
})();

stack = []; // contains 0..80

calcCell = function() {
  var count, index, j, k, l, len, ref, results;
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, len2, m, n, ref1, ref2, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        if (digits[i + N * j] === UNKNOWN) {
          count = 0;
          index = -1;
          ref2 = range(N);
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            k = ref2[n];
            if (tabu[i + N * j][k] === MAYBE) {
              count++;
              index = k;
            }
          }
          if (count === 1) {
            if (tabu[i + N * j][index] === MAYBE) {
              results1.push(single[i + N * j] = index);
            } else {
              results1.push(void 0);
            }
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

calcRow = function() {
  var count, index, j, k, l, len, ref, results;
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    j = ref[l];
    results.push((function() {
      var len1, len2, m, n, ref1, ref2, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        k = ref1[m];
        count = 0;
        index = -1;
        ref2 = range(N);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          i = ref2[n];
          if (digits[i + N * j] === UNKNOWN && tabu[i + N * j][k] === MAYBE) {
            count++;
            index = i;
          }
        }
        if (count === 1) {
          if (tabu[index + N * j][k] === MAYBE) {
            results1.push(single[index + N * j] = k);
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

calcCol = function() {
  var count, index, j, k, l, len, ref, results;
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, len2, m, n, ref1, ref2, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        k = ref1[m];
        count = 0;
        index = -1;
        ref2 = range(N);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          j = ref2[n];
          if (digits[i + N * j] === UNKNOWN && tabu[i + N * j][k] === MAYBE) {
            count++;
            index = j;
          }
        }
        if (count === 1) {
          if (tabu[i + N * index][k] === MAYBE) {
            results1.push(single[i + N * index] = k);
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

calc3x3 = function() {
  var count, i0, index, ioff, ix, j, j0, joff, k, l, len, ref, results;
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        if (digits[i + N * j] === UNKNOWN) {
          ioff = i - i % 3;
          joff = j - j % 3;
          results1.push((function() {
            var len2, len3, len4, n, o, p, ref2, ref3, ref4, results2;
            ref2 = range(N);
            results2 = [];
            for (n = 0, len2 = ref2.length; n < len2; n++) {
              k = ref2[n];
              count = 0;
              index = -1;
              ref3 = range(3);
              for (o = 0, len3 = ref3.length; o < len3; o++) {
                i0 = ref3[o];
                ref4 = range(3);
                for (p = 0, len4 = ref4.length; p < len4; p++) {
                  j0 = ref4[p];
                  ix = (ioff + i0) + N * (joff + j0);
                  if (digits[ix] === UNKNOWN) {
                    if (tabu[ix][k] === MAYBE) {
                      count++;
                      index = ix;
                    }
                  }
                }
              }
              if (count === 1) {
                if (tabu[index][k] === MAYBE) {
                  results2.push(single[index] = k);
                } else {
                  results2.push(void 0);
                }
              } else {
                results2.push(void 0);
              }
            }
            return results2;
          })());
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

calcTabu = function() {
  var digit, i0, index, ioff, j, j0, joff, l, len, ref, results;
  tabu = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push([0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    return results;
  })();
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, len2, len3, len4, m, n, o, p, ref1, ref2, ref3, ref4, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        digit = digits[i + N * j];
        if (digit === UNKNOWN) {
          continue;
        }
        ref2 = range(N);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          index = ref2[n];
          tabu[i + N * j][index] = NO; // cell
          tabu[i + N * index][digit] = NO; // col
          tabu[index + N * j][digit] = NO; // row
        }
        ioff = i - i % 3;
        joff = j - j % 3;
        ref3 = range(3);
        for (o = 0, len3 = ref3.length; o < len3; o++) {
          i0 = ref3[o];
          ref4 = range(3);
          for (p = 0, len4 = ref4.length; p < len4; p++) {
            j0 = ref4[p];
            tabu[(ioff + i0) + N * (joff + j0)][digit] = NO;
          }
        }
        results1.push(tabu[i + N * j][digit] = YES);
      }
      return results1;
    })());
  }
  return results;
};

calcSingle = function() {
  if (SUPPORT === 0) {
    return;
  }
  single = (function() {
    var l, len, ref, results;
    ref = range(81);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push(UNKNOWN);
    }
    return results;
  })();
  calcCell();
  calcRow();
  calcCol();
  return calc3x3();
};

click = function(index, digit) {
  stack.push(index); // 0..80
  digits[index] = digit; // 0..8
  calcTabu();
  return calcSingle();
};

// dump = ->
// 	calcTabu()
// 	calcSingle()
// 	console.log single
// 	for i in range N*N
// 		console.log i,digits[i],tabu[i]
// 	for i in range N
// 		console.log i,single.slice N*i,N*i+N
undo = function() {
  if (stack.length === 0) {
    return;
  }
  digits[stack.pop()] = UNKNOWN;
  calcTabu();
  return calcSingle();
};

setup = function() {
  var digit;
  createCanvas(SIZE * 28 + 2 + 2, SIZE * 28 + 2 + 2);
  textAlign(CENTER, CENTER);
  strokeWeight(0);
  digits = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      digit = ref[l];
      results.push(UNKNOWN);
    }
    return results;
  })();
  tabu = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push([0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    return results;
  })();
  //postnord()
  return expert();
};

drawBackground = function(i, j, color) {
  fill(color);
  return rect(3 * SIZE * i + 1, 3 * SIZE * j + 1, 3 * SIZE - 2, 3 * SIZE - 2);
};

drawLittera = function() {
  var l, len, letter, ref, results;
  fill(0);
  textSize(32);
  ref = 'ABCDEFGHI';
  results = [];
  for (i = l = 0, len = ref.length; l < len; i = ++l) {
    letter = ref[i];
    text(letter, 3 * SIZE * (i + 0.5), SIZE * 27.7);
    results.push(text(N - i, SIZE * 27.6, 3 * SIZE * (i + 0.5)));
  }
  return results;
};

drawTabu = function(i, j) {
  var k, l, len, ref, results, t, x, y;
  drawBackground(i, j, single[i + N * j] === UNKNOWN ? '#fff' : '#ff0');
  textSize(20);
  ref = range(9);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    k = ref[l];
    x = 3 * i + k % 3;
    y = 3 * j + int(k / 3);
    t = tabu[i + N * j][k];
    fill(single[i + N * j] === k ? '#0f0' : COLOR[t]);
    results.push(text(k + 1, SIZE * (x + 0.5), SIZE * (y + 0.5) + 2));
  }
  return results;
};

drawDigit = function(i, j) {
  var digit;
  drawBackground(i, j, '#fff');
  textSize(50);
  digit = digits[i + N * j] + 1;
  fill(0);
  return text(digit, SIZE * (3 * i + 1.5), SIZE * (3 * j + 1.5) + 2);
};

drawDividers = function() {
  var l, len, ref, results;
  fill(128);
  ref = range(4);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    rect(SIZE * N * i, 0, 5, height - SIZE);
    results.push(rect(0, SIZE * N * i, width - SIZE, 5));
  }
  return results;
};

drawUndo = function() {
  fill(0);
  textSize(32);
  return text(stack.length, SIZE * 27.5, SIZE * 27.6);
};

draw = function() {
  var j, l, len, len1, m, ref, ref1;
  background(128);
  drawLittera();
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      if (digits[i + N * j] === UNKNOWN) {
        drawTabu(i, j);
      } else {
        drawDigit(i, j);
      }
    }
  }
  drawDividers();
  return drawUndo();
};

mousePressed = function() {
  var index, j, k, kx, ky;
  i = int(mouseX / (SIZE * 3));
  j = int(mouseY / (SIZE * 3));
  index = i + N * j;
  kx = (int(mouseX / SIZE)) % 3;
  ky = (int(mouseY / SIZE)) % 3;
  k = kx + 3 * ky;
  if (index < N * N) {
    return click(index, k);
  } else {
    return undo();
  }
};

postnord = function() {
  click(0, 8 - 1);
  click(4, 1 - 1);
  click(6, 3 - 1);
  click(10, 1 - 1);
  click(12, 5 - 1);
  click(15, 9 - 1);
  click(16, 8 - 1);
  click(18, 3 - 1);
  click(20, 9 - 1);
  click(23, 4 - 1);
  click(25, 1 - 1);
  click(27, 2 - 1);
  click(32, 6 - 1);
  click(34, 7 - 1);
  click(37, 7 - 1);
  click(41, 3 - 1);
  click(42, 1 - 1);
  click(44, 9 - 1);
  click(45, 1 - 1);
  click(49, 8 - 1);
  click(54, 7 - 1);
  click(56, 6 - 1);
  click(62, 8 - 1);
  click(63, 4 - 1);
  click(69, 5 - 1);
  click(75, 3 - 1);
  click(76, 2 - 1);
  click(78, 7 - 1);
  click(79, 4 - 1);
  return click(80, 6 - 1);
};

expert = function() {
  click(2, 7 - 1);
  click(5, 4 - 1);
  click(7, 2 - 1);
  click(8, 6 - 1);
  click(10, 9 - 1);
  click(15, 8 - 1);
  click(17, 1 - 1);
  click(19, 6 - 1);
  click(25, 7 - 1);
  click(31, 9 - 1);
  click(39, 5 - 1);
  click(45, 5 - 1);
  click(46, 8 - 1);
  click(48, 1 - 1);
  click(50, 6 - 1);
  click(53, 4 - 1);
  click(54, 4 - 1);
  click(57, 9 - 1);
  click(59, 1 - 1);
  click(62, 8 - 1);
  click(65, 1 - 1);
  click(67, 7 - 1);
  return click(71, 2 - 1);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\025-SudokuHelper\coffee\sketch.coffee