// Generated by CoffeeScript 2.4.1
var COLOR, N, SIZE, SUPPORT, calcSingle, calcTabu, click, digits, draw, expert, i, mousePressed, postnord, range, setup, single, stack, tabu, undo;

range = _.range;

N = 9;

SIZE = 20;

COLOR = '#ccc #f00'.split(' ');

SUPPORT = 0; // no support

//SUPPORT = 1 # show green digit
digits = []; // 0..8 eller -1 length=81

tabu = []; // [0,0,0,0,0,0,0,0,0] 0..1          length=81

single = (function() {
  var l, len, ref, results;
  ref = range(81);
  // 0..8 eller -1 length=81
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push(-1);
  }
  return results;
})();

stack = []; // contains 0..80

calcSingle = function() {
  var count, i0, index, ioff, ix, j, j0, joff, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s, u, v;
  if (SUPPORT === 0) {
    return;
  }
  single = (function() {
    var l, len, ref, results;
    ref = range(81);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push(-1);
    }
    return results;
  })();
  ref = range(N);
  // cell
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      if (digits[i + N * j] === -1) {
        count = 0;
        index = -1;
        ref2 = range(N);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          k = ref2[n];
          if (tabu[i + N * j][k] === 0) { // gray
            count++;
            index = k;
          }
        }
        if (count === 1) {
          if (tabu[i + N * j][index] === 0) {
            single[i + N * j] = index;
          }
        }
      }
    }
  }
  ref3 = range(N);
  // row
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    j = ref3[o];
    ref4 = range(N);
    for (p = 0, len4 = ref4.length; p < len4; p++) {
      k = ref4[p];
      count = 0;
      index = -1;
      ref5 = range(N);
      for (q = 0, len5 = ref5.length; q < len5; q++) {
        i = ref5[q];
        if (digits[i + N * j] === -1 && tabu[i + N * j][k] === 0) { // gray
          count++;
          index = i;
        }
      }
      if (count === 1) {
        if (tabu[index + N * j][k] === 0) {
          single[index + N * j] = k;
        }
      }
    }
  }
  ref6 = range(N);
  // col
  for (r = 0, len6 = ref6.length; r < len6; r++) {
    i = ref6[r];
    ref7 = range(N);
    for (s = 0, len7 = ref7.length; s < len7; s++) {
      k = ref7[s];
      count = 0;
      index = -1;
      ref8 = range(N);
      for (u = 0, len8 = ref8.length; u < len8; u++) {
        j = ref8[u];
        if (digits[i + N * j] === -1 && tabu[i + N * j][k] === 0) { // gray
          count++;
          index = j;
        }
      }
      if (count === 1) {
        if (tabu[i + N * index][k] === 0) {
          single[i + N * index] = k;
        }
      }
    }
  }
  ref9 = range(N);
  // 3 by 3
  results = [];
  for (v = 0, len9 = ref9.length; v < len9; v++) {
    i = ref9[v];
    results.push((function() {
      var len10, ref10, results1, w;
      ref10 = range(N);
      results1 = [];
      for (w = 0, len10 = ref10.length; w < len10; w++) {
        j = ref10[w];
        if (digits[i + N * j] === -1) {
          ioff = i - i % 3;
          joff = j - j % 3;
          results1.push((function() {
            var i1, j1, len11, len12, len13, ref11, ref12, ref13, results2, z;
            ref11 = range(N);
            results2 = [];
            for (z = 0, len11 = ref11.length; z < len11; z++) {
              k = ref11[z];
              count = 0;
              index = -1;
              ref12 = range(3);
              for (i1 = 0, len12 = ref12.length; i1 < len12; i1++) {
                i0 = ref12[i1];
                ref13 = range(3);
                for (j1 = 0, len13 = ref13.length; j1 < len13; j1++) {
                  j0 = ref13[j1];
                  ix = (ioff + i0) + N * (joff + j0);
                  if (digits[ix] === -1) {
                    if (tabu[ix][k] === 0) { // gray
                      count++;
                      index = ix;
                    }
                  }
                }
              }
              if (count === 1) {
                if (tabu[index][k] === 0) {
                  results2.push(single[index] = k);
                } else {
                  results2.push(void 0);
                }
              } else {
                results2.push(void 0);
              }
            }
            return results2;
          })());
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

calcTabu = function() {
  var i0, index, ioff, j, j0, joff, k, l, len, ref, results;
  tabu = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push([0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    return results;
  })();
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, len2, len3, len4, m, n, o, p, ref1, ref2, ref3, ref4, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        k = digits[i + N * j];
        if (k === -1) {
          continue;
        }
        ref2 = range(N);
        for (n = 0, len2 = ref2.length; n < len2; n++) {
          index = ref2[n];
          tabu[i + N * j][index] = 1; // same cell
          tabu[i + N * index][k] = 1; // col
          tabu[index + N * j][k] = 1; // row
        }
        ioff = i - i % 3;
        joff = j - j % 3;
        ref3 = range(3);
        for (o = 0, len3 = ref3.length; o < len3; o++) {
          i0 = ref3[o];
          ref4 = range(3);
          for (p = 0, len4 = ref4.length; p < len4; p++) {
            j0 = ref4[p];
            tabu[(ioff + i0) + N * (joff + j0)][k] = 1;
          }
        }
        results1.push(tabu[i + N * j][k] = 2);
      }
      return results1;
    })());
  }
  return results;
};

click = function(index, k) { // 0..8 0..8 0..8
  stack.push(index);
  digits[index] = k;
  calcTabu();
  return calcSingle();
};

// dump = ->
// 	calcTabu()
// 	calcSingle()
// 	console.log single
// 	for i in range N*N
// 		console.log i,digits[i],tabu[i]
// 	for i in range N
// 		console.log i,single.slice N*i,N*i+N
undo = function() {
  if (stack.length === 0) {
    return;
  }
  digits[stack.pop()] = -1;
  calcTabu();
  return calcSingle();
};

setup = function() {
  var digit;
  createCanvas(SIZE * 28 + 2 + 2, SIZE * 28 + 2 + 2);
  textAlign(CENTER, CENTER);
  strokeWeight(0);
  digits = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      digit = ref[l];
      results.push(-1);
    }
    return results;
  })();
  return tabu = (function() {
    var l, len, ref, results;
    ref = range(N * N);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push([0, 0, 0, 0, 0, 0, 0, 0, 0]);
    }
    return results;
  })();
};

//postnord()
//expert()
draw = function() {
  var j, k, l, len, len1, len2, len3, len4, len5, len6, letter, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, t, x, y;
  background(128);
  fill(255);
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      x = SIZE * (3 * i);
      y = SIZE * (3 * j);
      rect(x + 1, y + 1, 3 * SIZE - 2, 3 * SIZE - 2);
    }
  }
  fill(0);
  textSize(20);
  ref2 = 'ABCDEFGHI';
  for (i = n = 0, len2 = ref2.length; n < len2; i = ++n) {
    letter = ref2[i];
    text(letter, 3 * SIZE * (i + 0.5), SIZE * 27.7);
    text(N - i, SIZE * 27.6, 3 * SIZE * (i + 0.5));
  }
  ref3 = range(N);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    ref4 = range(N);
    for (p = 0, len4 = ref4.length; p < len4; p++) {
      j = ref4[p];
      if (digits[i + N * j] === -1) {
        textSize(12);
        if (single[i + N * j] === -1) {
          fill('#fff');
        } else {
          fill('#ff0');
        }
        x = SIZE * (3 * i);
        y = SIZE * (3 * j);
        rect(x + 1, y + 1, 3 * SIZE - 2, 3 * SIZE - 2);
        ref5 = range(9);
        for (q = 0, len5 = ref5.length; q < len5; q++) {
          k = ref5[q];
          x = 3 * i + k % 3;
          y = 3 * j + int(k / 3);
          t = tabu[i + N * j][k];
          if (single[i + N * j] === k) {
            fill('#0f0');
          } else {
            fill(COLOR[t]);
          }
          text(k + 1, SIZE * (x + 0.5), SIZE * (y + 0.5) + 2);
        }
      } else {
        textSize(30);
        k = digits[i + N * j];
        x = 3 * i;
        y = 3 * j;
        fill(0);
        text(k + 1, SIZE * (x + 1.5), SIZE * (y + 1.5) + 2);
      }
    }
  }
  fill(128);
  ref6 = range(4);
  results = [];
  for (r = 0, len6 = ref6.length; r < len6; r++) {
    i = ref6[r];
    rect(SIZE * N * i, 0, 5, height - SIZE);
    results.push(rect(0, SIZE * N * i, width - SIZE, 5));
  }
  return results;
};

mousePressed = function() {
  var index, j, k, kx, ky;
  i = int(mouseX / (SIZE * 3));
  j = int(mouseY / (SIZE * 3));
  index = i + N * j;
  kx = (int(mouseX / SIZE)) % 3;
  ky = (int(mouseY / SIZE)) % 3;
  k = kx + 3 * ky;
  if (index < N * N) {
    return click(index, k);
  } else {
    return undo();
  }
};

postnord = function() {
  // 8.. .1. 3..
  // .1. 5.. 98.
  // 3.9 ..4 .1.

  // 2.. ..6 .7.
  // .7. ..3 1.9
  // 1.. .8. ...

  // 7.6 ... ..8
  // 4.. ... 5..
  // ... 32. 746
  click(0, 8 - 1);
  click(4, 1 - 1);
  click(6, 3 - 1);
  click(10, 1 - 1);
  click(12, 5 - 1);
  click(15, 9 - 1);
  click(16, 8 - 1);
  click(18, 3 - 1);
  click(20, 9 - 1);
  click(23, 4 - 1);
  click(25, 1 - 1);
  click(27, 2 - 1);
  click(32, 6 - 1);
  click(34, 7 - 1);
  click(37, 7 - 1);
  click(41, 3 - 1);
  click(42, 1 - 1);
  click(44, 9 - 1);
  click(45, 1 - 1);
  click(49, 8 - 1);
  click(54, 7 - 1);
  click(56, 6 - 1);
  click(62, 8 - 1);
  click(63, 4 - 1);
  click(69, 5 - 1);
  click(75, 3 - 1);
  click(76, 2 - 1);
  click(78, 7 - 1);
  click(79, 4 - 1);
  return click(80, 6 - 1);
};

expert = function() {
  click(2, 7 - 1);
  click(5, 4 - 1);
  click(7, 2 - 1);
  click(8, 6 - 1);
  click(10, 9 - 1);
  click(15, 8 - 1);
  click(17, 1 - 1);
  click(19, 6 - 1);
  click(25, 7 - 1);
  click(31, 9 - 1);
  click(39, 5 - 1);
  click(45, 5 - 1);
  click(46, 8 - 1);
  click(48, 1 - 1);
  click(50, 6 - 1);
  click(53, 4 - 1);
  click(54, 4 - 1);
  click(57, 9 - 1);
  click(59, 1 - 1);
  click(62, 8 - 1);
  click(65, 1 - 1);
  click(67, 7 - 1);
  return click(71, 2 - 1);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2020\025-SudokuHelper\coffee\sketch.coffee