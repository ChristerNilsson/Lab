'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var calcDelta, calcGrid, cirkel, decimals, delta, drawGrid, drawLabel, drawLineX, drawLineY, drawObjects, init_xmin_xmax_ymin_ymax, linje, minmax, mouseDragged, mousePressed, mouseWheel, mydraw, mymouse, normalisera, pixelR, pixelX, pixelY, punkt, setup, triangel, x0, xgap, xmax, xmax0, xmin, xmin0, y0, ygap, ymax, ymax0, ymin, ymin0;

xmin = 0;

xmax = 0;

ymin = 0;

ymax = 0;

xmin0 = 0;

xmax0 = 0;

ymin0 = 0;

ymax0 = 0;

mymouse = 0;

decimals = 0; // för axlarnas lablar

x0 = 0; // startpunkt för lablar och rutnät

y0 = 0;

delta = 0;

xgap = 5;

ygap = 5;

// översätt till pixlar
pixelX = function pixelX(x) {
  return map(x, xmin, xmax, 0, width);
};

pixelY = function pixelY(y) {
  return map(y, ymax, ymin, 0, height);
};

pixelR = function pixelR(r) {
  return map(r, 0, xmax - xmin, 0, width);
};

// utvidga xmin,ymin och xmax,ymax
minmax = function minmax(x, y) {
  xmin = min(xmin, x);
  xmax = max(xmax, x);
  ymin = min(ymin, y);
  return ymax = max(ymax, y);
};

// utvidga xmin,xmax, ymin,ymax
init_xmin_xmax_ymin_ymax = function init_xmin_xmax_ymin_ymax() {
  var cx, cy, d, dx, dy, key, r, t, value;
  for (key in data) {
    value = data[key];
    t = key[0];
    if (t === 'p') {
      minmax(value.x, value.y);
    } else if (t === 'c') {
      r = abs(value.radius);
      minmax(value.x - r, value.y - r);
      minmax(value.x + r, value.y + r);
    } else if (t === 'l') {
      minmax(value.x1, value.y1);
      minmax(value.x2, value.y2);
    } else if (t === 't') {
      minmax(value.x1, value.y1);
      minmax(value.x2, value.y2);
      minmax(value.x3, value.y3);
    }
  }
  // utvidga xmin,xmax, ymin,ymax med 10%
  // och se se till att rutnätet blir kvadratiskt
  dx = xmax - xmin;
  dy = ymax - ymin;
  d = 1.1 * max(dx, dy);
  if (d === 0) {
    d = 1;
  }
  cx = 0.5 * (xmin + xmax);
  cy = 0.5 * (ymin + ymax);
  d = d / 2;
  xmin = cx - d;
  xmax = cx + d;
  ymin = cy - d;
  return ymax = cy + d;
};

setup = function setup() {
  createCanvas(800, 800);
  textSize(20);
  mymouse = new p5.Vector(0, 0);
  init_xmin_xmax_ymin_ymax();
  return mydraw();
};

// rita cirkel och label
cirkel = function cirkel(label, o) {
  var r, x, y;
  x = pixelX(o.x);
  y = pixelY(o.y);
  r = pixelR(o.radius);
  strokeWeight(1);
  stroke(255, 0, 0);
  noFill();
  ellipse(x, y, 2 * r, 2 * r);
  noStroke();
  fill(255, 0, 0);
  textAlign(LEFT, BOTTOM);
  return text(label, x, y);
};

// rita triangel och label
triangel = function triangel(label, o) {
  var x1, x2, x3, y1, y2, y3;
  x1 = pixelX(o.x1);
  y1 = pixelY(o.y1);
  x2 = pixelX(o.x2);
  y2 = pixelY(o.y2);
  x3 = pixelX(o.x3);
  y3 = pixelY(o.y3);
  strokeWeight(2);
  stroke(255);
  noFill();
  triangle(x1, y1, x2, y2, x3, y3);
  noStroke();
  fill(255);
  textAlign(RIGHT, TOP);
  return text(label, (x1 + x2 + x3) / 3, (y1 + y2 + y3) / 3);
};

// rita punkt och label
punkt = function punkt(label, o) {
  var x, y;
  x = pixelX(o.x);
  y = pixelY(o.y);
  strokeWeight(4);
  stroke(0, 255, 0);
  noFill();
  point(x, y);
  noStroke();
  fill(0, 255, 0);
  textAlign(RIGHT, TOP);
  return text(label, x, y);
};

// rita linje och label
linje = function linje(label, o) {
  // YELLOW
  var dx, dy, x1, x2, y1, y2;
  x1 = pixelX(o.x1);
  y1 = pixelY(o.y1);
  x2 = pixelX(o.x2);
  y2 = pixelY(o.y2);
  dx = 10 * (x2 - x1);
  dy = 10 * (y2 - y1);
  strokeWeight(2);
  stroke(255, 255, 0);
  line(x1 - dx, y1 - dy, x1 + dx, y1 + dy);
  noStroke();
  fill(255, 255, 0);
  textAlign(RIGHT, BOTTOM);
  return text(label, (x1 + x2) / 2, (y1 + y2) / 2);
};

drawLineX = function drawLineX(x1, y1, x2, y2, thick) {
  if (pixelX(x1) < xgap) {
    return;
  }
  if (pixelX(x1) > width - xgap) {
    return;
  }
  strokeWeight(thick ? 3 : 1);
  stroke(0); // BLACK
  return line(pixelX(x1), pixelY(y1) - ygap, pixelX(x2), pixelY(y2) + ygap);
};

drawLineY = function drawLineY(x1, y1, x2, y2, thick) {
  if (pixelY(y1) < ygap) {
    return;
  }
  if (pixelY(y1) > height - ygap) {
    return;
  }
  strokeWeight(thick ? 3 : 1);
  stroke(0); // BLACK
  return line(pixelX(x1) + xgap, pixelY(y1), pixelX(x2) - xgap, pixelY(y2));
};

drawLabel = function drawLabel(label, x, y, alignHor, alignVer) {
  noStroke();
  fill(0); // BLACK
  textAlign(alignHor, alignVer);
  return text(label, x, y);
};

normalisera = function normalisera(x) {
  var q;
  q = floor(Math.log10(x));
  return [x / Math.pow(10, q), q];
};

// Visa cirka fem-tio gridlines
calcDelta = function calcDelta(c, d) {
  var adj, dekad, e, p, q;

  // 1 <= e < 10, q = ... -2,-1,0,1,2,3 ...
  var _normalisera = normalisera(d);

  var _normalisera2 = _slicedToArray(_normalisera, 2);

  e = _normalisera2[0];
  q = _normalisera2[1];
  dekad = Math.pow(10, q);
  p = 0.2;
  if (e >= 1.6) {
    p = 0.5;
  }
  if (e >= 4) {
    p = 1.0;
  }
  if (e >= 4) {
    adj = 1;
  } else {
    adj = 0;
  }
  delta = p * dekad;
  decimals = 1 - q - adj;
  if (decimals < 0) {
    decimals = 0;
  }
  return delta * round(c / delta);
};

// Beräkna rutnätets startpunkt och rutstorlek
// decide delta and where to print axis and labels.
calcGrid = function calcGrid() {
  x0 = calcDelta((xmin + xmax) / 2, xmax - xmin);
  while (x0 > xmin) {
    x0 -= delta;
  }
  x0 += delta;
  y0 = calcDelta((ymin + ymax) / 2, ymax - ymin);
  while (y0 > ymin) {
    y0 -= delta;
  }
  return y0 += delta;
};

// rita rutnät och axlar
drawGrid = function drawGrid() {
  var i, j, label, len, len1, ref, ref1, results, thick, x, y;
  xgap = 20 + 12 * decimals;
  ygap = 25;
  ref = _.range(x0, xmax, delta);
  // riktiga värden
  for (i = 0, len = ref.length; i < len; i++) {
    x = ref[i];
    thick = -delta / 2 < x && x < delta / 2;
    drawLineX(x, ymin, x, ymax, thick);
    label = x.toFixed(decimals);
    drawLabel(label, pixelX(x), height, CENTER, BOTTOM);
    drawLabel(label, pixelX(x), 0, CENTER, TOP);
  }
  ref1 = _.range(y0, ymax, delta);
  results = [];
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    y = ref1[j];
    thick = -delta / 2 < y && y < delta / 2;
    drawLineY(xmin, y, xmax, y, thick);
    label = y.toFixed(decimals);
    drawLabel(label, 3, pixelY(y), LEFT, CENTER);
    results.push(drawLabel(label, width - 3, pixelY(y), RIGHT, CENTER));
  }
  return results;
};

drawObjects = function drawObjects() {
  var name, o, results;
  for (name in data) {
    o = data[name];
    if (name[0] === 'l') {
      linje(name, o);
    }
    if (name[0] === 't') {
      triangel(name, o);
    }
    if (name[0] === 'c') {
      cirkel(name, o);
    }
  }
  results = [];
  for (name in data) {
    o = data[name];
    if (name[0] === 'p') {
      results.push(punkt(name, o));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

mydraw = function mydraw() {
  background(128);
  calcGrid();
  drawGrid();
  return drawObjects();
};

// zooma in och ut
mouseWheel = function mouseWheel(event) {
  var factor, x, y;
  x = map(winMouseX, 0, width, xmin, xmax);
  y = map(winMouseY, height, 0, ymin, ymax);
  factor = 1 + event.delta * 0.001;
  xmin = x - (x - xmin) * factor;
  xmax = x - (x - xmax) * factor;
  ymin = y - (y - ymin) * factor;
  ymax = y - (y - ymax) * factor;
  return mydraw();
};

// memorera musen
mousePressed = function mousePressed(event) {
  mymouse.set(winMouseX, winMouseY);
  xmin0 = xmin;
  xmax0 = xmax;
  ymin0 = ymin;
  return ymax0 = ymax;
};

// flytta fönstret
mouseDragged = function mouseDragged(event) {
  var dx, dy;
  dx = map(mymouse.x - winMouseX, 0, width, 0, xmax0 - xmin0);
  dy = map(mymouse.y - winMouseY, 0, height, 0, ymax0 - ymin0);
  xmin = xmin0 + dx;
  xmax = xmax0 + dx;
  ymin = ymin0 - dy;
  ymax = ymax0 - dy;
  return mydraw();
};
//# sourceMappingURL=sketch.js.map
