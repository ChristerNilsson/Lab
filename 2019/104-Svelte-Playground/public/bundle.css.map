{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Button.svelte"
  ],
  "sourcesContent": [
    "<script>\t \n\timport store  from './store.js'\n\timport {get} from 'svelte/store'\n\timport { col1,col2,col3 } from '../styles.js'\n\timport Button from './Button.svelte'\n\timport TimeMachine from './TimeMachine.svelte'\n\n\tconsole.log('store',store)\n\tconst USE_TIME_MACHINE = true\n\n\tlet states = []\n\n\tconst touch = () => {\n\t\tstates = states\n\t\tconsole.log('touch',states.length)\n\t}\n\n\t// touch()\n\n\t// let a = null\n\t// let b = null\n\t// let hist = []\n\n\tconst ADD = 'ADD'\n\tconst MUL = 'MUL' \n\tconst DIV = 'DIV'\n\tconst NEW = 'NEW'\n\tconst UNDO = 'UNDO'\n\t\n\tconst random = (a,b) => a+Math.floor((b-a+1)*Math.random())\n\n\tconst resetState = () => {\n\t\tif (USE_TIME_MACHINE && states.length > 0) {\n\t\t\tlet state = states[states.length-1]\n\t\t\tconsole.log('reset',state.store)\n\t\t\tstore.set(state.store) //.slice()\n\t\t}\n\t}\n\n\tconst saveState = (action) => {\n\t\tif (USE_TIME_MACHINE) {\n\t\t\tconst obj = Object.assign({}, get(store))\n\t\t\tconsole.log('saveState',obj,states)\n\t\t\tlet state = {action:action,store:obj} //.slice()\n\t\t\tstates.push(state)\n\t\t\tstates = states\n\t\t\t// dispatch('fixstate')\n\t\t}\n\t}\n\n\tconst operation = (st,action) => {\n\t\tresetState()\n\t\tconsole.log('operation',st)\n\t\tlet a = st.a\n\t\tlet b = st.b\n\t\tlet hist = st.hist\n\n\t\tif (action == ADD) {\n\t\t\thist.push(a)\n\t\t\thist=hist\n\t\t\ta += 2\n\t\t} else if (action == MUL) {\n\t\t\thist.push(a)\n\t\t\thist=hist\n\t\t\ta *= 2\n\t\t} else if (action == DIV) {\n\t\t\thist.push(a)\n\t\t\thist=hist\n\t\t\ta /= 2\n\t\t} else if (action == NEW) {\n\t\t\ta = random(1,20)\n\t\t\tb = random(1,20)\n\t\t\thist = []\n\t\t} else if (action == UNDO) {\n\t\t\ta = hist.pop()\n\t\t\thist = hist \n\t\t} else {\n\t\t\tconsole.log('Missing action: ' + action)\n\t\t}\n\t\tstore.set({a:a, b:b, hist:hist.slice()})\n\t\tsaveState(action)\n\t\treturn {a:a, b:b, hist:hist}\n\t} \n\n\tconst op = (action) => store.update( st => operation(st,action) )\n\t\t\n\tconst fixState = (event) => {\n\t\tlet st = event.detail.store\n\t\tconsole.log('fixState',st) //.a,event.detail.b,event.detail.hist)\n\t\tstore.set({a:st.a, b:st.b, hist:st.hist})\n\t}\n\n\top(NEW)\n\n</script> \n \n<style>\n\th1 {\n\t\tfont-size: 30px;\n\t\ttext-align: center;\n\t}\n</style>\n\n<h1 class={col2} style='font-size: 60px; color:red;'>{$store.a}</h1>\n<h1 class={col2} style='font-size: 60px; color:green;'>{$store.b}</h1>\n<Button klass={col3} title='+2'   click = {() => op(ADD)}  disabled = {$store.a==$store.b} />\n<Button klass={col3} title='*2'   click = {() => op(MUL)}  disabled = {$store.a==$store.b} />\n<Button klass={col3} title='/2'   click = {() => op(DIV)}  disabled = {$store.a==$store.b} />\n<Button klass={col2} title='New'  click = {() => op(NEW)}  disabled = {$store.a!=$store.b} />\n<Button klass={col2} title='Undo' click = {() => op(UNDO)} disabled = {$store.hist.length==0} /> \n\n{#if USE_TIME_MACHINE}\n\t<TimeMachine on:fixstate={fixState} touch={touch} states={states} />  \n{/if}\n",
    "<script>\r\n\timport { col1,col2,col3 } from '../styles.js'\r\n\texport let click\r\n\texport let disabled\r\n\texport let title\r\n\texport let klass\r\n\r\n\tif (window.innerWidth < 600) klass=col1\r\n\t\t\r\n</script>\r\n\r\n<style>\r\n\tbutton {\r\n\t\tfont-size: 30px;\r\n\t}\r\n</style>\r\n\r\n<button class={klass} on:click={click} disabled={disabled}>{title}</button>"
  ],
  "names": [],
  "mappings": "AAiGC,EAAE,eAAC,CAAC,AACH,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACnB,CAAC;ACxFD,MAAM,cAAC,CAAC,AACP,SAAS,CAAE,IAAI,AAChB,CAAC"
}