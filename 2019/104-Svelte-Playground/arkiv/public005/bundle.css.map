{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\tdocument.title = 'RPN Calculator'\n\nlet stack = []\n\tlet history = []\n\tlet commands = ''\n\n\tconst par0 = {}\n\tconst par1 = {}\n\tconst par2 = {}\n\n\tpar0['drop'] = () => stack.pop()\n\tpar0['pi']   = () => stack.push(Math.PI)\n\tpar0['e']    = () => stack.push(Math.E)\n\tpar0['swap'] = () => stack.push(stack.pop(), stack.pop() )\n\tpar0['clr'] = () => stack = []\n\t\n\tpar1['abs']  = (x) => Math.abs(x)\n\tpar1['x^2']  = (x) => x * x\n\tpar1['10^x'] = (x) => 10 ** x\n\tpar1['log']  = (x) => Math.log10(x)\n\tpar1['exp']  = (x) => Math.exp(x)\n\tpar1['ln']   = (x) => Math.log(x)\n\tpar1['sqrt'] = (x) => Math.sqrt(x)\n\tpar1['chs']  = (x) => -x\n\tpar1['1/x']  = (x) => 1/x\n\tpar1['sin']  = (x) => Math.sin(x / 180 * Math.PI)\n\n\tpar2['+']    = (x,y) => y + x\n\tpar2['*']    = (x,y) => y * x\n\tpar2['-']    = (x,y) => y - x\n\tpar2['/']    = (x,y) => y / x\n\tpar2['y^x']  = (x,y) => y ** x\n\tpar2['pyth'] = (x,y) => Math.sqrt(x * x + y * y)\n\tpar2['s']    = (x,y) => y + x\n\tpar2['p']    = (x,y) => x*y/(x+y)\n\n\tconst calc = (cmd) => {\n\t\tif (cmd in par0) par0[cmd]()\n\t\telse if (cmd in par1) stack.push(par1[cmd](stack.pop()))\n\t\telse if (cmd in par2) stack.push(par2[cmd](stack.pop(), stack.pop()))\n\t\telse if (!isNaN(parseFloat(cmd))) stack.push(parseFloat(cmd))\n\t}\n\n\tfunction showHistory(delta) {\n\t\tif (history.length==0) return\n\t\telse if (delta==-1) history.push(history.shift())\n\t\telse history.unshift(history.pop())\n\t\tcommands = history[0]\n\t}\n\n\tfunction onkeyup (event) {\n\t\tif (event.key == 'Escape') commands = ''\n\t\telse if (event.key=='ArrowUp') showHistory(-1)\n\t\telse if (event.key=='ArrowDown') showHistory(1)\n\t\telse if (event.key == 'Enter') {\n\t\t\tcommands.split(' ').map( (cmd) => { calc(cmd) })\n\t\t\tif (!history.includes(commands)) history.push(commands)\n\t\t\tcommands = ''\n\t\t\tstack=stack\n\t\t}\n\t}\n\n</script> \n\n<style>\n\tinput,div {\n\t\tfont-size: 30px;\n\t\tfont-family: 'Courier New', Courier, monospace\n\t}\n</style>\n\n<div>{document.title}</div>\n{#each [par0,par1,par2] as par}\n\t<div>{Object.keys(par).join(' ')}</div>\n{/each}\n{#each stack as item}\n\t<div>{item}</div>\n{/each}\n<input on:keyup = {onkeyup} type=\"text\" bind:value = {commands} placeholder='Enter commands separated with spaces'>\n"
  ],
  "names": [],
  "mappings": "AAkEC,oBAAK,CAAC,GAAG,eAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS;CAC/C,CAAC"
}