{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal/index.mjs","../src/testReducer.js","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (!store || typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, callback) {\n    const unsub = store.subscribe(callback);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))\n        : ctx.$$scope.ctx;\n}\nfunction get_slot_changes(definition, ctx, changed, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))\n        : ctx.$$scope.changed || {};\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nlet running = false;\nfunction run_tasks() {\n    tasks.forEach(task => {\n        if (!task[0](now())) {\n            tasks.delete(task);\n            task[1]();\n        }\n    });\n    running = tasks.size > 0;\n    if (running)\n        raf(run_tasks);\n}\nfunction clear_loops() {\n    // for testing...\n    tasks.forEach(task => tasks.delete(task));\n    running = false;\n}\nfunction loop(fn) {\n    let task;\n    if (!running) {\n        running = true;\n        raf(run_tasks);\n    }\n    return {\n        promise: new Promise(fulfil => {\n            tasks.add(task = [fn, fulfil]);\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n    const target = {};\n    for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    for (const key in attributes) {\n        if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key in node) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            for (let j = 0; j < node.attributes.length; j += 1) {\n                const attribute = node.attributes[j];\n                if (!attributes[attribute.name])\n                    node.removeAttribute(attribute.name);\n            }\n            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.type = 'text/html';\n    object.tabIndex = -1;\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = current_component;\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nfunction flush() {\n    const seen_callbacks = new Set();\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                callback();\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n}\nfunction update($$) {\n    if ($$.fragment) {\n        $$.update($$.dirty);\n        run_all($$.before_update);\n        $$.fragment.p($$.dirty, $$.ctx);\n        $$.dirty = null;\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = key && { [key]: value };\n        const child_ctx = assign(assign({}, info.ctx), info.resolved);\n        const block = type && (info.current = type)(child_ctx);\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            flush();\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = { [info.value]: promise };\n    }\n}\n\nconst globals = (typeof window !== 'undefined' ? window : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(changed, child_ctx);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction measure(blocks) {\n    const rects = {};\n    let i = blocks.length;\n    while (i--)\n        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();\n    return rects;\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args) {\n    const attributes = Object.assign({}, ...args);\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === undefined)\n            return;\n        if (value === true)\n            str += \" \" + name;\n        const escaped = String(value)\n            .replace(/\"/g, '&#34;')\n            .replace(/'/g, '&#39;');\n        str += \" \" + name + \"=\" + JSON.stringify(escaped);\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    if (component.$$.props.indexOf(name) === -1)\n        return;\n    component.$$.bound[name] = callback;\n    callback(component.$$.ctx[name]);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    if (component.$$.fragment) {\n        run_all(component.$$.on_destroy);\n        component.$$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        component.$$.on_destroy = component.$$.fragment = null;\n        component.$$.ctx = {};\n    }\n}\nfunction make_dirty(component, key) {\n    if (!component.$$.dirty) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty = blank_object();\n    }\n    component.$$.dirty[key] = true;\n}\nfunction init(component, options, instance, create_fragment, not_equal, prop_names) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const props = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props: prop_names,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty: null\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, props, (key, ret, value = ret) => {\n            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {\n                if ($$.bound[key])\n                    $$.bound[key](value);\n                if (ready)\n                    make_dirty(component, key);\n            }\n            return ret;\n        })\n        : props;\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    $$.fragment = create_fragment($$.ctx);\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement !== 'undefined') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, detail));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_element, claim_space, claim_text, clear_loops, component_subscribe, createEventDispatcher, create_animation, create_bidirectional_transition, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_function, is_promise, listen, listen_dev, loop, measure, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_store, xlink_attr };\n","// Generated by CoffeeScript 2.4.1\r\n//var assert, testReducer;\r\n\r\nconst assert = chai.assert.deepEqual;\r\n\r\nconst testReducer = function(reducers, stack) {\r\n\tvar countTabs, rpn, run, runTest, states;\r\n\tvar errors = []\r\n\tstates = [];\r\n\trun = function(script) {\r\n\t\tvar i, len, line, nr, ref, results;\r\n\t\tref = script.split('\\n');\r\n\t\t// console.log(ref)\r\n\t\tresults = [];\r\n\t\terrors = []\r\n\t\tfor (nr = i = 0, len = ref.length; i < len; nr = ++i) {\r\n\t\t\tline = ref[nr];\r\n\t\t\t// console.log(line)\r\n\t\t\tresults.push(runTest(line, nr));\r\n\t\t}\r\n\t\tconsole.log(errors)\r\n\t\treturn errors;\r\n\t};\r\n\trunTest = function(line, nr) {\r\n\t\tvar arr, cmd, i, index, len, state;\r\n\t\tindex = countTabs(line);\r\n\t\tline = line.trim();\r\n\t\tif (index === 0) {\r\n\t\t\t// console.log(line)\r\n\t\t\treturn states = [JSON.parse(line)];\r\n\t\t}\r\n\t\tstack.length = 0;\r\n\t\tarr = line.split(' ');\r\n\t\tstate = states[index - 1];\r\n\t\tfor (i = 0, len = arr.length; i < len; i++) {\r\n\t\t\tcmd = arr[i];\r\n\t\t\tstate = rpn(cmd, state, nr);\r\n\t\t}\r\n\t\tstates[index] = state;\r\n\t\twhile (stack.length >= 2) {\r\n\t\t\trpn('==', state, nr);\r\n\t\t}\r\n\t\tif (stack.length === 1) {\r\n\t\t\terrors.push(`Orphan in line ${nr + 1}`);\r\n\t\t\treturn \r\n\t\t}\r\n\t};\r\n\trpn = function(cmd, state, nr) {\r\n\t\tvar x, y;\r\n\t\tif (cmd === 'STATE') {\r\n\t\t\tstack.push(state);\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tif (Object.keys(state).includes(cmd.toLowerCase() )) {\r\n\t\t\tstack.push(state[cmd.toLowerCase()]);\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tif (Object.keys(reducers).includes(cmd)) {\r\n\t\t\treturn state = reducers[cmd](state);\r\n\t\t}\r\n\t\tif (cmd === '==') {\r\n\t\t\ttry {\r\n\t\t\t\tx = stack.pop();\r\n\t\t\t\ty = stack.pop();\r\n\t\t\t\tassert(x, y);\r\n\t\t\t} catch (error) {\r\n\t\t\t\terrors.push('Assert failure in line ' + (nr + 1));\r\n\t\t\t\terrors.push('  Actual ' + JSON.stringify(y));\r\n\t\t\t\terrors.push('  Expect ' + JSON.stringify(x));\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (cmd=='') return state\r\n\t\t\tstack.push(JSON.parse(cmd));\r\n\t\t} catch (error) {\r\n\t\t\terrors.push('JSON.parse failure in line ' + (nr + 1)+ ' '+ cmd);\r\n\t\t\terrors.push('\t' + cmd);\r\n\t\t}\r\n\t\treturn state;\r\n\t};\r\n\tcountTabs = function(line) {\r\n\t\tvar ch, i, len, result;\r\n\t\tresult = 0;\r\n\t\tfor (i = 0, len = line.length; i < len; i++) {\r\n\t\t\tch = line[i];\r\n\t\t\tif (ch !== '\\t') {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\tresult++;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\treturn {run};\r\n};\r\n\r\nexport default testReducer","<script>\t \n\timport testReducer from './testReducer.js'\n\n\tconst stack = []\n\n\tconst op = (state,value) => {\n\t\tconst hist = [...state.hist, state.a]\n\t\treturn {...state, a:value, hist}\n\t}\n\n\tconst reducers = {\n\t\tADD: (state) => op(state,state.a+2),\n\t\tMUL: (state) => op(state,state.a*2),\n\t\tDIV: (state) => op(state,state.a/2),\n\t\tNEW: (state) => ({b:stack.pop(), a:stack.pop(), hist:[]}),\n\t\tUNDO: (state) => {\n\t\t\tconst hist = state.hist.slice()\n\t\t\tconst a = hist.pop()\n\t\t\tconst b = state.b\n\t\t\treturn {a,b,hist}\n\t\t}\n\t}\n\n\tlet script = `\n{\"a\":18,\"b\":17,\"hist\":[]}\n\tADD STATE {\"a\":20,\"b\":17,\"hist\":[18]}\n\tMUL STATE {\"a\":36,\"b\":17,\"hist\":[18]}\n\tDIV STATE {\"a\":9,\"b\":17,\"hist\":[18]}\n\t17 1 NEW A 17 B 1 HIST []\n{\"a\":17,\"b\":1,\"hist\":[]}\n\tMUL ADD DIV STATE {\"a\":18,\"b\":1,\"hist\":[17,34,36]}\n\t\tUNDO STATE {\"a\":36,\"b\":1,\"hist\":[17,34]}\n\t\t\tUNDO STATE {\"a\":34,\"b\":1,\"hist\":[17]}\n\t\t\t\tUNDO STATE {\"a\":17,\"b\":1,\"hist\":[99]}\n\tMUL ADD DIV ADD DIV ADD DIV ADD DIV DIV DIV A 1\n`\n\tlet temp = ''\n\t\n\tconst editor = CodeMirror(document.body, {\n\t\tlineNumbers: true, \n\t\ttabSize:2,\n\t\ttheme : 'dracula'\n\t}); \n\teditor.setSize(1000,600)\n\teditor.setValue(script.trim())\n\teditor.on(\"change\", () => {\n\t\tviewer.setValue(reducer.run(editor.getValue()).join('\\n'))\n\t})\n\n\tconst viewer = CodeMirror(document.body, {\n\t\treadOnly:true,\n\t\ttabSize:2,\n\t});\n\tviewer.setSize(1000,200)\n\n\tconst reducer = testReducer(reducers, stack) \n\tviewer.setValue(reducer.run(editor.getValue()).join('\\n'))\n\t\n</script> \n\n<style>\ndiv {\n\tfloat: left; \n\twidth: 100%;  \n}\n</style>\n\n<div style='position:absolute; left:1050px; top:10px;'>\n\t<h2>Action State Tree Testing</h2>\n\t<div>This is a compact format for making tests</div>\n\t<div>Each line contains zero or more actions</div>\n\t<div>Each line contains zero or more tests</div>\n\t<div>&nbsp;</div>\n\t<div>Lines are based on less indented lines</div>\n\t<div>Alternative actions have the same indentation</div>\n\t<div>Lines with no indentation contains initial states.</div>\n\t<div>&nbsp;</div>\n\t<div>JSON is used to describe states</div>\n\t<div>RPN is used for actions and getters</div>\n\t<div>&nbsp;</div>\n\n\tActions:\n\t<ul>\n \t\t<li>ADD : a = a + 2</li>\n\t\t<li>MUL : a = a * 2</li>\n\t\t<li>DIV : a = a / 2</li>\n\t\t<li>NEW</li>\n\t\t<li>UNDO</li>\n\t</ul>\n\t\n\tGetters: \n\t<ul>\n\t\t<li>STATE : The State</li>\n\t\t<li>A : The number to be changed</li>\n\t\t<li>B : Target number</li>\n\t\t<li>HIST : List for Undo</li>\n\t</ul>\n\t<div>Assertions are done by taking two items </div>\n\t<div>from the stack at a time and comparing deeply.</div>\n\t<div>&nbsp;</div>\n\tLine 5 contains three assertions:\n\t<ul>\n\t\t<li>A == 17</li>\n\t\t<li>B == 1</li>\n\t\t<li>HIST == []</li>\n\t</ul>\n\t<div>Actions may consume parameters. E.g. NEW</div>\n\t<div>&nbsp;</div>\n\tKnown quirks:\n\t<ul>\n\t\t<li>Spaces are not allowed in expressions</li>\n\t\t<li>Very sensitive to editing</li>\n\t</ul>\n</div>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","set_style","node","key","value","important","style","setProperty","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flush","seen_callbacks","Set","length","shift","update","$$","pop","i","callback","has","add","fragment","dirty","before_update","p","ctx","after_update","outroing","make_dirty","then","init","options","instance","create_fragment","not_equal","prop_names","parent_component","props","bound","on_mount","on_destroy","context","Map","callbacks","ready","block","local","element","ret","target","hydrate","l","Array","from","childNodes","c","intro","delete","anchor","m","new_on_destroy","map","filter","mount_component","SvelteComponent","[object Object]","detaching","this","d","$destroy","type","index","indexOf","splice","assert","chai","deepEqual","testReducer","reducers","stack","countTabs","rpn","runTest","states","errors","script","len","line","nr","ref","results","split","console","log","arr","cmd","state","trim","JSON","parse","x","y","keys","includes","toLowerCase","error","stringify","result","name","attribute","document","createElement","removeAttribute","setAttribute","insertBefore","parentNode","removeChild","op","hist","ADD","MUL","DIV","NEW","UNDO","slice","editor","CodeMirror","body","lineNumbers","tabSize","theme","setSize","setValue","on","viewer","reducer","getValue","join","readOnly"],"mappings":"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"}