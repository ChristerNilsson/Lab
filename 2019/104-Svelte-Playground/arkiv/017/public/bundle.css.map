{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Shortcut.svelte",
    "..\\src\\Commands.svelte",
    "..\\src\\Navigation.svelte",
    "..\\src\\Statistics.svelte"
  ],
  "sourcesContent": [
    "<script> \n\timport Shortcut from './Shortcut.svelte'\n\timport range from 'lodash.range'\n\timport random from 'lodash.random'\n\timport sample from 'lodash.sample'\n\timport shuffle from 'lodash.shuffle'\n\timport {solve} from './solve.js' \n\n\tconst url = new URL(window.location.href)\n\tconst getParam = (name,value) => parseInt(url.searchParams.get(name) || value)\n\n\tconst M = getParam('M',3) // MAX level\n\tconst N = getParam('N',24) // exercises\n\tconst MAX = getParam('MAX',20) // MAX number\n\tconst SHUFFLE = getParam('SHUFFLE',1) \n\tconst ADD = getParam('ADD',2)\n\tconst MUL = getParam('MUL',2)\n\tconst DIV = getParam('DIV',2)\n\tconst SUB = getParam('SUB',0)\n\n\tconsole.log(M,N,MAX,SHUFFLE)\n\n\tlet score = 0\n\tlet undos = 0\n\tlet index = 0\n\n\tlet start = new Date()\n\tlet stopp = new Date()\n\n\tlet optimum = 0 \n\n\tconst createCandidates = (n) => {\n\t\tconst a = random(1,MAX)\n\n\t\tlet cands0 = [a]\n\t\tconst visited = {}\n\t\tconst memory = {}\n\t\tvisited[a.toString()] = 0\n\t\tmemory[a.toString()] = a\n\n\t\tfor (const lvl of range(n)) {\n\t\t\tconst cands1 = [] \n\t\t\tconst op = (p) => {\n\t\t\t\tif (p <= MUL*MAX) {\n\t\t\t\t\tconst key = p.toString()\n\t\t\t\t\tif (!(key in memory)) {\n\t\t\t\t\t\tcands1.push(p)\n\t\t\t\t\t\tvisited[key] = lvl+1\n\t\t\t\t\t\tmemory[key] = p\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const cand of cands0) {\n\t\t\t\top(cand + ADD)\n\t\t\t\top(cand * MUL)\n\t\t\t\tif (cand % DIV==0) op(cand / DIV)\n\t\t\t}\n\t\t\tcands0 = cands1\n\t\t}\n\t\tif (cands0.length > 0) {\n\t\t\tconst target = sample(cands0)\n\t\t\tconst key = target.toString()\n\t\t\toptimum += visited[key]\n\t\t\treturn {a:a, b:target, hist:[], orig:a}\n\t\t} else {\n\t\t\tconst key = sample(Object.keys(visited))\n\t\t\toptimum += visited[key]\n\t\t\treturn {a:a, b:memory[key], hist:[], orig:a}\n\t\t}\n\t}\n\n\tlet candidates = []\n\tfor (const level of range(M)) {\n\t\tfor (const j of range(N/M)) {\n\t\t\tcandidates.push(createCandidates(level+1))\n\t\t}\n\t}\n\n\tlet cand = SHUFFLE==1 ? shuffle(candidates) : candidates\n\n\t$: a = cand[index].a\n\t$: b = cand[index].b\n\t$: hist = cand[index].hist\n\n\tconst op = (value) => {\n\t\thist.push(a)\n\t\tindex=index\n\t\thist=hist\n\t\tcand=cand\n\t\tcand[index].a = value\n\t\tscore++\n\t\tstopp = new Date()\n\t}\n\tconst undo = () => {\n\t\tscore--\n\t\tundos++\n\t\tcand[index].a=hist.pop()\n\t\thist=hist\n\t}\n\n\tconst reset = () => {\n\t\tstart = new Date()\n\t\tstopp = new Date()\n\t\tscore = 0\n\t\tundos = 0\n\t\tindex = 0\n\n\t\tfor (const c of cand) {\n\t\t\tc.a = c.orig\n\t\t\tc.hist = []\n\t\t}\n\t}\n\n\tconst handleKeyDown = (event) => {\n\t\tevent.preventDefault()\n\t\tif (event.key=='ArrowLeft' && index > 0) index--\n\t\tif (event.key=='ArrowRight' && index < N-1) index++\n\t\tif (event.key==' ') index = (index+1) % N\n\t\tif (event.key=='Home') index=0\n\t\tif (event.key=='End') index=(N-1)\n\t\tif (event.key=='a' && a!=b) op(a + ADD)\n\t\tif (event.key=='s' && a!=b) op(a - SUB)\n\t\tif ((event.key=='m' || event.key=='w') && a!=b) op(a * MUL)\n\t\tif (event.key=='d' && a!=b && a % DIV==0) op(a / DIV)\n\t\tif (event.key=='z' && hist.length > 0) undo()\n\t\tif (event.key=='r') reset()\n\t\tif (event.key=='?') alert(` a = ADD {ADD}\\n s = SUB {SUB}\\n w = MUL {MUL}\\n d = DIV {DIV}\\n z = undo\\n space = next\\n left = prev\\n right = next\\n home = #0\\n end = #${N-1}`)\n\t}\n\n\tlet message = ''\n\n\t$: mm = (name,detail='') => {\n\t\tif (name=='score') message = 'number of operations you have used. Minimize!'\n\t\tif (name=='optimum') message = 'the minimum number of operations necessary'\n\t\tif (name=='undos') message = 'number of undoes. Minimize'\n\t\tif (name=='time') message = 'number of seconds you have used. Minimize'\n\t\tif (name=='left') message = 'make this number equal to the target number'\n\t\tif (name=='right') message = 'this is the target number'\n\t\tif (name=='prev') message = 'previous exercise. Key=leftArrow'\n\t\tif (name=='next') message = 'next exercise. Key=rightArrow or space'\n\t\tif (name=='add') message = 'addition operation on left number. Key=a'\n\t\tif (name=='mul') message = 'multiplication operation on left number. Key=w or m'\n\t\tif (name=='sub') message = 'subtraction operation on left number. Key=s'\n\t\tif (name=='div') message = 'division operation on left number. Key=d'\n\t\tif (name=='undo') message = 'last operation is undone. Key=z'\n\t\tif (name=='circle') message = 'jump to exercise #' + detail\n\t}\n\n</script>\n\n<style>\n\t.w {width:100%}\n</style>\n\n<svelte:window on:keydown={handleKeyDown} />\n<h3 class='center-align'>Shortcut</h3>\n<div style=\"width:90%; margin:auto\">\n\t<Shortcut\n\tbind:index = {index}\n\tbind:score = {score}\n\tbind:undos = {undos}\n\tbind:stopp = {stopp}\n\tbind:a = {cand[index].a}\n\tbind:b = {cand[index].b}\n\t{start} {optimum} {cand} {op} {undo} {mm} {N} {ADD} {MUL} {DIV} {SUB}\n\t/>\n</div>\n<div class='w center-align'>{message}</div>\n\n",
    "<script>\n\timport Navigation from \t'./Navigation.svelte'\n\timport Commands from \t'./Commands.svelte'\n\timport Statistics from \t'./Statistics.svelte'\n\timport Indicator from \t'./Indicator.svelte'\n\n\texport let ADD\n\texport let MUL\n\texport let DIV\n\texport let SUB\n\texport let index\n\texport let score\n\texport let undos\n\texport let stopp\n\texport let a\n\texport let b\n\texport let start\n\texport let optimum\n\texport let cand\n\texport let undo\n\texport let op\n\texport let N\n\texport let mm\n\n\t$: hist = cand[index].hist\n\t$: bgcolor = a==b ? 'green' : 'grey'\n\n</script>\n\n<style>\n\t.w {width:100%}\n\t.fs {font-size:1.5em}\n\t.fs2 {font-size:2em}\n\t.marg {margin: 0px}\n\t.br {border-radius:5px}\n</style>\n\n<div class=\"w row s12 br fs marg {bgcolor} lighten-1 black-text center-align\" >\n\t<Navigation {cand} bind:index={index} {N} {mm} />\n\t<Commands {cand} {ADD} {MUL} {DIV} {SUB} {index} {undo} {op} {mm} />\n\t<Statistics {score} {undos} {start} {stopp} {optimum} {mm} />\n\t<Indicator {cand} bind:index={index} {N} {mm} />\n</div>\n\n\n",
    "<script>\r\n\texport let ADD\r\n\texport let MUL\r\n\texport let DIV\r\n\texport let SUB\r\n\texport let cand\r\n\texport let index\r\n\texport let undo\r\n\texport let op\r\n\texport let mm\r\n\r\n\t$: a = cand[index].a\r\n\t$: b = cand[index].b\r\n\t$: done = a==b\r\n\t$: hist = cand[index].hist\r\n\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class=\"row\">\r\n\r\n\t{#if done}\r\n\t\t<div class=\"left col s12 fs marg center-align\">{hist.length} steps</div>\r\n\t{:else}\r\n\t\t<div class=\"left col s3 fs marg center-align\"></div>\r\n\t\t<div class=\"left col s6 fs marg center-align\">\r\n\t\t\t{#if (ADD!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => mm('add')} class=br on:click={() => op(a+ADD)} disabled={done}>add {ADD}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (SUB!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => mm('sub')} class=br on:click={() => op(a-SUB)} disabled={done}>sub {SUB}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (MUL!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => mm('mul')} class=br on:click={() => op(a*MUL)} disabled={done}>mul {MUL}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (DIV!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => mm('div')} class=br on:click={() => op(a/DIV)} disabled={done || a%DIV!=0}>div {DIV}</button>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t\t<div class=\"left col s3 fs marg right-align\">\r\n\t\t\t<button on:mousemove={(evt) => mm('undo')} on:click={undo} disabled={hist.length==0}>Undo</button>\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n",
    "<script>\r\n\r\n\texport let index\r\n\texport let cand\r\n\texport let N\r\n\texport let mm\r\n\r\n\t$: curr = cand[index]\r\n\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n</style>\r\n\r\n<div class='col s3 fs left-align' >\r\n\t<button on:mousemove={() => mm('prev')} on:click={() => index--} disabled={index==0}>Prev</button>\r\n</div>\r\n\r\n<div class='col s6 fs center-align' >\r\n\t{#if curr.a==curr.b}\r\n\t\t{curr.orig} to {curr.b}\r\n\t{:else}\r\n\t\t<span on:mousemove={() => mm('left')}>{curr.a}</span>\r\n\t\tto \r\n\t\t<span on:mousemove={() => mm('right')}>{curr.b}</span>\r\n\t{/if}\r\n</div>\r\n\r\n<div class='col s3 fs right-align' >\r\n\t<button on:mousemove={() => mm('next')} on:click={() => index++} disabled={index==N-1}>Next</button>\r\n</div>\r\n",
    "<script>\r\n\texport let score\r\n\texport let undos\r\n\r\n\texport let optimum\r\n\texport let stopp\r\n\texport let start\r\n\texport let mm\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n</style>\r\n\r\n<div class=\"row s12\" >\r\n\t<div on:mousemove={() => mm('score')} class=\"left col s6 fs marg green yellow-text left-align\">{score}</div>\r\n\t<div on:mousemove={() => mm('undos')} class=\"left col s6 fs marg green right-align\">{undos} undos</div>\r\n\r\n\t<div on:mousemove={() => mm('optimum')} class=\"left col s6 fs marg green left-align\">{optimum}</div>\r\n\t<div on:mousemove={() => mm('time')} class=\"left col s6 fs marg green right-align\">{(stopp - start)/1000}</div>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAuJC,EAAE,eAAC,CAAC,MAAM,IAAI,CAAC;ACzHf,EAAE,eAAC,CAAC,MAAM,IAAI,CAAC,AACf,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,IAAI,eAAC,CAAC,UAAU,GAAG,CAAC,AACpB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,eAAC,CAAC,cAAc,GAAG,CAAC;ACfvB,GAAG,cAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,cAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,cAAC,CAAC,cAAc,GAAG,CAAC;ACTvB,GAAG,cAAC,CAAC,UAAU,KAAK,CAAC;ACDrB,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC"
}