{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\Shortcut.svelte",
    "..\\src\\Navigation.svelte",
    "..\\src\\Statistics.svelte",
    "..\\src\\Commands.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Shortcut from './Shortcut.svelte'\n\timport range from 'lodash.range'\n\timport random from 'lodash.random'\n\timport sample from 'lodash.sample'\n\timport shuffle from 'lodash.shuffle'\n\timport {solve} from './solve.js'\n\n\tconst url = new URL(window.location.href)\n\tconst getParam = (name,value) => parseInt(url.searchParams.get(name) || value)\n\n\tlet data = {}\n\tlet index = 0\n\tlet curr = null\n\n\tdata.M = getParam('M',3) // MAX level\n\tdata.N = getParam('N',24) // exercises\n\tdata.MAX = getParam('MAX',20) // MAX number\n\tdata.SHUFFLE = getParam('SHUFFLE',0) // 1\n\tdata.ADD = getParam('ADD',2)\n\tdata.MUL = getParam('MUL',2)\n\tdata.DIV = getParam('DIV',2)\n\tdata.SUB = getParam('SUB',0)\n\n\tdata.score = 0\n\tdata.undos = 0\n\n\tdata.start = new Date()\n\tdata.stopp = new Date()\n\n\tdata.optimum = 0\n\n\t$: curr = data.cand[index]\n\n\tconst createCandidates = (n) => {\n\t\tlet a = random(1,data.MAX)\n\n\t\tlet cands0 = [a]\n\t\tconst visited = {}\n\t\tconst memory = {}\n\t\tvisited[a.toString()] = 0\n\t\tmemory[a.toString()] = a\n\n\t\tfor (const lvl of range(n)) {\n\t\t\tconst cands1 = []\n\t\t\tconst op = (p) => {\n\t\t\t\tif (p <= data.MUL*data.MAX) {\n\t\t\t\t\tconst key = p.toString()\n\t\t\t\t\tif (!(key in memory)) {\n\t\t\t\t\t\tcands1.push(p)\n\t\t\t\t\t\tvisited[key] = lvl+1\n\t\t\t\t\t\tmemory[key] = p\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const cand of cands0) {\n\t\t\t\top(cand + data.ADD)\n\t\t\t\top(cand - data.SUB)\n\t\t\t\top(cand * data.MUL)\n\t\t\t\tif (cand % data.DIV==0) op(cand / data.DIV)\n\t\t\t}\n\t\t\tcands0 = cands1\n\t\t}\n\t\tif (cands0.length > 0) {\n\t\t\tconst target = sample(cands0)\n\t\t\tconst key = target.toString()\n\t\t\tdata.optimum += visited[key]\n\t\t\treturn {a:a, b:target, hist:[], orig:a}\n\t\t} else {\n\t\t\tconst key = sample(Object.keys(visited))\n\t\t\tdata.optimum += visited[key]\n\t\t\treturn {a:a, b:memory[key], hist:[], orig:a}\n\t\t}\n\t}\n\n\tlet candidates = []\n\tfor (const level of range(data.M)) {\n\t\tfor (const j of range(data.N/data.M)) {\n\t\t\tcandidates.push(createCandidates(level+1))\n\t\t}\n\t}\n\n\tdata.cand = data.SHUFFLE==1 ? shuffle(candidates) : candidates\n\n\tdata.op = (value) => {\n\t\tif (curr.a==value) return\n\t\tcurr.hist.push(curr.a)\n\t\tcurr.a = value\n\t\tdata.score++\n\t\tdata.stopp = new Date()\n\t}\n\n\tdata.undo = () => {\n\t\tdata.score--\n\t\tdata.undos++\n\t\tcurr.a = curr.hist.pop()\n\t}\n\n\tdata.reset = () => {\n\t\tdata.start = new Date()\n\t\tdata.stopp = new Date()\n\t\tdata.score = 0\n\t\tdata.undos = 0\n\t\tindex = 0\n\n\t\tfor (const c of data.cand) {\n\t\t\tc.a = c.orig\n\t\t\tc.hist = []\n\t\t}\n\t}\n\n\tdata.click = (i) => index = i\n\tdata.incr = (delta) => index += delta\n\n\tconst handleKeyDown = (event) => {\n\t\tevent.preventDefault()\n\t\tif (event.key=='ArrowLeft' && index > 0) index--\n\t\tif (event.key=='ArrowRight' && index < data.N-1) index++\n\t\tif (event.key==' ') index = (index+1) % data.N\n\t\tif (event.key=='Home') index = 0\n\t\tif (event.key=='End') index=(data.N-1)\n\t\tif (event.key=='a' && curr.a!=curr.b) data.op(curr.a + data.ADD)\n\t\tif (event.key=='s' && curr.a!=curr.b) data.op(curr.a - data.SUB)\n\t\tif ((event.key=='m' || event.key=='w') && curr.a!=curr.b) data.op(curr.a * data.MUL)\n\t\tif (event.key=='d' && curr.a!=curr.b && curr.a % data.DIV==0) data.op(curr.a / data.DIV)\n\t\tif (event.key=='z' && curr.hist.length > 0) data.undo()\n\t\tif (event.key=='r') data.reset()\n\t}\n\n\tlet message = ''\n\n\tdata.mm = (name,detail='') => {\n\t\tif (name=='info') message = 'click for info about how to use and customize Shortcut'\n\t\tif (name=='score') message = 'number of operations you have used. Minimize!'\n\t\tif (name=='optimum') message = 'the minimum number of operations necessary'\n\t\tif (name=='undos') message = 'number of undoes. Minimize'\n\t\tif (name=='time') message = 'number of seconds you have used. Minimize'\n\t\tif (name=='left') message = 'make this number equal to the target number'\n\t\tif (name=='right') message = 'this is the target number'\n\t\tif (name=='prev') message = 'previous exercise. Key=leftArrow'\n\t\tif (name=='next') message = 'next exercise. Key=rightArrow or space'\n\t\tif (name=='add') message = 'addition operation on left number. Key=a'\n\t\tif (name=='mul') message = 'multiplication operation on left number. Key=w or m'\n\t\tif (name=='sub') message = 'subtraction operation on left number. Key=s'\n\t\tif (name=='div') message = 'division operation on left number. Key=d'\n\t\tif (name=='undo') message = 'last operation is undone. Key=z'\n\t\tif (name=='circle') message = 'jump to exercise #' + detail\n\t}\n\n</script>\n\n<style>\n\t.w {width:100%}\n\ta {text-decoration: none;color: #000}\n\t.fs {font-size:1.5em}\n</style>\n\n<svelte:window on:keydown={handleKeyDown} />\n<a href=\"https://github.com/ChristerNilsson/Lab/wiki/Shortcut\"\n\tclass='center-align'\n\ton:mousemove={() => data.mm('info')}\n\ttarget=\"_blank\"><h1>Shortcut</h1></a>\n<div style=\"width:90%; margin:auto\">\n\t<Shortcut {data} {index} {curr}/>\n</div>\n<div class='w fs center-align'>{message}</div>\n",
    "<script>\n\timport Navigation from \t'./Navigation.svelte'\n\timport Commands from \t'./Commands.svelte'\n\timport Statistics from \t'./Statistics.svelte'\n\timport Indicator from \t'./Indicator.svelte'\n\n\texport let data,curr,index\n\n\t$: bgcolor = curr.a==curr.b ? 'green' : 'grey'\n\n</script>\n\n<style>\n\t.w {width:100%}\n\t.fs {font-size:1.5em}\n\t.fs2 {font-size:2em}\n\t.marg {margin: 0px}\n\t.br {border-radius:5px}\n</style>\n\n<div class=\"w row s12 br fs marg {bgcolor} lighten-1 black-text center-align\" >\n\t<Navigation bind:data={data} bind:curr={curr} bind:index={index} />\n\t<Commands   bind:data={data} bind:curr={curr} />\n\t<Statistics bind:data={data} />\n\t<Indicator  bind:data={data} bind:index={index} />\n</div>\n",
    "<script>\r\n\texport let data,curr,index\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class='col s3 fs left-align' >\r\n\t<button on:mousemove={() => data.mm('prev')} class=br on:click={() => data.incr(-1)} disabled={index==0}>prev</button>\r\n</div>\r\n\r\n<div class='col s6 fs center-align' >\r\n\t{#if curr.a==curr.b}\r\n\t\t{curr.orig} to {curr.b}\r\n\t{:else}\r\n\t\t<span on:mousemove={() => data.mm('left')}>{curr.a}</span>\r\n\t\tto \r\n\t\t<span on:mousemove={() => data.mm('right')}>{curr.b}</span>\r\n\t{/if}\r\n</div>\r\n\r\n<div class='col s3 fs right-align' >\r\n\t<button on:mousemove={() => data.mm('next')} class=br on:click={() => data.incr(+1)} disabled={index==data.N-1}>next</button>\r\n</div>\r\n",
    "<script>\r\n\texport let data\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n</style>\r\n\r\n<div class=\"row s12\" >\r\n\t<div on:mousemove={() => data.mm('score')} class=\"left col s6 fs marg green yellow-text left-align\">{data.score}</div>\r\n\t<div on:mousemove={() => data.mm('undos')} class=\"left col s6 fs marg green right-align\">{data.undos} undos</div>\r\n\r\n\t<div on:mousemove={() => data.mm('optimum')} class=\"left col s6 fs marg green left-align\">{data.optimum}</div>\r\n\t<div on:mousemove={() => data.mm('time')} class=\"left col s6 fs marg green right-align\">{(data.stopp - data.start)/1000}</div>\r\n</div>\r\n",
    "<script>\r\n\texport let data,curr\r\n\t$: done = curr.a == curr.b\r\n</script>\r\n\r\n<style>\r\n\t.fs {font-size:1.5em}\r\n\t.marg {margin: 0px}\r\n\t.br {border-radius:5px}\r\n</style>\r\n\r\n<div class=\"row\">\r\n\r\n\t{#if done}\r\n\t\t<div class=\"left col s12 fs marg center-align\">{curr.hist.length} steps</div>\r\n\t{:else}\r\n\t\t<div class=\"left col s3 fs marg center-align\"></div>\r\n\t\t<div class=\"left col s6 fs marg center-align\">\r\n\t\t\t{#if (data.ADD!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('add')} class=br on:click={() => data.op(curr.a+data.ADD)} disabled={done}>add {data.ADD}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.SUB!=0)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('sub')} class=br on:click={() => data.op(curr.a-data.SUB)} disabled={done}>sub {data.SUB}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.MUL!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('mul')} class=br on:click={() => data.op(curr.a*data.MUL)} disabled={done}>mul {data.MUL}</button>\r\n\t\t\t{/if}\r\n\t\t\t{#if (data.DIV!=1)}\r\n\t\t\t\t<button on:mousemove={(evt) => data.mm('div')} class=br on:click={() => data.op(curr.a/data.DIV)} disabled={done || curr.a % data.DIV != 0}>div {data.DIV}</button>\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t\t<div class=\"left col s3 fs marg right-align\">\r\n\t\t\t<button on:mousemove={(evt) => data.mm('undo')} class=br on:click={data.undo} disabled={curr.hist.length==0}>Undo</button>\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAwJC,EAAE,eAAC,CAAC,MAAM,IAAI,CAAC,AACf,CAAC,eAAC,CAAC,eAAe,CAAE,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,AACrC,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC;AC7IrB,EAAE,eAAC,CAAC,MAAM,IAAI,CAAC,AACf,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,IAAI,eAAC,CAAC,UAAU,GAAG,CAAC,AACpB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,eAAC,CAAC,cAAc,GAAG,CAAC;ACZvB,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,GAAG,eAAC,CAAC,cAAc,GAAG,CAAC;ACDvB,GAAG,eAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,eAAC,CAAC,MAAM,CAAE,GAAG,CAAC;ACAnB,GAAG,cAAC,CAAC,UAAU,KAAK,CAAC,AACrB,KAAK,cAAC,CAAC,MAAM,CAAE,GAAG,CAAC,AACnB,GAAG,cAAC,CAAC,cAAc,GAAG,CAAC"
}