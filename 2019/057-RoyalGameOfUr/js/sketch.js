// Generated by CoffeeScript 2.3.2
var Button, COLORS, Dice, MARKERS, MAX, Marker, P0, P1, Tile, assert, buttons, createAllTiles, createPlayer0, createPlayer1, current, dice, draw, helper, inMoves, init, inspector, mousePressed, outMoves, p0, p1, player, setup, tiles,
  indexOf = [].indexOf;

assert = chai.assert.deepEqual;

MARKERS = 7;

COLORS = {
  P: '#f00',
  R: '#f0f',
  I: '#0f0',
  S: '#bb4',
  M: '#0ff',
  A: '#00f',
  O: '#000',
  X: '#000'
};

P0 = 'xabcdefghijklmnopqrstuvwy'; // left player

P1 = 'XZÅÄÖEFGHIJKPONMLQRSTUVWY'; // right player

MAX = {
  P: 1, // Promotion
  R: 1, // Replay
  I: 1, // Promoted Protection
  S: 4, // Stack 4 
  M: 4, // Mixed 4
  A: 1 // Attack
};

p0 = []; // Path of left player

p1 = []; // Path of right player

tiles = []; // Twenty tiles

player = 0; // 0=left 1=right

dice = null;

buttons = [];

inMoves = '';

outMoves = '';

current = null;

Button = class Button {
  constructor(x1, y1, title, click = function() {}) {
    this.x = x1;
    this.y = y1;
    this.title = title;
    this.click = click;
  }

  draw() {
    fc(1);
    rect(this.x, this.y, 90, 90);
    textSize(40);
    fc(0);
    return text(this.title, this.x, this.y);
  }

  inside(mx, my) {
    return (this.x - 45 < mx && mx < this.x + 45) && (this.y - 45 < my && my < this.y + 45);
  }

};

Dice = class Dice {
  constructor() {
    this.throw();
  }

  throw() {
    return this.value = random([
      1,
      1,
      1,
      2,
      2,
      2,
      3,
      4 // three tetras
    ]);
  }

  //@value = random [0,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,4] # four tetras
  inside(mx, my) {
    var x, y;
    x = width / 2 - 100 + 100 * player * 2;
    y = 200 + 100 * 5;
    return (x - 50 < mx && mx < x + 50) && (y - 50 < my && my < y + 50);
  }

  rotate() {
    this.value = this.value + 1;
    if (this.value === 5) {
      return this.value = 1;
    }
  }

  draw() {
    var x, y;
    x = width / 2 - 100 + 100 * player * 2;
    y = 200 + 100 * 5;
    fc(1);
    textSize(50);
    return text(this.value, x, y + 7);
  }

};

Marker = class Marker {
  constructor(player1, promoted = false) { // promoted marker is indicated with a golden ring
    this.player = player1;
    this.promoted = promoted;
  }

  draw(x, y) {
    if (this.player === 0) {
      fc(0.8);
    } else {
      fc(0);
    }
    if (this.player === 1) {
      sc(1);
    } else {
      sc(0);
    }
    sw(2);
    if (this.promoted) {
      sc(1, 1, 0);
      sw(5);
    }
    circle(x, y, 25);
    sc(0);
    return sw(1);
  }

};

Tile = class Tile {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
    this.letter = ' ';
    this.markers = [];
  }

  inside(mx, my) {
    var x, y;
    x = width / 2 - 100 + 100 * this.x;
    y = 200 + 100 * this.y;
    return (x - 50 < mx && mx < x + 50) && (y - 50 < my && my < y + 50) && this.markers.length !== 0;
  }

  click(marker, target, a, b) {
    if (this.legal(marker, target)) {
      return this.move(target, a, b);
    }
  }

  legal(marker, target) {
    var bool1, bool2, letter, n;
    if (marker.player !== player) {
      return false;
    }
    n = target.markers.length;
    letter = target.letter;
    if (letter === 'S' && n === 4) {
      return false;
    }
    if (indexOf.call('PRA', letter) >= 0) {
      if (n === 0) {
        return true;
      }
      bool1 = marker.player !== target.markers[0].player;
      bool2 = marker.promoted === target.markers[0].promoted;
      return bool1 && bool2;
    }
    if (indexOf.call('S', letter) >= 0) {
      if (n === 0) {
        return true;
      }
      return marker.player === target.markers[0].player;
    }
    if (letter === 'I') {
      if (n === 0) {
        return true;
      }
      if (marker.player === target.markers[0].player) {
        return false;
      } else {
        return marker.promoted === target.markers[0].promoted;
      }
    }
    if (letter === 'M') {
      return n < 4;
    }
    if (letter === 'X') {
      return true;
    }
    return assert(0, 1);
  }

  move(target, a, b) {
    var enemy, marker, n;
    n = target.markers.length;
    if (MAX[target.letter] === 1) {
      if (n === 1) {
        enemy = target.markers.pop();
        enemy.promoted = false;
        tiles[20 + enemy.player].markers.push(enemy);
      }
      marker = this.markers.pop();
      target.markers.push(marker); // MAX = 4, just move
    } else {
      marker = this.markers.pop();
      target.markers.push(marker);
    }
    if (player === 0) {
      outMoves += P0[a] + P0[b] + ' ';
    }
    if (player === 1) {
      outMoves += (P1[a] + P1[b] + ' ').toUpperCase();
    }
    if (target.letter !== 'R') {
      player = 1 - player;
    }
    return dice.throw();
  }

  draw() {
    var i, j, len, marker, ref, results, x, y;
    fill(COLORS[this.letter]);
    x = width / 2 - 100 + 100 * this.x;
    y = 200 + 100 * this.y;
    rect(x, y, 90, 90);
    fc(0);
    textSize(100);
    text(this.letter, x, y + 9);
    ref = this.markers;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      marker = ref[i];
      results.push(marker.draw(x + 10 * (i % 2), y + 7 * (7 - i) - 30));
    }
    return results;
  }

};

createAllTiles = function() {
  var i, j, k, l, len, len1, len2, ref, ref1, ref2;
  ref = range(4);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    tiles.push(new Tile(0, 3 - i)); // 0 1 2 3
  }
  ref1 = range(6);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    tiles.push(new Tile(1, i)); // 4 5 6 7 8 9
  }
  tiles.push(new Tile(1, 6)); // 10
  tiles.push(new Tile(0, 6)); // 11
  tiles.push(new Tile(0, 7)); // 12
  tiles.push(new Tile(1, 7)); // 13
  tiles.push(new Tile(2, 7)); // 14
  tiles.push(new Tile(2, 6)); // 15
  ref2 = range(4);
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    tiles.push(new Tile(2, 3 - i)); // 16 17 18 19
  }
  tiles.push(new Tile(0, 4)); // 20 IN 0
  tiles.push(new Tile(2, 4)); // 21 IN 1
  tiles.push(new Tile(0, -1)); // 22 OUT 0
  return tiles.push(new Tile(2, -1)); // 23 OUT 1
};

createPlayer0 = function() {
  var i, j, len, ref, results;
  ref = [20, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 8, 7, 6, 5, 4, 22];
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(p0.push(tiles[i]));
  }
  return results;
};

createPlayer1 = function() {
  var i, j, len, ref, results;
  ref = [21, 16, 17, 18, 19, 4, 5, 6, 7, 8, 9, 10, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 23];
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(p1.push(tiles[i]));
  }
  return results;
};

setup = function() {
  var x, y;
  createCanvas(windowWidth, windowHeight);
  x = width / 2;
  y = 200 + 100 * 8;
  buttons.push(new Button(x - 100, y, 'Prev', function() {
    return inspector(-1);
  }));
  buttons.push(new Button(x + 100, y, 'Next', function() {
    return inspector(+1);
  }));
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(100);
  current = 0;
  init();
  dice = new Dice();
  inMoves = 'xb XÖ ÖF bd df XZ xa ZÅ ad fh hi XÄ df ÅÖ XZ xb ZÅ xa ÖF bd ij ÄÖ FH HK ab KO jl ln OM np ps ML LS df ÖH ÅÖ ÖF bd xc HP ST PO xa OM ab ML XÖ LR ce ÖE df XÖ EF xc XÅ ce ÖE xd xa TU ac RT ÅÖ EG xa TU dg XZ ce FH ÖE gh bd dg EF hi ZÖ ÖH FI ad dh hk XÅ km ÅÖ IP XÄ gi UW mn PN ij GH NL LQ jl ln QR nr HI'.split(' ');
  return inspector(0);
};

init = function() {
  var i, j, k, len, len1, letter, ref, ref1, results;
  player = 0;
  tiles = [];
  p0 = [];
  p1 = [];
  createAllTiles();
  createPlayer0();
  createPlayer1();
  ref = range(MARKERS);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    tiles[20].markers.push(new Marker(0));
    tiles[21].markers.push(new Marker(1));
  }
  ref1 = 'SASRIAMRAMSRPAPRSASROOXX';
  results = [];
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    letter = ref1[i];
    results.push(tiles[i].letter = letter);
  }
  return results;
};

draw = function() {
  var button, j, k, len, len1, tile;
  bg(0);
  for (j = 0, len = tiles.length; j < len; j++) {
    tile = tiles[j];
    tile.draw();
  }
  dice.draw();
  for (k = 0, len1 = buttons.length; k < len1; k++) {
    button = buttons[k];
    button.draw();
  }
  fc(1);
  return text(current, width / 2, 200 + 100 * 8);
};

helper = function(a, playerx, diceValue) { // a,b anger index till player-vektorn
  var b, marker, tileA;
  b = a + diceValue;
  tileA = playerx[a];
  if (tileA.markers.length === 0) {
    return;
  }
  marker = _.last(tileA.markers);
  if (a === 0) {
    return tileA.click(marker, playerx[b], a, b);
  } else {
    if (b >= 14) {
      marker.promoted = true;
    }
    if (b < playerx.length) {
      return tileA.click(marker, playerx[b], a, b);
    }
  }
};

mousePressed = function() {
  var a, button, i, j, k, len, len1, p, q;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      return button.click();
    }
  }
  if (dice.inside(mouseX, mouseY)) {
    return dice.rotate();
  }
  a = null;
  if (player === 0) {
    q = p0;
  } else {
    q = p1;
  }
  for (i = k = 0, len1 = q.length; k < len1; i = ++k) {
    p = q[i];
    if (p.inside(mouseX, mouseY)) {
      a = i;
      if (_.last(p.markers).promoted) {
        if (a >= 12) {
          break;
        }
      } else {
        break;
      }
    }
  }
  if (a === null) {
    return;
  }
  if (player === 0) {
    helper(a, p0, dice.value);
  } else {
    helper(a, p1, dice.value);
  }
  return console.log(outMoves);
};

inspector = function(delta) {
  var a, b, index, j, len, move, p;
  outMoves = '';
  init();
  current += delta;
  if (current < 0) {
    current = 0;
  }
  for (index = j = 0, len = inMoves.length; j < len; index = ++j) {
    move = inMoves[index];
    if (index >= current) {
      break;
    }
    if (move[0].toLowerCase() === move[0]) {
      p = 0;
    } else {
      p = 1;
    }
    if (p === 0) {
      a = P0.indexOf(move[0]);
      b = P0.indexOf(move[1]);
      helper(a, p0, b - a);
    }
    if (p === 1) {
      a = P1.indexOf(move[0]);
      b = P1.indexOf(move[1]);
      helper(a, p1, b - a);
    }
  }
  return print('xxx', current, inMoves[current]);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\057-RoyalGameOfUr\coffee\sketch.coffee