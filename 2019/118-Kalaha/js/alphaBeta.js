// Generated by CoffeeScript 2.4.1
var alphaBeta, maxAlphaBeta, minAlphaBeta;

alphaBeta = function(depthMax, player) {
  var alpha, beta, house, playerShop, result, start, stopp;
  console.log(depthMax, player);
  start = window.performance.now();
  alpha = -1000;
  beta = 1000;
  house = buttons.map(function(button) {
    return button.value;
  });
  playerShop = 6;
  if (player === 1) {
    playerShop = 13;
  }
  result = maxAlphaBeta(house, depthMax, 0, alpha, beta, playerShop);
  stopp = window.performance.now();
  console.log('result', result, Math.round(stopp - start));
  return result;
};

maxAlphaBeta = function(house, depthMax, depth, alpha, beta, playerShop) {
  var action, i, j, len, ref, tempHouse, tempValue;
  if (!HasSuccessors(house)) {
    FinalScoring(house);
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else if (depth >= depthMax) {
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else {
    action = null;
    ref = range(playerShop - 6, playerShop);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (house[i] === 0) {
        continue;
      }
      tempHouse = house.slice();
      tempValue = null;
      if (Relocation(tempHouse, i)) {
        tempValue = maxAlphaBeta(tempHouse, depthMax, depth + 1, alpha, beta, playerShop); // + 0 1 2
      } else {
        tempValue = minAlphaBeta(tempHouse, depthMax, depth + 1, alpha, beta, playerShop);
      }
      if (alpha < tempValue) {
        alpha = tempValue;
        action = i;
      }
      if (alpha >= beta) {
        break;
      }
    }
    if (depth === 0) {
      return action;
    } else {
      return alpha;
    }
  }
};

minAlphaBeta = function(house, depthMax, depth, alpha, beta, playerShop) {
  var i, j, len, opponentShop, ref, tempHouse, tempValue;
  if (!HasSuccessors(house)) {
    FinalScoring(house);
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else if (depth >= depthMax) {
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else {
    opponentShop = (playerShop + 7) % 14;
    ref = range(opponentShop - 6, opponentShop);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (house[i] === 0) {
        continue;
      }
      tempHouse = house.slice();
      tempValue = null;
      if (Relocation(tempHouse, i)) {
        tempValue = minAlphaBeta(tempHouse, depthMax, depth + 1, alpha, beta, playerShop); // + 0 1 2
      } else {
        tempValue = maxAlphaBeta(tempHouse, depthMax, depth + 1, alpha, beta, playerShop);
      }
      if (beta > tempValue) {
        beta = tempValue;
      }
      if (alpha >= beta) {
        break;
      }
    }
    return beta;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGFCZXRhLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXGFscGhhQmV0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsU0FBQSxFQUFBLFlBQUEsRUFBQTs7QUFBQSxTQUFBLEdBQVksUUFBQSxDQUFDLFFBQUQsRUFBVyxNQUFYLENBQUE7QUFDWCxNQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBO0VBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFaLEVBQXFCLE1BQXJCO0VBQ0EsS0FBQSxHQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBbkIsQ0FBQTtFQUNSLEtBQUEsR0FBUSxDQUFDO0VBQ1QsSUFBQSxHQUFPO0VBQ1AsS0FBQSxHQUFRLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBQSxDQUFDLE1BQUQsQ0FBQTtXQUFZLE1BQU0sQ0FBQztFQUFuQixDQUFaO0VBQ1IsVUFBQSxHQUFhO0VBQ2IsSUFBRyxNQUFBLEtBQVUsQ0FBYjtJQUFvQixVQUFBLEdBQWEsR0FBakM7O0VBQ0EsTUFBQSxHQUFTLFlBQUEsQ0FBYSxLQUFiLEVBQW9CLFFBQXBCLEVBQThCLENBQTlCLEVBQWlDLEtBQWpDLEVBQXdDLElBQXhDLEVBQThDLFVBQTlDO0VBQ1QsS0FBQSxHQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBbkIsQ0FBQTtFQUNSLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWixFQUFxQixNQUFyQixFQUE0QixJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUEsR0FBTSxLQUFqQixDQUE1QjtTQUNBO0FBWFc7O0FBYVosWUFBQSxHQUFlLFFBQUEsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixLQUFsQixFQUF5QixLQUF6QixFQUFnQyxJQUFoQyxFQUFzQyxVQUF0QyxDQUFBO0FBQ2QsTUFBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxH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QUEsSUFBUyxJQUFaO0FBQXNCLGNBQXRCOztJQWJEO0FBY0EsV0FBTyxLQWxCSDs7QUFKUyIsInNvdXJjZXNDb250ZW50IjpbImFscGhhQmV0YSA9IChkZXB0aE1heCwgcGxheWVyKSAtPlxyXG5cdGNvbnNvbGUubG9nIGRlcHRoTWF4LHBsYXllclxyXG5cdHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXHJcblx0YWxwaGEgPSAtMTAwMFxyXG5cdGJldGEgPSAxMDAwXHJcblx0aG91c2UgPSBidXR0b25zLm1hcCAoYnV0dG9uKSAtPiBidXR0b24udmFsdWVcclxuXHRwbGF5ZXJTaG9wID0gNlxyXG5cdGlmIHBsYXllciA9PSAxIHRoZW4gcGxheWVyU2hvcCA9IDEzXHJcblx0cmVzdWx0ID0gbWF4QWxwaGFCZXRhIGhvdXNlLCBkZXB0aE1heCwgMCwgYWxwaGEsIGJldGEsIHBsYXllclNob3BcclxuXHRzdG9wcCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxyXG5cdGNvbnNvbGUubG9nICdyZXN1bHQnLHJlc3VsdCxNYXRoLnJvdW5kIHN0b3BwLXN0YXJ0XHJcblx0cmVzdWx0IFxyXG5cclxubWF4QWxwaGFCZXRhID0gKGhvdXNlLCBkZXB0aE1heCwgZGVwdGgsIGFscGhhLCBiZXRhLCBwbGF5ZXJTaG9wKSAtPlxyXG5cdGlmIG5vdCBIYXNTdWNjZXNzb3JzIGhvdXNlXHJcblx0XHRGaW5hbFNjb3JpbmcgaG91c2VcclxuXHRcdHJldHVybiBFdmFsdWF0ZSBob3VzZSwgcGxheWVyU2hvcCwgKHBsYXllclNob3AgKyA3KSAlIDE0XHJcblx0ZWxzZSBpZiBkZXB0aCA+PSBkZXB0aE1heFxyXG5cdFx0cmV0dXJuIEV2YWx1YXRlIGhvdXNlLCBwbGF5ZXJTaG9wLCAocGxheWVyU2hvcCArIDcpICUgMTRcclxuXHRlbHNlXHJcblx0XHRhY3Rpb24gPSBudWxsXHJcblx0XHRmb3IgaSBpbiByYW5nZSBwbGF5ZXJTaG9wIC0gNiwgcGxheWVyU2hvcFxyXG5cdFx0XHRpZiBob3VzZVtpXSA9PSAwIHRoZW4gY29udGludWVcclxuXHJcblx0XHRcdHRlbXBIb3VzZSA9IGhvdXNlLnNsaWNlKClcclxuXHRcdFx0dGVtcFZhbHVlID0gbnVsbFxyXG5cclxuXHRcdFx0aWYgUmVsb2NhdGlvbiB0ZW1wSG91c2UsIGlcclxuXHRcdFx0XHR0ZW1wVmFsdWUgPSBtYXhBbHBoYUJldGEgdGVtcEhvdXNlLCBkZXB0aE1heCwgZGVwdGggKyAxLCBhbHBoYSwgYmV0YSwgcGxheWVyU2hvcCAjICsgMCAxIDJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRlbXBWYWx1ZSA9IG1pbkFscGhhQmV0YSB0ZW1wSG91c2UsIGRlcHRoTWF4LCBkZXB0aCArIDEsIGFscGhhLCBiZXRhLCBwbGF5ZXJTaG9wXHJcblxyXG5cdFx0XHRpZiBhbHBoYSA8IHRlbXBWYWx1ZVxyXG5cdFx0XHRcdGFscGhhID0gdGVtcFZhbHVlXHJcblx0XHRcdFx0YWN0aW9uID0gaVxyXG5cclxuXHRcdFx0aWYgYWxwaGEgPj0gYmV0YSB0aGVuIGJyZWFrXHJcblxyXG5cdFx0cmV0dXJuIGlmIGRlcHRoID09IDAgdGhlbiBhY3Rpb24gZWxzZSBhbHBoYVxyXG5cclxubWluQWxwaGFCZXRhID0gKGhvdXNlLCBkZXB0aE1heCwgZGVwdGgsIGFscGhhLCBiZXRhLCBwbGF5ZXJTaG9wKSAtPlxyXG5cdGlmIG5vdCBIYXNTdWNjZXNzb3JzIGhvdXNlXHJcblx0XHRGaW5hbFNjb3JpbmcgaG91c2VcclxuXHRcdHJldHVybiBFdmFsdWF0ZSBob3VzZSwgcGxheWVyU2hvcCwgKHBsYXllclNob3AgKyA3KSAlIDE0XHJcblx0ZWxzZSBpZiBkZXB0aCA+PSBkZXB0aE1heFxyXG5cdFx0cmV0dXJuIEV2YWx1YXRlIGhvdXNlLCBwbGF5ZXJTaG9wLCAocGxheWVyU2hvcCArIDcpICUgMTRcclxuXHRlbHNlIFxyXG5cdFx0b3Bwb25lbnRTaG9wID0gKHBsYXllclNob3AgKyA3KSAlIDE0XHJcblx0XHRmb3IgaSBpbiByYW5nZSBvcHBvbmVudFNob3AgLSA2LCBvcHBvbmVudFNob3BcclxuXHRcdFx0aWYgaG91c2VbaV0gPT0gMCB0aGVuIGNvbnRpbnVlXHJcblxyXG5cdFx0XHR0ZW1wSG91c2UgPSBob3VzZS5zbGljZSgpXHJcblx0XHRcdHRlbXBWYWx1ZSA9IG51bGxcclxuXHRcdFx0XHJcblx0XHRcdGlmIFJlbG9jYXRpb24gdGVtcEhvdXNlLCBpXHJcblx0XHRcdFx0dGVtcFZhbHVlID0gbWluQWxwaGFCZXRhIHRlbXBIb3VzZSwgZGVwdGhNYXgsIGRlcHRoICsgMSwgYWxwaGEsIGJldGEsIHBsYXllclNob3AgIyArIDAgMSAyXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0ZW1wVmFsdWUgPSBtYXhBbHBoYUJldGEgdGVtcEhvdXNlLCBkZXB0aE1heCwgZGVwdGggKyAxLCBhbHBoYSwgYmV0YSwgcGxheWVyU2hvcFxyXG5cclxuXHRcdFx0aWYgYmV0YSA+IHRlbXBWYWx1ZSB0aGVuIGJldGEgPSB0ZW1wVmFsdWVcclxuXHJcblx0XHRcdGlmIGFscGhhID49IGJldGEgdGhlbiBicmVha1xyXG5cdFx0cmV0dXJuIGJldGFcclxuIl19
//# sourceURL=c:\Lab\2019\118-Kalaha\coffee\alphaBeta.coffee