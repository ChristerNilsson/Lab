// Generated by CoffeeScript 2.4.1
var MinMaxDecisionNormal, mValueNormal;

MinMaxDecisionNormal = function(depthMax, player) {
  var house, playerShop;
  house = buttons.map(function(button) {
    return button.value;
  });
  playerShop = 6;
  if (player === 1) {
    playerShop = 13;
  }
  return mValueNormal(house, depthMax, 0, playerShop);
};

mValueNormal = function(house, depthMax, depth, playerShop) {
  var action, i, j, k, len, len1, max, min, opponentShop, ref, ref1, tempHouse, tempValue;
  if (HasSuccessors(house) === false) {
    FinalScoring(house);
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else if (depth >= depthMax) {
    return Evaluate(house, playerShop, (playerShop + 7) % 14);
  } else if (depth % 2) {
    opponentShop = (playerShop + 7) % 14;
    min = 1000;
    ref = range(opponentShop - 6, opponentShop);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (house[i] === 0) {
        continue;
      }
      tempHouse = house.slice();
      tempValue = null;
      if (Relocation(tempHouse, i)) {
        tempValue = mValueNormal(tempHouse, depthMax, depth + 2, playerShop);
      } else {
        tempValue = mValueNormal(tempHouse, depthMax, depth + 1, playerShop);
      }
      if (min > tempValue) {
        min = tempValue;
      }
    }
    return min;
  } else {
    action = null;
    max = -1000;
    ref1 = range(playerShop - 6, playerShop);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      if (house[i] === 0) {
        continue;
      }
      tempHouse = house.slice();
      tempValue = null;
      if (Relocation(tempHouse, i)) {
        tempValue = mValueNormal(tempHouse, depthMax, depth + 2, playerShop);
      } else {
        tempValue = mValueNormal(tempHouse, depthMax, depth + 1, playerShop);
      }
      if (max < tempValue) {
        max = tempValue;
        action = i;
      }
    }
    if (depth === 0) {
      return action;
    } else {
      return max;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluTWF4Tm9ybWFsLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXG1pbk1heE5vcm1hbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsb0JBQUEsRUFBQTs7QUFBQSxvQkFBQSxHQUF1QixRQUFBLENBQUMsUUFBRCxFQUFXLE1BQVgsQ0FBQTtBQUN0QixNQUFBLEtBQUEsRUFBQTtFQUFBLEtBQUEsR0FBUSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQUEsQ0FBQyxNQUFELENBQUE7V0FBWSxNQUFNLENBQUM7RUFBbkIsQ0FBWjtFQUNSLFVBQUEsR0FBYTtFQUNiLElBQUcsTUFBQSxLQUFVLENBQWI7SUFBb0IsVUFBQSxHQUFhLEdBQWpDOztTQUNBLFlBQUEsQ0FBYSxLQUFiLEVBQW9CLFFBQXBCLEVBQThCLENBQTlCLEVBQWlDLFVBQWpDO0FBSnNCOztBQU12QixZQUFBLEdBQWUsUUFBQSxDQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLEtBQWxCLEVBQXlCLFVBQXpCLENBQUE7QUFDZCxNQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsWUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxFQUFBO0VBQUEsSUFBRyxhQUFBLENBQWMsS0FBZCxDQUFBLEtBQXdCLEtBQTNCO0lBQ0MsWUFBQSxDQUFhLEtBQWI7QUFDQSxXQUFPLFFBQUEsQ0FBUyxLQUFULEVBQWdCLFVBQWhCLEVBQTRCLENBQUMsVUFBQSxHQUFhLENBQWQsQ0FBQSxHQUFtQixFQUEvQyxFQUZSO0dBQUEsTUFHSyxJQUFHLEtBQUEsSUFBUyxRQUFaO0FBQ0osV0FBTyxRQUFBLENBQVMsS0FBVCxFQUFnQixVQUFoQixFQUE0QixDQUFDLFVBQUEsR0FBYSxDQUFkLENBQUEsR0FBbUIsRUFBL0MsRUFESDtHQUFBLE1BRUEsSUFBRyxLQUFBLEdBQVEsQ0FBWDtJQUNKLFlBQUEsR0FBZSxDQUFDLFVBQUEsR0FBYSxDQUFkLENBQUEsR0FBbUI7SUFDbEMsR0FBQSxHQUFNO0FBQ047SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUcsS0FBTSxDQUFBLENBQUEsQ0FBTixLQUFZLENBQWY7QUFBc0IsaUJBQXRCOztNQUVBLFNBQUEsR0FBWSxLQUFLLENBQUMsS0FBTixDQUFBO01BQ1osU0FBQSxHQUFZO01BRVosSUFBRyxVQUFBLENBQVcsU0FBWCxFQUFzQixDQUF0QixDQUFIO1FBQ0MsU0FBQSxHQUFZLFlBQUEsQ0FBYSxTQUFiLEVBQXdCLFFBQXhCLEVBQWtDLEtBQUEsR0FBUSxDQUExQyxFQUE2QyxVQUE3QyxFQURiO09BQUEsTUFBQTtRQUdDLFNBQUEsR0FBWSxZQUFBLENBQWEsU0FBYixFQUF3QixRQUF4QixFQUFrQyxLQUFBLEdBQVEsQ0FBMUMsRUFBNkMsVUFBN0MsRUFIYjs7TUFLQSxJQUFHLEdBQUEsR0FBTSxTQUFUO1FBQXdCLEdBQUEsR0FBTSxVQUE5Qjs7SUFYRDtBQVlBLFdBQU8sSUFmSDtHQUFBLE1BQUE7SUFrQkosTUFBQSxHQUFTO0lBQ1QsR0FBQSxHQUFNLENBQUM7QUFFUDtJQUFBLEtBQUEsd0NBQUE7O01BQ0MsSUFBRyxLQUFNLENBQUEsQ0FBQSxDQUFOLEtBQVksQ0FBZjtBQUFzQixpQkFBdEI7O01BRUEsU0FBQSxHQUFZLEtBQUssQ0FBQyxLQUFOLENBQUE7TUFDWixTQUFBLEdBQVk7TUFFWixJQUFHLFVBQUEsQ0FBVyxTQUFYLEVBQXNCLENBQXRCLENBQUg7UUFDQyxTQUFBLEdBQVksWUFBQSxDQUFhLFNBQWIsRUFBd0IsUUFBeEIsRUFBa0MsS0FBQSxHQUFRLENBQTFDLEVBQTZDLFVBQTdDLEVBRGI7T0FBQSxNQUFBO1FBR0MsU0FBQSxHQUFZLFlBQUEsQ0FBYSxTQUFiLEVBQXdCLFFBQXhCLEVBQWtDLEtBQUEsR0FBUSxDQUExQyxFQUE2QyxVQUE3QyxFQUhiOztNQUtBLElBQUcsR0FBQSxHQUFNLFNBQVQ7UUFDQyxHQUFBLEdBQU07UUFDTixNQUFBLEdBQVMsRUFGVjs7SUFYRDtJQWVBLElBQUcsS0FBQSxLQUFTLENBQVo7QUFBbUIsYUFBTyxPQUExQjtLQUFBLE1BQUE7QUFBc0MsYUFBTyxJQUE3QztLQXBDSTs7QUFOUyIsInNvdXJjZXNDb250ZW50IjpbIk1pbk1heERlY2lzaW9uTm9ybWFsID0gKGRlcHRoTWF4LCBwbGF5ZXIpIC0+XHJcblx0aG91c2UgPSBidXR0b25zLm1hcCAoYnV0dG9uKSAtPiBidXR0b24udmFsdWVcclxuXHRwbGF5ZXJTaG9wID0gNlxyXG5cdGlmIHBsYXllciA9PSAxIHRoZW4gcGxheWVyU2hvcCA9IDEzXHJcblx0bVZhbHVlTm9ybWFsIGhvdXNlLCBkZXB0aE1heCwgMCwgcGxheWVyU2hvcFxyXG5cclxubVZhbHVlTm9ybWFsID0gKGhvdXNlLCBkZXB0aE1heCwgZGVwdGgsIHBsYXllclNob3ApIC0+XHJcblx0aWYgSGFzU3VjY2Vzc29ycyhob3VzZSkgPT0gZmFsc2VcclxuXHRcdEZpbmFsU2NvcmluZyhob3VzZSlcclxuXHRcdHJldHVybiBFdmFsdWF0ZShob3VzZSwgcGxheWVyU2hvcCwgKHBsYXllclNob3AgKyA3KSAlIDE0KVxyXG5cdGVsc2UgaWYgZGVwdGggPj0gZGVwdGhNYXhcclxuXHRcdHJldHVybiBFdmFsdWF0ZShob3VzZSwgcGxheWVyU2hvcCwgKHBsYXllclNob3AgKyA3KSAlIDE0KVxyXG5cdGVsc2UgaWYgZGVwdGggJSAyXHJcblx0XHRvcHBvbmVudFNob3AgPSAocGxheWVyU2hvcCArIDcpICUgMTRcclxuXHRcdG1pbiA9IDEwMDBcclxuXHRcdGZvciBpIGluIHJhbmdlIG9wcG9uZW50U2hvcCAtIDYsIG9wcG9uZW50U2hvcFxyXG5cdFx0XHRpZiBob3VzZVtpXSA9PSAwIHRoZW4gY29udGludWVcclxuXHJcblx0XHRcdHRlbXBIb3VzZSA9IGhvdXNlLnNsaWNlKClcclxuXHRcdFx0dGVtcFZhbHVlID0gbnVsbFxyXG5cdFx0XHRcclxuXHRcdFx0aWYgUmVsb2NhdGlvbih0ZW1wSG91c2UsIGkpXHJcblx0XHRcdFx0dGVtcFZhbHVlID0gbVZhbHVlTm9ybWFsKHRlbXBIb3VzZSwgZGVwdGhNYXgsIGRlcHRoICsgMiwgcGxheWVyU2hvcClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRlbXBWYWx1ZSA9IG1WYWx1ZU5vcm1hbCh0ZW1wSG91c2UsIGRlcHRoTWF4LCBkZXB0aCArIDEsIHBsYXllclNob3ApXHJcblxyXG5cdFx0XHRpZiBtaW4gPiB0ZW1wVmFsdWUgdGhlbiBtaW4gPSB0ZW1wVmFsdWVcclxuXHRcdHJldHVybiBtaW5cclxuXHRlbHNlXHJcblxyXG5cdFx0YWN0aW9uID0gbnVsbFxyXG5cdFx0bWF4ID0gLTEwMDBcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBwbGF5ZXJTaG9wIC0gNiwgcGxheWVyU2hvcFxyXG5cdFx0XHRpZiBob3VzZVtpXSA9PSAwIHRoZW4gY29udGludWVcclxuXHJcblx0XHRcdHRlbXBIb3VzZSA9IGhvdXNlLnNsaWNlKClcclxuXHRcdFx0dGVtcFZhbHVlID0gbnVsbFxyXG5cdFx0XHRcclxuXHRcdFx0aWYgUmVsb2NhdGlvbih0ZW1wSG91c2UsIGkpXHJcblx0XHRcdFx0dGVtcFZhbHVlID0gbVZhbHVlTm9ybWFsKHRlbXBIb3VzZSwgZGVwdGhNYXgsIGRlcHRoICsgMiwgcGxheWVyU2hvcClcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRlbXBWYWx1ZSA9IG1WYWx1ZU5vcm1hbCh0ZW1wSG91c2UsIGRlcHRoTWF4LCBkZXB0aCArIDEsIHBsYXllclNob3ApXHJcblxyXG5cdFx0XHRpZiBtYXggPCB0ZW1wVmFsdWVcclxuXHRcdFx0XHRtYXggPSB0ZW1wVmFsdWVcclxuXHRcdFx0XHRhY3Rpb24gPSBpXHJcblxyXG5cdFx0aWYgZGVwdGggPT0gMCB0aGVuIHJldHVybiBhY3Rpb24gZWxzZSByZXR1cm4gbWF4XHJcbiJdfQ==
//# sourceURL=c:\Lab\2019\118-Kalaha\coffee\minMaxNormal.coffee