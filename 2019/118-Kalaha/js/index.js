// Generated by CoffeeScript 2.4.1
var ActiveComputerHouse, Button, Evaluate, FinalScoring, HasSuccessors, HouseButtonActive, HouseOnClick, Relocation, beans, buttons, depth, keyPressed, messages, mousePressed, player, playerComputer, playerTitle, reset, setup, xdraw;

playerTitle = ['Human', 'Computer'];

playerComputer = [false, true];

player = 0; // 0 or 1

beans = 3;

depth = 1;

buttons = [];

messages = '1 0'.split(' ');

Button = class Button {
  constructor(x1, y1, value, click = function() {}) {
    this.x = x1;
    this.y = y1;
    this.value = value;
    this.click = click;
    this.radie = 20;
  }

  draw() {
    circle(this.x, this.y, this.radie);
    textAlign(CENTER, CENTER);
    if (this.value > 0) {
      return text(this.value, this.x, this.y);
    }
  }

  inside(x, y) {
    return this.radie > dist(x, y, this.x, this.y);
  }

};

setup = function() {
  var i, j, k, len, len1, ref, ref1;
  createCanvas(450, 150);
  textAlign(CENTER, CENTER);
  textSize(20);
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    (function(i) {
      return buttons.push(new Button(100 + 50 * i, 100, beans, function() {
        return HouseOnClick(i);
      }));
    })(i);
  }
  buttons.push(new Button(400, 75, 0));
  ref1 = range(7, 13);
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    buttons.push(new Button(100 + 50 * (12 - i), 50, beans));
  }
  buttons.push(new Button(50, 75, 0));
  return reset(beans);
};

xdraw = function() {
  var button, j, len;
  bg(0.5);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  textAlign(CENTER, CENTER);
  text(messages[0], 20, 20);
  text(messages[1] + 'ms', width - 40, 130);
  textAlign(LEFT, CENTER);
  return text(messages[2], 20, 130);
};

mousePressed = function() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

reset = function(b) {
  var button, j, len;
  if (b > 0) {
    beans = b;
  }
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.value = beans;
  }
  buttons[6].value = 0;
  buttons[13].value = 0;
  if (depth < 1) {
    depth = 1;
  }
  messages[0] = depth;
  messages[1] = 0;
  messages[2] = '';
  return xdraw();
};

keyPressed = function() {
  var index;
  if (messages[2] === '') {
    return;
  }
  index = " 1234567890".indexOf(key);
  if (index >= 0) {
    return reset(index);
  }
};

ActiveComputerHouse = function() {
  return HouseOnClick(MinMaxDecisionAlphaBetaPruning(depth, player)); // MinMaxDecisionNormal depth, player
};

HouseButtonActive = function() {
  if (playerComputer[player]) {
    return ActiveComputerHouse();
  }
};

HouseOnClick = function(pickedHouse) {
  var again, house, i, j, k, len, len1, ref, ref1, start;
  if (buttons[pickedHouse].value === 0) {
    return;
  }
  start = new Date();
  house = buttons.map(function(button) {
    return button.value;
  });
  again = Relocation(house, pickedHouse);
  ref = range(14);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons[i].value = house[i];
  }
  if (again === false) {
    player = 1 - player;
  }
  if (HasSuccessors(house)) {
    HouseButtonActive();
  } else {
    FinalScoring(house);
    ref1 = range(14);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      buttons[i].value = house[i];
    }
    if (house[13] > house[6]) {
      messages[2] = playerTitle[1] + " Wins";
      depth--;
    } else if (house[13] === house[6]) {
      messages[2] = "Tie";
    } else {
      messages[2] = playerTitle[0] + " Wins";
      depth++;
    }
  }
  messages[1] = new Date() - start;
  return xdraw();
};

Relocation = function(house, pickedHouse) {
  var index, opponentShop, playerShop;
  playerShop = 6;
  opponentShop = 13;
  if (pickedHouse > 6) {
    playerShop = 13;
    opponentShop = 6;
  }
  index = pickedHouse;
  while (house[pickedHouse] > 0) {
    index = (index + 1) % 14;
    if (index === opponentShop) {
      continue;
    }
    house[index]++;
    house[pickedHouse]--;
  }
  if (index === playerShop) {
    return true;
  }
  if (house[index] === 1 && house[12 - index] !== 0 && index >= (playerShop - 6) && index < playerShop) {
    house[playerShop] += house[12 - index] + 1;
    house[index] = house[12 - index] = 0;
  }
  return false;
};

FinalScoring = function(house) {
  var i, j, len, ref, results;
  ref = range(6);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    house[6] += house[i];
    house[13] += house[7 + i];
    results.push(house[i] = house[7 + i] = 0);
  }
  return results;
};

Evaluate = function(house, player1, player2) {
  return house[player1] - house[player2];
};

HasSuccessors = function(house) {
  var i, j, len, player1, player2, ref;
  player1 = false;
  player2 = false;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (house[i] !== 0) {
      player1 = true;
    }
    if (house[7 + i] !== 0) {
      player2 = true;
    }
  }
  return player1 && player2;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\118-Kalaha\coffee\index.coffee