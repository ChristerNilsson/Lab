// Generated by CoffeeScript 2.7.0
var ActiveComputerHouse, Button, Evaluate, FinalScoring, HasSuccessors, HouseButtonActive, HouseOnClick, Relocation, beans, buttons, depth, keyPressed, messages, mousePressed, myscale, player, playerComputer, playerTitle, reset, setup, xdraw;

playerTitle = ['Human', 'Computer'];

playerComputer = [false, true];

player = 0; // 0 or 1

beans = 4;

depth = 1;

buttons = [];

myscale = 1;

messages = {};

messages.depth = depth;

messages.time = 0;

messages.result = '';

messages.computerLetters = '';

messages.humanLetters = '';

messages.moves = 0;

Button = class Button {
  constructor(x1, y1, value, littera1 = '', click = function() {}) {
    this.x = x1;
    this.y = y1;
    this.value = value;
    this.littera = littera1;
    this.click = click;
    this.radie = myscale * 40;
  }

  draw() {
    fc(1, 0, 0);
    circle(this.x, this.y, this.radie);
    textAlign(CENTER, CENTER);
    if (this.value > 0) {
      fc(1);
      return text(this.value, this.x, this.y);
    } else {
      push();
      fc(0.8, 0, 0);
      text(this.littera, this.x, this.y);
      return pop();
    }
  }

  inside(x, y) {
    return this.radie > dist(x, y, this.x, this.y);
  }

};

setup = function() {
  var i, j, k, len, len1, littera, params, ref, ref1;
  params = getURLParams();
  if (params.scale) {
    myscale = params.scale;
  }
  createCanvas(myscale * 2 * 450, myscale * 2 * 150);
  textAlign(CENTER, CENTER);
  textSize(myscale * 40);
  ref = 'abcdef';
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    littera = ref[i];
    (function(i) {
      return buttons.push(new Button(myscale * 2 * 100 + myscale * 2 * 50 * i, myscale * 2 * 100, beans, '', function() {
        return HouseOnClick(i);
      }));
    })(i);
  }
  buttons.push(new Button(myscale * 2 * 400, myscale * 2 * 75, 0));
  ref1 = 'ABCDEF';
  for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
    littera = ref1[i];
    buttons.push(new Button(myscale * 2 * 100 + myscale * 2 * 50 * (5 - i), myscale * 2 * 50, beans, littera));
  }
  buttons.push(new Button(myscale * 2 * 50, myscale * 2 * 75, 0));
  return reset(beans);
};

xdraw = function() {
  var button, j, len;
  bg(0);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  fc(1, 1, 0);
  textAlign(LEFT, CENTER);
  text('Level: ' + messages.depth, myscale * 2 * 10, myscale * 2 * 20);
  text(messages.result, myscale * 2 + 10, myscale * 2 * 135);
  textAlign(CENTER, CENTER);
  text(messages.computerLetters, width / 2, myscale * 2 * 20);
  text(messages.humanLetters, width / 2, myscale * 2 * 135);
  textAlign(RIGHT, CENTER);
  text(Math.round(10 * messages.time) / 10 + ' ms', width - 2 * 10, myscale * 2 * 20);
  return text(messages.moves, width - 2 * 10, myscale * 2 * 135);
};

mousePressed = function() {
  var button, j, len, results;
  if (messages.result !== '') {
    return reset(0);
  }
  messages.computerLetters = '';
  console.log(mouseX, mouseY);
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

reset = function(b) {
  var button, j, len;
  if (b > 0) {
    beans = b;
  }
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.value = beans;
  }
  buttons[6].value = 0;
  buttons[13].value = 0;
  if (depth < 1) {
    depth = 1;
  }
  messages.depth = depth;
  messages.time = 0;
  messages.result = '';
  messages.computerLetters = '';
  messages.moves = 0;
  player = _.random(0, 1);
  if (player === 1) {
    ActiveComputerHouse();
  }
  console.log(player);
  return xdraw();
};

keyPressed = function() {
  var index;
  if (messages.result === '') {
    return;
  }
  index = " 1234567890".indexOf(key);
  if (index >= 0) {
    return reset(index);
  }
};

ActiveComputerHouse = function() {
  var result, start, stopp;
  start = window.performance.now();
  result = alphaBeta(depth, player);
  stopp = window.performance.now();
  messages.time += stopp - start;
  return HouseOnClick(result);
};

HouseButtonActive = function() {
  if (playerComputer[player]) {
    return ActiveComputerHouse();
  }
};

HouseOnClick = function(pickedHouse) {
  var again, house, i, j, k, len, len1, ref, ref1;
  if (pickedHouse >= 7) {
    messages.computerLetters += 'abcdef ABCDEF'[pickedHouse];
  } else {
    messages.humanLetters += 'abcdef ABCDEF'[pickedHouse];
  }
  xdraw();
  if (buttons[pickedHouse].value === 0) {
    return;
  }
  house = buttons.map(function(button) {
    return button.value;
  });
  again = Relocation(house, pickedHouse);
  ref = range(14);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    buttons[i].value = house[i];
  }
  if (again) {

  } else {
    if (player === 1) {
      console.log(messages.computerLetters);
      console.log(messages.humanLetters);
      messages.moves++;
    }
    player = 1 - player;
  }
  if (HasSuccessors(house)) {
    if (player === 1) {
      messages.humanLetters = '';
    }
    HouseButtonActive();
  } else {
    FinalScoring(house);
    ref1 = range(14);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      buttons[i].value = house[i];
    }
    if (house[13] > house[6]) {
      messages.result = playerTitle[1] + " Wins";
      depth--;
    } else if (house[13] === house[6]) {
      messages.result = "Tie";
    } else {
      messages.result = playerTitle[0] + " Wins";
      depth++;
    }
    console.log('');
  }
  return xdraw();
};

Relocation = function(house, pickedHouse) {
  var index, opponentShop, playerShop, seeds;
  playerShop = 6;
  opponentShop = 13;
  if (pickedHouse > 6) {
    playerShop = 13;
    opponentShop = 6;
  }
  index = pickedHouse;
  seeds = house[pickedHouse];
  house[index] = 0;
  while (seeds > 0) {
    index = (index + 1) % 14;
    if (index === opponentShop) {
      continue;
    }
    house[index]++;
    seeds--;
  }
  if (index === playerShop) {
    return true;
  }
  if (house[index] === 1 && house[12 - index] !== 0 && index >= (playerShop - 6) && index < playerShop) {
    house[playerShop] += house[12 - index] + 1;
    house[index] = house[12 - index] = 0;
  }
  return false;
};

FinalScoring = function(house) {
  var i, j, len, ref, results;
  ref = range(6);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    house[6] += house[i];
    house[13] += house[7 + i];
    results.push(house[i] = house[7 + i] = 0);
  }
  return results;
};

Evaluate = function(house, player1, player2) {
  return house[player1] - house[player2];
};

HasSuccessors = function(house) {
  var i, j, len, player1, player2, ref;
  player1 = false;
  player2 = false;
  ref = range(6);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (house[i] !== 0) {
      player1 = true;
    }
    if (house[7 + i] !== 0) {
      player2 = true;
    }
  }
  return player1 && player2;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Lab\2019\118-Kalaha\coffee\index.coffee