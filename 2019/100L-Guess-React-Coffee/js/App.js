// Generated by CoffeeScript 2.4.1
var _, crap, render, stack;

_ = require('lodash');

stack = [
  {
    'x': 'x',
    children: []
  }
];

//stack = []

//createElement = (key, children) -> {key, children}
crap = function(key = 'x', f = function() {}) {
  var children;
  stack.push({
    key,
    children: []
  });
  f();
  children = stack.pop().children;
  //if _.last(stack).key != key
  _.last(stack).children.push({key, children});
  return _.last(stack).children;
};

render = () => {
  return crap('root', () => {
    crap('a', () => {
      crap('aa', () => {});
      return crap('ab', () => {});
    });
    return crap('b', () => {
      crap('ba');
      return crap('bb');
    });
  });
};

console.log('');

console.log(JSON.stringify(render()));

// console.log JSON.stringify createElement('a', createElement('b'), createElement('c'))

// import React from 'react'
// import ReactDOM from 'react-dom'
// import Game from './game.js'

// createAndAppend = (type, parent, attributes = {}) =>
// 	elem = document.createElement type
// 	parent.appendChild elem
// 	elem[key] = value for key,value of attributes
// 	elem

// stack = []

// crap = (attributes, f, type) =>
// 	if typeof type == 'object' then stack.push type
// 	else stack.push createAndAppend type, _.last(stack), attributes
// 	f()
// 	stack.pop()

// class App extends React.Component 
// 	constructor : (props={}) ->
// 		super props
// 		this.state = {game: new Game 2 }
// 		console.log this.state
// 		this.handleKeyUp = this.handleKeyUp.bind this

// 	render : =>
// 		x = div {}, [], =>
// 			div {}, [1,'-',3], =>
// 			input {onKeyUp : this.handleKeyUp}, [], =>
// 		console.log x
// 		x

// 	handleKeyUp : (evt) =>
// 		if evt.key != 'Enter' then return
// 		if evt.target.value == '' then this.state.game.init 2
// 		else this.state.game.action evt.target.value
// 		evt.target.value = ''
// 		this.setState((state) => {game: state.game})

// ReactDOM.render(<App />, document.getElementById("root"))

// export default App

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXEFwcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUE7O0FBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSOztBQUNKLEtBQUEsR0FBUTtFQUFDO0lBQUMsS0FBQSxHQUFEO0lBQU0sUUFBQSxFQUFTO0VBQWYsQ0FBRDtFQURSOzs7OztBQU1BLElBQUEsR0FBTyxRQUFBLENBQUMsTUFBSSxHQUFMLEVBQVMsSUFBRyxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQVosQ0FBQTtBQUNOLE1BQUE7RUFBQSxLQUFLLENBQUMsSUFBTixDQUFXO0lBQUMsR0FBRDtJQUFNLFFBQUEsRUFBUztFQUFmLENBQVg7RUFDQSxDQUFBLENBQUE7RUFDQSxRQUFBLEdBQVcsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFXLENBQUMsU0FGdkI7O0VBSUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFQLENBQWEsQ0FBQyxRQUFRLENBQUMsSUFBdkIsQ0FBNEIsQ0FBRSxHQUFGLEVBQU8sUUFBUCxDQUE1QjtTQUNBLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxDQUFhLENBQUM7QUFOUjs7QUFRUCxNQUFBLEdBQVMsQ0FBQSxDQUFBLEdBQUE7U0FDUixJQUFBLENBQUssTUFBTCxFQUFhLENBQUEsQ0FBQSxHQUFBO0lBQ1osSUFBQSxDQUFLLEdBQUwsRUFBVSxDQUFBLENBQUEsR0FBQTtNQUNULElBQUEsQ0FBSyxJQUFMLEVBQVcsQ0FBQSxDQUFBLEdBQUEsRUFBQSxDQUFYO2FBQ0EsSUFBQSxDQUFLLElBQUwsRUFBVSxDQUFBLENBQUEsR0FBQSxFQUFBLENBQVY7SUFGUyxDQUFWO1dBR0EsSUFBQSxDQUFLLEdBQUwsRUFBVSxDQUFBLENBQUEsR0FBQTtNQUNULElBQUEsQ0FBSyxJQUFMO2FBQ0EsSUFBQSxDQUFLLElBQUw7SUFGUyxDQUFWO0VBSlksQ0FBYjtBQURROztBQVNULE9BQU8sQ0FBQyxHQUFSLENBQVksRUFBWjs7QUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBQSxDQUFBLENBQWYsQ0FBWjs7QUF4QkEiLCJzb3VyY2VzQ29udGVudCI6WyJfID0gcmVxdWlyZSAnbG9kYXNoJ1xuc3RhY2sgPSBbeyd4JywgY2hpbGRyZW46W119XVxuI3N0YWNrID0gW11cblxuI2NyZWF0ZUVsZW1lbnQgPSAoa2V5LCBjaGlsZHJlbikgLT4ge2tleSwgY2hpbGRyZW59XG5cbmNyYXAgPSAoa2V5PSd4JyxmPSAtPikgLT5cblx0c3RhY2sucHVzaCB7a2V5LCBjaGlsZHJlbjpbXX1cblx0ZigpXG5cdGNoaWxkcmVuID0gc3RhY2sucG9wKCkuY2hpbGRyZW5cblx0I2lmIF8ubGFzdChzdGFjaykua2V5ICE9IGtleVxuXHRfLmxhc3Qoc3RhY2spLmNoaWxkcmVuLnB1c2ggeyBrZXksIGNoaWxkcmVuIH1cblx0Xy5sYXN0KHN0YWNrKS5jaGlsZHJlblxuXG5yZW5kZXIgPSA9PlxuXHRjcmFwICdyb290JywgPT5cblx0XHRjcmFwICdhJywgPT5cblx0XHRcdGNyYXAgJ2FhJywgPT5cblx0XHRcdGNyYXAgJ2FiJyw9PlxuXHRcdGNyYXAgJ2InLCA9PlxuXHRcdFx0Y3JhcCAnYmEnXG5cdFx0XHRjcmFwICdiYidcblxuY29uc29sZS5sb2cgJydcbmNvbnNvbGUubG9nIEpTT04uc3RyaW5naWZ5IHJlbmRlcigpXG5cblxuXG4jIGNvbnNvbGUubG9nIEpTT04uc3RyaW5naWZ5IGNyZWF0ZUVsZW1lbnQoJ2EnLCBjcmVhdGVFbGVtZW50KCdiJyksIGNyZWF0ZUVsZW1lbnQoJ2MnKSlcblxuXG4jIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiMgaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbiMgaW1wb3J0IEdhbWUgZnJvbSAnLi9nYW1lLmpzJ1xuXG4jIGNyZWF0ZUFuZEFwcGVuZCA9ICh0eXBlLCBwYXJlbnQsIGF0dHJpYnV0ZXMgPSB7fSkgPT5cbiMgXHRlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCB0eXBlXG4jIFx0cGFyZW50LmFwcGVuZENoaWxkIGVsZW1cbiMgXHRlbGVtW2tleV0gPSB2YWx1ZSBmb3Iga2V5LHZhbHVlIG9mIGF0dHJpYnV0ZXNcbiMgXHRlbGVtXG5cbiMgc3RhY2sgPSBbXVxuXG4jIGNyYXAgPSAoYXR0cmlidXRlcywgZiwgdHlwZSkgPT5cbiMgXHRpZiB0eXBlb2YgdHlwZSA9PSAnb2JqZWN0JyB0aGVuIHN0YWNrLnB1c2ggdHlwZVxuIyBcdGVsc2Ugc3RhY2sucHVzaCBjcmVhdGVBbmRBcHBlbmQgdHlwZSwgXy5sYXN0KHN0YWNrKSwgYXR0cmlidXRlc1xuIyBcdGYoKVxuIyBcdHN0YWNrLnBvcCgpXG5cbiMgY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IFxuIyBcdGNvbnN0cnVjdG9yIDogKHByb3BzPXt9KSAtPlxuIyBcdFx0c3VwZXIgcHJvcHNcbiMgXHRcdHRoaXMuc3RhdGUgPSB7Z2FtZTogbmV3IEdhbWUgMiB9XG4jIFx0XHRjb25zb2xlLmxvZyB0aGlzLnN0YXRlXG4jIFx0XHR0aGlzLmhhbmRsZUtleVVwID0gdGhpcy5oYW5kbGVLZXlVcC5iaW5kIHRoaXNcblxuIyBcdHJlbmRlciA6ID0+XG4jIFx0XHR4ID0gZGl2IHt9LCBbXSwgPT5cbiMgXHRcdFx0ZGl2IHt9LCBbMSwnLScsM10sID0+XG4jIFx0XHRcdGlucHV0IHtvbktleVVwIDogdGhpcy5oYW5kbGVLZXlVcH0sIFtdLCA9PlxuIyBcdFx0Y29uc29sZS5sb2cgeFxuIyBcdFx0eFxuXG4jIFx0aGFuZGxlS2V5VXAgOiAoZXZ0KSA9PlxuIyBcdFx0aWYgZXZ0LmtleSAhPSAnRW50ZXInIHRoZW4gcmV0dXJuXG4jIFx0XHRpZiBldnQudGFyZ2V0LnZhbHVlID09ICcnIHRoZW4gdGhpcy5zdGF0ZS5nYW1lLmluaXQgMlxuIyBcdFx0ZWxzZSB0aGlzLnN0YXRlLmdhbWUuYWN0aW9uIGV2dC50YXJnZXQudmFsdWVcbiMgXHRcdGV2dC50YXJnZXQudmFsdWUgPSAnJ1xuIyBcdFx0dGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+IHtnYW1lOiBzdGF0ZS5nYW1lfSlcblxuIyBSZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKVxuXG4jIGV4cG9ydCBkZWZhdWx0IEFwcFxuIl19
//# sourceURL=c:\Lab\2019\100L-Guess-React-Coffee\coffee\App.coffee