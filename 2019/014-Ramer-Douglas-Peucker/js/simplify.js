// Generated by CoffeeScript 2.3.2
// (c) 2017, Vladimir Agafonkin
// Simplify.js, a high-performance JS polyline simplification library
// mourner.github.io/simplify-js
var chrono, getSqSegDist, simplify;

chrono = []; // points found in chronological order


// square distance from a point to a segment
getSqSegDist = function(p, p1, p2) {
  var dx, dy, t, x, y;
  x = p1.x;
  y = p1.y;
  dx = p2.x - x;
  dy = p2.y - y;
  if (dx !== 0 || dy !== 0) {
    t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x = p2.x;
      y = p2.y;
    } else if (t > 0) {
      x += dx * t;
      y += dy * t;
    }
  }
  dx = p.x - x;
  dy = p.y - y;
  return dx * dx + dy * dy;
};

simplify = function(points, tolerance = 1) {
  var simplified, simplifyDPStep;
  simplifyDPStep = function(first, last, level = 0) {
    var i, index, j, len, maxSqDist, ref, sqDist;
    if (last - first <= 1) {
      return;
    }
    maxSqDist = tolerance * tolerance;
    ref = range(first + 1, last);
    // find most distant point and keep it.
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      sqDist = getSqSegDist(points[i], points[first], points[last]);
      if (sqDist > maxSqDist) {
        index = i;
        maxSqDist = sqDist;
      }
    }
    if (maxSqDist > tolerance * tolerance) {
      chrono.push([first, index, last, level]);
      simplifyDPStep(first, index, level + 1);
      simplified.push(points[index]);
      return simplifyDPStep(index, last, level + 1);
    }
  };
  simplified = [];
  simplifyDPStep(0, points.length - 1);
  return [points[0]].concat(simplified.concat([_.last(points)]));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxpZnkuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcc2ltcGxpZnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0FBQUEsSUFBQSxNQUFBLEVBQUEsWUFBQSxFQUFBOztBQUlBLE1BQUEsR0FBUyxHQUpUOzs7O0FBT0EsWUFBQSxHQUFlLFFBQUEsQ0FBQyxDQUFELEVBQUksRUFBSixFQUFRLEVBQVIsQ0FBQTtBQUNkLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUEsQ0FBQSxHQUFJLEVBQUUsQ0FBQztFQUNQLENBQUEsR0FBSSxFQUFFLENBQUM7RUFDUCxFQUFBLEdBQUssRUFBRSxDQUFDLENBQUgsR0FBTztFQUNaLEVBQUEsR0FBSyxFQUFFLENBQUMsQ0FBSCxHQUFPO0VBQ1osSUFBRyxFQUFBLEtBQU0sQ0FBTixJQUFXLEVBQUEsS0FBTSxDQUFwQjtJQUNDLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFQLENBQUEsR0FBWSxFQUFaLEdBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFQLENBQUEsR0FBWSxFQUE5QixDQUFBLEdBQW9DLENBQUMsRUFBQSxHQUFLLEVBQUwsR0FBVSxFQUFBLEdBQUssRUFBaEI7SUFDeEMsSUFBRyxDQUFBLEdBQUksQ0FBUDtNQUNDLENBQUEsR0FBSSxFQUFFLENBQUM7TUFDUCxDQUFBLEdBQUksRUFBRSxDQUFDLEVBRlI7S0FBQSxNQUdLLElBQUcsQ0FBQSxHQUFJLENBQVA7TUFDSixDQUFBLElBQUssRUFBQSxHQUFLO01BQ1YsQ0FBQSxJQUFLLEVBQUEsR0FBSyxFQUZOO0tBTE47O0VBUUEsRUFBQSxHQUFLLENBQUMsQ0FBQyxDQUFGLEdBQU07RUFDWCxFQUFBLEdBQUssQ0FBQyxDQUFDLENBQUYsR0FBTTtTQUNYLEVBQUEsR0FBSyxFQUFMLEdBQVUsRUFBQSxHQUFLO0FBZkQ7O0FBaUJmLFFBQUEsR0FBVyxRQUFBLENBQUMsTUFBRCxFQUFTLFlBQVUsQ0FBbkIsQ0FBQTtBQUNWLE1BQUEsVUFBQSxFQUFBO0VBQUEsY0FBQSxHQUFpQixRQUFBLENBQUMsS0FBRCxFQUFRLElBQVIsRUFBYyxRQUFNLENBQXBCLENBQUE7QUFDaEIsUUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLElBQUcsSUFBQSxHQUFLLEtBQUwsSUFBYyxDQUFqQjtBQUF3QixhQUF4Qjs7SUFDQSxTQUFBLEdBQVksU0FBQSxHQUFZO0FBR3hCOztJQUFBLEtBQUEscUNBQUE7O01BQ0MsTUFBQSxHQUFTLFlBQUEsQ0FBYSxNQUFPLENBQUEsQ0FBQSxDQUFwQixFQUF3QixNQUFPLENBQUEsS0FBQSxDQUEvQixFQUF1QyxNQUFPLENBQUEsSUFBQSxDQUE5QztNQUNULElBQUcsTUFBQSxHQUFTLFNBQVo7UUFDQyxLQUFBLEdBQVE7UUFDUixTQUFBLEdBQVksT0FGYjs7SUFGRDtJQU1BLElBQUcsU0FBQSxHQUFZLFNBQUEsR0FBWSxTQUEzQjtNQUNDLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBQyxLQUFELEVBQU8sS0FBUCxFQUFhLElBQWIsRUFBa0IsS0FBbEIsQ0FBWjtNQUNBLGNBQUEsQ0FBZSxLQUFmLEVBQXNCLEtBQXRCLEVBQTZCLEtBQUEsR0FBTSxDQUFuQztNQUNBLFVBQVUsQ0FBQyxJQUFYLENBQWdCLE1BQU8sQ0FBQSxLQUFBLENBQXZCO2FBQ0EsY0FBQSxDQUFlLEtBQWYsRUFBc0IsSUFBdEIsRUFBNEIsS0FBQSxHQUFNLENBQWxDLEVBSkQ7O0VBWGdCO0VBaUJqQixVQUFBLEdBQWE7RUFDYixjQUFBLENBQWUsQ0FBZixFQUFrQixNQUFNLENBQUMsTUFBUCxHQUFjLENBQWhDO1NBQ0EsQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFSLENBQVcsQ0FBQyxNQUFaLENBQW1CLFVBQVUsQ0FBQyxNQUFYLENBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQLENBQUQsQ0FBbEIsQ0FBbkI7QUFwQlUiLCJzb3VyY2VzQ29udGVudCI6WyIjIChjKSAyMDE3LCBWbGFkaW1pciBBZ2Fmb25raW5cclxuIyBTaW1wbGlmeS5qcywgYSBoaWdoLXBlcmZvcm1hbmNlIEpTIHBvbHlsaW5lIHNpbXBsaWZpY2F0aW9uIGxpYnJhcnlcclxuIyBtb3VybmVyLmdpdGh1Yi5pby9zaW1wbGlmeS1qc1xyXG5cclxuY2hyb25vID0gW10gIyBwb2ludHMgZm91bmQgaW4gY2hyb25vbG9naWNhbCBvcmRlclxyXG5cclxuIyBzcXVhcmUgZGlzdGFuY2UgZnJvbSBhIHBvaW50IHRvIGEgc2VnbWVudFxyXG5nZXRTcVNlZ0Rpc3QgPSAocCwgcDEsIHAyKSAtPlxyXG5cdHggPSBwMS54XHJcblx0eSA9IHAxLnlcclxuXHRkeCA9IHAyLnggLSB4XHJcblx0ZHkgPSBwMi55IC0geVxyXG5cdGlmIGR4ICE9IDAgfHwgZHkgIT0gMFxyXG5cdFx0dCA9ICgocC54IC0geCkgKiBkeCArIChwLnkgLSB5KSAqIGR5KSAvIChkeCAqIGR4ICsgZHkgKiBkeSlcclxuXHRcdGlmIHQgPiAxXHJcblx0XHRcdHggPSBwMi54XHJcblx0XHRcdHkgPSBwMi55XHJcblx0XHRlbHNlIGlmIHQgPiAwXHJcblx0XHRcdHggKz0gZHggKiB0XHJcblx0XHRcdHkgKz0gZHkgKiB0XHJcblx0ZHggPSBwLnggLSB4XHJcblx0ZHkgPSBwLnkgLSB5XHJcblx0ZHggKiBkeCArIGR5ICogZHlcclxuXHJcbnNpbXBsaWZ5ID0gKHBvaW50cywgdG9sZXJhbmNlPTEpIC0+XHJcblx0c2ltcGxpZnlEUFN0ZXAgPSAoZmlyc3QsIGxhc3QsIGxldmVsPTApIC0+XHJcblx0XHRpZiBsYXN0LWZpcnN0IDw9IDEgdGhlbiByZXR1cm4gXHJcblx0XHRtYXhTcURpc3QgPSB0b2xlcmFuY2UgKiB0b2xlcmFuY2VcclxuXHJcblx0XHQjIGZpbmQgbW9zdCBkaXN0YW50IHBvaW50IGFuZCBrZWVwIGl0LlxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgZmlyc3QgKyAxLCBsYXN0XHJcblx0XHRcdHNxRGlzdCA9IGdldFNxU2VnRGlzdCBwb2ludHNbaV0sIHBvaW50c1tmaXJzdF0sIHBvaW50c1tsYXN0XVxyXG5cdFx0XHRpZiBzcURpc3QgPiBtYXhTcURpc3RcclxuXHRcdFx0XHRpbmRleCA9IGlcclxuXHRcdFx0XHRtYXhTcURpc3QgPSBzcURpc3RcclxuXHJcblx0XHRpZiBtYXhTcURpc3QgPiB0b2xlcmFuY2UgKiB0b2xlcmFuY2VcclxuXHRcdFx0Y2hyb25vLnB1c2ggW2ZpcnN0LGluZGV4LGxhc3QsbGV2ZWxdXHJcblx0XHRcdHNpbXBsaWZ5RFBTdGVwIGZpcnN0LCBpbmRleCwgbGV2ZWwrMVxyXG5cdFx0XHRzaW1wbGlmaWVkLnB1c2ggcG9pbnRzW2luZGV4XVxyXG5cdFx0XHRzaW1wbGlmeURQU3RlcCBpbmRleCwgbGFzdCwgbGV2ZWwrMVxyXG5cclxuXHRzaW1wbGlmaWVkID0gW11cclxuXHRzaW1wbGlmeURQU3RlcCAwLCBwb2ludHMubGVuZ3RoLTFcclxuXHRbcG9pbnRzWzBdXS5jb25jYXQgc2ltcGxpZmllZC5jb25jYXQgW18ubGFzdCBwb2ludHNdXHJcbiJdfQ==
//# sourceURL=C:\Lab\2019\014-Ramer-Douglas-Peucker\coffee\simplify.coffee