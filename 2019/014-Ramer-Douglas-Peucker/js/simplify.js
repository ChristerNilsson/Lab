// Generated by CoffeeScript 2.3.2
// (c) 2017, Vladimir Agafonkin
// Simplify.js, a high-performance JS polyline simplification library
// mourner.github.io/simplify-js
var chrono, getDist, p1, p2, simplify;

chrono = []; // points found in chronological order


// square distance from a point to a segment
getDist = function(p, p1, p2) { // this function is called 52819 times
  var dx, dy, t, x, y;
  ({x, y} = p1);
  [dx, dy] = [p2.x - x, p2.y - y];
  if (dx !== 0 || dy !== 0) {
    t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      ({x, y} = p2);
    } else if (t < 0) {
      ({x, y} = p1);
    } else {
      [x, y] = [x + dx * t, y + dy * t];
    }
  }
  [dx, dy] = [p.x - x, p.y - y];
  return dx * dx + dy * dy;
};

p1 = {
  x: 0,
  y: 0
};

p2 = {
  x: 20,
  y: 15
};

assert(100, getDist({
  x: 0,
  y: -10
}, p1, p2));

assert(256, getDist({
  x: 20,
  y: -5
}, p1, p2));

assert(100, getDist({
  x: 20,
  y: 25
}, p1, p2));

simplify = function(points, tolerance = 1) {
  var res, step;
  step = function(first, last, level = 0) {
    var d, dmax, i, index, j, len, ref;
    if (last - first <= 1) {
      return;
    }
    dmax = tolerance * tolerance;
    ref = range(first + 1, last);
    // find most distant point and keep it.
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      d = getDist(points[i], points[first], points[last]);
      if (d > dmax) {
        [index, dmax] = [i, d];
      }
    }
    if (dmax > tolerance * tolerance) {
      chrono.push([first, index, last, level, sqrt(dmax)]);
      step(first, index, level + 1);
      res.push(points[index]);
      return step(index, last, level + 1);
    }
  };
  res = [points[0]];
  step(0, points.length - 1);
  res.push(_.last(points));
  return res;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxpZnkuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcc2ltcGxpZnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0FBQUEsSUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7O0FBSUEsTUFBQSxHQUFTLEdBSlQ7Ozs7QUFPQSxPQUFBLEdBQVUsUUFBQSxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixDQUFBLEVBQUE7QUFDVCxNQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsRUFBUjtFQUNBLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBQSxHQUFVLENBQUMsRUFBRSxDQUFDLENBQUgsR0FBTyxDQUFSLEVBQVcsRUFBRSxDQUFDLENBQUgsR0FBTyxDQUFsQjtFQUNWLElBQUcsRUFBQSxLQUFNLENBQU4sSUFBVyxFQUFBLEtBQU0sQ0FBcEI7SUFDQyxDQUFBLEdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBUCxDQUFBLEdBQVksRUFBWixHQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBUCxDQUFBLEdBQVksRUFBOUIsQ0FBQSxHQUFvQyxDQUFDLEVBQUEsR0FBSyxFQUFMLEdBQVUsRUFBQSxHQUFLLEVBQWhCO0lBQ3hDLElBQUcsQ0FBQSxHQUFJLENBQVA7TUFBYyxDQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQSxHQUFRLEVBQVIsRUFBZDtLQUFBLE1BQ0ssSUFBRyxDQUFBLEdBQUksQ0FBUDtNQUFjLENBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQVEsRUFBUixFQUFkO0tBQUEsTUFBQTtNQUNBLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQSxHQUFRLENBQUMsQ0FBQSxHQUFFLEVBQUEsR0FBRyxDQUFOLEVBQVMsQ0FBQSxHQUFFLEVBQUEsR0FBRyxDQUFkLEVBRFI7S0FITjs7RUFLQSxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUEsR0FBVSxDQUFDLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBUCxFQUFVLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBaEI7U0FDVixFQUFBLEdBQUssRUFBTCxHQUFVLEVBQUEsR0FBSztBQVROOztBQVVWLEVBQUEsR0FBSztFQUFDLENBQUEsRUFBRSxDQUFIO0VBQUssQ0FBQSxFQUFFO0FBQVA7O0FBQ0wsRUFBQSxHQUFLO0VBQUMsQ0FBQSxFQUFFLEVBQUg7RUFBTSxDQUFBLEVBQUU7QUFBUjs7QUFDTCxNQUFBLENBQU8sR0FBUCxFQUFZLE9BQUEsQ0FBUTtFQUFDLENBQUEsRUFBRSxDQUFIO0VBQUssQ0FBQSxFQUFFLENBQUM7QUFBUixDQUFSLEVBQW9CLEVBQXBCLEVBQXVCLEVBQXZCLENBQVo7O0FBQ0EsTUFBQSxDQUFPLEdBQVAsRUFBWSxPQUFBLENBQVE7RUFBQyxDQUFBLEVBQUUsRUFBSDtFQUFNLENBQUEsRUFBRSxDQUFDO0FBQVQsQ0FBUixFQUFvQixFQUFwQixFQUF1QixFQUF2QixDQUFaOztBQUNBLE1BQUEsQ0FBTyxHQUFQLEVBQVksT0FBQSxDQUFRO0VBQUMsQ0FBQSxFQUFFLEVBQUg7RUFBTSxDQUFBLEVBQUU7QUFBUixDQUFSLEVBQW9CLEVBQXBCLEVBQXVCLEVBQXZCLENBQVo7O0FBRUEsUUFBQSxHQUFXLFFBQUEsQ0FBQyxNQUFELEVBQVMsWUFBVSxDQUFuQixDQUFBO0FBQ1YsTUFBQSxHQUFBLEVBQUE7RUFBQSxJQUFBLEdBQU8sUUFBQSxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsUUFBTSxDQUFwQixDQUFBO0FBQ04sUUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLElBQUcsSUFBQSxHQUFLLEtBQUwsSUFBYyxDQUFqQjtBQUF3QixhQUF4Qjs7SUFDQSxJQUFBLEdBQU8sU0FBQSxHQUFZO0FBQ25COztJQUFBLEtBQUEscUNBQUE7O01BQ0MsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxNQUFPLENBQUEsQ0FBQSxDQUFmLEVBQW1CLE1BQU8sQ0FBQSxLQUFBLENBQTFCLEVBQWtDLE1BQU8sQ0FBQSxJQUFBLENBQXpDO01BQ0osSUFBRyxDQUFBLEdBQUksSUFBUDtRQUFpQixDQUFDLEtBQUQsRUFBTyxJQUFQLENBQUEsR0FBZSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQWhDOztJQUZEO0lBR0EsSUFBRyxJQUFBLEdBQU8sU0FBQSxHQUFZLFNBQXRCO01BQ0MsTUFBTSxDQUFDLElBQVAsQ0FBWSxDQUFDLEtBQUQsRUFBTyxLQUFQLEVBQWEsSUFBYixFQUFrQixLQUFsQixFQUF3QixJQUFBLENBQUssSUFBTCxDQUF4QixDQUFaO01BQ0EsSUFBQSxDQUFLLEtBQUwsRUFBWSxLQUFaLEVBQW1CLEtBQUEsR0FBTSxDQUF6QjtNQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsTUFBTyxDQUFBLEtBQUEsQ0FBaEI7YUFDQSxJQUFBLENBQUssS0FBTCxFQUFZLElBQVosRUFBa0IsS0FBQSxHQUFNLENBQXhCLEVBSkQ7O0VBTk07RUFXUCxHQUFBLEdBQU0sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFSO0VBQ04sSUFBQSxDQUFLLENBQUwsRUFBUSxNQUFNLENBQUMsTUFBUCxHQUFjLENBQXRCO0VBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQVAsQ0FBVDtTQUNBO0FBZlUiLCJzb3VyY2VzQ29udGVudCI6WyIjIChjKSAyMDE3LCBWbGFkaW1pciBBZ2Fmb25raW5cclxuIyBTaW1wbGlmeS5qcywgYSBoaWdoLXBlcmZvcm1hbmNlIEpTIHBvbHlsaW5lIHNpbXBsaWZpY2F0aW9uIGxpYnJhcnlcclxuIyBtb3VybmVyLmdpdGh1Yi5pby9zaW1wbGlmeS1qc1xyXG5cclxuY2hyb25vID0gW10gIyBwb2ludHMgZm91bmQgaW4gY2hyb25vbG9naWNhbCBvcmRlclxyXG5cclxuIyBzcXVhcmUgZGlzdGFuY2UgZnJvbSBhIHBvaW50IHRvIGEgc2VnbWVudFxyXG5nZXREaXN0ID0gKHAsIHAxLCBwMikgLT4gIyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCA1MjgxOSB0aW1lc1xyXG5cdHt4LHl9ID0gcDFcclxuXHRbZHgsZHldID0gW3AyLnggLSB4LCBwMi55IC0geV1cclxuXHRpZiBkeCAhPSAwIG9yIGR5ICE9IDBcclxuXHRcdHQgPSAoKHAueCAtIHgpICogZHggKyAocC55IC0geSkgKiBkeSkgLyAoZHggKiBkeCArIGR5ICogZHkpXHJcblx0XHRpZiB0ID4gMSB0aGVuIHt4LHl9ID0gcDJcclxuXHRcdGVsc2UgaWYgdCA8IDAgdGhlbiB7eCx5fSA9IHAxXHJcblx0XHRlbHNlIFt4LHldID0gW3grZHgqdCwgeStkeSp0XVxyXG5cdFtkeCxkeV0gPSBbcC54IC0geCwgcC55IC0geV1cclxuXHRkeCAqIGR4ICsgZHkgKiBkeVxyXG5wMSA9IHt4OjAseTowfVxyXG5wMiA9IHt4OjIwLHk6MTV9XHJcbmFzc2VydCAxMDAsIGdldERpc3Qge3g6MCx5Oi0xMH0scDEscDIgXHJcbmFzc2VydCAyNTYsIGdldERpc3Qge3g6MjAseTotNX0scDEscDIgXHJcbmFzc2VydCAxMDAsIGdldERpc3Qge3g6MjAseToyNX0scDEscDIgXHJcblxyXG5zaW1wbGlmeSA9IChwb2ludHMsIHRvbGVyYW5jZT0xKSAtPlxyXG5cdHN0ZXAgPSAoZmlyc3QsIGxhc3QsIGxldmVsPTApIC0+XHJcblx0XHRpZiBsYXN0LWZpcnN0IDw9IDEgdGhlbiByZXR1cm4gXHJcblx0XHRkbWF4ID0gdG9sZXJhbmNlICogdG9sZXJhbmNlXHJcblx0XHRmb3IgaSBpbiByYW5nZSBmaXJzdCArIDEsIGxhc3QgIyBmaW5kIG1vc3QgZGlzdGFudCBwb2ludCBhbmQga2VlcCBpdC5cclxuXHRcdFx0ZCA9IGdldERpc3QgcG9pbnRzW2ldLCBwb2ludHNbZmlyc3RdLCBwb2ludHNbbGFzdF1cclxuXHRcdFx0aWYgZCA+IGRtYXggdGhlbiBbaW5kZXgsZG1heF0gPSBbaSxkXVxyXG5cdFx0aWYgZG1heCA+IHRvbGVyYW5jZSAqIHRvbGVyYW5jZVxyXG5cdFx0XHRjaHJvbm8ucHVzaCBbZmlyc3QsaW5kZXgsbGFzdCxsZXZlbCxzcXJ0IGRtYXhdXHJcblx0XHRcdHN0ZXAgZmlyc3QsIGluZGV4LCBsZXZlbCsxXHJcblx0XHRcdHJlcy5wdXNoIHBvaW50c1tpbmRleF1cclxuXHRcdFx0c3RlcCBpbmRleCwgbGFzdCwgbGV2ZWwrMVxyXG5cdHJlcyA9IFtwb2ludHNbMF1dXHJcblx0c3RlcCAwLCBwb2ludHMubGVuZ3RoLTFcclxuXHRyZXMucHVzaCBfLmxhc3QgcG9pbnRzXHJcblx0cmVzXHJcbiJdfQ==
//# sourceURL=C:\Lab\2019\014-Ramer-Douglas-Peucker\coffee\simplify.coffee