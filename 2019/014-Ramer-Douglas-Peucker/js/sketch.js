// Generated by CoffeeScript 2.3.2
var current, draw, fastKey, info, keyPressed, keyReleased, p1, p2, setup, show;

current = 0;

fastKey = 0;

p1 = null;

p2 = null;

setup = function() {
  var newpoints, p, xs, ys;
  //createCanvas 1500,1000 
  createCanvas(windowWidth - 20, windowHeight - 20);
  xs = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = points.length; j < len; j++) {
      p = points[j];
      results.push(p.x);
    }
    return results;
  })();
  ys = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = points.length; j < len; j++) {
      p = points[j];
      results.push(p.y);
    }
    return results;
  })();
  p1 = {
    x: min(xs),
    y: min(ys)
  };
  p2 = {
    x: max(xs),
    y: max(ys)
  };
  newpoints = simplify(points, 0.39);
  return print(chrono);
};

show = function(p) {
  var factor, xfactor, yfactor;
  xfactor = 1500 / (p2.x - p1.x);
  yfactor = 1000 / (p2.y - p1.y);
  factor = 0.9 * min(xfactor, yfactor);
  return point(factor * (-1.1 * p1.x + p.x), factor * (-1.1 * p1.y + p.y));
};

info = function(title, x, y, r, g, b, sw) {
  noStroke();
  fill(255);
  text(title, x + 20, y);
  stroke(r, g, b);
  strokeWeight(sw);
  return point(x, y - 10);
};

draw = function() {
  var i, j, k, l, len, len1, len2, len3, level, m, p, pi, qi, ref, ref1, ri, x1, x2;
  scale(height / 1000);
  background(0);
  noFill();
  x1 = 0.05 * 1500;
  textSize(32);
  [pi, qi, ri, level] = chrono[current];
  info('current end points', x1, 750, 255, 0, 0, 10);
  show(points[pi]);
  show(points[ri]);
  info('most distant point', x1, 850, 255, 255, 0, 10);
  show(points[qi]);
  info('found points', x1, 900, 0, 255, 0, 7);
  ref = range(current);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    [pi, qi, ri, level] = chrono[i];
    show(points[qi]);
  }
  info(`simplified ${chrono.length} points`, x1, 950, 0, 255, 0, 3);
  for (k = 0, len1 = chrono.length; k < len1; k++) {
    [pi, qi, ri, level] = chrono[k];
    show(points[qi]);
  }
  info(`original ${points.length} points`, x1, 700, 255, 255, 255, 1);
  for (l = 0, len2 = points.length; l < len2; l++) {
    p = points[l];
    show(p);
  }
  info('current line', x1, 800, 255, 0, 0, 1);
  [pi, qi, ri, level] = chrono[current];
  ref1 = range(pi, ri);
  for (m = 0, len3 = ref1.length; m < len3; m++) {
    i = ref1[m];
    show(points[i]);
  }
  noStroke();
  x2 = 1150;
  text('Ramer-Douglas-Peucker', 0.9 * x2, 100);
  text(`current: ${current}`, x2 - 7, 600);
  text('up = fast forward', x2, 700);
  text('left = prev', 0.9 * x2, 750);
  text('right = next', 1.1 * x2, 750);
  text('down = fast backward', x2, 800);
  text(`recursion level: ${chrono[current][3]}`, x2 - 7, 900);
  if (fastKey === DOWN_ARROW) {
    current--;
  }
  if (fastKey === UP_ARROW) {
    current++;
  }
  return current = constrain(current, 0, chrono.length - 1);
};

keyPressed = function() {
  if (keyCode === RIGHT_ARROW) {
    current++;
  }
  if (keyCode === LEFT_ARROW) {
    current--;
  }
  current = constrain(current, 0, chrono.length - 1);
  return fastKey = keyCode;
};

keyReleased = function() {
  return fastKey = 0;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsT0FBQSxHQUFROztBQUNSLE9BQUEsR0FBUTs7QUFDUixFQUFBLEdBQUs7O0FBQ0wsRUFBQSxHQUFLOztBQUVMLEtBQUEsR0FBUSxRQUFBLENBQUEsQ0FBQTtBQUVQLE1BQUEsU0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTs7RUFBQSxZQUFBLENBQWEsV0FBQSxHQUFZLEVBQXpCLEVBQTZCLFlBQUEsR0FBYSxFQUExQztFQUNBLEVBQUE7O0FBQVU7SUFBQSxLQUFBLHdDQUFBOzttQkFBSixDQUFDLENBQUM7SUFBRSxDQUFBOzs7RUFDVixFQUFBOztBQUFVO0lBQUEsS0FBQSx3Q0FBQTs7bUJBQUosQ0FBQyxDQUFDO0lBQUUsQ0FBQTs7O0VBRVYsRUFBQSxHQUFLO0lBQUMsQ0FBQSxFQUFFLEdBQUEsQ0FBSSxFQUFKLENBQUg7SUFBWSxDQUFBLEVBQUUsR0FBQSxDQUFJLEVBQUo7RUFBZDtFQUNMLEVBQUEsR0FBSztJQUFDLENBQUEsRUFBRSxHQUFBLENBQUksRUFBSixDQUFIO0lBQVksQ0FBQSxFQUFFLEdBQUEsQ0FBSSxFQUFKO0VBQWQ7RUFFTCxTQUFBLEdBQVksUUFBQSxDQUFTLE1BQVQsRUFBZ0IsSUFBaEI7U0FDWixLQUFBLENBQU0sTUFBTjtBQVZPOztBQVlSLElBQUEsR0FBTyxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQ04sTUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBO0VBQUEsT0FBQSxHQUFVLElBQUEsR0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFILEdBQUssRUFBRSxDQUFDLENBQVQ7RUFDZixP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Q0EsT0FBQSxHQUFVLFNBQUEsQ0FBVSxPQUFWLEVBQWtCLENBQWxCLEVBQW9CLE1BQU0sQ0FBQyxNQUFQLEdBQWMsQ0FBbEM7QUExQ0o7O0FBNENQLFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQTtFQUNaLElBQUcsT0FBQSxLQUFXLFdBQWQ7SUFBK0IsT0FBQSxHQUEvQjs7RUFDQSxJQUFHLE9BQUEsS0FBVyxVQUFkO0lBQThCLE9BQUEsR0FBOUI7O0VBQ0EsT0FBQSxHQUFVLFNBQUEsQ0FBVSxPQUFWLEVBQWtCLENBQWxCLEVBQW9CLE1BQU0sQ0FBQyxNQUFQLEdBQWMsQ0FBbEM7U0FDVixPQUFBLEdBQVU7QUFKRTs7QUFNYixXQUFBLEdBQWMsUUFBQSxDQUFBLENBQUE7U0FBRyxPQUFBLEdBQVU7QUFBYiIsInNvdXJjZXNDb250ZW50IjpbImN1cnJlbnQ9MFxuZmFzdEtleT0wXG5wMSA9IG51bGxcbnAyID0gbnVsbFxuXG5zZXR1cCA9ICgpIC0+XG5cdCNjcmVhdGVDYW52YXMgMTUwMCwxMDAwIFxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgtMjAsIHdpbmRvd0hlaWdodC0yMFxuXHR4cyA9IChwLnggZm9yIHAgaW4gcG9pbnRzKVxuXHR5cyA9IChwLnkgZm9yIHAgaW4gcG9pbnRzKVxuXG5cdHAxID0ge3g6bWluKHhzKSwgeTptaW4oeXMpfSBcblx0cDIgPSB7eDptYXgoeHMpLCB5Om1heCh5cyl9XG5cblx0bmV3cG9pbnRzID0gc2ltcGxpZnkgcG9pbnRzLDAuMzlcdFxuXHRwcmludCBjaHJvbm9cblxuc2hvdyA9IChwKSAtPiBcblx0eGZhY3RvciA9IDE1MDAvKHAyLngtcDEueClcblx0eWZhY3RvciA9IDEwMDAvKHAyLnktcDEueSlcblx0ZmFjdG9yID0gMC45ICogbWluIHhmYWN0b3IseWZhY3RvclxuXHRwb2ludCBmYWN0b3IqKC0xLjEqcDEueCtwLngpLCBmYWN0b3IqKC0xLjEqcDEueStwLnkpXG5cbmluZm8gPSAodGl0bGUseCx5LHIsZyxiLHN3KSAtPlxuXHRub1N0cm9rZSgpXG5cdGZpbGwgMjU1XG5cdHRleHQgdGl0bGUseCsyMCx5XG5cdHN0cm9rZSByLGcsYlxuXHRzdHJva2VXZWlnaHQgc3dcblx0cG9pbnQgeCx5LTEwXG5cbmRyYXcgPSAtPlxuXHRzY2FsZSBoZWlnaHQvMTAwMFxuXHRiYWNrZ3JvdW5kIDBcblx0bm9GaWxsKClcblxuXHR4MSA9IDAuMDUgKiAxNTAwXG5cdHRleHRTaXplIDMyXG5cblx0W3BpLHFpLHJpLGxldmVsXSA9IGNocm9ub1tjdXJyZW50XVxuXHRpbmZvICdjdXJyZW50IGVuZCBwb2ludHMnLHgxLDc1MCwyNTUsMCwwLDEwXG5cdHNob3cgcG9pbnRzW3BpXVxuXHRzaG93IHBvaW50c1tyaV1cblx0aW5mbyAnbW9zdCBkaXN0YW50IHBvaW50Jyx4MSw4NTAsMjU1LDI1NSwwLDEwXG5cdHNob3cgcG9pbnRzW3FpXVxuXG5cdGluZm8gJ2ZvdW5kIHBvaW50cycseDEsOTAwLDAsMjU1LDAsN1xuXHRmb3IgaSBpbiByYW5nZSBjdXJyZW50XG5cdFx0W3BpLHFpLHJpLGxldmVsXSA9IGNocm9ub1tpXVxuXHRcdHNob3cgcG9pbnRzW3FpXVxuXG5cdGluZm8gXCJzaW1wbGlmaWVkICN7Y2hyb25vLmxlbmd0aH0gcG9pbnRzXCIseDEsOTUwLDAsMjU1LDAsM1xuXHRzaG93IHBvaW50c1txaV0gZm9yIFtwaSxxaSxyaSxsZXZlbF0gaW4gY2hyb25vXG5cblx0aW5mbyBcIm9yaWdpbmFsICN7cG9pbnRzLmxlbmd0aH0gcG9pbnRzXCIseDEsNzAwLDI1NSwyNTUsMjU1LDFcblx0c2hvdyBwIGZvciBwIGluIHBvaW50cyBcblxuXHRpbmZvICdjdXJyZW50IGxpbmUnLHgxLDgwMCwyNTUsMCwwLDFcblx0W3BpLHFpLHJpLGxldmVsXSA9IGNocm9ub1tjdXJyZW50XVxuXHRzaG93IHBvaW50c1tpXSBmb3IgaSBpbiByYW5nZSBwaSxyaVxuXG5cdG5vU3Ryb2tlKClcblx0eDIgPSAxMTUwXG5cdHRleHQgJ1JhbWVyLURvdWdsYXMtUGV1Y2tlcicsMC45KngyLDEwMFxuXHR0ZXh0IFwiY3VycmVudDogI3tjdXJyZW50fVwiLHgyLTcsNjAwXG5cdHRleHQgJ3VwID0gZmFzdCBmb3J3YXJkJyx4Miw3MDBcblx0dGV4dCAnbGVmdCA9IHByZXYnLDAuOSp4Miw3NTBcblx0dGV4dCAncmlnaHQgPSBuZXh0JywxLjEqeDIsNzUwXG5cdHRleHQgJ2Rvd24gPSBmYXN0IGJhY2t3YXJkJyx4Miw4MDBcblx0dGV4dCBcInJlY3Vyc2lvbiBsZXZlbDogI3tjaHJvbm9bY3VycmVudF1bM119XCIseDItNyw5MDBcblxuXHRpZiBmYXN0S2V5ID09IERPV05fQVJST1cgdGhlbiBjdXJyZW50LS1cblx0aWYgZmFzdEtleSA9PSBVUF9BUlJPVyB0aGVuIGN1cnJlbnQrK1xuXHRjdXJyZW50ID0gY29uc3RyYWluIGN1cnJlbnQsMCxjaHJvbm8ubGVuZ3RoLTFcblxua2V5UHJlc3NlZCA9IC0+IFxuXHRpZiBrZXlDb2RlID09IFJJR0hUX0FSUk9XIHRoZW4gY3VycmVudCsrXG5cdGlmIGtleUNvZGUgPT0gTEVGVF9BUlJPVyB0aGVuIGN1cnJlbnQtLVxuXHRjdXJyZW50ID0gY29uc3RyYWluIGN1cnJlbnQsMCxjaHJvbm8ubGVuZ3RoLTFcblx0ZmFzdEtleSA9IGtleUNvZGUgXG5cbmtleVJlbGVhc2VkID0gLT4gZmFzdEtleSA9IDBcbiJdfQ==
//# sourceURL=C:\Lab\2019\014-Ramer-Douglas-Peucker\coffee\sketch.coffee