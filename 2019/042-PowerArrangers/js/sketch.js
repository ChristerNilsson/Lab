// Generated by CoffeeScript 2.3.2
var Board, Button, REVEALED, UNREVEALED, board, buttons, colors, draw, level, messages, mousePressed, setup;

UNREVEALED = -1;

REVEALED = -2;

board = null;

colors = '#f00 #0f0 #00f #ff0 #fff'.split(' ');

level = 3;

buttons = [];

messages = [];

Button = class Button {
  constructor(prompt, x, y, w, h) {
    this.prompt = prompt;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  draw() {
    rectMode(CENTER);
    fc(0);
    rect(this.x, this.y, this.w, this.h);
    fc(1);
    return text(this.prompt, this.x, this.y);
  }

  click() {
    var i, j, k, len, ref;
    j = board.h - 1;
    ref = range(board.n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (board.m[j][i] !== board.facit[j][i]) {
        level = 3;
        board = new Board(level);
        return;
      }
    }
    level += 1;
    return board = new Board(level);
  }

  inside(mx, my) {
    var ref, ref1;
    return (this.x < (ref = mx + board.size / 2) && ref < this.x + board.w * board.size) && (this.y < (ref1 = my + board.size / 2) && ref1 < this.y + board.h * board.size);
  }

};

Board = class Board {
  constructor(n) {
    var i, j, k, len, ref;
    this.n = n;
    this.w = this.n;
    this.h = 1;
    ref = range(1, this.n + 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.h *= i;
    }
    this.size = height / this.h;
    this.facit = this.generate(range(this.n));
    this.m = (function() {
      var l, len1, ref1, results;
      ref1 = range(this.h);
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        results.push((function() {
          var len2, o, ref2, results1;
          ref2 = range(this.n);
          results1 = [];
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            i = ref2[o];
            results1.push(-1);
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.counter = [0, 0, 1, 1 + 5, 1 + 5 + 23, 1 + 5 + 23 + 119][this.n];
  }

  generate(arr) {
    var permute, result;
    result = [];
    permute = (arr, m = []) => {
      var curr, i, k, len, next, ref, results;
      if (arr.length === 0) {
        return result.push(m);
      } else {
        ref = range(arr.length);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          i = ref[k];
          curr = arr.slice();
          next = curr.splice(i, 1);
          results.push(permute(curr.slice(), m.concat(next)));
        }
        return results;
      }
    };
    permute(arr);
    return _.shuffle(result);
  }

  draw() {
    var i, j, k, l, len, len1, len2, message, n, ref, ref1;
    rectMode(CORNER);
    ref = range(this.w);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(this.h);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        if (this.m[j][i] === UNREVEALED) {
          fc(0.5);
          rect(i * this.size, j * this.size, this.size, this.size);
        } else if (this.m[j][i] === REVEALED) {
          fill(colors[this.facit[j][i]]);
          rect(i * this.size, j * this.size, this.size, this.size); // flagged
        } else {
          fill(colors[this.m[j][i]]);
          rect(i * this.size, j * this.size, this.size, this.size);
          fc(0.5);
          rect(i * this.size + 3, j * this.size + 3, this.size - 6, this.size - 6);
        }
      }
    }
    fc(0);
    textSize(20);
    textAlign(LEFT, CENTER);
    for (i = n = 0, len2 = messages.length; n < len2; i = ++n) {
      message = messages[i];
      text(message, 600, height / 2 + 40 * i);
    }
    fc(1);
    textSize(100);
    textAlign(CENTER, CENTER);
    return text(this.counter, 600, 100);
  }

  click(i, j, keyPressed) {
    if (keyPressed) {
      if (this.m[j][i] === REVEALED) {
        return;
      }
      if (this.m[j][i] === UNREVEALED) {
        return this.m[j][i] = 0;
      } else {
        if (this.m[j][i] === this.n - 1) {
          return this.m[j][i] = UNREVEALED;
        } else {
          return this.m[j][i] = (this.m[j][i] + 1) % this.n;
        }
      }
    } else {
      if (j < this.h - 1 && i < this.w) {
        if (this.counter > 0 && this.m[j][i] !== REVEALED) {
          this.m[j][i] = REVEALED;
          return this.counter -= 1;
        }
      }
    }
  }

};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  board = new Board(level);
  buttons.push(new Button('ok', 600, 250));
  messages = [];
  messages.push('Every row contains a unique permutation of tiles');
  messages.push('Click to reveal a tile');
  messages.push('Shift-Click to flag a tile');
  messages.push('Flag all bottom row tiles');
  return messages.push('Click ok');
};

draw = function() {
  var button, k, len, results;
  bg(0.5);
  board.draw();
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

mousePressed = function() {
  var button, i, j, k, len;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      return;
    }
  }
  i = Math.floor(mouseX / board.size);
  j = Math.floor(mouseY / board.size);
  return board.click(i, j, keyIsPressed);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2019\042-PowerArrangers\coffee\sketch.coffee