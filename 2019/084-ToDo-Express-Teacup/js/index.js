// Generated by CoffeeScript 2.4.1
var KEY, LocalStorage, PORT, _, a, addDetail, addHeader, addItem, addList, addUser, app, button, db, deleteItem, deleteList, deleteUser, div, express, form, h1, input, localStorage, methodOverride, open, p, print, render, renderable, reset, st1, table, td, tr;

({LocalStorage} = require('node-localstorage'));

_ = require('lodash');

express = require('express');

app = express();

// methodOverride is used for DELETE and PUT
methodOverride = require('method-override');

app.use(methodOverride('_method'));

print = console.log;

({a, button, div, form, h1, input, p, render, renderable, table, td, tr} = require('teacup'));

app.use(express.urlencoded({
  extended: false
}));

st1 = 'display:inline-block; width:200px';

addHeader = function(text1, text2, action, parent = null) {
  return p(function() {
    div({
      style: st1
    }, text1);
    return form({
      action: action,
      method: "POST"
    }, function() {
      input({
        style: st1,
        name: 'data'
      });
      div({
        style: st1
      }, function() {
        return button(text2);
      });
      if (parent) {
        return input({
          style: st1,
          name: 'parent',
          value: parent
        });
      }
    });
  });
};

addDetail = function(text1, text2, href, parent = null) {
  return div(function() {
    return form({
      action: href + '?_method=DELETE',
      method: "POST"
    }, function() {
      div({
        style: st1
      }, function() {
        if (href) {
          return a(text1, {
            href: href
          });
        } else {
          return div(text1);
        }
      });
      div({
        style: st1
      }, function() {
        return button(text2);
      });
      if (parent) {
        return input({
          style: st1,
          name: 'parent',
          value: parent
        });
      }
    });
  });
};

// GET
app.get('/', function(req, res) {
  return res.redirect('/users');
});

app.get('/users', function(req, res) {
  return res.send(render(function() {
    var key, ref, results, user;
    addHeader('Users', 'Add User', '/users');
    ref = db.users;
    results = [];
    for (key in ref) {
      user = ref[key];
      results.push(addDetail(user.name, 'Delete', '/users/' + key));
    }
    return results;
  }));
});

app.get('/users/:id', function(req, res) {
  var id, user;
  id = parseInt(req.params.id);
  user = db.users[id];
  return res.send(render(function() {
    var key, list, ref, results;
    addHeader('User ' + user.name, 'Add List', '/lists', id);
    ref = db.lists;
    results = [];
    for (key in ref) {
      list = ref[key];
      if (list.userId === id) {
        results.push(addDetail(list.name, 'Delete', '/lists/' + key, id));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }));
});

app.get('/lists/:id', function(req, res) {
  var id, list;
  id = parseInt(req.params.id);
  list = db.lists[id];
  return res.send(render(function() {
    var item, key, ref, results;
    addHeader('List ' + list.name, 'Add Item', '/items', id);
    ref = db.items;
    results = [];
    for (key in ref) {
      item = ref[key];
      if (item.listId === id) {
        results.push(addDetail(item.name, 'Delete', '/items/' + key, id));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }));
});

// POST
app.post('/users', function(req, res) {
  addUser(req.body.data);
  return res.redirect('/');
});

app.post('/lists', function(req, res) {
  var userId;
  userId = parseInt(req.body.parent);
  addList(userId, req.body.data);
  return res.redirect('/users/' + userId);
});

app.post('/items', function(req, res) {
  var listId;
  listId = parseInt(req.body.parent);
  addItem(listId, req.body.data);
  return res.redirect('/lists/' + listId);
});

// DELETE
app.delete('/users/:id', function(req, res) {
  
  //print 'delete /users/:id'
  deleteUser(parseInt(req.params.id));
  return res.redirect('/users/');
});

app.delete('/lists/:id', function(req, res) {
  
  //print 'delete /lists/:id',req.body.parent 
  deleteList(parseInt(req.params.id));
  return res.redirect('/users/' + req.body.parent);
});

app.delete('/items/:id', function(req, res) {
  
  //print 'delete /items/:id'
  deleteItem(parseInt(req.params.id));
  return res.redirect('/lists/' + req.body.parent);
});


KEY = 'LocalStorage';

localStorage = null;

db = {
  users: {},
  lists: {},
  items: {}
};

addUser = (name) => {
  var id;
  if (_.size(db.users) === 0) {
    id = 1;
  } else {
    id = 1 + parseInt(_.max(_.keys(db.users)));
  }
  db.users[id] = {name};
  return localStorage.setItem('users', JSON.stringify(db.users));
};

addList = (userId, name) => {
  var id;
  if (_.size(db.lists) === 0) {
    id = 1;
  } else {
    id = 1 + parseInt(_.max(_.keys(db.lists)));
  }
  db.lists[id] = {userId, name};
  return localStorage.setItem('lists', JSON.stringify(db.lists));
};

addItem = (listId, name) => {
  var id;
  if (_.size(db.items) === 0) {
    id = 1;
  } else {
    id = 1 + parseInt(_.max(_.keys(db.items)));
  }
  db.items[id] = {listId, name};
  return localStorage.setItem('items', JSON.stringify(db.items));
};

deleteUser = (id) => {
  delete db.users[id];
  return localStorage.setItem('users', JSON.stringify(db.users));
};

deleteList = (id) => {
  delete db.lists[id];
  return localStorage.setItem('lists', JSON.stringify(db.lists));
};

deleteItem = (id) => {
  delete db.items[id];
  return localStorage.setItem('items', JSON.stringify(db.items));
};

open = () => {
  localStorage = new LocalStorage(KEY);
  db.users = JSON.parse(localStorage.getItem('users'));
  db.lists = JSON.parse(localStorage.getItem('lists'));
  return db.items = JSON.parse(localStorage.getItem('items'));
};

reset = () => {
  localStorage = new LocalStorage(KEY);
  localStorage.clear();
  addUser('Christer');
  addUser('Anna');
  addList(1, 'home');
  addList(1, 'work');
  addList(2, 'home');
  addList(2, 'work');
  addItem(1, 'buy food');
  addItem(1, 'fetch lamps');
  addItem(2, 'walk dog');
  return addItem(2, 'feed cat');
};

reset();

//open()
console.log(db);

PORT = process.env.PORT || 3000;

app.listen(PORT, function() {
  return console.log(`Server started on port ${PORT}`);
});

({
  Christer: {
    children: {
      Home: {
        children: {
          BuyLamps: {
            marked: false
          },
          FetchFood: {
            marked: false
          }
        }
      },
      Work: {
        children: {
          WalkCat: {
            marked: false
          },
          FeedDog: {
            marked: false
          }
        }
      }
    }
  },
  Anna: {
    children: {
      Home: {
        children: {
          BuyFood: {
            marked: false
          },
          FetchLamps: {
            marked: false
          }
        }
      },
      Work: {
        children: {
          WalkDog: {
            marked: false
          },
          FeedCat: {
            marked: false
          }
        }
      }
    }
  }
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\084-ToDo-Express-Teacup\coffee\index.coffee