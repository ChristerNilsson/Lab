// Generated by CoffeeScript 2.3.2
// Coffeescript är cirka 10 ggr långsammare än Python3.
var N, PHOTOS, Photo, Solver, _, print, solver;

_ = require('..\\libraries\\underscore');

require('..\\libraries\\nilsson');

require('..\\e');

print = console.log;

PHOTOS = {};

N = 80000;

Photo = class Photo {
  constructor(id2, orientation1, tags1) {
    this.id = id2;
    this.orientation = orientation1;
    this.tags = tags1;
  }

};

//@set = @tags
Solver = class Solver {
  constructor(letter) {
    this.letter = letter;
    this.n = 0; // number of photos
    this.result = []; // contains output strings
    this.read(this.letter);
    this.route = this.init();
    this.totalScore = this.calc();
    //print(@totalScore)
    this.start = Date.now();
    //print Date.now()-@start
    this.swaps = 0;
    this.two_opt();
    this.save(this.letter);
  }

  read() {
    var arr, id, k, len, line, lines, orientation, ref, results, tags;
    lines = efile.split('\n');
    ref = lines.slice(0, N);
    results = [];
    for (id = k = 0, len = ref.length; k < len; id = ++k) {
      line = ref[id];
      arr = line.split(' ');
      orientation = arr[0];
      tags = arr.slice(2);
      results.push(PHOTOS[id] = new Photo(id, orientation, tags));
    }
    return results;
  }

  //print PHOTOS[id]
  save() {
    var k, len, line, ref, results;
    print(this.route.length);
    ref = this.route;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      line = ref[k];
      results.push(print(line));
    }
    return results;
  }

  set(i, j) { // in:index out:set
    var id0, id1, s0, s1;
    //assert true, i>=0, 'aa'
    //assert true, j>=0, 'bb'
    //assert true, i<@route.length, 'cc'
    //assert true, j<@route.length, 'dd'
    id0 = this.route[i];
    id1 = this.route[j];
    //assert true, id0 >= 0, 'ee'
    //assert true, id1 >= 0, 'ff'
    s0 = PHOTOS[id0].tags;
    s1 = PHOTOS[id1].tags;
    return _.union(s0, s1);
  }

  score1(s, t) { // in:set out:integer
    var a, b, c;
    a = _.intersection(s, t);
    b = _.difference(s, t);
    c = _.difference(t, s);
    return _.min([a.length, b.length, c.length]);
  }

  score4(a, b, c, d) { // in:index out:integer
    var s0, s1;
    s0 = this.set(a, b); // slides
    s1 = this.set(c, d);
    return this.score1(s0, s1);
  }

  score6(a, b, c, d, e, f) { // in:index out:integer
    var s0, s1, s2;
    s0 = this.set(a, b); // slides
    s1 = this.set(c, d);
    s2 = this.set(e, f);
    return this.score1(s0, s1) + this.score1(s1, s2);
  }

  swapscore(i, j) { // in:index out:integer improvement
    var a0, a1, b0, b1, c0, c1, d0, d1, e0, e1, f0, f1, xnew, xold;
    //assert i%2==j%2
    if (i % 2 === 0) { // even
      // slides: a0b0 c0d0
      a0 = i - 2; // index to route to photo
      b0 = i - 1;
      c0 = i;
      d0 = i + 1;
      // slides: a1b1 c1d1
      a1 = j - 2; // index to route to photo
      b1 = j - 1;
      c1 = j;
      d1 = j + 1;
      xold = this.score4(a0, b0, c0, d0) + this.score4(a1, b1, c1, d1);
      xnew = this.score4(a0, b0, b1, a1) + this.score4(d0, c0, c1, d1); // even
      return xnew - xold; // odd
    } else {
      // slides: a0b0 c0d0 e0f0
      a0 = i - 3; // index to route to photo
      b0 = i - 2;
      c0 = i - 1;
      d0 = i + 0;
      e0 = i + 1;
      f0 = i + 2;
      // slides: a1b1 c1d1 e1f1
      a1 = j - 3; // index to route to photo
      b1 = j - 2;
      c1 = j - 1;
      d1 = j + 0;
      e1 = j + 1;
      f1 = j + 2;
      xold = this.score6(a0, b0, c0, d0, e0, f0) + this.score6(a1, b1, c1, d1, e1, f1);
      xnew = this.score6(a0, b0, c0, c1, b1, a1) + this.score6(f0, e0, d0, d1, e1, f1);
      return xnew - xold;
    }
  }

  calc1(i) { // i is always even
    var photo0, photo1, photo2, photo3, s0, s1;
    //assert i%2 == 0
    photo0 = PHOTOS[this.route[i + 0]];
    photo1 = PHOTOS[this.route[i + 1]];
    s0 = _.union(photo0.tags, photo1.tags);
    photo2 = PHOTOS[this.route[i + 2]];
    photo3 = PHOTOS[this.route[i + 3]];
    s1 = _.union(photo2.tags, photo3.tags);
    return this.score1(s0, s1);
  }

  calc() {
    var i, k, ref, result;
    result = 0;
    for (i = k = 0, ref = N - 2; k < ref; i = k += 2) {
      result += this.calc1(i);
    }
    return result;
  }

  swap(i, j) { // reverses the nodes between the indices.
    var results;
    results = [];
    //@route[i...j] = @route[i...j].reverse()
    while (i < j) {
      [this.route[i], this.route[j - 1]] = [this.route[j - 1], this.route[i]];
      i += 1;
      results.push(j -= 1);
    }
    return results;
  }

  //print @route
  opt(i, j) {
    var score;
    score = this.swapscore(i, j);
    if (score > 0) {
      this.swaps += 1;
      // print('before',self.totalScore, self.calc())
      // assert self.totalScore == self.calc()
      this.totalScore += score;
      return this.swap(i, j);
    }
  }

  // print('after',self.totalScore, self.calc())
  // assert self.totalScore == self.calc()
  two_opt() {
    var i, j, results;
    this.swaps = 1;
    results = [];
    while (this.swaps > 0) {
      this.swaps = 0;
      results.push((function() {
        var k, ref, results1;
        results1 = [];
        for (i = k = 2, ref = this.route.length - 4; (2 <= ref ? k < ref : k > ref); i = 2 <= ref ? ++k : --k) {
          print(i, this.totalScore, Date.now() - this.start); //, self.route[:64])
          results1.push((function() {
            var l, ref1, ref2, results2;
            results2 = [];
            for (j = l = ref1 = i + 4, ref2 = this.route.length - 2; l < ref2; j = l += 2) {
              this.opt(i, j);
              results2.push(this.opt(i + 1, j + 1));
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  //self.save('eee')
  init() {
    return (function() {
      var results = [];
      for (var k = 0; 0 <= N ? k < N : k > N; 0 <= N ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this);
  }

};

solver = new Solver('e');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2019\023-hashcode\coffee\sketch.coffee