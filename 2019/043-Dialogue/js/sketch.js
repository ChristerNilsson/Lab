'use strict';

// Generated by CoffeeScript 2.3.2
var assert, currentTarget, display, h, menu1, menu2, menu3, menu4, menu5, menu6, menu7, menu8, menu9, mousePressed, mouseReleased, print, range, released, setup, showDialogue, targets, update, w;

w = null;

h = null;

released = true;

print = console.log;

range = _.range;

targets = [];

targets.push([0, 'Brotorp', 'X', 46]);

targets.push([1, 'Skarpnäck', 'A', 123]);

targets.push([2, 'Golfklubben', 'R', 1234]);

targets.push([3, 'Adam', 'R', 47]);

targets.push([4, 'Bertil', '', 124]);

targets.push([5, 'Cesar', '', 1235]);

targets.push([6, 'David', 'Q', 48]);

targets.push([7, 'Erik', 'Z', 125]);

targets.push([8, 'Filip', 'T', 1236]);

targets.push([9, 'Gustav', 'T', 1250]);

targets.push([10, 'Helge', 'R', 1260]);

targets.push([11, 'Ivar', 'R', 1600]);

currentTarget = 0;

Array.prototype.clear = function () {
  return this.length = 0;
};

assert = function assert(a, b) {
  var msg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Assert failure';

  return chai.assert.deepEqual(a, b, msg);
};

setup = function setup() {
  var canvas;
  canvas = createCanvas(innerWidth - 0.5, innerHeight - 0.5);
  canvas.position(0, 0); // hides text field used for clipboard copy.
  w = width / 8;
  h = height / 4;
  angleMode(DEGREES);
  return display();
};

menu1 = function menu1() {
  // Main Menu
  var dialogue, r1, r2;
  dialogue = new Dialogue(1, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 4, r1, r2, true, 90 + 360 / 4);
  dialogue.buttons[0].info('Take', true, function () {
    return menu4();
  });
  dialogue.buttons[1].info('Target', true, function () {
    return menu3();
  });
  dialogue.buttons[2].info('PanZoom', true, function () {
    return menu2();
  });
  return dialogue.buttons[3].info('Center', true, function () {
    return dialogues.clear();
  });
};

menu2 = function menu2() {
  // Pan Zoom
  var dialogue, r1, r2;
  dialogue = new Dialogue(2, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.09 * height;
  dialogue.clock(' ', 8, r1, r2, false, 45 + 360 / 8);
  dialogue.buttons[0].info('Up', true, function () {});
  dialogue.buttons[1].info('Restore', true, function () {
    return dialogues.clear();
  });
  dialogue.buttons[2].info('Right', true, function () {});
  dialogue.buttons[3].info('Out', true, function () {});
  dialogue.buttons[4].info('Down', true, function () {});
  dialogue.buttons[5].info('In', true, function () {});
  dialogue.buttons[6].info('Left', true, function () {});
  return dialogue.buttons[7].info('Save', true, function () {
    return dialogues.clear();
  });
};

menu3 = function menu3() {
  // Target
  var dialogue, lst;
  dialogue = new Dialogue(3, 0, 0, int(0.15 * h));
  lst = targets.slice();
  lst = lst.sort(function (a, b) {
    return a[3] - b[3];
  });
  return dialogue.list(lst, 8, false, function (arr) {
    if (arr.length === 0) {
      return;
    }
    print(arr);
    currentTarget = arr[0];
    return dialogues.clear();
  });
};

menu4 = function menu4() {
  // Take
  var dialogue, r1, r2;
  dialogue = new Dialogue(4, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false, 55 + 360 / 5);
  dialogue.buttons[0].info('ABCDE', true, function () {
    return menu5();
  });
  dialogue.buttons[1].info('FGHIJ', true, function () {
    return menu6();
  });
  dialogue.buttons[2].info('KLMNO', true, function () {
    return menu7();
  });
  dialogue.buttons[3].info('PQRST', true, function () {
    return menu8();
  });
  return dialogue.buttons[4].info('UVWXYZ', true, function () {
    return menu9();
  });
};

update = function update(littera) {
  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  targets[currentTarget][index] = littera;
  return dialogues.clear();
};

menu5 = function menu5() {
  // ABCDE
  var dialogue, r1, r2;
  dialogue = new Dialogue(5, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false, 55 + 360 / 5);
  dialogue.buttons[0].info('A', true, function () {
    return update('A');
  });
  dialogue.buttons[1].info('B', true, function () {
    return update('B');
  });
  dialogue.buttons[2].info('C', true, function () {
    return update('C');
  });
  dialogue.buttons[3].info('D', true, function () {
    return update('D');
  });
  return dialogue.buttons[4].info('E', true, function () {
    return update('E');
  });
};

menu6 = function menu6() {
  // FGHIJ
  var dialogue, r1, r2;
  dialogue = new Dialogue(6, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false, 55 + 360 / 5);
  dialogue.buttons[0].info('F', true, function () {
    return update('F');
  });
  dialogue.buttons[1].info('G', true, function () {
    return update('G');
  });
  dialogue.buttons[2].info('H', true, function () {
    return update('H');
  });
  dialogue.buttons[3].info('I', true, function () {
    return update('I');
  });
  return dialogue.buttons[4].info('J', true, function () {
    return update('J');
  });
};

menu7 = function menu7() {
  // KLMNO
  var dialogue, r1, r2;
  dialogue = new Dialogue(7, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false, 55 + 360 / 5);
  dialogue.buttons[0].info('K', true, function () {
    return update('K');
  });
  dialogue.buttons[1].info('L', true, function () {
    return update('L');
  });
  dialogue.buttons[2].info('M', true, function () {
    return update('M');
  });
  dialogue.buttons[3].info('N', true, function () {
    return update('N');
  });
  return dialogue.buttons[4].info('O', true, function () {
    return update('O');
  });
};

menu8 = function menu8() {
  // PQRST
  var dialogue, r1, r2;
  dialogue = new Dialogue(8, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 5, r1, r2, false, 55 + 360 / 5);
  dialogue.buttons[0].info('P', true, function () {
    return update('P');
  });
  dialogue.buttons[1].info('Q', true, function () {
    return update('Q');
  });
  dialogue.buttons[2].info('R', true, function () {
    return update('R');
  });
  dialogue.buttons[3].info('S', true, function () {
    return update('S');
  });
  return dialogue.buttons[4].info('T', true, function () {
    return update('T');
  });
};

menu9 = function menu9() {
  // UVWXYZ
  var dialogue, r1, r2;
  dialogue = new Dialogue(9, int(4 * w), int(2 * h), int(0.15 * h));
  r1 = 0.25 * height;
  r2 = 0.11 * height;
  dialogue.clock(' ', 6, r1, r2, false, 60 + 360 / 6);
  dialogue.buttons[0].info('U', true, function () {
    return update('U');
  });
  dialogue.buttons[1].info('V', true, function () {
    return update('V');
  });
  dialogue.buttons[2].info('W', true, function () {
    return update('W');
  });
  dialogue.buttons[3].info('X', true, function () {
    return update('X');
  });
  dialogue.buttons[4].info('Y', true, function () {
    return update('Y');
  });
  return dialogue.buttons[5].info('Z', true, function () {
    return update('Z');
  });
};

display = function display() {
  background(0, 128, 0);
  text(targets[currentTarget], 100, 100);
  return showDialogue();
};

showDialogue = function showDialogue() {
  if (dialogues.length > 0) {
    return _.last(dialogues).show();
  }
};

mouseReleased = function mouseReleased() {
  released = true;
  return false;
};

mousePressed = function mousePressed() {
  var dialogue;
  if (!released) {
    return false;
  }
  released = false;
  if (dialogues.length === 1 && dialogues[0].number === 0) {
    dialogues.pop(); // dölj indikatorer
  }
  dialogue = _.last(dialogues);
  if (dialogues.length === 0 || !dialogue.execute(mouseX, mouseY)) {
    if (dialogues.length === 0) {
      menu1();
    } else {
      dialogues.pop();
    }
    display();
    return false;
  }
  //dialogues.clear()
  display();
  return false;
};
//# sourceMappingURL=sketch.js.map
