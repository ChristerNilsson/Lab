// Generated by CoffeeScript 2.3.2
// (c) 2017, Vladimir Agafonkin
// Simplify.js, a high-performance JS polyline simplification library
// mourner.github.io/simplify-js

// square distance between 2 points
var getSqDist, getSqSegDist, simplify, simplifyDPStep, simplifyDouglasPeucker, simplifyRadialDist;

getSqDist = function(p1, p2) {
  var dx, dy;
  dx = p1.x - p2.x;
  dy = p1.y - p2.y;
  return dx * dx + dy * dy;
};

// square distance from a point to a segment
getSqSegDist = function(p, p1, p2) {
  var dx, dy, t, x, y;
  x = p1.x;
  y = p1.y;
  dx = p2.x - x;
  dy = p2.y - y;
  if (dx !== 0 || dy !== 0) {
    t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x = p2.x;
      y = p2.y;
    } else if (t > 0) {
      x += dx * t;
      y += dy * t;
    }
  }
  dx = p.x - x;
  dy = p.y - y;
  return dx * dx + dy * dy;
};

// rest of the code doesn't care about point format
// basic distance-based simplification
simplifyRadialDist = function(points, sqTolerance) {
  var j, len, newPoints, point, prevPoint;
  prevPoint = points[0];
  newPoints = [prevPoint];
  for (j = 0, len = points.length; j < len; j++) {
    point = points[j];
    if (getSqDist(point, prevPoint) > sqTolerance) {
      newPoints.push(point);
      prevPoint = point;
    }
  }
  if (prevPoint !== point) {
    newPoints.push(point);
  }
  return newPoints;
};

simplifyDPStep = function(points, first, last, sqTolerance, simplified) {
  var i, index, j, len, maxSqDist, ref, sqDist;
  maxSqDist = sqTolerance;
  index = null;
  ref = range(first + 1, last, 1);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    sqDist = getSqSegDist(points[i], points[first], points[last]);
    if (sqDist > maxSqDist) {
      index = i;
      maxSqDist = sqDist;
    }
  }
  if (maxSqDist > sqTolerance) {
    if (index - first > 1) {
      simplifyDPStep(points, first, index, sqTolerance, simplified);
    }
    simplified.push(points[index]);
    if (last - index > 1) {
      return simplifyDPStep(points, index, last, sqTolerance, simplified);
    }
  }
};

// simplification using Ramer-Douglas-Peucker algorithm
simplifyDouglasPeucker = function(points, sqTolerance) {
  var last, simplified;
  last = points.length - 1;
  simplified = [points[0]];
  simplifyDPStep(points, 0, last, sqTolerance, simplified);
  simplified.push(points[last]);
  return simplified;
};

// both algorithms combined for awesome performance
simplify = function(points, tolerance = 1, highestQuality = false) {
  var sqTolerance;
  if (points.length <= 2) {
    return points;
  }
  sqTolerance = tolerance * tolerance;
  if (highestQuality) {
    points = simplifyRadialDist(points, sqTolerance);
  }
  return simplifyDouglasPeucker(points, sqTolerance);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxpZnkuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcc2ltcGxpZnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7QUFBQSxJQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLGNBQUEsRUFBQSxzQkFBQSxFQUFBOztBQUtBLFNBQUEsR0FBWSxRQUFBLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FBQTtBQUNYLE1BQUEsRUFBQSxFQUFBO0VBQUEsRUFBQSxHQUFLLEVBQUUsQ0FBQyxDQUFILEdBQU8sRUFBRSxDQUFDO0VBQ2YsRUFBQSxHQUFLLEVBQUUsQ0FBQyxDQUFILEdBQU8sRUFBRSxDQUFDO1NBQ2YsRUFBQSxHQUFLLEVBQUwsR0FBVSxFQUFBLEdBQUs7QUFISixFQUxaOzs7QUFXQSxZQUFBLEdBQWUsUUFBQSxDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixDQUFBO0FBRWQsTUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7RUFBQSxDQUFBLEdBQUksRUFBRSxDQUFDO0VBQ1AsQ0FBQSxHQUFJLEVBQUUsQ0FBQztFQUNQLEVBQUEsR0FBSyxFQUFFLENBQUMsQ0FBSCxHQUFPO0VBQ1osRUFBQSxHQUFLLEVBQUUsQ0FBQyxDQUFILEdBQU87RUFFWixJQUFHLEVBQUEsS0FBTSxDQUFOLElBQVcsRUFBQSxLQUFNLENBQXBCO0lBRUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQVAsQ0FBQSxHQUFZLEVBQVosR0FBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQVAsQ0FBQSxHQUFZLEVBQTlCLENBQUEsR0FBb0MsQ0FBQyxFQUFBLEdBQUssRUFBTCxHQUFVLEVBQUEsR0FBSyxFQUFoQjtJQUV4QyxJQUFHLENBQUEsR0FBSSxDQUFQO01BQ0MsQ0FBQSxHQUFJLEVBQUUsQ0FBQztNQUNQLENBQUEsR0FBSSxFQUFFLENB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QStCLFdBQS9CO0FBSlUiLCJzb3VyY2VzQ29udGVudCI6WyIjIChjKSAyMDE3LCBWbGFkaW1pciBBZ2Fmb25raW5cclxuIyBTaW1wbGlmeS5qcywgYSBoaWdoLXBlcmZvcm1hbmNlIEpTIHBvbHlsaW5lIHNpbXBsaWZpY2F0aW9uIGxpYnJhcnlcclxuIyBtb3VybmVyLmdpdGh1Yi5pby9zaW1wbGlmeS1qc1xyXG5cclxuIyBzcXVhcmUgZGlzdGFuY2UgYmV0d2VlbiAyIHBvaW50c1xyXG5nZXRTcURpc3QgPSAocDEsIHAyKSAtPlxyXG5cdGR4ID0gcDEueCAtIHAyLnhcclxuXHRkeSA9IHAxLnkgLSBwMi55XHJcblx0ZHggKiBkeCArIGR5ICogZHlcclxuXHJcbiMgc3F1YXJlIGRpc3RhbmNlIGZyb20gYSBwb2ludCB0byBhIHNlZ21lbnRcclxuZ2V0U3FTZWdEaXN0ID0gKHAsIHAxLCBwMikgLT5cclxuXHJcblx0eCA9IHAxLnhcclxuXHR5ID0gcDEueVxyXG5cdGR4ID0gcDIueCAtIHhcclxuXHRkeSA9IHAyLnkgLSB5XHJcblxyXG5cdGlmIGR4ICE9IDAgfHwgZHkgIT0gMFxyXG5cclxuXHRcdHQgPSAoKHAueCAtIHgpICogZHggKyAocC55IC0geSkgKiBkeSkgLyAoZHggKiBkeCArIGR5ICogZHkpXHJcblxyXG5cdFx0aWYgdCA+IDFcclxuXHRcdFx0eCA9IHAyLnhcclxuXHRcdFx0eSA9IHAyLnlcclxuXHRcdGVsc2UgaWYgdCA+IDBcclxuXHRcdFx0eCArPSBkeCAqIHRcclxuXHRcdFx0eSArPSBkeSAqIHRcclxuXHJcblx0ZHggPSBwLnggLSB4XHJcblx0ZHkgPSBwLnkgLSB5XHJcblxyXG5cdGR4ICogZHggKyBkeSAqIGR5XHJcblxyXG4jIHJlc3Qgb2YgdGhlIGNvZGUgZG9lc24ndCBjYXJlIGFib3V0IHBvaW50IGZvcm1hdFxyXG4jIGJhc2ljIGRpc3RhbmNlLWJhc2VkIHNpbXBsaWZpY2F0aW9uXHJcbnNpbXBsaWZ5UmFkaWFsRGlzdCA9IChwb2ludHMsIHNxVG9sZXJhbmNlKSAtPlxyXG5cclxuXHRwcmV2UG9pbnQgPSBwb2ludHNbMF1cclxuXHRuZXdQb2ludHMgPSBbcHJldlBvaW50XVxyXG5cclxuXHRmb3IgcG9pbnQgaW4gcG9pbnRzXHJcblx0XHRpZiBnZXRTcURpc3QocG9pbnQsIHByZXZQb2ludCkgPiBzcVRvbGVyYW5jZVxyXG5cdFx0XHRuZXdQb2ludHMucHVzaCBwb2ludFxyXG5cdFx0XHRwcmV2UG9pbnQgPSBwb2ludFxyXG5cclxuXHRpZiBwcmV2UG9pbnQgIT0gcG9pbnQgdGhlbiBuZXdQb2ludHMucHVzaCBwb2ludFxyXG5cdG5ld1BvaW50c1xyXG5cclxuc2ltcGxpZnlEUFN0ZXAgPSAocG9pbnRzLCBmaXJzdCwgbGFzdCwgc3FUb2xlcmFuY2UsIHNpbXBsaWZpZWQpIC0+XHJcblx0bWF4U3FEaXN0ID0gc3FUb2xlcmFuY2VcclxuXHRpbmRleCA9IG51bGxcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgZmlyc3QgKyAxLCBsYXN0LCAxXHJcblx0XHRzcURpc3QgPSBnZXRTcVNlZ0Rpc3QgcG9pbnRzW2ldLCBwb2ludHNbZmlyc3RdLCBwb2ludHNbbGFzdF1cclxuXHJcblx0XHRpZiAgc3FEaXN0ID4gbWF4U3FEaXN0XHJcblx0XHRcdGluZGV4ID0gaVxyXG5cdFx0XHRtYXhTcURpc3QgPSBzcURpc3RcclxuXHJcblx0aWYgbWF4U3FEaXN0ID4gc3FUb2xlcmFuY2VcclxuXHRcdGlmIGluZGV4IC0gZmlyc3QgPiAxIHRoZW4gc2ltcGxpZnlEUFN0ZXAgcG9pbnRzLCBmaXJzdCwgaW5kZXgsIHNxVG9sZXJhbmNlLCBzaW1wbGlmaWVkXHJcblx0XHRzaW1wbGlmaWVkLnB1c2ggcG9pbnRzW2luZGV4XVxyXG5cdFx0aWYgbGFzdCAtIGluZGV4ID4gMSB0aGVuIHNpbXBsaWZ5RFBTdGVwIHBvaW50cywgaW5kZXgsIGxhc3QsIHNxVG9sZXJhbmNlLCBzaW1wbGlmaWVkXHJcblxyXG4jIHNpbXBsaWZpY2F0aW9uIHVzaW5nIFJhbWVyLURvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG1cclxuc2ltcGxpZnlEb3VnbGFzUGV1Y2tlciA9IChwb2ludHMsIHNxVG9sZXJhbmNlKSAtPlxyXG5cdGxhc3QgPSBwb2ludHMubGVuZ3RoIC0gMVxyXG5cdHNpbXBsaWZpZWQgPSBbcG9pbnRzWzBdXVxyXG5cdHNpbXBsaWZ5RFBTdGVwIHBvaW50cywgMCwgbGFzdCwgc3FUb2xlcmFuY2UsIHNpbXBsaWZpZWRcclxuXHRzaW1wbGlmaWVkLnB1c2ggcG9pbnRzW2xhc3RdXHJcblx0c2ltcGxpZmllZFxyXG5cclxuIyBib3RoIGFsZ29yaXRobXMgY29tYmluZWQgZm9yIGF3ZXNvbWUgcGVyZm9ybWFuY2Vcclxuc2ltcGxpZnkgPSAocG9pbnRzLCB0b2xlcmFuY2U9MSwgaGlnaGVzdFF1YWxpdHk9ZmFsc2UpIC0+XHJcblx0aWYgcG9pbnRzLmxlbmd0aCA8PSAyIHRoZW4gcmV0dXJuIHBvaW50c1xyXG5cdHNxVG9sZXJhbmNlID0gdG9sZXJhbmNlICogdG9sZXJhbmNlXHJcblx0aWYgaGlnaGVzdFF1YWxpdHkgdGhlbiBwb2ludHMgPSBzaW1wbGlmeVJhZGlhbERpc3QgcG9pbnRzLCBzcVRvbGVyYW5jZVxyXG5cdHNpbXBsaWZ5RG91Z2xhc1BldWNrZXIgcG9pbnRzLCBzcVRvbGVyYW5jZVxyXG4iXX0=
//# sourceURL=C:\Lab\2019\013-CC130\coffee\simplify.coffee