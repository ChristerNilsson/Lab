// Generated by CoffeeScript 2.3.2
// Coding Challenge 130: Drawing with Fourier Transform and Epicycles
// Daniel Shiffman
// https://thecodingtrain.com/CodingChallenges/130-fourier-transform-drawing.html
// https://youtu.be/MY4luNgGfms
// https://editor.p5js.org/codingtrain/sketches/ldBlISrsQ
var draw, epiCycles, fourierX, fourierY, myround, pDistance, path, reduce, setup, simplereduce, start, time, x, y;

x = [];

y = [];

fourierX = null;

fourierY = null;

time = 0;

path = [];

start = 0;

pDistance = function(p, q, r) { // q is the point
  var A, B, C, D, dot, len_sq, param, s;
  A = q.x - p.x;
  B = q.y - p.y;
  C = r.x - p.x;
  D = r.y - p.y;
  dot = A * C + B * D;
  len_sq = C * C + D * D;
  param = len_sq === 0 ? -1 : dot / len_sq;
  if (param < 0) {
    s = p;
  } else if (param > 1) {
    s = r;
  } else {
    s = createVector(p.x + param * C, p.y + param * D);
  }
  return dist(q.x, q.y, s.x, s.y);
};

simplereduce = function(points) {
  var i, j, len, p, results;
  results = [];
  for (i = j = 0, len = points.length; j < len; i = ++j) {
    p = points[i];
    if (i % 8 === 0) {
      results.push(p);
    }
  }
  return results;
};

reduce = function(points, d) {
  var i, j, len, p, q, r, ref, res;
  res = [];
  res.push(points[0]);
  p = points[0];
  q = points[1];
  r = points[2];
  ref = range(1, points.length - 1);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (d < pDistance(p, q, r)) { // keep
      res.push(q);
      p = q;
    }
    q = r;
    r = points[i + 2];
  }
  res.push(_.last(points));
  return res;
};

myround = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

setup = function() {
  var newpoints, p;
  createCanvas(800, 600);
  newpoints = reduce(points, 0.1);
  print(newpoints);
  newpoints = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push({
        x: myround(p.x, 2),
        y: myround(p.y, 2)
      });
    }
    return results;
  })();
  print(JSON.stringify(newpoints));
  x = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push(p.x);
    }
    return results;
  })();
  y = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push(p.y);
    }
    return results;
  })();
  fourierX = dft(x);
  fourierY = dft(y);
  fourierX.sort((a, b) => {
    return b.amp - a.amp;
  });
  fourierY.sort((a, b) => {
    return b.amp - a.amp;
  });
  return start = new Date();
};

epiCycles = function(x, y, rotation, fourier) {
  var amp, freq, j, len, phase;
  for (j = 0, len = fourier.length; j < len; j++) {
    ({freq, amp, phase} = fourier[j]);
    x += amp * cos(freq * time + phase + rotation);
    y += amp * sin(freq * time + phase + rotation);
  }
  return createVector(x, y);
};

draw = function() {
  var dt, j, len, p, v, vx, vy;
  background(0);
  noFill();
  stroke(255);
  vx = epiCycles(width / 2 + 100, 100, 0, fourierX);
  vy = epiCycles(100, height / 2 + 100, HALF_PI, fourierY);
  v = createVector(vx.x, vy.y);
  path.unshift(v);
  strokeWeight(2);
  beginShape();
  for (j = 0, len = path.length; j < len; j++) {
    p = path[j];
    vertex(p.x, p.y);
  }
  //point p.x,p.y
  strokeWeight(1);
  endShape();
  dt = TWO_PI / fourierY.length;
  time += dt;
  if (time > TWO_PI) {
    noLoop();
    time = 0;
    path = [];
    print((new Date()) - start);
    return start = new Date();
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\Lab\2019\013-CC130\coffee\sketch.coffee