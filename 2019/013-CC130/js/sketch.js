// Generated by CoffeeScript 2.3.2
// Coding Challenge 130: Drawing with Fourier Transform and Epicycles
// Daniel Shiffman
// https://thecodingtrain.com/CodingChallenges/130-fourier-transform-drawing.html
// https://youtu.be/MY4luNgGfms
// https://editor.p5js.org/codingtrain/sketches/ldBlISrsQ
var draw, epiCycles, fourierX, fourierY, myround, pDistance, path, reduce, setup, start, time, x, y;

x = [];

y = [];

fourierX = null;

fourierY = null;

time = 0;

path = [];

start = 0;

pDistance = function(p, q, r) { // q is the point
  var A, B, C, D, dot, len_sq, param, s;
  A = q.x - p.x;
  B = q.y - p.y;
  C = r.x - p.x;
  D = r.y - p.y;
  dot = A * C + B * D;
  len_sq = C * C + D * D;
  param = len_sq === 0 ? -1 : dot / len_sq;
  if (param < 0) {
    s = p;
  } else if (param > 1) {
    s = r;
  } else {
    s = createVector(p.x + param * C, p.y + param * D);
  }
  return dist(q.x, q.y, s.x, s.y);
};

reduce = function(points, d) {
  var i, j, len, p, q, r, ref, res;
  res = [];
  res.push(points[0]);
  p = points[0];
  q = points[1];
  r = points[2];
  ref = range(1, points.length - 1);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (d < pDistance(p, q, r)) { // keep
      res.push(q);
      p = q;
    }
    q = r;
    r = points[i + 2];
  }
  res.push(_.last(points));
  return res;
};

myround = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

setup = function() {
  var newpoints, p;
  createCanvas(800, 600);
  newpoints = reduce(points, 0.1);
  newpoints = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push({
        x: myround(p.x, 2),
        y: myround(p.y, 2)
      });
    }
    return results;
  })();
  print(JSON.stringify(newpoints));
  x = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push(p.x);
    }
    return results;
  })();
  y = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = newpoints.length; j < len; j++) {
      p = newpoints[j];
      results.push(p.y);
    }
    return results;
  })();
  fourierX = dft(x);
  fourierY = dft(y);
  fourierX.sort((a, b) => {
    return b.amp - a.amp;
  });
  fourierY.sort((a, b) => {
    return b.amp - a.amp;
  });
  return start = new Date();
};

epiCycles = function(x, y, rotation, fourier) {
  var amp, freq, j, len, phase;
  for (j = 0, len = fourier.length; j < len; j++) {
    ({freq, amp, phase} = fourier[j]);
    x += amp * cos(freq * time + phase + rotation);
    y += amp * sin(freq * time + phase + rotation);
  }
  return createVector(x, y);
};

draw = function() {
  var dt, j, len, p, v, vx, vy;
  background(0);
  noFill();
  stroke(255);
  vx = epiCycles(width / 2 + 100, 100, 0, fourierX);
  vy = epiCycles(100, height / 2 + 100, HALF_PI, fourierY);
  v = createVector(vx.x, vy.y);
  path.unshift(v);
  strokeWeight(2);
  beginShape();
  for (j = 0, len = path.length; j < len; j++) {
    p = path[j];
    vertex(p.x, p.y);
    point(p.x, p.y);
  }
  strokeWeight(1);
  endShape();
  dt = TWO_PI / fourierY.length;
  time += dt;
  if (time > TWO_PI) {
    noLoop();
    time = 0;
    path = [];
    print((new Date()) - start);
    return start = new Date();
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztBQUFBLElBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUE7O0FBTUEsQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSTs7QUFDSixRQUFBLEdBQVc7O0FBQ1gsUUFBQSxHQUFXOztBQUNYLElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsS0FBQSxHQUFROztBQUVSLFNBQUEsR0FBWSxRQUFBLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQUEsRUFBQTtBQUNYLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBO0VBQUEsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDO0VBQ1osQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDO0VBQ1osQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDO0VBQ1osQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDO0VBQ1osR0FBQSxHQUFNLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQSxHQUFJO0VBQ2xCLE1BQUEsR0FBUyxDQUFBLEdBQUksQ0FBSixHQUFRLENBQUEsR0FBSTtFQUNyQixLQUFBLEdBQVcsTUFBQSxLQUFVLENBQWIsR0FBb0IsQ0FBQyxDQUFyQixHQUE0QixHQUFBLEdBQU07RUFDMUMsSUFBRyxLQUFBLEdBQVEsQ0FBWDtJQUFrQixDQUFBLEdBQUksRUFBdEI7R0FBQSxNQUNLLElBQUcsS0FBQSxHQUFRLENBQVg7SUFBa0IsQ0FBQSxHQUFJLEVBQXRCO0dBQUEsTUFBQTtJQUNBLENBQUEsR0FBSSxZQUFBLENBQWEsQ0FBQyxDQUFDLENBQUYsR0FBTSxLQUFBLEdBQVEsQ0FBM0IsRUFBOEIsQ0FBQyxDQUFDLENBQUYsR0FBTSxLQUFBLEdBQVEsQ0FBNUMsRUFESjs7U0FFTCxJQUFBLENBQUssQ0FBQyxDQUFDLENBQVAsRUFBUyxDQUFDLENBQUMsQ0FBWCxFQUFhLENBQUMsQ0FBQyxDQUFmLEVBQWlCLENBQUMsQ0FBQyxDQUFuQjtBQVhXOztBQWFaLE1BQUEsR0FBUyxRQUFBLENBQUMsTUFBRCxFQUFRLENBQVIsQ0FBQTtBQUNSLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUEsR0FBQSxHQUFNO0VBQ04sR0FBRyxDQUFDLElBQUosQ0FBUyxNQUFPLENBQUEsQ0FBQSxDQUFoQjtFQUVBLENBQUEsR0FBSSxNQUFPLENBQUEsQ0FBQTtFQUNYLENBQUEsR0FBSSxNQUFPLENBQUEsQ0FBQTtFQUNYLENBQUEsR0FBSSxNQUFPLENBQUEsQ0FBQTtBQUNYO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFHLENBQUEsR0FBSSxTQUFBLENBQVUsQ0FBVixFQUFZLENBQVosRUFBYyxDQUFkLENBQVA7TUFDQyxHQUFHLENBQUMsSUFBSixDQUFTLENBQVQ7TUFDQSxDQUFBLEdBQUksRUFGTDs7SUFHQSxDQUFBLEdBQUk7SUFDSixDQUFBLEdBQUksTUFBTyxDQUFBLENBQUEsR0FBRSxDQUFGO0VBTFo7RUFPQSxHQUFHLENBQUMsSUFBSixDQUFTLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBUCxDQUFUO1NBQ0E7QUFmUTs7QUFpQlQsT0FBQSxHQUFVLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO1NBQVMsS0FBQSxDQUFNLENBQUEsR0FBRSxFQUFBLElBQUksQ0FBWixDQUFBLEdBQWUsRUFBQSxJQUFJO0FBQTVCOztBQUVWLEtBQUEsR0FBUSxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsU0FBQSxFQUFBO0VBQUEsWUFBQSxDQUFhLEdBQWIsRUFBa0IsR0FBbEI7RUFDQSxTQUFBLEdBQVksTUFBQSxDQUFPLE1BQVAsRUFBZSxHQUFmO0VBQ1osU0FBQTs7QUFBa0Q7SUFBQSxLQUFBLDJDQUFBOzttQkFBckM7UUFBQyxDQUFBLEVBQUUsT0FBQSxDQUFRLENBQUMsQ0FBQyxDQUFWLEVBQVksQ0FBWixDQUFIO1FBQW1CLENBQUEsRUFBRSxPQUFBLENBQVEsQ0FBQyxDQUFDLENBQVYsRUFBWSxDQUFaO01BQXJCO0lBQXFDLENBQUE7OztFQUNsRCxLQUFBLENBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxTQUFmLENBQU47RUFFQSxDQUFBOztBQUFTO0lBQUEsS0FBQSwyQ0FBQTs7bUJBQUosQ0FBQyxDQUFDO0lBQUUsQ0FBQTs7O0VBQ1QsQ0FBQTs7QUFBUztJQUFBLEtBQUEsMkNBQUE7O21CQUFKLENBQUMsQ0FBQztJQUFFLENBQUE7OztFQUVULFFBQUEsR0FBVyxHQUFBLENBQUksQ0FBSjtFQUNYLFFBQUEsR0FBVyxHQUFBLENBQUksQ0FBSjtFQUVYLFFBQVEsQ0FBQyxJQUFULENBQWMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFBLEdBQUE7V0FBVSxDQUFDLENBQUMsR0FBRixHQUFRLENBQUMsQ0FBQztFQUFwQixDQUFkO0VBQ0EsUUFBUSxDQUFDLElBQVQsQ0FBYyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUEsR0FBQTtXQUFVLENBQUMsQ0FBQyxHQUFGLEdBQVEsQ0FBQyxDQUFDO0VBQXBCLENBQWQ7U0FFQSxLQUFBLEdBQVEsSUFBSSxJQUFKLENBQUE7QUFmRDs7QUFpQlIsU0FBQSxHQUFZLFFBQUEsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVAsRUFBaUIsT0FBakIsQ0FBQTtBQUNYLE1BQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUEsS0FBQSx5Q0FBQTtLQUFJLENBQUMsSUFBRCxFQUFNLEdBQU4sRUFBVSxLQUFWO0lBQ0gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxHQUFBLENBQUksSUFBQSxHQUFPLElBQVAsR0FBYyxLQUFkLEdBQXNCLFFBQTFCO0lBQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxHQUFBLENBQUksSUFBQSxHQUFPLElBQVAsR0FBYyxLQUFkLEdBQXNCLFFBQTFCO0VBRlo7U0FHQSxZQUFBLENBQWEsQ0FBYixFQUFnQixDQUFoQjtBQUpXOztBQU1aLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNOLE1BQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQSxVQUFBLENBQVcsQ0FBWDtFQUNBLE1BQUEsQ0FBQTtFQUNBLE1BQUEsQ0FBTyxHQUFQO0VBRUEsRUFBQSxHQUFLLFNBQUEsQ0FBVSxLQUFBLEdBQVEsQ0FBUixHQUFZLEdBQXRCLEVBQTJCLEdBQTNCLEVBQWdDLENBQWhDLEVBQW1DLFFBQW5DO0VBQ0wsRUFBQSxHQUFLLFNBQUEsQ0FBVSxHQUFWLEVBQWUsTUFBQSxHQUFTLENBQVQsR0FBYSxHQUE1QixFQUFpQyxPQUFqQyxFQUEwQyxRQUExQztFQUNMLENBQUEsR0FBSSxZQUFBLENBQWEsRUFBRSxDQUFDLENBQWhCLEVBQW1CLEVBQUUsQ0FBQyxDQUF0QjtFQUNKLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FBYjtFQUVBLFlBQUEsQ0FBYSxDQUFiO0VBQ0EsVUFBQSxDQUFBO0VBQ0EsS0FBQSxzQ0FBQTs7SUFDQyxNQUFBLENBQU8sQ0FBQyxDQUFDLENBQVQsRUFBWSxDQUFDLENBQUMsQ0FBZDtJQUNBLEtBQUEsQ0FBTSxDQUFDLENBQUMsQ0FBUixFQUFVLENBQUMsQ0FBQyxDQUFaO0VBRkQ7RUFHQSxZQUFBLENBQWEsQ0FBYjtFQUNBLFFBQUEsQ0FBQTtFQUVBLEVBQUEsR0FBSyxNQUFBLEdBQVMsUUFBUSxDQUFDO0VBQ3ZCLElBQUEsSUFBUTtFQUVSLElBQUcsSUFBQSxHQUFPLE1BQVY7SUFDQyxNQUFBLENBQUE7SUFDQSxJQUFBLEdBQU87SUFDUCxJQUFBLEdBQU87SUFDUCxLQUFBLENBQU0sQ0FBQyxJQUFJLElBQUosQ0FBQSxDQUFELENBQUEsR0FBZSxLQUFyQjtXQUNBLEtBQUEsR0FBUSxJQUFJLElBQUosQ0FBQSxFQUxUOztBQXJCTSIsInNvdXJjZXNDb250ZW50IjpbIiMgQ29kaW5nIENoYWxsZW5nZSAxMzA6IERyYXdpbmcgd2l0aCBGb3VyaWVyIFRyYW5zZm9ybSBhbmQgRXBpY3ljbGVzXG4jIERhbmllbCBTaGlmZm1hblxuIyBodHRwczovL3RoZWNvZGluZ3RyYWluLmNvbS9Db2RpbmdDaGFsbGVuZ2VzLzEzMC1mb3VyaWVyLXRyYW5zZm9ybS1kcmF3aW5nLmh0bWxcbiMgaHR0cHM6Ly95b3V0dS5iZS9NWTRsdU5nR2Ztc1xuIyBodHRwczovL2VkaXRvci5wNWpzLm9yZy9jb2Rpbmd0cmFpbi9za2V0Y2hlcy9sZEJsSVNyc1FcblxueCA9IFtdXG55ID0gW11cbmZvdXJpZXJYID0gbnVsbFxuZm91cmllclkgPSBudWxsXG50aW1lID0gMFxucGF0aCA9IFtdXG5zdGFydCA9IDBcblxucERpc3RhbmNlID0gKHAscSxyKSAtPiAjIHEgaXMgdGhlIHBvaW50XG5cdEEgPSBxLnggLSBwLnhcblx0QiA9IHEueSAtIHAueVxuXHRDID0gci54IC0gcC54XG5cdEQgPSByLnkgLSBwLnlcblx0ZG90ID0gQSAqIEMgKyBCICogRFxuXHRsZW5fc3EgPSBDICogQyArIEQgKiBEXG5cdHBhcmFtID0gaWYgbGVuX3NxID09IDAgdGhlbiAtMSBlbHNlIGRvdCAvIGxlbl9zcVxuXHRpZiBwYXJhbSA8IDAgdGhlbiBzID0gcFxuXHRlbHNlIGlmIHBhcmFtID4gMSB0aGVuIHMgPSByXG5cdGVsc2UgcyA9IGNyZWF0ZVZlY3RvciBwLnggKyBwYXJhbSAqIEMsIHAueSArIHBhcmFtICogRFxuXHRkaXN0IHEueCxxLnkscy54LHMueVxuXG5yZWR1Y2UgPSAocG9pbnRzLGQpIC0+XG5cdHJlcyA9IFtdXG5cdHJlcy5wdXNoIHBvaW50c1swXSBcblxuXHRwID0gcG9pbnRzWzBdXG5cdHEgPSBwb2ludHNbMV1cblx0ciA9IHBvaW50c1syXVxuXHRmb3IgaSBpbiByYW5nZSAxLHBvaW50cy5sZW5ndGgtMVxuXHRcdGlmIGQgPCBwRGlzdGFuY2UgcCxxLHIgIyBrZWVwXG5cdFx0XHRyZXMucHVzaCBxXG5cdFx0XHRwID0gcVxuXHRcdHEgPSByXG5cdFx0ciA9IHBvaW50c1tpKzJdXHRcdFx0XG5cblx0cmVzLnB1c2ggXy5sYXN0IHBvaW50c1xuXHRyZXNcblxubXlyb3VuZCA9ICh4LG4pIC0+IHJvdW5kKHgqMTAqKm4pLzEwKipuXG5cbnNldHVwID0gKCkgLT5cblx0Y3JlYXRlQ2FudmFzIDgwMCwgNjAwXG5cdG5ld3BvaW50cyA9IHJlZHVjZSBwb2ludHMsIDAuMVxuXHRuZXdwb2ludHMgPSAoe3g6bXlyb3VuZChwLngsMiksIHk6bXlyb3VuZChwLnksMil9IGZvciBwIGluIG5ld3BvaW50cylcblx0cHJpbnQgSlNPTi5zdHJpbmdpZnkgbmV3cG9pbnRzXG5cblx0eCA9IChwLnggZm9yIHAgaW4gbmV3cG9pbnRzKVxuXHR5ID0gKHAueSBmb3IgcCBpbiBuZXdwb2ludHMpXG5cdFxuXHRmb3VyaWVyWCA9IGRmdCB4XG5cdGZvdXJpZXJZID0gZGZ0IHlcblxuXHRmb3VyaWVyWC5zb3J0IChhLCBiKSA9PiBiLmFtcCAtIGEuYW1wXG5cdGZvdXJpZXJZLnNvcnQgKGEsIGIpID0+IGIuYW1wIC0gYS5hbXBcblxuXHRzdGFydCA9IG5ldyBEYXRlKClcblxuZXBpQ3ljbGVzID0gKHgsIHksIHJvdGF0aW9uLCBmb3VyaWVyKSAtPlxuXHRmb3Ige2ZyZXEsYW1wLHBoYXNlfSBpbiBmb3VyaWVyXG5cdFx0eCArPSBhbXAgKiBjb3MgZnJlcSAqIHRpbWUgKyBwaGFzZSArIHJvdGF0aW9uXG5cdFx0eSArPSBhbXAgKiBzaW4gZnJlcSAqIHRpbWUgKyBwaGFzZSArIHJvdGF0aW9uXG5cdGNyZWF0ZVZlY3RvciB4LCB5XG5cbmRyYXcgPSAtPlxuXHRiYWNrZ3JvdW5kIDBcblx0bm9GaWxsKClcblx0c3Ryb2tlIDI1NVxuXG5cdHZ4ID0gZXBpQ3ljbGVzIHdpZHRoIC8gMiArIDEwMCwgMTAwLCAwLCBmb3VyaWVyWFxuXHR2eSA9IGVwaUN5Y2xlcyAxMDAsIGhlaWdodCAvIDIgKyAxMDAsIEhBTEZfUEksIGZvdXJpZXJZXG5cdHYgPSBjcmVhdGVWZWN0b3IgdngueCwgdnkueVxuXHRwYXRoLnVuc2hpZnQgdlxuXG5cdHN0cm9rZVdlaWdodCAyXG5cdGJlZ2luU2hhcGUoKVxuXHRmb3IgcCBpbiBwYXRoXG5cdFx0dmVydGV4IHAueCwgcC55XG5cdFx0cG9pbnQgcC54LHAueVxuXHRzdHJva2VXZWlnaHQgMVx0XHRcblx0ZW5kU2hhcGUoKVxuXG5cdGR0ID0gVFdPX1BJIC8gZm91cmllclkubGVuZ3RoXG5cdHRpbWUgKz0gZHRcblxuXHRpZiB0aW1lID4gVFdPX1BJXG5cdFx0bm9Mb29wKClcblx0XHR0aW1lID0gMFxuXHRcdHBhdGggPSBbXVxuXHRcdHByaW50IChuZXcgRGF0ZSgpKSAtIHN0YXJ0XG5cdFx0c3RhcnQgPSBuZXcgRGF0ZSgpIFxuIl19
//# sourceURL=C:\Lab\2019\013-CC130\coffee\sketch.coffee