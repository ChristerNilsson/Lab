// Generated by CoffeeScript 2.3.2
var Node, Parallel, Resistor, Serial, build, clock, nd, setup;

clock = Date.now;

nd = function(num, w, decs) {
  return num.toFixed(decs).padStart(w);
};

Node = class Node {
  constructor(kind) {
    this.kind = kind;
  }

  current() {
    return this.voltage / this.resistance;
  }

  effect() {
    return this.current() * this.voltage;
  }

  report(level = "") {
    return print(`${nd(this.resistance, 8, 3)} ${nd(this.voltage, 8, 3)} ${nd(this.current(), 8, 3)} ${nd(this.effect(), 8, 3)} ${level}${this.kind}`);
  }

};

Resistor = class Resistor extends Node {
  constructor(resistance) {
    super('r');
    this.resistance = resistance;
  }

  evalR() {
    return this.resistance;
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
  }

  report(level = "") {
    return super.report(level);
  }

};

Serial = class Serial extends Node {
  constructor(a, b) {
    super('s');
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = this.a.evalR() + this.b.evalR();
  }

  setVoltage(voltage1) {
    var ra, rb;
    this.voltage = voltage1;
    ra = this.a.resistance;
    rb = this.b.resistance;
    this.a.setVoltage(ra / (ra + rb) * this.voltage);
    return this.b.setVoltage(rb / (ra + rb) * this.voltage);
  }

  report(level = "") {
    super.report(level);
    this.a.report(level + "| ");
    return this.b.report(level + "| ");
  }

};

Parallel = class Parallel extends Node {
  constructor(a, b) {
    super('p');
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = 1 / (1 / this.a.evalR() + 1 / this.b.evalR());
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
    this.a.setVoltage(this.voltage);
    return this.b.setVoltage(this.voltage);
  }

  report(level = "") {
    super.report(level);
    this.a.report(level + "| ");
    return this.b.report(level + "| ");
  }

};

build = function(voltage, s) {
  var j, len, node, ref, stack, word;
  stack = [];
  ref = s.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    if (word === "s") {
      stack.push(new Serial(stack.pop(), stack.pop()));
    } else if (word === "p") {
      stack.push(new Parallel(stack.pop(), stack.pop()));
    } else {
      stack.push(new Resistor(parseFloat(word)));
    }
  }
  node = stack.pop();
  node.evalR();
  node.setVoltage(voltage);
  return node;
};

//let node = build(12.0, "8")
//let node = build(12.0, "8 10 s")
//let node = build(12.0, "3 12 p")
//let node = build(12.0, "8 4 s 12 p 6 s")
setup = function() {
  var i, j, len, node, ref, start;
  start = clock();
  ref = range(1000000);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    node = build(18.0, "10 2 s 6 p 8 s 6 p 4 s 8 p 4 s 8 p 6 s");
  }
  print(clock() - start);
  print("     Ohm     Volt   Ampere     Watt Network tree");
  return node.report();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsYy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxjYWxjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLElBQUksQ0FBQzs7QUFFYixFQUFBLEdBQUssUUFBQSxDQUFDLEdBQUQsRUFBSyxDQUFMLEVBQU8sSUFBUCxDQUFBO1NBQWdCLEdBQUcsQ0FBQyxPQUFKLENBQVksSUFBWixDQUFpQixDQUFDLFFBQWxCLENBQTJCLENBQTNCO0FBQWhCOztBQUVDLE9BQU4sTUFBQSxLQUFBO0VBQ0MsV0FBYyxLQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7RUFBRjs7RUFDZCxPQUFVLENBQUEsQ0FBQTtXQUFHLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBO0VBQWY7O0VBQ1YsTUFBUyxDQUFBLENBQUE7V0FBRyxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUEsR0FBYSxJQUFDLENBQUE7RUFBakI7O0VBQ1QsTUFBUyxDQUFDLFFBQVEsRUFBVCxDQUFBO1dBQ1IsS0FBQSxDQUFNLENBQUEsQ0FBQSxDQUFHLEVBQUEsQ0FBRyxJQUFDLENBQUEsVUFBSixFQUFlLENBQWYsRUFBaUIsQ0FBakIsQ0FBSCxFQUFBLENBQUEsQ0FBeUIsRUFBQSxDQUFHLElBQUMsQ0FBQSxPQUFKLEVBQVksQ0FBWixFQUFjLENBQWQsQ0FBekIsRUFBQSxDQUFBLENBQTRDLEVBQUEsQ0FBRyxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUgsRUFBYyxDQUFkLEVBQWdCLENBQWhCLENBQTVDLEVBQUEsQ0FBQSxDQUFpRSxFQUFBLENBQUcsSUFBQyxDQUFBLE1BQUQsQ0FBQSxDQUFILEVBQWEsQ0FBYixFQUFlLENBQWYsQ0FBakUsRUFBQSxDQUFBLENBQXFGLEtBQXJGLENBQUEsQ0FBQSxDQUE2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LEVBQXBCO0tBQUEsTUFDSyxJQUFHLElBQUEsS0FBUSxHQUFYO01BQW9CLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxRQUFKLENBQWEsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFiLEVBQTBCLEtBQUssQ0FBQyxHQUFOLENBQUEsQ0FBMUIsQ0FBWCxFQUFwQjtLQUFBLE1BQUE7TUFDQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksUUFBSixDQUFhLFVBQUEsQ0FBVyxJQUFYLENBQWIsQ0FBWCxFQURBOztFQUZOO0VBSUEsSUFBQSxHQUFPLEtBQUssQ0FBQyxHQUFOLENBQUE7RUFDUCxJQUFJLENBQUMsS0FBTCxDQUFBO0VBQ0EsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsT0FBaEI7U0FDQTtBQVRPLEVBekNSOzs7Ozs7QUF5REEsS0FBQSxHQUFRLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUEsS0FBQSxHQUFRLEtBQUEsQ0FBQTtBQUNSO0VBQUEsS0FBQSxxQ0FBQTs7SUFDQyxJQUFBLEdBQU8sS0FBQSxDQUFNLElBQU4sRUFBWSx3Q0FBWjtFQURSO0VBRUEsS0FBQSxDQUFNLEtBQUEsQ0FBQSxDQUFBLEdBQVEsS0FBZDtFQUVBLEtBQUEsQ0FBTSxrREFBTjtTQUNBLElBQUksQ0FBQyxNQUFMLENBQUE7QUFQTyIsInNvdXJjZXNDb250ZW50IjpbImNsb2NrID0gRGF0ZS5ub3dcclxuXHJcbm5kID0gKG51bSx3LGRlY3MpIC0+IG51bS50b0ZpeGVkKGRlY3MpLnBhZFN0YXJ0IHdcclxuXHJcbmNsYXNzIE5vZGVcclxuXHRjb25zdHJ1Y3RvciA6IChAa2luZCkgLT5cclxuXHRjdXJyZW50IDogLT4gQHZvbHRhZ2UgLyBAcmVzaXN0YW5jZVxyXG5cdGVmZmVjdCA6IC0+IEBjdXJyZW50KCkgKiBAdm9sdGFnZVxyXG5cdHJlcG9ydCA6IChsZXZlbCA9IFwiXCIpIC0+XHJcblx0XHRwcmludCBcIiN7bmQgQHJlc2lzdGFuY2UsOCwzfSAje25kIEB2b2x0YWdlLDgsM30gI3tuZCBAY3VycmVudCgpLDgsM30gI3tuZCBAZWZmZWN0KCksOCwzfSAje2xldmVsfSN7QGtpbmR9XCJcclxuXHJcbmNsYXNzIFJlc2lzdG9yIGV4dGVuZHMgTm9kZVxyXG5cdGNvbnN0cnVjdG9yIDogKEByZXNpc3RhbmNlKSAtPiBzdXBlciAncidcclxuXHRldmFsUiA6IC0+IEByZXNpc3RhbmNlXHJcblx0c2V0Vm9sdGFnZSA6IChAdm9sdGFnZSkgLT5cclxuXHRyZXBvcnQgOiAobGV2ZWw9XCJcIikgLT4gc3VwZXIgbGV2ZWxcclxuXHJcbmNsYXNzIFNlcmlhbCBleHRlbmRzIE5vZGVcclxuXHRjb25zdHJ1Y3RvciA6IChAYSxAYikgLT4gc3VwZXIgJ3MnXHJcblx0ZXZhbFIgOiAtPiBAcmVzaXN0YW5jZSA9IEBhLmV2YWxSKCkgKyBAYi5ldmFsUigpXHJcblx0c2V0Vm9sdGFnZSA6IChAdm9sdGFnZSkgLT5cclxuXHRcdHJhID0gQGEucmVzaXN0YW5jZVxyXG5cdFx0cmIgPSBAYi5yZXNpc3RhbmNlXHJcblx0XHRAYS5zZXRWb2x0YWdlIHJhLyhyYStyYikgKiBAdm9sdGFnZVxyXG5cdFx0QGIuc2V0Vm9sdGFnZSByYi8ocmErcmIpICogQHZvbHRhZ2VcclxuXHRyZXBvcnQgOiAobGV2ZWw9XCJcIikgLT5cclxuXHRcdHN1cGVyIGxldmVsXHJcblx0XHRAYS5yZXBvcnQgbGV2ZWwgKyBcInwgXCJcclxuXHRcdEBiLnJlcG9ydCBsZXZlbCArIFwifCBcIlxyXG5cclxuY2xhc3MgUGFyYWxsZWwgZXh0ZW5kcyBOb2RlXHJcblx0Y29uc3RydWN0b3IgOiAoQGEsQGIpIC0+IHN1cGVyICdwJ1xyXG5cdGV2YWxSIDogLT4gQHJlc2lzdGFuY2UgPSAxIC8gKDEgLyBAYS5ldmFsUigpICsgMSAvIEBiLmV2YWxSKCkpXHJcblx0c2V0Vm9sdGFnZSA6IChAdm9sdGFnZSkgLT5cclxuXHRcdEBhLnNldFZvbHRhZ2UgQHZvbHRhZ2VcclxuXHRcdEBiLnNldFZvbHRhZ2UgQHZvbHRhZ2VcclxuXHRyZXBvcnQgOiAobGV2ZWw9XCJcIikgLT5cclxuXHRcdHN1cGVyIGxldmVsXHJcblx0XHRAYS5yZXBvcnQgbGV2ZWwgKyBcInwgXCJcclxuXHRcdEBiLnJlcG9ydCBsZXZlbCArIFwifCBcIlxyXG5cclxuYnVpbGQgPSAodm9sdGFnZSwgcykgLT5cclxuXHRzdGFjayA9IFtdXHJcblx0Zm9yIHdvcmQgaW4gcy5zcGxpdCAnICdcclxuXHRcdGlmIHdvcmQgPT0gXCJzXCIgdGhlbiBzdGFjay5wdXNoIG5ldyBTZXJpYWwgc3RhY2sucG9wKCksIHN0YWNrLnBvcCgpXHJcblx0XHRlbHNlIGlmIHdvcmQgPT0gXCJwXCIgdGhlbiBzdGFjay5wdXNoIG5ldyBQYXJhbGxlbCBzdGFjay5wb3AoKSwgc3RhY2sucG9wKClcclxuXHRcdGVsc2Ugc3RhY2sucHVzaCBuZXcgUmVzaXN0b3IgcGFyc2VGbG9hdCB3b3JkXHJcblx0bm9kZSA9IHN0YWNrLnBvcCgpXHJcblx0bm9kZS5ldmFsUigpXHJcblx0bm9kZS5zZXRWb2x0YWdlIHZvbHRhZ2VcclxuXHRub2RlXHJcblxyXG4jbGV0IG5vZGUgPSBidWlsZCgxMi4wLCBcIjhcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCI4IDEwIHNcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCIzIDEyIHBcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCI4IDQgcyAxMiBwIDYgc1wiKVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdHN0YXJ0ID0gY2xvY2soKVxyXG5cdGZvciBpIGluIHJhbmdlIDEwMDAwMDBcclxuXHRcdG5vZGUgPSBidWlsZCAxOC4wLCBcIjEwIDIgcyA2IHAgOCBzIDYgcCA0IHMgOCBwIDQgcyA4IHAgNiBzXCJcclxuXHRwcmludCBjbG9jaygpLXN0YXJ0XHJcblxyXG5cdHByaW50IFwiICAgICBPaG0gICAgIFZvbHQgICBBbXBlcmUgICAgIFdhdHQgTmV0d29yayB0cmVlXCJcclxuXHRub2RlLnJlcG9ydCgpXHJcbiJdfQ==
//# sourceURL=C:\Lab\2019\026-ResistanceCalculatorNim\coffee\calc.coffee