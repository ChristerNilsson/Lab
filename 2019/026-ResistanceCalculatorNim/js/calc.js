// Generated by CoffeeScript 2.3.2
var Node, Parallel, Resistor, Serial, build, clock, nd, setup;

clock = Date.now;

nd = function(num, w, decs) {
  return num.toFixed(decs).padStart(w);
};

Node = class Node {
  constructor(kind) {
    this.kind = kind;
  }

  current() {
    return this.voltage / this.resistance;
  }

  effect() {
    return this.current() * this.voltage;
  }

  report(level = "") {
    return print(`${nd(this.resistance, 8, 3)} ${nd(this.voltage, 8, 3)} ${nd(this.current(), 8, 3)} ${nd(this.effect(), 8, 3)} ${level}${this.kind}`);
  }

};

Resistor = class Resistor extends Node {
  constructor(resistance) {
    super('r');
    this.resistance = resistance;
  }

  evalR() {
    return this.resistance;
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
  }

  report(level = "") {
    return super.report(level);
  }

};

Serial = class Serial extends Node {
  constructor(a, b) {
    super('s');
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = this.a.evalR() + this.b.evalR();
  }

  setVoltage(voltage1) {
    var ra, rb;
    this.voltage = voltage1;
    ra = this.a.resistance;
    rb = this.b.resistance;
    this.a.setVoltage(ra / (ra + rb) * this.voltage);
    return this.b.setVoltage(rb / (ra + rb) * this.voltage);
  }

  report(level = "") {
    super.report(level);
    this.a.report(level + "| ");
    return this.b.report(level + "| ");
  }

};

Parallel = class Parallel extends Node {
  constructor(a, b) {
    super('p');
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = 1 / (1 / this.a.evalR() + 1 / this.b.evalR());
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
    this.a.setVoltage(this.voltage);
    return this.b.setVoltage(this.voltage);
  }

  report(level = "") {
    super.report(level);
    this.a.report(level + "| ");
    return this.b.report(level + "| ");
  }

};

build = function(voltage, s) {
  var i, len, node, ref, stack, word;
  stack = [];
  ref = s.split(' ');
  for (i = 0, len = ref.length; i < len; i++) {
    word = ref[i];
    if (word === "s") {
      stack.push(new Serial(stack.pop(), stack.pop()));
    } else if (word === "p") {
      stack.push(new Parallel(stack.pop(), stack.pop()));
    } else {
      stack.push(new Resistor(parseFloat(word)));
    }
  }
  node = stack.pop();
  node.evalR();
  node.setVoltage(voltage);
  return node;
};

//let node = build(12.0, "8")
//let node = build(12.0, "8 10 s")
//let node = build(12.0, "3 12 p")
//let node = build(12.0, "8 4 s 12 p 6 s")
setup = function() {
  var node, start;
  start = clock();
  //for i in range 1000000
  node = build(18.0, "10 2 s 6 p 8 s 6 p 4 s 8 p 4 s 8 p 6 s");
  print(clock() - start);
  print("     Ohm     Volt   Ampere     Watt Network tree");
  return node.report();
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsYy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxjYWxjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFRLElBQUksQ0FBQzs7QUFFYixFQUFBLEdBQUssUUFBQSxDQUFDLEdBQUQsRUFBSyxDQUFMLEVBQU8sSUFBUCxDQUFBO1NBQWdCLEdBQUcsQ0FBQyxPQUFKLENBQVksSUFBWixDQUFpQixDQUFDLFFBQWxCLENBQTJCLENBQTNCO0FBQWhCOztBQUVDLE9BQU4sTUFBQSxLQUFBO0VBQ0MsV0FBYyxLQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7RUFBRjs7RUFDZCxPQUFVLENBQUEsQ0FBQTtXQUFHLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBO0VBQWY7O0VBQ1YsTUFBUyxDQUFBLENBQUE7V0FBRyxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUEsR0FBYSxJQUFDLENBQUE7RUFBakI7O0VBQ1QsTUFBUyxDQUFDLFFBQVEsRUFBVCxDQUFBO1dBQ1IsS0FBQSxDQUFNLENBQUEsQ0FBQSxDQUFHLEVBQUEsQ0FBRyxJQUFDLENBQUEsVUFBSixFQUFlLENBQWYsRUFBaUIsQ0FBakIsQ0FBSCxFQUFBLENBQUEsQ0FBeUIsRUFBQSxDQUFHLElBQUMsQ0FBQSxPQUFKLEVBQVksQ0FBWixFQUFjLENBQWQsQ0FBekIsRUFBQSxDQUFBLENBQTRDLEVBQUEsQ0FBRyxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUgsRUFBYyxDQUFkLEVBQWdCLENBQWhCLENBQTVDLEVBQUEsQ0FBQSxDQUFpRSxFQUFBLENBQUcsSUFBQyxDQUFBLE1BQUQsQ0FBQSxDQUFILEVBQWEsQ0FBYixFQUFlLENBQWYsQ0FBakUsRUFBQSxDQUFBLENBQXFGLEtBQXJGLENBQUEsQ0FBQSxDQUE2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LEVBQXBCO0tBQUEsTUFDSyxJQUFHLElBQUEsS0FBUSxHQUFYO01BQW9CLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxRQUFKLENBQWEsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFiLEVBQTBCLEtBQUssQ0FBQyxHQUFOLENBQUEsQ0FBMUIsQ0FBWCxFQUFwQjtLQUFBLE1BQUE7TUFDQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksUUFBSixDQUFhLFVBQUEsQ0FBVyxJQUFYLENBQWIsQ0FBWCxFQURBOztFQUZOO0VBSUEsSUFBQSxHQUFPLEtBQUssQ0FBQyxHQUFOLENBQUE7RUFDUCxJQUFJLENBQUMsS0FBTCxDQUFBO0VBQ0EsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsT0FBaEI7U0FDQTtBQVRPLEVBekNSOzs7Ozs7QUF5REEsS0FBQSxHQUFRLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxJQUFBLEVBQUE7RUFBQSxLQUFBLEdBQVEsS0FBQSxDQUFBLEVBQVI7O0VBRUEsSUFBQSxHQUFPLEtBQUEsQ0FBTSxJQUFOLEVBQVksd0NBQVo7RUFDUCxLQUFBLENBQU0sS0FBQSxDQUFBLENBQUEsR0FBUSxLQUFkO0VBRUEsS0FBQSxDQUFNLGtEQUFOO1NBQ0EsSUFBSSxDQUFDLE1BQUwsQ0FBQTtBQVBPIiwic291cmNlc0NvbnRlbnQiOlsiY2xvY2sgPSBEYXRlLm5vd1xyXG5cclxubmQgPSAobnVtLHcsZGVjcykgLT4gbnVtLnRvRml4ZWQoZGVjcykucGFkU3RhcnQgd1xyXG5cclxuY2xhc3MgTm9kZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBraW5kKSAtPlxyXG5cdGN1cnJlbnQgOiAtPiBAdm9sdGFnZSAvIEByZXNpc3RhbmNlXHJcblx0ZWZmZWN0IDogLT4gQGN1cnJlbnQoKSAqIEB2b2x0YWdlXHJcblx0cmVwb3J0IDogKGxldmVsID0gXCJcIikgLT5cclxuXHRcdHByaW50IFwiI3tuZCBAcmVzaXN0YW5jZSw4LDN9ICN7bmQgQHZvbHRhZ2UsOCwzfSAje25kIEBjdXJyZW50KCksOCwzfSAje25kIEBlZmZlY3QoKSw4LDN9ICN7bGV2ZWx9I3tAa2luZH1cIlxyXG5cclxuY2xhc3MgUmVzaXN0b3IgZXh0ZW5kcyBOb2RlXHJcblx0Y29uc3RydWN0b3IgOiAoQHJlc2lzdGFuY2UpIC0+IHN1cGVyICdyJ1xyXG5cdGV2YWxSIDogLT4gQHJlc2lzdGFuY2VcclxuXHRzZXRWb2x0YWdlIDogKEB2b2x0YWdlKSAtPlxyXG5cdHJlcG9ydCA6IChsZXZlbD1cIlwiKSAtPiBzdXBlciBsZXZlbFxyXG5cclxuY2xhc3MgU2VyaWFsIGV4dGVuZHMgTm9kZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBhLEBiKSAtPiBzdXBlciAncydcclxuXHRldmFsUiA6IC0+IEByZXNpc3RhbmNlID0gQGEuZXZhbFIoKSArIEBiLmV2YWxSKClcclxuXHRzZXRWb2x0YWdlIDogKEB2b2x0YWdlKSAtPlxyXG5cdFx0cmEgPSBAYS5yZXNpc3RhbmNlXHJcblx0XHRyYiA9IEBiLnJlc2lzdGFuY2VcclxuXHRcdEBhLnNldFZvbHRhZ2UgcmEvKHJhK3JiKSAqIEB2b2x0YWdlXHJcblx0XHRAYi5zZXRWb2x0YWdlIHJiLyhyYStyYikgKiBAdm9sdGFnZVxyXG5cdHJlcG9ydCA6IChsZXZlbD1cIlwiKSAtPlxyXG5cdFx0c3VwZXIgbGV2ZWxcclxuXHRcdEBhLnJlcG9ydCBsZXZlbCArIFwifCBcIlxyXG5cdFx0QGIucmVwb3J0IGxldmVsICsgXCJ8IFwiXHJcblxyXG5jbGFzcyBQYXJhbGxlbCBleHRlbmRzIE5vZGVcclxuXHRjb25zdHJ1Y3RvciA6IChAYSxAYikgLT4gc3VwZXIgJ3AnXHJcblx0ZXZhbFIgOiAtPiBAcmVzaXN0YW5jZSA9IDEgLyAoMSAvIEBhLmV2YWxSKCkgKyAxIC8gQGIuZXZhbFIoKSlcclxuXHRzZXRWb2x0YWdlIDogKEB2b2x0YWdlKSAtPlxyXG5cdFx0QGEuc2V0Vm9sdGFnZSBAdm9sdGFnZVxyXG5cdFx0QGIuc2V0Vm9sdGFnZSBAdm9sdGFnZVxyXG5cdHJlcG9ydCA6IChsZXZlbD1cIlwiKSAtPlxyXG5cdFx0c3VwZXIgbGV2ZWxcclxuXHRcdEBhLnJlcG9ydCBsZXZlbCArIFwifCBcIlxyXG5cdFx0QGIucmVwb3J0IGxldmVsICsgXCJ8IFwiXHJcblxyXG5idWlsZCA9ICh2b2x0YWdlLCBzKSAtPlxyXG5cdHN0YWNrID0gW11cclxuXHRmb3Igd29yZCBpbiBzLnNwbGl0ICcgJ1xyXG5cdFx0aWYgd29yZCA9PSBcInNcIiB0aGVuIHN0YWNrLnB1c2ggbmV3IFNlcmlhbCBzdGFjay5wb3AoKSwgc3RhY2sucG9wKClcclxuXHRcdGVsc2UgaWYgd29yZCA9PSBcInBcIiB0aGVuIHN0YWNrLnB1c2ggbmV3IFBhcmFsbGVsIHN0YWNrLnBvcCgpLCBzdGFjay5wb3AoKVxyXG5cdFx0ZWxzZSBzdGFjay5wdXNoIG5ldyBSZXNpc3RvciBwYXJzZUZsb2F0IHdvcmRcclxuXHRub2RlID0gc3RhY2sucG9wKClcclxuXHRub2RlLmV2YWxSKClcclxuXHRub2RlLnNldFZvbHRhZ2Ugdm9sdGFnZVxyXG5cdG5vZGVcclxuXHJcbiNsZXQgbm9kZSA9IGJ1aWxkKDEyLjAsIFwiOFwiKVxyXG4jbGV0IG5vZGUgPSBidWlsZCgxMi4wLCBcIjggMTAgc1wiKVxyXG4jbGV0IG5vZGUgPSBidWlsZCgxMi4wLCBcIjMgMTIgcFwiKVxyXG4jbGV0IG5vZGUgPSBidWlsZCgxMi4wLCBcIjggNCBzIDEyIHAgNiBzXCIpXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0c3RhcnQgPSBjbG9jaygpXHJcblx0I2ZvciBpIGluIHJhbmdlIDEwMDAwMDBcclxuXHRub2RlID0gYnVpbGQgMTguMCwgXCIxMCAyIHMgNiBwIDggcyA2IHAgNCBzIDggcCA0IHMgOCBwIDYgc1wiXHJcblx0cHJpbnQgY2xvY2soKS1zdGFydFxyXG5cclxuXHRwcmludCBcIiAgICAgT2htICAgICBWb2x0ICAgQW1wZXJlICAgICBXYXR0IE5ldHdvcmsgdHJlZVwiXHJcblx0bm9kZS5yZXBvcnQoKVxyXG4iXX0=
//# sourceURL=C:\Lab\2019\026-ResistanceCalculatorNim\coffee\calc.coffee