// Generated by CoffeeScript 2.3.2
var Parallel, Resistor, Serial, build, clock, nd, setup;

clock = Date.now;

nd = function(num) {
  return num.toFixed(3).padStart(8);
};

Resistor = class Resistor {
  constructor(resistance) {
    this.resistance = resistance;
  }

  evalR() {
    return this.resistance;
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
  }

  current() {
    return this.voltage / this.resistance;
  }

  effect() {
    return this.current() * this.voltage;
  }

  report(level) {
    var kind;
    kind = this.constructor.name[0].toLowerCase();
    print(`${nd(this.resistance)} ${nd(this.voltage)} ${nd(this.current())} ${nd(this.effect())}  ${level}${kind}`);
    if (this.a) {
      this.a.report(level + "| ");
    }
    if (this.b) {
      return this.b.report(level + "| ");
    }
  }

};

Serial = class Serial extends Resistor {
  constructor(a, b) {
    super();
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = this.a.evalR() + this.b.evalR();
  }

  setVoltage(voltage1) {
    var ra, rb;
    this.voltage = voltage1;
    ra = this.a.resistance;
    rb = this.b.resistance;
    this.a.setVoltage(ra / (ra + rb) * this.voltage);
    return this.b.setVoltage(rb / (ra + rb) * this.voltage);
  }

  report(level) {
    return super.report(level);
  }

};

Parallel = class Parallel extends Resistor {
  constructor(a, b) {
    super();
    this.a = a;
    this.b = b;
  }

  evalR() {
    return this.resistance = 1 / (1 / this.a.evalR() + 1 / this.b.evalR());
  }

  setVoltage(voltage1) {
    this.voltage = voltage1;
    this.a.setVoltage(this.voltage);
    return this.b.setVoltage(this.voltage);
  }

  report(level) {
    return super.report(level);
  }

};

build = function(voltage, s) {
  var j, len, node, ref, stack, word;
  stack = [];
  ref = s.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    word = ref[j];
    if (word === "s") {
      stack.push(new Serial(stack.pop(), stack.pop()));
    } else if (word === "p") {
      stack.push(new Parallel(stack.pop(), stack.pop()));
    } else {
      stack.push(new Resistor(parseFloat(word)));
    }
  }
  node = stack.pop();
  node.evalR();
  node.setVoltage(voltage);
  return node;
};

//let node = build(12.0, "8")
//let node = build(12.0, "8 10 s")
//let node = build(12.0, "3 12 p")
//let node = build(12.0, "8 4 s 12 p 6 s")
setup = function() {
  var i, j, len, node, ref, start;
  start = clock();
  ref = range(1000000);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    node = build(18.0, "10 2 s 6 p 8 s 6 p 4 s 8 p 4 s 8 p 6 s");
  }
  print(clock() - start);
  print("     Ohm     Volt   Ampere     Watt  Network tree");
  return node.report("");
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsYy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxjYWxjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQTs7QUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDOztBQUViLEVBQUEsR0FBSyxRQUFBLENBQUMsR0FBRCxDQUFBO1NBQVMsR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFaLENBQWMsQ0FBQyxRQUFmLENBQXdCLENBQXhCO0FBQVQ7O0FBRUMsV0FBTixNQUFBLFNBQUE7RUFDQyxXQUFjLFdBQUEsQ0FBQTtJQUFDLElBQUMsQ0FBQTtFQUFGOztFQUNkLEtBQVEsQ0FBQSxDQUFBO1dBQUcsSUFBQyxDQUFBO0VBQUo7O0VBQ1IsVUFBYSxTQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7RUFBRjs7RUFDYixPQUFVLENBQUEsQ0FBQTtXQUFHLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBO0VBQWY7O0VBQ1YsTUFBUyxDQUFBLENBQUE7V0FBRyxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUEsR0FBYSxJQUFDLENBQUE7RUFBakI7O0VBQ1QsTUFBUyxDQUFDLEtBQUQsQ0FBQTtBQUNSLFFBQUE7SUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsV0FBckIsQ0FBQTtJQUNQLEtBQUEsQ0FBTSxDQUFBLENBQUEsQ0FBRyxFQUFBLENBQUcsSUFBQyxDQUFBLFVBQUosQ0FBSCxFQUFBLENBQUEsQ0FBcUIsRUFBQSxDQUFHLElBQUMsQ0FBQSxPQUFKLENBQXJCLEVBQUEsQ0FBQSxDQUFvQyxFQUFBLENBQUcsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUFILENBQXBDLEVBQUEsQ0FBQSxDQUFxRCxFQUFBLENBQUcsSUFBQyxDQUFBLE1BQUQsQ0FBQSxDQUFILENB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QUFBLEdBQU8sS0FBSyxDQUFDLEdBQU4sQ0FBQTtFQUNQLElBQUksQ0FBQyxLQUFMLENBQUE7RUFDQSxJQUFJLENBQUMsVUFBTCxDQUFnQixPQUFoQjtTQUNBO0FBVE8sRUFsQ1I7Ozs7OztBQWtEQSxLQUFBLEdBQVEsUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQSxLQUFBLEdBQVEsS0FBQSxDQUFBO0FBQ1I7RUFBQSxLQUFBLHFDQUFBOztJQUNDLElBQUEsR0FBTyxLQUFBLENBQU0sSUFBTixFQUFZLHdDQUFaO0VBRFI7RUFFQSxLQUFBLENBQU0sS0FBQSxDQUFBLENBQUEsR0FBUSxLQUFkO0VBRUEsS0FBQSxDQUFNLG1EQUFOO1NBQ0EsSUFBSSxDQUFDLE1BQUwsQ0FBWSxFQUFaO0FBUE8iLCJzb3VyY2VzQ29udGVudCI6WyJjbG9jayA9IERhdGUubm93XHJcblxyXG5uZCA9IChudW0pIC0+IG51bS50b0ZpeGVkKDMpLnBhZFN0YXJ0IDhcclxuXHJcbmNsYXNzIFJlc2lzdG9yXHJcblx0Y29uc3RydWN0b3IgOiAoQHJlc2lzdGFuY2UpIC0+IFxyXG5cdGV2YWxSIDogLT4gQHJlc2lzdGFuY2VcclxuXHRzZXRWb2x0YWdlIDogKEB2b2x0YWdlKSAtPlxyXG5cdGN1cnJlbnQgOiAtPiBAdm9sdGFnZSAvIEByZXNpc3RhbmNlXHJcblx0ZWZmZWN0IDogLT4gQGN1cnJlbnQoKSAqIEB2b2x0YWdlXHJcblx0cmVwb3J0IDogKGxldmVsKSAtPlxyXG5cdFx0a2luZCA9IEBjb25zdHJ1Y3Rvci5uYW1lWzBdLnRvTG93ZXJDYXNlKClcclxuXHRcdHByaW50IFwiI3tuZCBAcmVzaXN0YW5jZX0gI3tuZCBAdm9sdGFnZX0gI3tuZCBAY3VycmVudCgpfSAje25kIEBlZmZlY3QoKX0gICN7bGV2ZWx9I3traW5kfVwiXHJcblx0XHRpZiBAYSB0aGVuIEBhLnJlcG9ydCBsZXZlbCArIFwifCBcIlxyXG5cdFx0aWYgQGIgdGhlbiBAYi5yZXBvcnQgbGV2ZWwgKyBcInwgXCJcclxuXHJcbmNsYXNzIFNlcmlhbCBleHRlbmRzIFJlc2lzdG9yXHJcblx0Y29uc3RydWN0b3IgOiAoQGEsQGIpIC0+IHN1cGVyKClcclxuXHRldmFsUiA6IC0+IEByZXNpc3RhbmNlID0gQGEuZXZhbFIoKSArIEBiLmV2YWxSKClcclxuXHRzZXRWb2x0YWdlIDogKEB2b2x0YWdlKSAtPlxyXG5cdFx0cmEgPSBAYS5yZXNpc3RhbmNlXHJcblx0XHRyYiA9IEBiLnJlc2lzdGFuY2VcclxuXHRcdEBhLnNldFZvbHRhZ2UgcmEvKHJhK3JiKSAqIEB2b2x0YWdlXHJcblx0XHRAYi5zZXRWb2x0YWdlIHJiLyhyYStyYikgKiBAdm9sdGFnZVxyXG5cdHJlcG9ydCA6IChsZXZlbCkgLT4gc3VwZXIgbGV2ZWxcclxuXHJcbmNsYXNzIFBhcmFsbGVsIGV4dGVuZHMgUmVzaXN0b3JcclxuXHRjb25zdHJ1Y3RvciA6IChAYSxAYikgLT4gc3VwZXIoKVxyXG5cdGV2YWxSIDogLT4gQHJlc2lzdGFuY2UgPSAxIC8gKDEgLyBAYS5ldmFsUigpICsgMSAvIEBiLmV2YWxSKCkpXHJcblx0c2V0Vm9sdGFnZSA6IChAdm9sdGFnZSkgLT5cclxuXHRcdEBhLnNldFZvbHRhZ2UgQHZvbHRhZ2VcclxuXHRcdEBiLnNldFZvbHRhZ2UgQHZvbHRhZ2VcclxuXHRyZXBvcnQgOiAobGV2ZWwpIC0+IHN1cGVyIGxldmVsXHJcblxyXG5idWlsZCA9ICh2b2x0YWdlLCBzKSAtPlxyXG5cdHN0YWNrID0gW11cclxuXHRmb3Igd29yZCBpbiBzLnNwbGl0ICcgJ1xyXG5cdFx0aWYgICAgICB3b3JkID09IFwic1wiIHRoZW4gc3RhY2sucHVzaCBuZXcgU2VyaWFsIHN0YWNrLnBvcCgpLCBzdGFjay5wb3AoKVxyXG5cdFx0ZWxzZSBpZiB3b3JkID09IFwicFwiIHRoZW4gc3RhY2sucHVzaCBuZXcgUGFyYWxsZWwgc3RhY2sucG9wKCksIHN0YWNrLnBvcCgpXHJcblx0XHRlbHNlICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCBuZXcgUmVzaXN0b3IgcGFyc2VGbG9hdCB3b3JkXHJcblx0bm9kZSA9IHN0YWNrLnBvcCgpXHJcblx0bm9kZS5ldmFsUigpXHJcblx0bm9kZS5zZXRWb2x0YWdlIHZvbHRhZ2VcclxuXHRub2RlXHJcblxyXG4jbGV0IG5vZGUgPSBidWlsZCgxMi4wLCBcIjhcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCI4IDEwIHNcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCIzIDEyIHBcIilcclxuI2xldCBub2RlID0gYnVpbGQoMTIuMCwgXCI4IDQgcyAxMiBwIDYgc1wiKVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdHN0YXJ0ID0gY2xvY2soKVxyXG5cdGZvciBpIGluIHJhbmdlIDEwMDAwMDBcclxuXHRcdG5vZGUgPSBidWlsZCAxOC4wLCBcIjEwIDIgcyA2IHAgOCBzIDYgcCA0IHMgOCBwIDQgcyA4IHAgNiBzXCJcclxuXHRwcmludCBjbG9jaygpLXN0YXJ0XHJcblxyXG5cdHByaW50IFwiICAgICBPaG0gICAgIFZvbHQgICBBbXBlcmUgICAgIFdhdHQgIE5ldHdvcmsgdHJlZVwiXHJcblx0bm9kZS5yZXBvcnQgXCJcIlxyXG4iXX0=
//# sourceURL=C:\Lab\2019\026-ResistanceCalculatorNim\coffee\calc.coffee