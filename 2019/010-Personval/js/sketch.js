'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
// Beskrivning av kolumner i kandidaturer.js:
var ANMDELTAGANDE,
    ANMKAND,
    ANT_BEST_VALS,
    Button,
    FOLKBOKFÖRINGSORT,
    FÖRKLARING,
    GILTIG,
    KANDIDATNUMMER,
    KÖN,
    LISTNUMMER,
    LetterButton,
    NAMN,
    ORDNING,
    PARTIBETECKNING,
    PARTIFÖRKORTNING,
    PARTIKOD,
    PERSONS_PER_PAGE,
    Page,
    Page0,
    Page1,
    PartiButton,
    PersonButton,
    SAMTYCKE,
    TypButton,
    VALBAR_PÅ_VALDAGEN,
    VALKRETSKOD,
    VALKRETSNAMN,
    VALOMRÅDESKOD,
    VALOMRÅDESNAMN,
    VALSEDELSSTATUS,
    VALSEDELSUPPGIFT,
    VALTYP,
    VOTES,
    antal,
    canvas,
    clickButton,
    clickDelete,
    clickFortsätt,
    clickLetterButton,
    clickPartiButton,
    clickPersonButton,
    clickRensa,
    clickSwap,
    clickUtskrift,
    createSelectButtons,
    dictionary,
    draw,
    getParameters,
    getQR,
    gruppera,
    kommunkod,
    länskod,
    makeFreq,
    mousePressed,
    pages,
    qr,
    qrcode,
    readDatabase,
    selectedButton,
    selectedLetterButton,
    selectedPartiButton,
    selectedPersonButton,
    selectedPersons,
    setup,
    showSelectedPersons,
    spara,
    state,
    tree,
    ÅLDER_PÅ_VALDAGEN,
    indexOf = [].indexOf;

VALTYP = 0;

VALOMRÅDESKOD = 1;

VALOMRÅDESNAMN = 2;

VALKRETSKOD = 3;

VALKRETSNAMN = 4;

PARTIBETECKNING = 5;

PARTIFÖRKORTNING = 6;

PARTIKOD = 7;

VALSEDELSSTATUS = 8;

LISTNUMMER = 9;

ORDNING = 10;

ANMKAND = 11;

ANMDELTAGANDE = 12;

SAMTYCKE = 13;

FÖRKLARING = 14;

KANDIDATNUMMER = 15;

NAMN = 16;

ÅLDER_PÅ_VALDAGEN = 17;

KÖN = 18;

FOLKBOKFÖRINGSORT = 19;

VALSEDELSUPPGIFT = 20;

ANT_BEST_VALS = 21;

VALBAR_PÅ_VALDAGEN = 22;

GILTIG = 23;

PERSONS_PER_PAGE = 32;

VOTES = 5;

kommunkod = null;

länskod = null;

tree = {};

canvas = null;

qrcode = null;

qr = null;

dictionary = {};

// S -> Socialdemokraterna
// 01 -> Stockholms läns landsting
// 0180 -> Stockholm
state = 0; // 0=normal 1=qrcode

pages = [];

selectedPersons = {
  R: [],
  L: [],
  K: []
};

selectedButton = null;

selectedPartiButton = null;

selectedLetterButton = null;

selectedPersonButton = null;

Page = function () {
  function Page() {
    var render = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

    _classCallCheck(this, Page);

    this.render = render;
    this.buttons = [];
  }

  _createClass(Page, [{
    key: 'add',
    value: function add(button) {
      this.buttons.push(button);
      return button;
    }
  }, {
    key: 'draw',
    value: function draw() {
      var button, k, len, ref, results;
      this.render();
      ref = this.buttons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        results.push(button.draw());
      }
      return results;
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed() {
      var button, k, len, ref, results;
      ref = this.buttons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        if (button.inside(mouseX, mouseY)) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }]);

  return Page;
}();

Page0 = function (_Page) {
  _inherits(Page0, _Page);

  function Page0() {
    var render = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

    _classCallCheck(this, Page0);

    var _this = _possibleConstructorReturn(this, (Page0.__proto__ || Object.getPrototypeOf(Page0)).call(this));

    _this.render = render;
    _this.rbuttons = []; // RKL
    _this.init();
    return _this;
  }

  _createClass(Page0, [{
    key: 'radd',
    value: function radd(button) {
      return this.rbuttons.push(button);
    }
  }, {
    key: 'padd',
    value: function padd(button) {
      return this.pbuttons.push(button);
    }
  }, {
    key: 'ladd',
    value: function ladd(button) {
      return this.lbuttons.push(button);
    }
  }, {
    key: 'kadd',
    value: function kadd(button) {
      return this.kbuttons.push(button);
    }
  }, {
    key: 'sadd',
    value: function sadd(button) {
      return this.sbuttons.push(button);
    }
  }, {
    key: 'allButtons',
    value: function allButtons() {
      return this.pbuttons.concat(this.lbuttons.concat(this.kbuttons.concat(this.sbuttons.concat(this.rbuttons))));
    }
  }, {
    key: 'init',
    value: function init() {
      this.pbuttons = []; // parti
      this.lbuttons = []; // letters
      this.kbuttons = []; // kandidater
      return this.sbuttons = []; // Del, Up, Down
    }
  }, {
    key: 'draw',
    value: function draw() {
      var button, k, len, ref, results;
      bg(0);
      this.render();
      ref = this.allButtons();
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        results.push(button.draw());
      }
      return results;
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed() {
      var button, k, len, ref, results;
      ref = this.allButtons();
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        if (button.inside()) {
          results.push(button.click());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }]);

  return Page0;
}(Page);

Page1 = function (_Page2) {
  _inherits(Page1, _Page2);

  function Page1() {
    _classCallCheck(this, Page1);

    return _possibleConstructorReturn(this, (Page1.__proto__ || Object.getPrototypeOf(Page1)).apply(this, arguments));
  }

  return Page1;
}(Page);

Button = function () {
  function Button(title1, x1, y1, w1, h1) {
    var click1 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, Button);

    this.title = title1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.click = click1;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(20);
      textAlign(CENTER, CENTER);
      if (selectedButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + this.w / 2, this.y + this.h / 2);
    }
  }, {
    key: 'inside',
    value: function inside() {
      return this.x < mouseX && mouseX < this.x + this.w && this.y < mouseY && mouseY < this.y + this.h;
    }
  }]);

  return Button;
}();

TypButton = function (_Button) {
  _inherits(TypButton, _Button);

  function TypButton(typ1, title, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, TypButton);

    var _this3 = _possibleConstructorReturn(this, (TypButton.__proto__ || Object.getPrototypeOf(TypButton)).call(this, title, x, y, w, h, click));

    _this3.typ = typ1;
    return _this3;
  }

  return TypButton;
}(Button);

PartiButton = function (_Button2) {
  _inherits(PartiButton, _Button2);

  function PartiButton() {
    _classCallCheck(this, PartiButton);

    return _possibleConstructorReturn(this, (PartiButton.__proto__ || Object.getPrototypeOf(PartiButton)).apply(this, arguments));
  }

  _createClass(PartiButton, [{
    key: 'draw',
    value: function draw() {
      var ref;
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize((ref = this.title, indexOf.call('S C MP L M V SD KD'.split(' '), ref) >= 0) ? 28 : 20);
      textAlign(CENTER, CENTER);
      if (selectedPartiButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + this.w / 2, this.y + this.h / 2);
    }
  }]);

  return PartiButton;
}(Button);

PersonButton = function (_Button3) {
  _inherits(PersonButton, _Button3);

  function PersonButton(person, x, y, w, h) {
    var click = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, PersonButton);

    var title;
    title = person[NAMN] + ' - ' + person[VALSEDELSUPPGIFT];

    var _this5 = _possibleConstructorReturn(this, (PersonButton.__proto__ || Object.getPrototypeOf(PersonButton)).call(this, title, x, y, w, h, click));

    _this5.person = person;
    return _this5;
  }

  _createClass(PersonButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(12);
      textAlign(LEFT, CENTER);
      fc(1);
      return text(this.title, this.x + 5, this.y + 2 + this.h / 2);
    }
  }]);

  return PersonButton;
}(Button);

LetterButton = function (_Button4) {
  _inherits(LetterButton, _Button4);

  function LetterButton(title, x, y, w, h, antal1, click) {
    _classCallCheck(this, LetterButton);

    var _this6 = _possibleConstructorReturn(this, (LetterButton.__proto__ || Object.getPrototypeOf(LetterButton)).call(this, title, x, y, w, h, click));

    _this6.antal = antal1;
    _this6.page = -1;
    _this6.pages = 1 + Math.floor(_this6.antal / PERSONS_PER_PAGE);
    if (_this6.antal % PERSONS_PER_PAGE === 0) {
      _this6.pages--;
    }
    return _this6;
  }

  _createClass(LetterButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(20);
      textAlign(CENTER, CENTER);
      if (selectedLetterButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      text(this.title, this.x + this.w / 2, this.y + this.h / 2);
      push();
      this.pageIndicator();
      return pop();
    }
  }, {
    key: 'pageIndicator',
    value: function pageIndicator() {
      var dx, i, k, len, ref, results;
      if (this.pages <= 1) {
        return;
      }
      dx = Math.floor(this.w / (this.pages + 1));
      ref = range(this.pages);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        if (i === this.page) {
          fc(1);
        } else {
          fc(0);
        }
        results.push(circle(this.x + (i + 1) * dx, this.y + 0.85 * this.h, 3));
      }
      return results;
    }
  }]);

  return LetterButton;
}(Button);

spara = function spara(lista, key, value) {
  var a, current, k, len, name;
  current = tree;
  for (k = 0, len = lista.length; k < len; k++) {
    name = lista[k];
    a = current[name];
    if (a === void 0) {
      current[name] = {};
    }
    current = current[name];
  }
  return current[key] = value;
};

antal = function antal(letter, personer) {
  var key, lst, person;
  lst = function () {
    var results;
    results = [];
    for (key in personer) {
      person = personer[key];
      if (letter === person[NAMN][0]) {
        results.push(1);
      }
    }
    return results;
  }();
  return lst.length;
};

createSelectButtons = function createSelectButtons() {
  var i, person, persons, results, typ, x, y;
  pages[0].sbuttons = [];
  results = [];
  for (typ in selectedPersons) {
    persons = selectedPersons[typ];
    results.push(function () {
      var k, len, results1;
      results1 = [];
      for (i = k = 0, len = persons.length; k < len; i = ++k) {
        person = persons[i];
        x = 1160;
        y = {
          R: 80,
          L: 340,
          K: 600
        }[typ] + i * 40 - 15;
        results1.push(function (typ, i) {
          if (i > 0) {
            pages[0].sadd(new Button('byt', x + 10, y - 20, 40, 30, function () {
              return clickSwap(typ, i);
            }));
          }
          return pages[0].sadd(new Button(' x ', x + 55, y, 30, 30, function () {
            return clickDelete(typ, i);
          }));
        }(typ, i));
      }
      return results1;
    }());
  }
  return results;
};

clickDelete = function clickDelete(typ, index) {
  selectedPersons[typ].splice(index, 1);
  return createSelectButtons();
};

clickSwap = function clickSwap(typ, index) {
  var arr;
  arr = selectedPersons[typ];
  var _ref = [arr[index - 1], arr[index]];
  arr[index] = _ref[0];
  arr[index - 1] = _ref[1];

  return createSelectButtons();
};

clickRensa = function clickRensa() {
  selectedPersons = {
    R: [],
    L: [],
    K: []
  };
  createSelectButtons();
  pages[0].init();
  selectedButton = null;
  selectedPartiButton = null;
  selectedLetterButton = null;
  selectedPersonButton = null;
  return qr = '';
};

clickPersonButton = function clickPersonButton(person) {
  var i, k, len, p, persons;
  persons = selectedPersons[selectedButton.typ];
  // Finns partiet redan? I så fall: ersätt denna person med den nya.
  for (i = k = 0, len = persons.length; k < len; i = ++k) {
    p = persons[i];
    if (p[PARTIKOD] === person[PARTIKOD]) {
      persons[i] = person;
      return;
    }
  }
  if (persons.length < VOTES) {
    persons.push(person);
    return createSelectButtons();
  }
};

clickLetterButton = function clickLetterButton(button, letters, personer) {
  var N, j, k, key, keys, len, person, ref, results, x, y;
  N = PERSONS_PER_PAGE;
  selectedLetterButton = button;
  button.page = (button.page + 1) % button.pages;
  pages[0].kbuttons = [];
  keys = _.keys(personer);
  keys.sort(function (a, b) {
    if (a.slice(a.indexOf('-')) < b.slice(b.indexOf('-'))) {
      return -1;
    } else {
      return 1;
    }
  });
  j = 0;
  results = [];
  for (k = 0, len = keys.length; k < len; k++) {
    key = keys[k];
    person = personer[key];
    if (ref = person[NAMN][0], indexOf.call(letters, ref) >= 0) {
      if (Math.floor(j / N) === button.page) {
        x = 305;
        y = 30 + 25 * (j % N);
        (function (person) {
          return pages[0].kadd(new PersonButton(person, x, y, 400, 20, function () {
            return clickPersonButton(person);
          }));
        })(person);
      }
      results.push(j++);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

makeFreq = function makeFreq(personer) {
  var k, key, keys, len, letter, person, res;
  res = {};
  keys = function () {
    var results;
    results = [];
    for (key in personer) {
      person = personer[key];
      results.push(person[NAMN]);
    }
    return results;
  }();
  keys.sort();
  for (k = 0, len = keys.length; k < len; k++) {
    key = keys[k];
    letter = key[0];
    res[letter] = res[letter] === void 0 ? 1 : res[letter] + 1;
  }
  return res;
};

gruppera = function gruppera(letters) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;

  var count, group, letter, m, res;
  res = {};
  group = '';
  count = 0;
  for (letter in letters) {
    m = letters[letter];
    if (count + m <= n) {
      group += letter;
      count += m;
    } else {
      if (count > 0) {
        res[group] = count;
      }
      group = letter;
      count = m;
    }
  }
  if (count > 0) {
    res[group] = count;
  }
  return res;
};

assert({
  AB: 25,
  C: 14,
  D: 57
}, gruppera({
  A: 12,
  B: 13,
  C: 14,
  D: 57
}));

assert({
  ABDEF: 28,
  GH: 25
}, gruppera({
  A: 2,
  B: 1,
  D: 3,
  E: 10,
  F: 12,
  G: 13,
  H: 12
}));

assert({
  ABDEF: 28,
  NO: 32
}, gruppera({
  A: 2,
  B: 1,
  D: 3,
  E: 10,
  F: 12,
  N: 20,
  O: 12
}));

clickPartiButton = function clickPartiButton(button, personer) {
  var N, i, j, k, key, keys, l, len, len1, letters, n, p, person, persons, ref, title, x, y;
  N = 16;
  selectedPartiButton = button;
  pages[0].lbuttons = [];
  pages[0].kbuttons = [];
  if (PERSONS_PER_PAGE >= _.size(personer)) {
    keys = _.keys(personer);
    keys.sort(function (a, b) {
      if (a.slice(a.indexOf('-')) < b.slice(b.indexOf('-'))) {
        return -1;
      } else {
        return 1;
      }
    });
    for (j = k = 0, len = keys.length; k < len; j = ++k) {
      key = keys[j];
      person = personer[key];
      x = 310;
      y = 30 + 25 * (j % N);
      (function (person) {
        return pages[0].kadd(new PersonButton(person, x, y, 395, 20, function () {
          return clickPersonButton(person);
        }));
      })(person);
    }
  } else {
    i = 0;
    ref = gruppera(makeFreq(personer));
    for (letters in ref) {
      n = ref[letters];
      //print letters,n
      x = 205 + 50 * Math.floor(i / N);
      y = 30 + 50 * (i % N);
      title = letters.length === 1 ? letters : letters[0] + '-' + _.last(letters);
      (function (letters, title) {
        return pages[0].ladd(new LetterButton(title, x, y, 45, 45, n, function () {
          return clickLetterButton(this, letters, personer);
        }));
      })(letters, title);
      i++;
    }
  }
  persons = selectedPersons[selectedButton.typ];
  // Finns partiet redan? I så fall: ersätt denna person med den nya.
  person = [];
  person[NAMN] = dictionary[button.title][0];
  person[PARTIKOD] = dictionary[button.title][1];
  person[PARTIFÖRKORTNING] = button.title;
  person[KANDIDATNUMMER] = '99' + person[PARTIKOD].padStart(4, '0');
  for (i = l = 0, len1 = persons.length; l < len1; i = ++l) {
    p = persons[i];
    if (p[PARTIKOD] === person[PARTIKOD]) {
      persons[i] = person;
      return;
    }
  }
  if (persons.length < VOTES) {
    persons.push(person);
    return createSelectButtons();
  }
};

clickButton = function clickButton(button, partier) {
  var N, i, k, key, keys, len, results, x, y;
  N = 16;
  selectedButton = button;
  pages[0].pbuttons = [];
  pages[0].lbuttons = [];
  pages[0].kbuttons = [];
  keys = _.keys(partier);
  keys.sort(function (a, b) {
    return _.size(partier[b]) - _.size(partier[a]);
  });
  results = [];
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    x = 5 + 100 * Math.floor(i / N);
    y = 30 + 50 * (i % N);
    results.push(function (key) {
      return pages[0].padd(new PartiButton(key, x, y, 95, 45, function () {
        return clickPartiButton(this, partier[key]);
      }));
    }(key));
  }
  return results;
};

// getClowner = (lines) -> # tag fram alla personer som representerar flera partier i samma valtyp
// 	res = []
// 	partier = {}
// 	for line in lines 
// 		cells = line.split ';'
// 		knr = cells[KANDIDATNUMMER]
// 		if partier[knr] == undefined then partier[knr] = {}
// 		partier[knr][cells[PARTIKOD]] = cells
// 	for knr,lista of partier
// 		if 1 == _.size lista then continue
// 		klr = {R:0,K:0,L:0}
// 		for key,item of lista
// 			klr[item[VALTYP]]++
// 		if klr.R>1 or klr.K>1 or klr.L>1 then res.push knr
// 	print 'Borttagna kandidater pga flera partier i samma valtyp: ',res
// 	res
readDatabase = function readDatabase() {
  var arr, cells, k, key, knr, len, line, lines, namn, område, områdeskod, parti, partier, partikoder, results, valtyp;
  partikoder = {};
  partier = {};
  lines = db.split('\n');
  //clowner = getClowner lines
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    cells = line.split(';');
    valtyp = cells[VALTYP];
    områdeskod = cells[VALOMRÅDESKOD];
    område = cells[VALOMRÅDESNAMN];
    parti = cells[PARTIFÖRKORTNING];
    //if parti=='' then parti = cells[PARTIKOD]
    knr = cells[KANDIDATNUMMER];
    namn = cells[NAMN];
    partikoder[cells[PARTIKOD]] = parti;
    //if knr in clowner then continue
    if (namn === void 0) {
      continue;
    }
    if (parti === '') {
      continue;
    }
    dictionary[parti] = [cells[PARTIBETECKNING], cells[PARTIKOD]];
    dictionary[områdeskod] = område; // hanterar både kommun och landsting
    // S -> ['Socialdemokraterna','1234']
    // 01 -> '01 - Stockholms läns landsting'
    // 0180 -> Stockholm
    arr = namn.split(', ');
    if (arr.length === 2) {
      namn = arr[1] + ' ' + arr[0];
      cells[NAMN] = namn;
    }
    if (parti === '' || namn === '[inte lämnat förklaring]') {
      continue;
    }
    if (valtyp === 'R') {
      spara(['00 - riksdagen', parti], knr + '-' + namn, cells);
    }
    if (valtyp === 'L' && områdeskod === länskod) {
      spara([områdeskod, '' + område, parti], knr + '-' + namn, cells);
    }
    if (valtyp === 'K' && områdeskod === kommunkod) {
      spara([områdeskod.slice(0, 2), område, parti], knr + '-' + namn, cells);
    }
  }
  print(dictionary);
  print(partikoder);
  //print partier
  results = [];
  for (key in partier) {
    parti = partier[key];
    if (1 < _.size(parti)) {
      results.push(print(key, parti));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

getParameters = function getParameters() {
  var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;

  var arr, f;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  if (arr[1] === '') {
    return {};
  }
  return _.object(function () {
    var k, len, ref, results;
    ref = arr[1].split('&');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      f = ref[k];
      results.push(f.split('='));
    }
    return results;
  }());
};

getQR = function getQR() {
  var i, k, len, person, persons, ref, s, slump, typ;
  s = kommunkod;
  slump = int(random(1000000));
  s += slump.toString().padStart(6, 0); // to increase probability of uniqueness 
  for (typ in selectedPersons) {
    persons = selectedPersons[typ];
    ref = range(VOTES);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (i < persons.length) {
        person = persons[i];
        s += person[KANDIDATNUMMER].padStart(6, '0');
      } else {
        s += '000000';
      }
    }
  }
  assert(s.length, 4 + 6 + 15 * 6); // 100
  return s;
};

clickUtskrift = function clickUtskrift() {
  state = 1;
  qr = getQR();
  return qrcode = new QRCode(document.getElementById("qrcode"), {
    text: qr,
    width: 256,
    height: 256,
    colorDark: "#000000",
    colorLight: "#ffffff",
    correctLevel: QRCode.CorrectLevel.L // Low Medium Q High
  });
};

clickFortsätt = function clickFortsTt() {
  var myNode;
  myNode = document.getElementById("qrcode");
  myNode.innerHTML = '';
  return state = 0;
};

setup = function setup() {
  var kommun;
  canvas = createCanvas(1255, 840);
  canvas.parent('canvas');
  pages.push(new Page0(function () {
    // pages[0].render()
    if (selectedPartiButton !== null) {
      push();
      textAlign(LEFT, CENTER);
      textSize(20);
      text(dictionary[selectedPartiButton.title][0], 310, 15);
      pop();
    }
    if (selectedButton !== null) {
      push();
      textAlign(LEFT, CENTER);
      textSize(20);
      if (selectedButton.title === 'Riksdag') {
        text('Riksdag', 10, 15);
      }
      if (selectedButton.title === 'Landsting') {
        text(dictionary[länskod], 10, 15);
      }
      if (selectedButton.title === 'Kommun') {
        text(dictionary[kommunkod], 10, 15);
      }
      pop();
    }
    return showSelectedPersons(750, 100 - 20);
  }));
  pages.push(new Page1(function () {
    // pages[1].render()
    textAlign(LEFT, CENTER);
    bg(1);
    fc(0);
    text(qr, 50, height - 20);
    text('Riksdag', 10, 50 + 0);
    text(dictionary[länskod], 10, 50 + 260);
    text(dictionary[kommunkod], 10, 50 + 520);
    return showSelectedPersons(400, 50);
  }));
  sc();

  var _getParameters = getParameters();

  kommun = _getParameters.kommun;

  print(kommun);
  kommunkod = kommun;
  if (!kommunkod) {
    kommunkod = '0180';
  }
  länskod = kommunkod.slice(0, 2);
  readDatabase();
  print(tree);
  textAlign(CENTER, CENTER);
  textSize(20);
  pages[0].radd(new TypButton('R', 'Riksdag', 710, 5, 540, 50, function () {
    return clickButton(this, tree['00 - riksdagen']);
  }));
  pages[0].radd(new TypButton('L', dictionary[länskod], 710, 265, 540, 50, function () {
    return clickButton(this, tree[länskod][dictionary[länskod]]);
  }));
  pages[0].radd(new TypButton('K', dictionary[kommunkod], 710, 525, 540, 50, function () {
    return clickButton(this, tree[länskod][dictionary[kommunkod]]);
  }));
  pages[0].radd(new Button('Utskrift', 710, 785, 270, 50, function () {
    return clickUtskrift();
  }));
  pages[0].radd(new Button('Rensa', 985, 785, 265, 50, function () {
    return clickRensa();
  }));
  pages[1].add(new Button('Utskrift', 360, height - 82, 270, 45, function () {
    return window.print();
  }));
  return pages[1].add(new Button('Fortsätt', 635, height - 82, 270, 45, function () {
    return clickFortsätt();
  }));
};

showSelectedPersons = function showSelectedPersons(xoff, yoff) {
  var i, j, k, l, len, len1, person, ref, ref1, typ, y, y0;
  push();
  textAlign(LEFT, CENTER);
  ref = 'RLK';
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    typ = ref[i];
    push();
    rectMode(CORNER);
    y0 = yoff + [0, 260, 520][i];
    if (i === 0) {
      fc(1, 1, 0.5);
    }
    if (i === 1) {
      fc(0.5, 0.75, 1);
    }
    if (i === 2) {
      fc(1);
    }
    rect(xoff - 40, y0 - 20, 540, 200);
    pop();
    fc(0);
    ref1 = selectedPersons[typ];
    for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
      person = ref1[j];
      y = y0 + 40 * j;
      textSize(20);
      text(j + 1 + '  ' + person[PARTIFÖRKORTNING] + ' - ' + person[NAMN], xoff - 30, y);
    }
  }
  return pop();
};

draw = function draw() {
  return pages[state].draw();
};

mousePressed = function mousePressed() {
  return pages[state].mousePressed(mouseX, mouseY);
};
//# sourceMappingURL=sketch.js.map
