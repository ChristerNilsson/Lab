'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var ANMDELTAGANDE,
    ANMKAND,
    ANT_BEST_VALS,
    Button,
    FOLKBOKFÖRINGSORT,
    FÖRKLARING,
    GILTIG,
    KANDIDATNUMMER,
    KÖN,
    LISTNUMMER,
    LetterButton,
    NAMN,
    ORDNING,
    PARTIBETECKNING,
    PARTIFÖRKORTNING,
    PARTIKOD,
    PERSONS_PER_PAGE,
    PartiButton,
    PersonButton,
    SAMTYCKE,
    VALBAR_PÅ_VALDAGEN,
    VALKRETSKOD,
    VALKRETSNAMN,
    VALOMRÅDESKOD,
    VALOMRÅDESNAMN,
    VALSEDELSSTATUS,
    VALSEDELSUPPGIFT,
    VALTYP,
    antal,
    buttons,
    clickButton,
    clickLetterButton,
    clickPartiButton,
    dictionary,
    draw,
    kbuttons,
    kommunkod,
    lbuttons,
    länskod,
    mousePressed,
    pbuttons,
    readDatabase,
    selectedButton,
    selectedLetterButton,
    selectedPartiButton,
    selectedPersonButton,
    setup,
    spara,
    tree,
    ÅLDER_PÅ_VALDAGEN,
    indexOf = [].indexOf;

VALTYP = 0;

VALOMRÅDESKOD = 1;

VALOMRÅDESNAMN = 2;

VALKRETSKOD = 3;

VALKRETSNAMN = 4;

PARTIBETECKNING = 5;

PARTIFÖRKORTNING = 6;

PARTIKOD = 7;

VALSEDELSSTATUS = 8;

LISTNUMMER = 9;

ORDNING = 10;

ANMKAND = 11;

ANMDELTAGANDE = 12;

SAMTYCKE = 13;

FÖRKLARING = 14;

KANDIDATNUMMER = 15;

NAMN = 16;

ÅLDER_PÅ_VALDAGEN = 17;

KÖN = 18;

FOLKBOKFÖRINGSORT = 19;

VALSEDELSUPPGIFT = 20;

ANT_BEST_VALS = 21;

VALBAR_PÅ_VALDAGEN = 22;

GILTIG = 23;

PERSONS_PER_PAGE = 32;

kommunkod = null;

länskod = null;

tree = {};

dictionary = {};

// S -> Socialdemokraterna
// 01 -> Stockholms läns landsting
// 0180 -> Stockholm
buttons = [];

pbuttons = [];

lbuttons = [];

kbuttons = [];

selectedButton = null;

selectedPartiButton = null;

selectedLetterButton = null;

selectedPersonButton = null;

Button = function () {
  function Button(title1, x1, y1, w1, h1) {
    var click1 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, Button);

    this.title = title1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.click = click1;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(20);
      textAlign(CENTER, CENTER);
      if (selectedButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x, this.y);
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.x - this.w / 2 < mx && mx < this.x + this.w / 2 && this.y - this.h / 2 < my && my < this.y + this.h / 2;
    }
  }]);

  return Button;
}();

PartiButton = function (_Button) {
  _inherits(PartiButton, _Button);

  function PartiButton() {
    _classCallCheck(this, PartiButton);

    return _possibleConstructorReturn(this, (PartiButton.__proto__ || Object.getPrototypeOf(PartiButton)).apply(this, arguments));
  }

  _createClass(PartiButton, [{
    key: 'draw',
    value: function draw() {
      var ref;
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize((ref = this.title, indexOf.call('S C MP L M V SD KD'.split(' '), ref) >= 0) ? 28 : 20);
      textAlign(CENTER, CENTER);
      if (selectedPartiButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x, this.y);
    }
  }]);

  return PartiButton;
}(Button);

PersonButton = function (_Button2) {
  _inherits(PersonButton, _Button2);

  function PersonButton() {
    _classCallCheck(this, PersonButton);

    return _possibleConstructorReturn(this, (PersonButton.__proto__ || Object.getPrototypeOf(PersonButton)).apply(this, arguments));
  }

  _createClass(PersonButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(12);
      textAlign(LEFT, CENTER);
      fc(1);
      return text(this.title, this.x - this.w / 2 + 5, this.y);
    }
  }]);

  return PersonButton;
}(Button);

LetterButton = function (_Button3) {
  _inherits(LetterButton, _Button3);

  function LetterButton(title, x, y, w, h, antal1, click) {
    _classCallCheck(this, LetterButton);

    var _this3 = _possibleConstructorReturn(this, (LetterButton.__proto__ || Object.getPrototypeOf(LetterButton)).call(this, title, x, y, w, h, click));

    _this3.antal = antal1;
    _this3.page = -1;
    _this3.pages = 1 + Math.floor(_this3.antal / 30);
    if (_this3.antal === 0) {
      _this3.pages = 0;
    }
    return _this3;
  }

  _createClass(LetterButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(20);
      textAlign(CENTER, CENTER);
      if (selectedLetterButton === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      text(this.title, this.x, this.y);
      push();
      this.pageIndicator();
      return pop();
    }
  }, {
    key: 'pageIndicator',
    value: function pageIndicator() {
      var dx, i, k, len, ref, results;
      if (this.pages < 1) {
        return;
      }
      dx = Math.floor(this.w / (this.pages + 1));
      ref = range(this.pages);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        if (i === this.page) {
          fc(1);
        } else {
          fc(0);
        }
        results.push(circle(this.x + i * dx - Math.floor(dx / 2) * (this.pages - 1), this.y + 15, 3));
      }
      return results;
    }
  }]);

  return LetterButton;
}(Button);

spara = function spara(lista, key, value) {
  var a, current, k, len, name;
  current = tree;
  for (k = 0, len = lista.length; k < len; k++) {
    name = lista[k];
    a = current[name];
    if (a === void 0) {
      current[name] = {};
    }
    current = current[name];
  }
  return current[key] = value;
};

antal = function antal(letter, personer) {
  var key, lst, person;
  //print letter,personer
  lst = function () {
    var results;
    results = [];
    for (key in personer) {
      person = personer[key];
      if (letter === person[NAMN][0]) {
        results.push(1);
      }
    }
    return results;
  }();
  return lst.length;
};

clickLetterButton = function clickLetterButton(button, letter, personer) {
  var N, j, k, key, keys, len, person, results, x, y;
  N = PERSONS_PER_PAGE;
  selectedLetterButton = button;
  button.page = (button.page + 1) % button.pages;
  //print 'visaPersoner',button.page
  kbuttons = [];
  keys = _.keys(personer);
  keys.sort(function (a, b) {
    if (a.slice(a.indexOf('-')) < b.slice(b.indexOf('-'))) {
      return -1;
    } else {
      return 1;
    }
  });
  //print _.size keys
  j = 0;
  results = [];
  for (k = 0, len = keys.length; k < len; k++) {
    key = keys[k];
    person = personer[key];
    if (letter === person[NAMN][0]) {
      if (Math.floor(j / N) === button.page) {
        x = 605;
        y = 38 + 25 * (j % N);
        (function (key) {
          return kbuttons.push(new PersonButton(person[NAMN] + ' - ' + person[VALSEDELSUPPGIFT], x, y, 400, 20, function () {
            return print(key);
          }));
        })(key);
      }
      results.push(j++);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

clickPartiButton = function clickPartiButton(button, personer) {
  var N, i, j, k, key, keys, l, len, len1, letter, n, person, ref, results, results1, title, x, y;
  N = 16;
  selectedPartiButton = button;
  lbuttons = [];
  kbuttons = [];
  if (PERSONS_PER_PAGE >= _.size(personer)) {
    keys = _.keys(personer);
    keys.sort(function (a, b) {
      if (a.slice(a.indexOf('-')) < b.slice(b.indexOf('-'))) {
        return -1;
      } else {
        return 1;
      }
    });
    results = [];
    for (j = k = 0, len = keys.length; k < len; j = ++k) {
      key = keys[j];
      person = personer[key];
      x = 605;
      y = 40 + 25 * j;
      results.push(function (key) {
        return kbuttons.push(new PersonButton(person[NAMN] + ' - ' + person[VALSEDELSUPPGIFT], x, y, 400, 20, function () {
          return print(key);
        }));
      }(key));
    }
    return results;
  } else {
    ref = 'ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ';
    results1 = [];
    for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
      letter = ref[i];
      x = 325 + 50 * Math.floor(i / N);
      y = 50 + 50 * (i % N);
      n = antal(letter, personer);
      title = letter;
      results1.push(function (letter, title) {
        return lbuttons.push(new LetterButton(title, x, y, 45, 45, n, function () {
          return clickLetterButton(this, letter, personer);
        }));
      }(letter, title));
    }
    return results1;
  }
};

clickButton = function clickButton(button, partier) {
  var N, i, k, key, keys, len, results, x, y;
  N = 16;
  selectedButton = button;
  //print button
  pbuttons = [];
  lbuttons = [];
  kbuttons = [];
  keys = _.keys(partier);
  keys.sort(function (a, b) {
    return _.size(partier[b]) - _.size(partier[a]);
  });
  results = [];
  for (i = k = 0, len = keys.length; k < len; i = ++k) {
    key = keys[i];
    x = 150 + 100 * Math.floor(i / N);
    y = 50 + 50 * (i % N);
    results.push(function (key) {
      return pbuttons.push(new PartiButton(key, x, y, 95, 45, function () {
        return clickPartiButton(this, partier[key]);
      }));
    }(key));
  }
  return results;
};

readDatabase = function readDatabase() {
  var arr, cells, k, knr, len, line, lines, namn, område, områdeskod, parti, valtyp;
  lines = db.split('\n');
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    cells = line.split(';');
    valtyp = cells[VALTYP];
    områdeskod = cells[VALOMRÅDESKOD];
    område = cells[VALOMRÅDESNAMN];
    parti = cells[PARTIFÖRKORTNING];
    //if parti=='' then parti = cells[PARTIKOD]
    knr = cells[KANDIDATNUMMER];
    namn = cells[NAMN];
    if (namn === void 0) {
      continue;
    }
    if (parti === '') {
      continue;
    }
    dictionary[parti] = cells[PARTIBETECKNING];
    dictionary[områdeskod] = område; // hanterar både kommun och landsting
    // S -> Socialdemokraterna
    // 01 -> 01 - Stockholms läns landsting
    // 0180 -> Stockholm
    arr = namn.split(', ');
    if (arr.length === 2) {
      namn = arr[1] + ' ' + arr[0];
      cells[NAMN] = namn;
    }
    if (parti === '' || namn === '[inte lämnat förklaring]') {
      continue;
    }
    if (valtyp === 'R') {
      spara(['00 - riksdagen', parti], knr + '-' + namn, cells);
    }
    if (valtyp === 'L' && områdeskod === länskod) {
      spara([områdeskod, '' + område, parti], knr + '-' + namn, cells);
    }
    if (valtyp === 'K' && områdeskod === kommunkod) {
      spara([områdeskod.slice(0, 2), område, parti], knr + '-' + namn, cells);
    }
  }
  return print(dictionary);
};

setup = function setup() {
  createCanvas(1400, 840);
  sc();
  // från urlen:
  //kommunkod = '0180' # Stockholm
  //kommunkod = '1275' # Perstorp
  kommunkod = '1276'; // Klippan
  länskod = kommunkod.slice(0, 2);
  readDatabase();
  print(tree);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(20);
  buttons.push(new Button('Riksdag', 50, 50, 95, 45, function () {
    return clickButton(this, tree['00 - riksdagen']);
  }));
  buttons.push(new Button('Landsting', 50, 100, 95, 45, function () {
    return clickButton(this, tree[länskod][dictionary[länskod]]);
  }));
  return buttons.push(new Button('Kommun', 50, 150, 95, 45, function () {
    return clickButton(this, tree[länskod][dictionary[kommunkod]]);
  }));
};

draw = function draw() {
  var button, k, len, ref;
  bg(0);
  ref = buttons.concat(pbuttons.concat(lbuttons.concat(kbuttons)));
  for (k = 0, len = ref.length; k < len; k++) {
    button = ref[k];
    button.draw();
  }
  if (selectedPartiButton !== null) {
    push();
    textAlign(LEFT, CENTER);
    textSize(20);
    text(dictionary[selectedPartiButton.title], 410, 15);
    pop();
  }
  if (selectedButton !== null) {
    push();
    textAlign(LEFT, CENTER);
    textSize(20);
    if (selectedButton.title === 'Riksdag') {
      text('Riksdag', 110, 15);
    }
    if (selectedButton.title === 'Landsting') {
      text(dictionary[länskod], 110, 15);
    }
    if (selectedButton.title === 'Kommun') {
      text(dictionary[kommunkod], 110, 15);
    }
    return pop();
  }
};

mousePressed = function mousePressed() {
  var button, k, len, ref, results;
  ref = buttons.concat(pbuttons.concat(lbuttons.concat(kbuttons)));
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    button = ref[k];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
