'use strict';

// Generated by CoffeeScript 2.3.2
var Button,
    buttons,
    createHash,
    draw,
    handleMousePressed,
    hash,
    korrekt,
    level,
    message,
    mousePressed,
    mouseReleased,
    newGame,
    normalize,
    released,
    setup,
    slumpad,
    touchEnded,
    touchStarted,
    indexOf = [].indexOf;

hash = null;

korrekt = '';

slumpad = '';

message = '';

buttons = [];

level = 3;

released = true;

normalize = function (ord) {
  var arr;
  arr = ord.split('');
  arr.sort();
  return arr.join('');
};

createHash = function (lvl) {
  var i, key, len, ord, ref;
  hash = {};
  buttons[0].title = 'Facit';
  level = constrain(lvl, 2, 25);
  ref = ordlista.split(' ');
  for (i = 0, len = ref.length; i < len; i++) {
    ord = ref[i];
    if (ord.length === level) {
      key = normalize(ord);
      if (hash[key]) {
        hash[key].push(ord);
      } else {
        hash[key] = [ord];
      }
    }
  }
  return newGame();
};

Button = class Button {
  constructor(title, x, y, w, h, click) {
    this.title = title;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.click = click;
  }

  draw() {
    rect(this.x, this.y, this.w, this.h);
    return text(this.title, this.x, this.y);
  }

  inside() {
    return this.x - this.w / 2 < mouseX && mouseX < this.x + this.w + 2 && this.y - this.h / 2 < mouseY && mouseY < this.y + this.h + 2;
  }

};

newGame = function () {
  korrekt = _.sample(_.keys(hash));
  while (true) {
    slumpad = _.shuffle(korrekt.split('')).join('');
    if (indexOf.call(hash[normalize(korrekt)], slumpad) < 0) {
      break;
    }
  }
  return message = '';
};

setup = function () {
  createCanvas(windowWidth, windowHeight);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  textSize(50);
  buttons.push(new Button('Facit', width / 2, 100, width / 2, 50, function () {
    if (this.title === 'Slump') {
      newGame();
    } else {
      message = hash[normalize(korrekt)];
    }
    return this.title = this.title === 'Slump' ? 'Facit' : 'Slump';
  }));
  buttons.push(new Button('+', width / 2 + 100, 600, 100, 50, function () {
    return createHash(level + 1);
  }));
  buttons.push(new Button('-', width / 2 - 100, 600, 100, 50, function () {
    return createHash(level - 1);
  }));
  return createHash(3);
};

draw = function () {
  var button, i, len;
  bg(0.5);
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    button.draw();
  }
  text(slumpad, width / 2, 200);
  text(message, width / 2, 400);
  return text(level, width / 2, 600);
};

handleMousePressed = function () {
  if (released) {
    return released = false; // to make Android work 	
  } else {}
};

mousePressed = function () {
  var button, i, len;
  handleMousePressed();
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    if (button.inside()) {
      button.click();
    }
  }
  return false;
};

mouseReleased = function () {
  released = true;
  return false;
};

touchStarted = function () {
  handleMousePressed();
  return false; // to prevent double click on Android
};

touchEnded = function () {
  released = true;
  return false; // to prevent double click on Android
};
//# sourceMappingURL=sketch.js.map
