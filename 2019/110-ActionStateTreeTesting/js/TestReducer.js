// Generated by CoffeeScript 2.4.1
var assert, testReducer;

assert = chai.assert.deepEqual;

testReducer = function(script, reducer, stack) {
  var countTabs, rpn, run, runTest, states;
  states = [];
  run = function() {
    var i, len, line, nr, ref, results;
    ref = script.split('\n');
    results = [];
    for (nr = i = 0, len = ref.length; i < len; nr = ++i) {
      line = ref[nr];
      results.push(runTest(line, nr));
    }
    return results;
  };
  runTest = function(line, nr) {
    var arr, cmd, i, index, len, state;
    index = countTabs(line);
    if (index === 0) {
      return states = [JSON.parse(line)];
    }
    line = line.trim();
    stack.length = 0;
    arr = line.split(' ');
    state = states[index - 1];
    for (i = 0, len = arr.length; i < len; i++) {
      cmd = arr[i];
      state = rpn(cmd, state, nr);
    }
    states[index] = state;
    while (stack.length >= 2) {
      rpn('==', state, nr);
    }
    if (stack.length === 1) {
      return console.log(`Orphan in line ${nr + 1}`);
    }
  };
  rpn = function(cmd, state, nr) {
    var x, y;
    if (cmd === 'STATE') {
      stack.push(state);
      return state;
    }
    if (cmd.toLowerCase() in state) {
      stack.push(state[cmd.toLowerCase()]);
      return state;
    }
    if (cmd in reducers) {
      return state = reducers[cmd](state);
    }
    if (cmd === '==') {
      try {
        x = stack.pop();
        y = stack.pop();
        assert(x, y);
      } catch (error) {
        console.log('Assert failure in line ' + (nr + 1));
        console.log('  Expect', JSON.stringify(x));
        console.log('  Actual', JSON.stringify(y));
      }
      return state;
    }
    try {
      stack.push(JSON.parse(cmd));
    } catch (error) {
      console.log('JSON.parse failure in line ' + (nr + 1));
      console.log('  ', cmd);
    }
    return state;
  };
  countTabs = function(line) {
    var ch, i, len, result;
    result = 0;
    for (i = 0, len = line.length; i < len; i++) {
      ch = line[i];
      if (ch !== '\t') {
        return result;
      }
      result++;
    }
    return result;
  };
  return {run};
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcVGVzdFJlZHVjZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLE1BQUEsRUFBQTs7QUFBQSxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7QUFFckIsV0FBQSxHQUFjLFFBQUEsQ0FBQyxNQUFELEVBQVEsT0FBUixFQUFnQixLQUFoQixDQUFBO0FBRWIsTUFBQSxTQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7RUFBQSxNQUFBLEdBQVM7RUFFVCxHQUFBLEdBQU0sUUFBQSxDQUFBLENBQUE7QUFDTCxRQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUE7QUFBQTtBQUFBO0lBQUEsS0FBQSwrQ0FBQTs7bUJBQ0MsT0FBQSxDQUFRLElBQVIsRUFBYSxFQUFiO0lBREQsQ0FBQTs7RUFESztFQUlOLE9BQUEsR0FBVSxRQUFBLENBQUMsSUFBRCxFQUFNLEVBQU4sQ0FBQTtBQUNULFFBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLEtBQUEsR0FBUSxTQUFBLENBQVUsSUFBVjtJQUNSLElBQUcsS0FBQSxLQUFTLENBQVo7QUFBbUIsYUFBTyxNQUFBLEdBQVMsQ0FBQyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQVgsQ0FBRCxFQUFuQzs7SUFDQSxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUwsQ0FBQTtJQUNQLEtBQUssQ0FBQyxNQUFOLEdBQWU7SUFDZixHQUFBLEdBQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYO0lBQ04sS0FBQSxHQUFRLE1BQU8sQ0FBQSxLQUFBLEdBQU0sQ0FBTjtJQUNmLEtBQUEscUNBQUE7O01BQ0MsS0FBQSxHQUFRLEdBQUEsQ0FBSSxHQUFKLEVBQVEsS0FBUixFQUFjLEVBQWQ7SUFEVDtJQUVBLE1BQU8sQ0FBQSxLQUFBLENBQVAsR0FBZ0I7QUFDaEIsV0FBTSxLQUFLLENBQUMsTUFBTixJQUFnQixDQUF0QjtNQUNDLEdBQUEsQ0FBSSxJQUFKLEVBQVMsS0FBVCxFQUFlLEVBQWY7SUFERDtJQUVBLElBQUcsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsQ0FBbkI7YUFBMEIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLGVBQUEsQ0FBQSxDQUFrQixFQUFBLEdBQUcsQ0FBckIsQ0FBQSxDQUFaLEVBQTFCOztFQVpTO0VBY1YsR0FBQSxHQUFNLFFBQUEsQ0FBQyxHQUFELEVBQUssS0FBTCxFQUFXLEVBQVgsQ0FBQTtBQUNMLFFBQUEsQ0FBQSxFQUFBO0lBQUEsSUFBRyxHQUFBLEtBQU8sT0FBVjtNQUNDLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBWDtBQUNBLGFBQU8sTUFGUjs7SUFHQSxJQUFHLEdBQUcsQ0FBQyxXQUFKLENBQUEsQ0FBQSxJQUFxQixLQUF4QjtNQUNDLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBTSxDQUFBLEdBQUcsQ0FBQyxXQUFKLENBQUEsQ0FBQSxDQUFqQjtBQUNBLGFBQU8sTUFGUjs7SUFHQSxJQUFHLEdBQUEsSUFBTyxRQUFWO0FBQXdCLGFBQU8sS0FBQSxHQUFRLFFBQVMsQ0FBQSxHQUFBLENBQVQsQ0FBYyxLQUFkLEVBQXZDOztJQUNBLElBQUcsR0FBQSxLQUFPLElBQVY7QUFDQztRQUNDLENBQUEsR0FBSSxLQUFLLENBQUMsR0FBTixDQUFBO1FBQ0osQ0FBQSxHQUFJLEtBQUssQ0FBQyxHQUFOLENBQUE7UUFDSixNQUFBLENBQU8sQ0FBUCxFQUFVLENBQVYsRUFIRDtPQUFBLGFBQUE7UUFLQyxPQUFPLENBQUMsR0FBUixDQUFZLHlCQUFBLEdBQTRCLENBQUMsRUFBQSxHQUFLLENBQU4sQ0FBeEM7UUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLFVBQVosRUFBd0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxDQUFmLENBQXhCO1FBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUF4QixFQVBEOztBQVFBLGFBQU8sTUFUUjs7QUFVQTtNQUNDLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQVgsRUFERDtLQUFBLGFBQUE7TUFHQyxPQUFPLENBQUMsR0FBUixDQUFZLDZCQUFBLEdBQWdDLENBQUMsRUFBQSxHQUFLLENBQU4sQ0FBNUM7TUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBaUIsR0FBakIsRUFKRDs7QUFLQSxXQUFPO0VBdkJGO0VBeUJOLFNBQUEsR0FBWSxRQUFBLENBQUMsSUFBRCxDQUFBO0FBQ1gsUUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLE1BQUEsR0FBUztJQUNULEtBQUEsc0NBQUE7O01BQ0MsSUFBRyxFQUFBLEtBQU0sSUFBVDtBQUFtQixlQUFPLE9BQTFCOztNQUNBLE1BQUE7SUFGRDtXQUdBO0VBTFc7U0FPWixDQUFDLEdBQUQ7QUF0RGEiLCJzb3VyY2VzQ29udGVudCI6WyJhc3NlcnQgPSBjaGFpLmFzc2VydC5kZWVwRXF1YWxcclxuXHJcbnRlc3RSZWR1Y2VyID0gKHNjcmlwdCxyZWR1Y2VyLHN0YWNrKSAtPlxyXG5cclxuXHRzdGF0ZXMgPSBbXVxyXG5cclxuXHRydW4gPSAtPlxyXG5cdFx0Zm9yIGxpbmUsbnIgaW4gc2NyaXB0LnNwbGl0ICdcXG4nXHJcblx0XHRcdHJ1blRlc3QgbGluZSxuclxyXG5cclxuXHRydW5UZXN0ID0gKGxpbmUsbnIpIC0+XHJcblx0XHRpbmRleCA9IGNvdW50VGFicyBsaW5lXHJcblx0XHRpZiBpbmRleCA9PSAwIHRoZW4gcmV0dXJuIHN0YXRlcyA9IFtKU09OLnBhcnNlIGxpbmVdXHJcblx0XHRsaW5lID0gbGluZS50cmltKClcclxuXHRcdHN0YWNrLmxlbmd0aCA9IDBcclxuXHRcdGFyciA9IGxpbmUuc3BsaXQgJyAnXHJcblx0XHRzdGF0ZSA9IHN0YXRlc1tpbmRleC0xXSBcclxuXHRcdGZvciBjbWQgaW4gYXJyXHRcclxuXHRcdFx0c3RhdGUgPSBycG4gY21kLHN0YXRlLG5yIFxyXG5cdFx0c3RhdGVzW2luZGV4XSA9IHN0YXRlIFxyXG5cdFx0d2hpbGUgc3RhY2subGVuZ3RoID49IDJcclxuXHRcdFx0cnBuICc9PScsc3RhdGUsbnJcclxuXHRcdGlmIHN0YWNrLmxlbmd0aCA9PSAxIHRoZW4gY29uc29sZS5sb2cgXCJPcnBoYW4gaW4gbGluZSAje25yKzF9XCJcclxuXHJcblx0cnBuID0gKGNtZCxzdGF0ZSxucikgLT5cclxuXHRcdGlmIGNtZCA9PSAnU1RBVEUnXHJcblx0XHRcdHN0YWNrLnB1c2ggc3RhdGVcclxuXHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHRpZiBjbWQudG9Mb3dlckNhc2UoKSBvZiBzdGF0ZSBcclxuXHRcdFx0c3RhY2sucHVzaCBzdGF0ZVtjbWQudG9Mb3dlckNhc2UoKV1cclxuXHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHRpZiBjbWQgb2YgcmVkdWNlcnMgdGhlbiByZXR1cm4gc3RhdGUgPSByZWR1Y2Vyc1tjbWRdIHN0YXRlXHJcblx0XHRpZiBjbWQgPT0gJz09JyBcclxuXHRcdFx0dHJ5XHJcblx0XHRcdFx0eCA9IHN0YWNrLnBvcCgpXHJcblx0XHRcdFx0eSA9IHN0YWNrLnBvcCgpXHJcblx0XHRcdFx0YXNzZXJ0IHgsIHlcclxuXHRcdFx0Y2F0Y2hcclxuXHRcdFx0XHRjb25zb2xlLmxvZyAnQXNzZXJ0IGZhaWx1cmUgaW4gbGluZSAnICsgKG5yICsgMSlcclxuXHRcdFx0XHRjb25zb2xlLmxvZyAnICBFeHBlY3QnLCBKU09OLnN0cmluZ2lmeSB4XHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJyAgQWN0dWFsJywgSlNPTi5zdHJpbmdpZnkgeVxyXG5cdFx0XHRyZXR1cm4gc3RhdGVcclxuXHRcdHRyeVxyXG5cdFx0XHRzdGFjay5wdXNoIEpTT04ucGFyc2UgY21kXHJcblx0XHRjYXRjaFxyXG5cdFx0XHRjb25zb2xlLmxvZyAnSlNPTi5wYXJzZSBmYWlsdXJlIGluIGxpbmUgJyArIChuciArIDEpXHJcblx0XHRcdGNvbnNvbGUubG9nICcgICcsY21kXHJcblx0XHRyZXR1cm4gc3RhdGVcclxuXHJcblx0Y291bnRUYWJzID0gKGxpbmUpIC0+XHJcblx0XHRyZXN1bHQgPSAwXHJcblx0XHRmb3IgY2ggaW4gbGluZVxyXG5cdFx0XHRpZiBjaCAhPSAnXFx0JyB0aGVuIHJldHVybiByZXN1bHRcclxuXHRcdFx0cmVzdWx0KytcclxuXHRcdHJlc3VsdFxyXG5cclxuXHR7cnVufSJdfQ==
//# sourceURL=c:\Lab\2019\110-ActionStateTreeTesting\coffee\TestReducer.coffee