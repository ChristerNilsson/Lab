// Generated by CoffeeScript 2.4.1
var TestReducer, assert;

assert = chai.assert.deepEqual;

TestReducer = class TestReducer {
  constructor() {
    this.stack = [];
    this.states = [];
  }

  run(script) {
    var i, len, line, nr, ref, results;
    this.script = script;
    ref = this.script.split('\n');
    results = [];
    for (nr = i = 0, len = ref.length; i < len; nr = ++i) {
      line = ref[nr];
      results.push(this.runTest(line, nr));
    }
    return results;
  }

  runTest(line, nr) {
    var arr, cmd, i, index, len, state;
    index = this.countTabs(line);
    if (index === 0) {
      return this.states = [JSON.parse(line)];
    }
    line = line.trim();
    this.stack = [];
    arr = line.split(' ');
    state = this.states[index - 1];
    for (i = 0, len = arr.length; i < len; i++) {
      cmd = arr[i];
      state = this.rpn(cmd, state, nr);
    }
    this.states[index] = state;
    while (this.stack.length >= 2) {
      this.rpn('==', state, nr);
    }
    if (this.stack.length === 1) {
      return console.log(`Orphan in line ${nr + 1}`);
    }
  }

  rpn(cmd, state, nr) {
    var x, y;
    if (cmd === 'STATE') {
      this.stack.push(state);
      return state;
    }
    if (cmd.toLowerCase() in state) {
      this.stack.push(state[cmd.toLowerCase()]);
      return state;
    }
    if (cmd in this.reducers) {
      return state = this.reducers[cmd](state);
    }
    if (cmd === '==') {
      try {
        x = this.stack.pop();
        y = this.stack.pop();
        assert(x, y);
      } catch (error) {
        console.log('Assert failure in line ' + (nr + 1));
        console.log('  Expect', JSON.stringify(x));
        console.log('  Actual', JSON.stringify(y));
      }
      return state;
    }
    try {
      this.stack.push(JSON.parse(cmd));
    } catch (error) {
      console.log('JSON.parse failure in line ' + (nr + 1));
      console.log('  ', cmd);
    }
    return state;
  }

  countTabs(line) {
    var ch, i, len, result;
    result = 0;
    for (i = 0, len = line.length; i < len; i++) {
      ch = line[i];
      if (ch !== '\t') {
        return result;
      }
      result++;
    }
    return result;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcVGVzdFJlZHVjZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLFdBQUEsRUFBQTs7QUFBQSxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7QUFFZixjQUFOLE1BQUEsWUFBQTtFQUNDLFdBQWMsQ0FBQSxDQUFBO0lBQ2IsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUNULElBQUMsQ0FBQSxNQUFELEdBQVU7RUFGRzs7RUFJZCxHQUFNLE9BQUEsQ0FBQTtBQUNMLFFBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQTtJQURNLElBQUMsQ0FBQTtBQUNQO0FBQUE7SUFBQSxLQUFBLCtDQUFBOzttQkFDQyxJQUFDLENBQUEsT0FBRCxDQUFTLElBQVQsRUFBYyxFQUFkO0lBREQsQ0FBQTs7RUFESzs7RUFJTixPQUFVLENBQUMsSUFBRCxFQUFNLEVBQU4sQ0FBQTtBQUNULFFBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsU0FBRCxDQUFXLElBQVg7SUFDUixJQUFHLEtBQUEsS0FBUyxDQUFaO0FBQW1CLGFBQU8sSUFBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWCxDQUFELEVBQXBDOztJQUNBLElBQUEsR0FBTyxJQUFJLENBQUMsSUFBTCxDQUFBO0lBQ1AsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUNULEdBQUEsR0FBTSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVg7SUFDTixLQUFBLEdBQVEsSUFBQyxDQUFBLE1BQU8sQ0FBQSxLQUFBLEdBQU0sQ0FBTjtJQUNoQixLQUFBLHFDQUFBOztNQUNDLEtBQUEsR0FBUSxJQUFDLENBQUEsR0FBRCxDQUFLLEdBQUwsRUFBUyxLQUFULEVBQWUsRUFBZjtJQURUO0lBRUEsSUFBQyxDQUFBLE1BQU8sQ0FBQSxLQUFBLENBQVIsR0FBaUI7QUFDakIsV0FBTSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsSUFBaUIsQ0FBdkI7TUFDQyxJQUFDLENBQUEsR0FBRCxDQUFLLElBQUwsRUFBVSxLQUFWLEVBQWdCLEVBQWhCO0lBREQ7SUFFQSxJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxLQUFpQixDQUFwQjthQUEyQixPQUFPLENBQUMsR0FBUixDQUFZLENBQUEsZUFBQSxDQUFBLENBQWtCLEVBQUEsR0FBRyxDQUFyQixDQUFBLENBQVosRUFBM0I7O0VBWlM7O0VBY1YsR0FBTSxDQUFDLEdBQUQsRUFBSyxLQUFMLEVBQVcsRUFBWCxDQUFBO0FBQ0wsUUFBQSxDQUFBLEVBQUE7SUFBQSxJQUFHLEdBQUEsS0FBTyxPQUFWO01BQ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksS0FBWjtBQUNBLGFBQU8sTUFGUjs7SUFHQSxJQUFHLEdBQUcsQ0FBQyxXQUFKLENBQUEsQ0FBQSxJQUFxQixLQUF4QjtNQUNDLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLEtBQU0sQ0FBQSxHQUFHLENBQUMsV0FBSixDQUFBLENBQUEsQ0FBbEI7QUFDQSxhQUFPLE1BRlI7O0lBR0EsSUFBRyxHQUFBLElBQU8sSUFBQyxDQUFBLFFBQVg7QUFBeUIsYUFBTyxLQUFBLEdBQVEsSUFBQyxDQUFBLFFBQVMsQ0FBQSxHQUFBLENBQVYsQ0FBZSxLQUFmLEVBQXhDOztJQUNBLElBQUcsR0FBQSxLQUFPLElBQVY7QUFDQztRQUNDLENBQUEsR0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBQTtRQUNKLENBQUEsR0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBQTtRQUNKLE1BQUEsQ0FBTyxDQUFQLEVBQVUsQ0FBVixFQUhEO09BQUEsYUFBQTtRQUtDLE9BQU8sQ0FBQyxHQUFSLENBQVkseUJBQUEsR0FBNEIsQ0FBQyxFQUFBLEdBQUssQ0FBTixDQUF4QztRQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksVUFBWixFQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBeEI7UUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLFVBQVosRUFBd0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxDQUFmLENBQXhCLEVBUEQ7O0FBUUEsYUFBTyxNQVRSOztBQVVBO01BQ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQVksSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQVosRUFERDtLQUFBLGFBQUE7TUFHQyxPQUFPLENBQUMsR0FBUixDQUFZLDZCQUFBLEdBQWdDLENBQUMsRUFBQSxHQUFLLENBQU4sQ0FBNUM7TUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBaUIsR0FBakIsRUFKRDs7QUFLQSxXQUFPO0VBdkJGOztFQXlCTixTQUFZLENBQUMsSUFBRCxDQUFBO0FBQ1gsUUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLE1BQUEsR0FBUztJQUNULEtBQUEsc0NBQUE7O01BQ0MsSUFBRyxFQUFBLEtBQU0sSUFBVDtBQUFtQixlQUFPLE9BQTFCOztNQUNBLE1BQUE7SUFGRDtXQUdBO0VBTFc7O0FBaERiIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gY2hhaS5hc3NlcnQuZGVlcEVxdWFsXHJcblxyXG5jbGFzcyBUZXN0UmVkdWNlclxyXG5cdGNvbnN0cnVjdG9yIDogKCkgLT5cclxuXHRcdEBzdGFjayA9IFtdXHJcblx0XHRAc3RhdGVzID0gW11cclxuXHJcblx0cnVuIDogKEBzY3JpcHQpIC0+XHJcblx0XHRmb3IgbGluZSxuciBpbiBAc2NyaXB0LnNwbGl0ICdcXG4nXHJcblx0XHRcdEBydW5UZXN0IGxpbmUsbnJcclxuXHJcblx0cnVuVGVzdCA6IChsaW5lLG5yKSAtPlxyXG5cdFx0aW5kZXggPSBAY291bnRUYWJzIGxpbmVcclxuXHRcdGlmIGluZGV4ID09IDAgdGhlbiByZXR1cm4gQHN0YXRlcyA9IFtKU09OLnBhcnNlIGxpbmVdXHJcblx0XHRsaW5lID0gbGluZS50cmltKClcclxuXHRcdEBzdGFjayA9IFtdXHJcblx0XHRhcnIgPSBsaW5lLnNwbGl0ICcgJ1xyXG5cdFx0c3RhdGUgPSBAc3RhdGVzW2luZGV4LTFdIFxyXG5cdFx0Zm9yIGNtZCBpbiBhcnJcdFxyXG5cdFx0XHRzdGF0ZSA9IEBycG4gY21kLHN0YXRlLG5yIFxyXG5cdFx0QHN0YXRlc1tpbmRleF0gPSBzdGF0ZSBcclxuXHRcdHdoaWxlIEBzdGFjay5sZW5ndGggPj0gMlxyXG5cdFx0XHRAcnBuICc9PScsc3RhdGUsbnJcclxuXHRcdGlmIEBzdGFjay5sZW5ndGggPT0gMSB0aGVuIGNvbnNvbGUubG9nIFwiT3JwaGFuIGluIGxpbmUgI3tucisxfVwiXHJcblxyXG5cdHJwbiA6IChjbWQsc3RhdGUsbnIpIC0+XHJcblx0XHRpZiBjbWQgPT0gJ1NUQVRFJ1xyXG5cdFx0XHRAc3RhY2sucHVzaCBzdGF0ZVxyXG5cdFx0XHRyZXR1cm4gc3RhdGVcclxuXHRcdGlmIGNtZC50b0xvd2VyQ2FzZSgpIG9mIHN0YXRlIFxyXG5cdFx0XHRAc3RhY2sucHVzaCBzdGF0ZVtjbWQudG9Mb3dlckNhc2UoKV1cclxuXHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHRpZiBjbWQgb2YgQHJlZHVjZXJzIHRoZW4gcmV0dXJuIHN0YXRlID0gQHJlZHVjZXJzW2NtZF0gc3RhdGVcclxuXHRcdGlmIGNtZCA9PSAnPT0nIFxyXG5cdFx0XHR0cnlcclxuXHRcdFx0XHR4ID0gQHN0YWNrLnBvcCgpXHJcblx0XHRcdFx0eSA9IEBzdGFjay5wb3AoKVxyXG5cdFx0XHRcdGFzc2VydCB4LCB5XHJcblx0XHRcdGNhdGNoXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJ0Fzc2VydCBmYWlsdXJlIGluIGxpbmUgJyArIChuciArIDEpXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJyAgRXhwZWN0JywgSlNPTi5zdHJpbmdpZnkgeFxyXG5cdFx0XHRcdGNvbnNvbGUubG9nICcgIEFjdHVhbCcsIEpTT04uc3RyaW5naWZ5IHlcclxuXHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHR0cnlcclxuXHRcdFx0QHN0YWNrLnB1c2ggSlNPTi5wYXJzZSBjbWRcclxuXHRcdGNhdGNoXHJcblx0XHRcdGNvbnNvbGUubG9nICdKU09OLnBhcnNlIGZhaWx1cmUgaW4gbGluZSAnICsgKG5yICsgMSlcclxuXHRcdFx0Y29uc29sZS5sb2cgJyAgJyxjbWRcclxuXHRcdHJldHVybiBzdGF0ZVxyXG5cclxuXHRjb3VudFRhYnMgOiAobGluZSkgLT5cclxuXHRcdHJlc3VsdCA9IDBcclxuXHRcdGZvciBjaCBpbiBsaW5lXHJcblx0XHRcdGlmIGNoICE9ICdcXHQnIHRoZW4gcmV0dXJuIHJlc3VsdFxyXG5cdFx0XHRyZXN1bHQrK1xyXG5cdFx0cmVzdWx0XHJcbiJdfQ==
//# sourceURL=c:\Lab\2019\110-ActionStateTreeTesting\coffee\TestReducer.coffee