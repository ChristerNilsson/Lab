// Generated by CoffeeScript 2.4.1
var assert, countTabs, rpn, run, runTest, states;

assert = chai.assert.deepEqual;

states = [];

run = function(script) {
  var i, len, line, nr, ref, results;
  ref = script.split('\n');
  results = [];
  for (nr = i = 0, len = ref.length; i < len; nr = ++i) {
    line = ref[nr];
    results.push(runTest(line, nr));
  }
  return results;
};

runTest = function(line, nr) {
  var arr, cmd, i, index, len, stack, state;
  index = countTabs(line);
  if (index === 0) {
    return states = [JSON.parse(line)];
  }
  line = line.trim();
  stack = [];
  arr = line.split(' ');
  state = states[index - 1];
  for (i = 0, len = arr.length; i < len; i++) {
    cmd = arr[i];
    state = rpn(cmd, state, nr);
  }
  states[index] = state;
  while (stack.length >= 2) {
    rpn('==', state, nr);
  }
  if (stack.length === 1) {
    return console.log(`Orphan in line ${nr + 1}`);
  }
};

rpn = function(cmd, state, nr) {
  var x, y;
  if (cmd === 'STATE') {
    stack.push(state);
    return state;
  }
  if (cmd.toLowerCase() in state) {
    stack.push(state[cmd.toLowerCase()]);
    return state;
  }
  if (cmd in reducers) {
    return state = reducers[cmd](state);
  }
  if (cmd === '==') {
    try {
      x = stack.pop();
      y = stack.pop();
      assert(x, y);
    } catch (error) {
      console.log('Assert failure in line ' + (nr + 1));
      console.log('  Expect', JSON.stringify(x));
      console.log('  Actual', JSON.stringify(y));
    }
    return state;
  }
  try {
    stack.push(JSON.parse(cmd));
  } catch (error) {
    console.log('JSON.parse failure in line ' + (nr + 1));
    console.log('  ', cmd);
  }
  return state;
};

countTabs = function(line) {
  var ch, i, len, result;
  result = 0;
  for (i = 0, len = line.length; i < len; i++) {
    ch = line[i];
    if (ch !== '\t') {
      return result;
    }
    result++;
  }
  return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcVGVzdFJlZHVjZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7O0FBQUEsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7O0FBRXJCLE1BQUEsR0FBUzs7QUFFVCxHQUFBLEdBQU0sUUFBQSxDQUFDLE1BQUQsQ0FBQTtBQUNMLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQTtBQUFBO0FBQUE7RUFBQSxLQUFBLCtDQUFBOztpQkFDQyxPQUFBLENBQVEsSUFBUixFQUFhLEVBQWI7RUFERCxDQUFBOztBQURLOztBQUlOLE9BQUEsR0FBVSxRQUFBLENBQUMsSUFBRCxFQUFNLEVBQU4sQ0FBQTtBQUNULE1BQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUE7RUFBQSxLQUFBLEdBQVEsU0FBQSxDQUFVLElBQVY7RUFDUixJQUFHLEtBQUEsS0FBUyxDQUFaO0FBQW1CLFdBQU8sTUFBQSxHQUFTLENBQUMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYLENBQUQsRUFBbkM7O0VBQ0EsSUFBQSxHQUFPLElBQUksQ0FBQyxJQUFMLENBQUE7RUFDUCxLQUFBLEdBQVE7RUFDUixHQUFBLEdBQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYO0VBQ04sS0FBQSxHQUFRLE1BQU8sQ0FBQSxLQUFBLEdBQU0sQ0FBTjtFQUNmLEtBQUEscUNBQUE7O0lBQ0MsS0FBQSxHQUFRLEdBQUEsQ0FBSSxHQUFKLEVBQVEsS0FBUixFQUFjLEVBQWQ7RUFEVDtFQUVBLE1BQU8sQ0FBQSxLQUFBLENBQVAsR0FBZ0I7QUFDaEIsU0FBTSxLQUFLLENBQUMsTUFBTixJQUFnQixDQUF0QjtJQUNDLEdBQUEsQ0FBSSxJQUFKLEVBQVMsS0FBVCxFQUFlLEVBQWY7RUFERDtFQUVBLElBQUcsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsQ0FBbkI7V0FBMEIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLGVBQUEsQ0FBQSxDQUFrQixFQUFBLEdBQUcsQ0FBckIsQ0FBQSxDQUFaLEVBQTFCOztBQVpTOztBQWNWLEdBQUEsR0FBTSxRQUFBLENBQUMsR0FBRCxFQUFLLEtBQUwsRUFBVyxFQUFYLENBQUE7QUFDTCxNQUFBLENBQUEsRUFBQTtFQUFBLElBQUcsR0FBQSxLQUFPLE9BQVY7SUFDQyxLQUFLLENBQUMsSUFBTixDQUFXLEtBQVg7QUFDQSxXQUFPLE1BRlI7O0VBR0EsSUFBRyxHQUFHLENBQUMsV0FBSixDQUFBLENBQUEsSUFBcUIsS0FBeEI7SUFDQyxLQUFLLENBQUMsSUFBTixDQUFXLEtBQU0sQ0FBQSxHQUFHLENBQUMsV0FBSixDQUFBLENBQUEsQ0FBakI7QUFDQSxXQUFPLE1BRlI7O0VBR0EsSUFBRyxHQUFBLElBQU8sUUFBVjtBQUF3QixXQUFPLEtBQUEsR0FBUSxRQUFTLENBQUEsR0FBQSxDQUFULENBQWMsS0FBZCxFQUF2Qzs7RUFDQSxJQUFHLEdBQUEsS0FBTyxJQUFWO0FBQ0M7TUFDQyxDQUFBLEdBQUksS0FBSyxDQUFDLEdBQU4sQ0FBQTtNQUNKLENBQUEsR0FBSSxLQUFLLENBQUMsR0FBTixDQUFBO01BQ0osTUFBQSxDQUFPLENBQVAsRUFBVSxDQUFWLEVBSEQ7S0FBQSxhQUFBO01BS0MsT0FBTyxDQUFDLEdBQVIsQ0FBWSx5QkFBQSxHQUE0QixDQUFDLEVBQUEsR0FBSyxDQUFOLENBQXhDO01BQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUF4QjtNQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksVUFBWixFQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBeEIsRUFQRDs7QUFRQSxXQUFPLE1BVFI7O0FBVUE7SUFDQyxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFYLEVBREQ7R0FBQSxhQUFBO0lBR0MsT0FBTyxDQUFDLEdBQVIsQ0FBWSw2QkFBQSxHQUFnQyxDQUFDLEVBQUEsR0FBSyxDQUFOLENBQTVDO0lBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFaLEVBQWlCLEdBQWpCLEVBSkQ7O0FBS0EsU0FBTztBQXZCRjs7QUF5Qk4sU0FBQSxHQUFZLFFBQUEsQ0FBQyxJQUFELENBQUE7QUFDWCxNQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUEsTUFBQSxHQUFTO0VBQ1QsS0FBQSxzQ0FBQTs7SUFDQyxJQUFHLEVBQUEsS0FBTSxJQUFUO0FBQW1CLGFBQU8sT0FBMUI7O0lBQ0EsTUFBQTtFQUZEO1NBR0E7QUFMVyIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IGNoYWkuYXNzZXJ0LmRlZXBFcXVhbFxyXG5cclxuc3RhdGVzID0gW11cclxuXHJcbnJ1biA9IChzY3JpcHQpIC0+XHJcblx0Zm9yIGxpbmUsbnIgaW4gc2NyaXB0LnNwbGl0ICdcXG4nXHJcblx0XHRydW5UZXN0IGxpbmUsbnJcclxuXHJcbnJ1blRlc3QgPSAobGluZSxucikgLT5cclxuXHRpbmRleCA9IGNvdW50VGFicyBsaW5lXHJcblx0aWYgaW5kZXggPT0gMCB0aGVuIHJldHVybiBzdGF0ZXMgPSBbSlNPTi5wYXJzZSBsaW5lXVxyXG5cdGxpbmUgPSBsaW5lLnRyaW0oKVxyXG5cdHN0YWNrID0gW11cclxuXHRhcnIgPSBsaW5lLnNwbGl0ICcgJ1xyXG5cdHN0YXRlID0gc3RhdGVzW2luZGV4LTFdIFxyXG5cdGZvciBjbWQgaW4gYXJyXHRcclxuXHRcdHN0YXRlID0gcnBuIGNtZCxzdGF0ZSxuciBcclxuXHRzdGF0ZXNbaW5kZXhdID0gc3RhdGUgXHJcblx0d2hpbGUgc3RhY2subGVuZ3RoID49IDJcclxuXHRcdHJwbiAnPT0nLHN0YXRlLG5yXHJcblx0aWYgc3RhY2subGVuZ3RoID09IDEgdGhlbiBjb25zb2xlLmxvZyBcIk9ycGhhbiBpbiBsaW5lICN7bnIrMX1cIlxyXG5cclxucnBuID0gKGNtZCxzdGF0ZSxucikgLT5cclxuXHRpZiBjbWQgPT0gJ1NUQVRFJ1xyXG5cdFx0c3RhY2sucHVzaCBzdGF0ZVxyXG5cdFx0cmV0dXJuIHN0YXRlXHJcblx0aWYgY21kLnRvTG93ZXJDYXNlKCkgb2Ygc3RhdGUgXHJcblx0XHRzdGFjay5wdXNoIHN0YXRlW2NtZC50b0xvd2VyQ2FzZSgpXVxyXG5cdFx0cmV0dXJuIHN0YXRlXHJcblx0aWYgY21kIG9mIHJlZHVjZXJzIHRoZW4gcmV0dXJuIHN0YXRlID0gcmVkdWNlcnNbY21kXSBzdGF0ZVxyXG5cdGlmIGNtZCA9PSAnPT0nIFxyXG5cdFx0dHJ5XHJcblx0XHRcdHggPSBzdGFjay5wb3AoKVxyXG5cdFx0XHR5ID0gc3RhY2sucG9wKClcclxuXHRcdFx0YXNzZXJ0IHgsIHlcclxuXHRcdGNhdGNoXHJcblx0XHRcdGNvbnNvbGUubG9nICdBc3NlcnQgZmFpbHVyZSBpbiBsaW5lICcgKyAobnIgKyAxKVxyXG5cdFx0XHRjb25zb2xlLmxvZyAnICBFeHBlY3QnLCBKU09OLnN0cmluZ2lmeSB4XHJcblx0XHRcdGNvbnNvbGUubG9nICcgIEFjdHVhbCcsIEpTT04uc3RyaW5naWZ5IHlcclxuXHRcdHJldHVybiBzdGF0ZVxyXG5cdHRyeVxyXG5cdFx0c3RhY2sucHVzaCBKU09OLnBhcnNlIGNtZFxyXG5cdGNhdGNoXHJcblx0XHRjb25zb2xlLmxvZyAnSlNPTi5wYXJzZSBmYWlsdXJlIGluIGxpbmUgJyArIChuciArIDEpXHJcblx0XHRjb25zb2xlLmxvZyAnICAnLGNtZFxyXG5cdHJldHVybiBzdGF0ZVxyXG5cclxuY291bnRUYWJzID0gKGxpbmUpIC0+XHJcblx0cmVzdWx0ID0gMFxyXG5cdGZvciBjaCBpbiBsaW5lXHJcblx0XHRpZiBjaCAhPSAnXFx0JyB0aGVuIHJldHVybiByZXN1bHRcclxuXHRcdHJlc3VsdCsrXHJcblx0cmVzdWx0XHJcbiJdfQ==
//# sourceURL=c:\Lab\2019\110-ActionStateTreeTesting\coffee\TestReducer.coffee