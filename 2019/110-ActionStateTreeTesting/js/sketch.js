// Generated by CoffeeScript 2.4.1
var Shortcut, assert, rpn, runAllTests, runTest, script, shortcut, stack, states;

assert = chai.assert.deepEqual;

stack = [];

states = [];

script = "0 17 1 INIT A 17 B 1\n	1 ADD STATE {\"a\":19,\"b\":1,\"hist\":[17]}\n	1 ADD A 19\n	1 ADD B 1\n	1 ADD HIST [17] \n	1 ADD A 19 B 1\n	1 ADD A 19 B 1 HIST [17]\n	1 MUL STATE {\"a\":34,\"b\":1,\"hist\":[17]}\n		2 ADD STATE {\"a\":36,\"b\":1,\"hist\":[17,34]}\n			3 UNDO STATE {\"a\":34,\"b\":1,\"hist\":[17]}\n	1 MUL ADD DIV A 18\n		2 17 1 INIT STATE {\"a\":17,\"b\":1,\"hist\":[]}";

Shortcut = class Shortcut {
  constructor() {
    this.state = {
      a: 17,
      b: 1,
      hist: []
    };
  }

  init(b, a) {
    var hist;
    hist = [];
    return this.state = {a, b, hist};
  }

  op(value) {
    this.state.hist.push(this.state.a);
    return this.state.a = value;
  }

  add() {
    return this.op(this.state.a + 2);
  }

  mul() {
    return this.op(this.state.a * 2);
  }

  div() {
    return this.op(this.state.a / 2);
  }

  undo() {
    return this.state.a = this.state.hist.pop();
  }

};

rpn = function(cmd, nr) {
  var state, x, y;
  state = shortcut.state;
  if (cmd === 'INIT') {
    return shortcut.init(stack.pop(), stack.pop());
  }
  if (cmd === 'STATE') {
    return stack.push(state);
  }
  if (cmd === 'A') {
    return stack.push(state.a);
  }
  if (cmd === 'B') {
    return stack.push(state.b);
  }
  if (cmd === 'HIST') {
    return stack.push(state.hist);
  }
  if (cmd === 'ADD') {
    return shortcut.add();
  }
  if (cmd === 'MUL') {
    return shortcut.mul();
  }
  if (cmd === 'DIV') {
    return shortcut.div();
  }
  if (cmd === 'UNDO') {
    return shortcut.undo();
  }
  if (cmd === '==') {
    try {
      x = stack.pop();
      y = stack.pop();
      assert(x, y);
    } catch (error) {
      console.log('Assert failure in line ' + (nr + 1));
      console.log('  Expect', JSON.stringify(x));
      console.log('  Actual', JSON.stringify(y));
    }
    return;
  }
  try {
    return stack.push(JSON.parse(cmd));
  } catch (error) {
    console.log('JSON.parse failure in line ' + (nr + 1));
    return console.log('  ', cmd);
  }
};

shortcut = new Shortcut();

runAllTests = function(script) {
  var i, len, line, nr, ref, results;
  ref = script.split('\n');
  results = [];
  for (nr = i = 0, len = ref.length; i < len; nr = ++i) {
    line = ref[nr];
    results.push(runTest(line.trim(), nr + 1));
  }
  return results;
};

runTest = function(line, nr) {
  var arr, cmd, i, index, len;
  stack = [];
  [index, ...arr] = line.split(' ');
  index = parseInt(index);
  if (index === 0) {
    shortcut.init();
  } else {
    shortcut.state = JSON.parse(states[index - 1]);
  }
  for (i = 0, len = arr.length; i < len; i++) {
    cmd = arr[i];
    rpn(cmd, nr);
  }
  states[index] = JSON.stringify(shortcut.state);
  while (stack.length >= 2) {
    rpn('==', nr);
  }
  if (stack.length === 1) {
    return console.log(`Orphan in line ${nr + 1}`);
  }
};

runAllTests(script);

console.log('Ready!');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQTs7QUFBQSxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7QUFFckIsS0FBQSxHQUFROztBQUNSLE1BQUEsR0FBUzs7QUFFVCxNQUFBLEdBQVM7O0FBZUgsV0FBTixNQUFBLFNBQUE7RUFDQyxXQUFhLENBQUEsQ0FBQTtJQUFNLElBQUMsQ0FBQSxLQUFELEdBQVM7TUFBQyxDQUFBLEVBQUUsRUFBSDtNQUFNLENBQUEsRUFBRSxDQUFSO01BQVUsSUFBQSxFQUFLO0lBQWY7RUFBZjs7RUFDYixJQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtBQUNOLFFBQUE7SUFBQSxJQUFBLEdBQU87V0FDUCxJQUFDLENBQUEsS0FBRCxHQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxJQUFMO0VBRkg7O0VBR1AsRUFBSyxDQUFDLEtBQUQsQ0FBQTtJQUNKLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVosQ0FBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUF4QjtXQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXO0VBRlA7O0VBR0wsR0FBSyxDQUFBLENBQUE7V0FBRyxJQUFDLENBQUEsRUFBRCxDQUFJLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXLENBQWY7RUFBSDs7RUFDTCxHQUFLLENBQUEsQ0FBQTtXQUFHLElBQUMsQ0FBQSxFQUFELENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUFQLEdBQVcsQ0FBZjtFQUFIOztFQUNMLEdBQUssQ0FBQSxDQUFBO1dBQUcsSUFBQyxDQUFBLEVBQUQsQ0FBSSxJQUFDLENB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RUFBQSxLQUFBLEdBQVE7RUFDUixDQUFDLEtBQUQsRUFBUSxHQUFHLEdBQVgsQ0FBQSxHQUFrQixJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVg7RUFDbEIsS0FBQSxHQUFRLFFBQUEsQ0FBUyxLQUFUO0VBQ1IsSUFBRyxLQUFBLEtBQVMsQ0FBWjtJQUNDLFFBQVEsQ0FBQyxJQUFULENBQUEsRUFERDtHQUFBLE1BQUE7SUFHQyxRQUFRLENBQUMsS0FBVCxHQUFpQixJQUFJLENBQUMsS0FBTCxDQUFXLE1BQU8sQ0FBQSxLQUFBLEdBQU0sQ0FBTixDQUFsQixFQUhsQjs7RUFJQSxLQUFBLHFDQUFBOztJQUNDLEdBQUEsQ0FBSSxHQUFKLEVBQVEsRUFBUjtFQUREO0VBRUEsTUFBTyxDQUFBLEtBQUEsQ0FBUCxHQUFnQixJQUFJLENBQUMsU0FBTCxDQUFlLFFBQVEsQ0FBQyxLQUF4QjtBQUNoQixTQUFNLEtBQUssQ0FBQyxNQUFOLElBQWdCLENBQXRCO0lBQ0MsR0FBQSxDQUFJLElBQUosRUFBUyxFQUFUO0VBREQ7RUFFQSxJQUFHLEtBQUssQ0FBQyxNQUFOLEtBQWMsQ0FBakI7V0FBd0IsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLGVBQUEsQ0FBQSxDQUFrQixFQUFBLEdBQUcsQ0FBckIsQ0FBQSxDQUFaLEVBQXhCOztBQWJTOztBQWVWLFdBQUEsQ0FBWSxNQUFaOztBQUVBLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWiIsInNvdXJjZXNDb250ZW50IjpbImFzc2VydCA9IGNoYWkuYXNzZXJ0LmRlZXBFcXVhbFxyXG5cclxuc3RhY2sgPSBbXVxyXG5zdGF0ZXMgPSBbXVxyXG5cclxuc2NyaXB0ID0gXCJcIlwiXHJcbjAgMTcgMSBJTklUIEEgMTcgQiAxXHJcblx0MSBBREQgU1RBVEUge1wiYVwiOjE5LFwiYlwiOjEsXCJoaXN0XCI6WzE3XX1cclxuXHQxIEFERCBBIDE5XHJcblx0MSBBREQgQiAxXHJcblx0MSBBREQgSElTVCBbMTddIFxyXG5cdDEgQUREIEEgMTkgQiAxXHJcblx0MSBBREQgQSAxOSBCIDEgSElTVCBbMTddXHJcblx0MSBNVUwgU1RBVEUge1wiYVwiOjM0LFwiYlwiOjEsXCJoaXN0XCI6WzE3XX1cclxuXHRcdDIgQUREIFNUQVRFIHtcImFcIjozNixcImJcIjoxLFwiaGlzdFwiOlsxNywzNF19XHJcblx0XHRcdDMgVU5ETyBTVEFURSB7XCJhXCI6MzQsXCJiXCI6MSxcImhpc3RcIjpbMTddfVxyXG5cdDEgTVVMIEFERCBESVYgQSAxOFxyXG5cdFx0MiAxNyAxIElOSVQgU1RBVEUge1wiYVwiOjE3LFwiYlwiOjEsXCJoaXN0XCI6W119XHJcblwiXCJcIlxyXG5cclxuY2xhc3MgU2hvcnRjdXRcclxuXHRjb25zdHJ1Y3RvcjogKCkgLT4gQHN0YXRlID0ge2E6MTcsYjoxLGhpc3Q6W119XHJcblx0aW5pdCA6IChiLGEpIC0+XHJcblx0XHRoaXN0ID0gW11cclxuXHRcdEBzdGF0ZSA9IHthLGIsaGlzdH1cclxuXHRvcCA6ICh2YWx1ZSkgLT5cclxuXHRcdEBzdGF0ZS5oaXN0LnB1c2ggQHN0YXRlLmFcclxuXHRcdEBzdGF0ZS5hID0gdmFsdWVcclxuXHRhZGQ6IC0+IEBvcCBAc3RhdGUuYSArIDJcclxuXHRtdWw6IC0+IEBvcCBAc3RhdGUuYSAqIDJcclxuXHRkaXY6IC0+IEBvcCBAc3RhdGUuYSAvIDJcclxuXHR1bmRvOiAtPiBAc3RhdGUuYSA9IEBzdGF0ZS5oaXN0LnBvcCgpXHJcblxyXG5ycG4gPSAoY21kLG5yKSAtPlxyXG5cdHN0YXRlID0gc2hvcnRjdXQuc3RhdGVcclxuXHRpZiBjbWQgPT0gJ0lOSVQnICB0aGVuIHJldHVybiBzaG9ydGN1dC5pbml0KHN0YWNrLnBvcCgpLHN0YWNrLnBvcCgpKVxyXG5cdGlmIGNtZCA9PSAnU1RBVEUnIHRoZW4gcmV0dXJuIHN0YWNrLnB1c2ggc3RhdGVcclxuXHRpZiBjbWQgPT0gJ0EnICAgICB0aGVuIHJldHVybiBzdGFjay5wdXNoIHN0YXRlLmFcclxuXHRpZiBjbWQgPT0gJ0InICAgICB0aGVuIHJldHVybiBzdGFjay5wdXNoIHN0YXRlLmJcclxuXHRpZiBjbWQgPT0gJ0hJU1QnICB0aGVuIHJldHVybiBzdGFjay5wdXNoIHN0YXRlLmhpc3RcclxuXHRpZiBjbWQgPT0gJ0FERCcgICB0aGVuIHJldHVybiBzaG9ydGN1dC5hZGQoKVxyXG5cdGlmIGNtZCA9PSAnTVVMJyAgIHRoZW4gcmV0dXJuIHNob3J0Y3V0Lm11bCgpXHJcblx0aWYgY21kID09ICdESVYnICAgdGhlbiByZXR1cm4gc2hvcnRjdXQuZGl2KClcclxuXHRpZiBjbWQgPT0gJ1VORE8nICB0aGVuIHJldHVybiBzaG9ydGN1dC51bmRvKClcclxuXHRpZiBjbWQgPT0gJz09JyBcclxuXHRcdHRyeVxyXG5cdFx0XHR4ID0gc3RhY2sucG9wKClcclxuXHRcdFx0eSA9IHN0YWNrLnBvcCgpXHJcblx0XHRcdGFzc2VydCB4LCB5XHJcblx0XHRjYXRjaFxyXG5cdFx0XHRjb25zb2xlLmxvZyAnQXNzZXJ0IGZhaWx1cmUgaW4gbGluZSAnICsgKG5yICsgMSlcclxuXHRcdFx0Y29uc29sZS5sb2cgJyAgRXhwZWN0JywgSlNPTi5zdHJpbmdpZnkgeFxyXG5cdFx0XHRjb25zb2xlLmxvZyAnICBBY3R1YWwnLCBKU09OLnN0cmluZ2lmeSB5XHJcblx0XHRyZXR1cm4gXHJcblx0dHJ5XHJcblx0XHRzdGFjay5wdXNoIEpTT04ucGFyc2UgY21kXHJcblx0Y2F0Y2hcclxuXHRcdGNvbnNvbGUubG9nICdKU09OLnBhcnNlIGZhaWx1cmUgaW4gbGluZSAnICsgKG5yICsgMSlcclxuXHRcdGNvbnNvbGUubG9nICcgICcsY21kXHJcblxyXG5zaG9ydGN1dCA9IG5ldyBTaG9ydGN1dCgpXHJcblxyXG5ydW5BbGxUZXN0cyA9IChzY3JpcHQpIC0+XHJcblx0Zm9yIGxpbmUsbnIgaW4gc2NyaXB0LnNwbGl0ICdcXG4nXHJcblx0XHRydW5UZXN0IGxpbmUudHJpbSgpLG5yKzFcclxuXHJcbnJ1blRlc3QgPSAobGluZSxucikgLT5cclxuXHRzdGFjayA9IFtdXHJcblx0W2luZGV4LCAuLi5hcnJdID0gbGluZS5zcGxpdCAnICdcclxuXHRpbmRleCA9IHBhcnNlSW50IGluZGV4XHJcblx0aWYgaW5kZXggPT0gMCBcclxuXHRcdHNob3J0Y3V0LmluaXQoKVxyXG5cdGVsc2UgXHJcblx0XHRzaG9ydGN1dC5zdGF0ZSA9IEpTT04ucGFyc2Ugc3RhdGVzW2luZGV4LTFdXHJcblx0Zm9yIGNtZCBpbiBhcnJcdFxyXG5cdFx0cnBuIGNtZCxuciBcclxuXHRzdGF0ZXNbaW5kZXhdID0gSlNPTi5zdHJpbmdpZnkoc2hvcnRjdXQuc3RhdGUpXHJcblx0d2hpbGUgc3RhY2subGVuZ3RoID49IDJcclxuXHRcdHJwbiAnPT0nLG5yXHJcblx0aWYgc3RhY2subGVuZ3RoPT0xIHRoZW4gY29uc29sZS5sb2cgXCJPcnBoYW4gaW4gbGluZSAje25yKzF9XCJcclxuXHJcbnJ1bkFsbFRlc3RzIHNjcmlwdFxyXG5cclxuY29uc29sZS5sb2cgJ1JlYWR5ISciXX0=
//# sourceURL=c:\Lab\2019\110-StateTreeTicTacToe\coffee\sketch.coffee