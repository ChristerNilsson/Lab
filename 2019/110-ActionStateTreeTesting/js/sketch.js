// Generated by CoffeeScript 2.4.1
var assert, op, reducers, rpn, runAllTests, runTest, script, stack, states,
  splice = [].splice;

assert = chai.assert.deepEqual;

stack = [];

states = [];

script = "{\"a\":17,\"b\":1,\"hist\":[]}\n0 A 17 B 1\n0 ADD \n	1 STATE {\"a\":19,\"b\":1,\"hist\":[17]}\n	1 A 19\n	1 B 1\n	1 HIST [17] \n	1 A 19 B 1\n	1 A 19 B 1 HIST [17]\n0 MUL STATE {\"a\":34,\"b\":1,\"hist\":[17]}\n	1 ADD STATE {\"a\":36,\"b\":1,\"hist\":[17,34]}\n		2 UNDO STATE {\"a\":34,\"b\":1,\"hist\":[17]}\n0 MUL ADD DIV A 18\n	1 17 1 NEW STATE {\"a\":17,\"b\":1,\"hist\":[]}";

op = function(state, value) {
  var a, hist;
  hist = [...state.hist, state.a];
  a = value;
  return {...state, a, hist};
};

reducers = {
  ADD: function(state) {
    return op(state, state.a + 2);
  },
  MUL: function(state) {
    return op(state, state.a * 2);
  },
  DIV: function(state) {
    return op(state, state.a / 2);
  },
  NEW: function(state) {
    return {
      b: stack.pop(),
      a: stack.pop(),
      hist: []
    };
  },
  UNDO: function(state) {
    var a, hist, ref;
    ref = state.hist, [...hist] = ref, [a] = splice.call(hist, -1);
    return {...state, a, hist};
  }
};

rpn = function(cmd, state, nr) {
  var x, y;
  if (cmd === 'STATE') {
    stack.push(state);
    return state;
  }
  if (cmd.toLowerCase() in state) {
    stack.push(state[cmd.toLowerCase()]);
    return state;
  }
  if (cmd in reducers) {
    return state = reducers[cmd](state);
  }
  if (cmd === '==') {
    try {
      x = stack.pop();
      y = stack.pop();
      assert(x, y);
    } catch (error) {
      console.log('Assert failure in line ' + (nr + 1));
      console.log('  Expect', JSON.stringify(x));
      console.log('  Actual', JSON.stringify(y));
    }
    return state;
  }
  try {
    stack.push(JSON.parse(cmd));
  } catch (error) {
    console.log('JSON.parse failure in line ' + (nr + 1));
    console.log('  ', cmd);
  }
  return state;
};

runAllTests = function(script) {
  var i, len, line, nr, ref, results;
  ref = script.split('\n');
  results = [];
  for (nr = i = 0, len = ref.length; i < len; nr = ++i) {
    line = ref[nr];
    if (nr === 0) {
      results.push(states = [JSON.parse(line)]);
    } else {
      results.push(runTest(line.trim(), nr));
    }
  }
  return results;
};

runTest = function(line, nr) {
  var arr, cmd, i, index, len, state;
  stack = [];
  [index, ...arr] = line.split(' ');
  index = parseInt(index);
  state = states[index];
  for (i = 0, len = arr.length; i < len; i++) {
    cmd = arr[i];
    state = rpn(cmd, state, nr);
  }
  states[index + 1] = state;
  while (stack.length >= 2) {
    rpn('==', state, nr);
  }
  if (stack.length === 1) {
    return console.log(`Orphan in line ${nr + 1}`);
  }
};

runAllTests(script);

console.log('Readyz!');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLFdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBO0VBQUE7O0FBQUEsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7O0FBRXJCLEtBQUEsR0FBUTs7QUFDUixNQUFBLEdBQVM7O0FBRVQsTUFBQSxHQUFTOztBQWlCVCxFQUFBLEdBQUssUUFBQSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBQUE7QUFDSixNQUFBLENBQUEsRUFBQTtFQUFBLElBQUEsR0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQVYsRUFBZ0IsS0FBSyxDQUFDLENBQXRCO0VBQ1AsQ0FBQSxHQUFJO1NBQ0osQ0FBQyxHQUFHLEtBQUosRUFBVyxDQUFYLEVBQWMsSUFBZDtBQUhJOztBQUtMLFFBQUEsR0FDQztFQUFBLEdBQUEsRUFBSyxRQUFBLENBQUMsS0FBRCxDQUFBO1dBQVcsRUFBQSxDQUFHLEtBQUgsRUFBVSxLQUFLLENBQUMsQ0FBTixHQUFRLENBQWxCO0VBQVgsQ0FBTDtFQUNBLEdBQUEsRUFBSyxRQUFBLENBQUMsS0FBRCxDQUFBO1dBQVcsRUFBQSxDQUFHLEtBQUgsRUFBVSxLQUFLLENBQUMsQ0FBTixHQUFRLENBQWxCO0VBQVgsQ0FETDtFQUVBLEdBQUEsRUFBSyxRQUFBLENBQUMsS0FBRCxDQUFBO1dBQVcsRUFBQSxDQUFHLEtBQUgsRUFBVSxLQUFLLENBQUMsQ0FBTixHQUFRLENBQWxCO0VBQVgsQ0FGTDtFQUdBLEdBQUEsRUFBSyxRQUFBLENBQUMsS0FBRCxDQUFBO1dBQVc7TUFBQyxDQUFBLEVBQUUsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFIO01BQWdCLENBQUEsRUFBRSxLQUFLLENBQUMsR0FBTixD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QUssQ0FBQyxNQUFOLElBQWdCLENBQXRCO0lBQ0MsR0FBQSxDQUFJLElBQUosRUFBUyxLQUFULEVBQWUsRUFBZjtFQUREO0VBRUEsSUFBRyxLQUFLLENBQUMsTUFBTixLQUFnQixDQUFuQjtXQUEwQixPQUFPLENBQUMsR0FBUixDQUFZLENBQUEsZUFBQSxDQUFBLENBQWtCLEVBQUEsR0FBRyxDQUFyQixDQUFBLENBQVosRUFBMUI7O0FBVlM7O0FBWVYsV0FBQSxDQUFZLE1BQVo7O0FBRUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gY2hhaS5hc3NlcnQuZGVlcEVxdWFsXHJcblxyXG5zdGFjayA9IFtdXHJcbnN0YXRlcyA9IFtdXHJcblxyXG5zY3JpcHQgPSBcIlwiXCJcclxue1wiYVwiOjE3LFwiYlwiOjEsXCJoaXN0XCI6W119XHJcbjAgQSAxNyBCIDFcclxuMCBBREQgXHJcblx0MSBTVEFURSB7XCJhXCI6MTksXCJiXCI6MSxcImhpc3RcIjpbMTddfVxyXG5cdDEgQSAxOVxyXG5cdDEgQiAxXHJcblx0MSBISVNUIFsxN10gXHJcblx0MSBBIDE5IEIgMVxyXG5cdDEgQSAxOSBCIDEgSElTVCBbMTddXHJcbjAgTVVMIFNUQVRFIHtcImFcIjozNCxcImJcIjoxLFwiaGlzdFwiOlsxN119XHJcblx0MSBBREQgU1RBVEUge1wiYVwiOjM2LFwiYlwiOjEsXCJoaXN0XCI6WzE3LDM0XX1cclxuXHRcdDIgVU5ETyBTVEFURSB7XCJhXCI6MzQsXCJiXCI6MSxcImhpc3RcIjpbMTddfVxyXG4wIE1VTCBBREQgRElWIEEgMThcclxuXHQxIDE3IDEgTkVXIFNUQVRFIHtcImFcIjoxNyxcImJcIjoxLFwiaGlzdFwiOltdfVxyXG5cIlwiXCJcclxuXHJcbm9wID0gKHN0YXRlLCB2YWx1ZSkgLT5cclxuXHRoaXN0ID0gWy4uLnN0YXRlLmhpc3QsIHN0YXRlLmFdXHJcblx0YSA9IHZhbHVlXHJcblx0ey4uLnN0YXRlLCBhLCBoaXN0fVxyXG5cclxucmVkdWNlcnMgPSBcclxuXHRBREQ6IChzdGF0ZSkgLT4gb3Agc3RhdGUsIHN0YXRlLmErMlxyXG5cdE1VTDogKHN0YXRlKSAtPiBvcCBzdGF0ZSwgc3RhdGUuYSoyXHJcblx0RElWOiAoc3RhdGUpIC0+IG9wIHN0YXRlLCBzdGF0ZS5hLzJcclxuXHRORVc6IChzdGF0ZSkgLT4ge2I6c3RhY2sucG9wKCksIGE6c3RhY2sucG9wKCksIGhpc3Q6W119XHJcblx0VU5ETzooc3RhdGUpIC0+XHJcblx0XHRbLi4uaGlzdCxhXSA9IHN0YXRlLmhpc3RcclxuXHRcdHsuLi5zdGF0ZSwgYSwgaGlzdH1cdFxyXG5cclxucnBuID0gKGNtZCxzdGF0ZSxucikgLT5cclxuXHRpZiBjbWQgPT0gJ1NUQVRFJ1xyXG5cdFx0c3RhY2sucHVzaCBzdGF0ZVxyXG5cdFx0cmV0dXJuIHN0YXRlXHJcblx0aWYgY21kLnRvTG93ZXJDYXNlKCkgb2Ygc3RhdGUgXHJcblx0XHRzdGFjay5wdXNoIHN0YXRlW2NtZC50b0xvd2VyQ2FzZSgpXVxyXG5cdFx0cmV0dXJuIHN0YXRlXHJcblx0aWYgY21kIG9mIHJlZHVjZXJzIHRoZW4gcmV0dXJuIHN0YXRlID0gcmVkdWNlcnNbY21kXSBzdGF0ZVxyXG5cdGlmIGNtZCA9PSAnPT0nIFxyXG5cdFx0dHJ5XHJcblx0XHRcdHggPSBzdGFjay5wb3AoKVxyXG5cdFx0XHR5ID0gc3RhY2sucG9wKClcclxuXHRcdFx0YXNzZXJ0IHgsIHlcclxuXHRcdGNhdGNoXHJcblx0XHRcdGNvbnNvbGUubG9nICdBc3NlcnQgZmFpbHVyZSBpbiBsaW5lICcgKyAobnIgKyAxKVxyXG5cdFx0XHRjb25zb2xlLmxvZyAnICBFeHBlY3QnLCBKU09OLnN0cmluZ2lmeSB4XHJcblx0XHRcdGNvbnNvbGUubG9nICcgIEFjdHVhbCcsIEpTT04uc3RyaW5naWZ5IHlcclxuXHRcdHJldHVybiBzdGF0ZVxyXG5cdHRyeVxyXG5cdFx0c3RhY2sucHVzaCBKU09OLnBhcnNlIGNtZFxyXG5cdGNhdGNoXHJcblx0XHRjb25zb2xlLmxvZyAnSlNPTi5wYXJzZSBmYWlsdXJlIGluIGxpbmUgJyArIChuciArIDEpXHJcblx0XHRjb25zb2xlLmxvZyAnICAnLGNtZFxyXG5cdHJldHVybiBzdGF0ZVxyXG5cclxucnVuQWxsVGVzdHMgPSAoc2NyaXB0KSAtPlxyXG5cdGZvciBsaW5lLG5yIGluIHNjcmlwdC5zcGxpdCAnXFxuJ1xyXG5cdFx0aWYgbnIgPT0gMCB0aGVuIHN0YXRlcyA9IFtKU09OLnBhcnNlIGxpbmVdXHJcblx0XHRlbHNlIHJ1blRlc3QgbGluZS50cmltKCksbnJcclxuXHJcbnJ1blRlc3QgPSAobGluZSxucikgLT5cclxuXHRzdGFjayA9IFtdXHJcblx0W2luZGV4LCAuLi5hcnJdID0gbGluZS5zcGxpdCAnICdcclxuXHRpbmRleCA9IHBhcnNlSW50IGluZGV4XHJcblx0c3RhdGUgPSBzdGF0ZXNbaW5kZXhdIFxyXG5cdGZvciBjbWQgaW4gYXJyXHRcclxuXHRcdHN0YXRlID0gcnBuIGNtZCxzdGF0ZSxuciBcclxuXHRzdGF0ZXNbaW5kZXgrMV0gPSBzdGF0ZSBcclxuXHR3aGlsZSBzdGFjay5sZW5ndGggPj0gMlxyXG5cdFx0cnBuICc9PScsc3RhdGUsbnJcclxuXHRpZiBzdGFjay5sZW5ndGggPT0gMSB0aGVuIGNvbnNvbGUubG9nIFwiT3JwaGFuIGluIGxpbmUgI3tucisxfVwiXHJcblxyXG5ydW5BbGxUZXN0cyBzY3JpcHRcclxuXHJcbmNvbnNvbGUubG9nICdSZWFkeXohJyJdfQ==
//# sourceURL=c:\Lab\2019\110-ActionStateTreeTesting\coffee\sketch.coffee