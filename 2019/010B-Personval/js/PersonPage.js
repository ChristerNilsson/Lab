'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.2
var PersonButton,
    PersonPage,
    indexOf = [].indexOf;

PersonPage = function (_Page) {
  _inherits(PersonPage, _Page);

  function PersonPage() {
    _classCallCheck(this, PersonPage);

    return _possibleConstructorReturn(this, (PersonPage.__proto__ || Object.getPrototypeOf(PersonPage)).apply(this, arguments));
  }

  _createClass(PersonPage, [{
    key: 'render',
    value: function render() {
      var namn, pp, rlk, s, selected;
      this.bg(0);
      selected = pages.partier.selected;
      pp = pages.personer;
      if (selected !== null) {
        push();
        textAlign(LEFT, CENTER);
        textSize(0.4 * pp.h / 17);
        rlk = pages.rlk.selected.rlk;
        namn = dbPartier[rlk][selected.partikod][1];
        s = namn + ' (' + pp.buttons.length + ' av ' + _.size(pp.personer) + ')';
        fc(1);
        print(s, pp.x, pp.y + pp.h / 34);
        text(s, pp.x, pp.y + pp.h / 34);
        return pop();
      }
    }
  }, {
    key: 'clickLetterButton',
    value: function clickLetterButton(rlk, button, partikod, letters, knrs) {
      var _this2 = this;

      var N, h, i, j, knr, len, person, ref, results, w, x, y;
      this.personer = knrs;
      N = PERSONS_PER_PAGE;
      w = 0.36 * width;
      h = height / (PERSONS_PER_PAGE + 2);
      this.selected = button;
      button.pageNo = (button.pageNo + 1) % button.pages;
      this.buttons = [];
      knrs.sort(function (a, b) {
        if (dbPersoner[rlk][a][2] < dbPersoner[rlk][b][2]) {
          return -1;
        } else {
          return 1;
        }
      });
      j = 0;
      results = [];
      for (i = 0, len = knrs.length; i < len; i++) {
        knr = knrs[i];
        person = dbPersoner[rlk][knr];
        if (ref = person[2][0], indexOf.call(letters, ref) >= 0) {
          if (Math.floor(j / N) === button.pageNo) {
            x = Math.floor(j / Math.floor(N / 2)) * w / 2;
            x = x % w;
            y = 2 * h * (1 + j % Math.floor(N / 2));
            (function (knr) {
              return _this2.addButton(new PersonButton(rlk, partikod, knr, _this2.x + x, _this2.y + y, w / 2 - 2, 2 * h - 2, function () {
                this.page.selected = this;
                return pages.rlk.clickPersonButton([partikod, knr]);
              }));
            })(knr);
          }
          results.push(j++);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }, {
    key: 'makePersons',
    value: function makePersons(rlk, button, partikod, knrs) {
      var _this3 = this;

      // personer Ã¤r en lista med knr
      var N, h, i, j, knr, len, results, w, x, y;
      this.personer = knrs;
      N = 16;
      w = 0.36 * width;
      h = height / (PERSONS_PER_PAGE + 2);
      this.selected = button;
      this.buttons = [];
      knrs.sort(function (a, b) {
        if (dbPersoner[rlk][a][2] < dbPersoner[rlk][b][2]) {
          return -1;
        } else {
          return 1;
        }
      });
      results = [];
      for (j = i = 0, len = knrs.length; i < len; j = ++i) {
        knr = knrs[j];
        x = Math.floor(j / N) * w / 2;
        x = x % w;
        y = 2 * h * (1 + j % N);
        results.push(function (partikod, knr) {
          return _this3.addButton(new PersonButton(rlk, partikod, knr, _this3.x + x, _this3.y + y, w / 2 - 2, 2 * h - 2, function () {
            this.page.selected = this;
            return pages.rlk.clickPersonButton([this.partikod, this.knr]);
          }));
        }(partikod, knr));
      }
      return results;
    }
  }]);

  return PersonPage;
}(Page);

PersonButton = function (_Button) {
  _inherits(PersonButton, _Button);

  function PersonButton(rlk1, partikod1, knr, x, y, w, h) {
    var click = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};

    _classCallCheck(this, PersonButton);

    var person;

    var _this4 = _possibleConstructorReturn(this, (PersonButton.__proto__ || Object.getPrototypeOf(PersonButton)).call(this, knr, x, y, w, h, click));

    _this4.rlk = rlk1;
    _this4.partikod = partikod1;
    _this4.knr = knr;
    person = dbPersoner[_this4.rlk][knr];
    _this4.title0 = person[2];
    _this4.title1 = person[3];
    if (_this4.title1 === '') {
      _this4.title1 = {
        M: 'Man',
        K: 'Kvinna'
      }[person[1]] + ' ' + person[0] + ' \xE5r';
    }
    return _this4;
  }

  _createClass(PersonButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(this.ts / 2);
      textAlign(LEFT, CENTER);
      fc(1);
      text(this.title0, this.x + 2, this.y + 2 + 0.3 * this.h);
      fc(0.75);
      return text(this.title1, this.x + 2, this.y + 2 + 0.7 * this.h);
    }
  }]);

  return PersonButton;
}(Button);
//# sourceMappingURL=PersonPage.js.map
