'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.2
var RLKButton, RLKPage;

RLKPage = function (_Page) {
  _inherits(RLKPage, _Page);

  // Riksdag, Landsting, Kommun
  function RLKPage(x, y, w, h) {
    var cols = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

    _classCallCheck(this, RLKPage);

    var _this = _possibleConstructorReturn(this, (RLKPage.__proto__ || Object.getPrototypeOf(RLKPage)).call(this, x, y, w, h, cols));

    _this.sbuttons = [];
    _this.start = new Date().getTime();
    _this.qr = '0000000000';
    h = height / 51;
    _this.yoff = [_this.y + 0, _this.y + 16 * h, _this.y + 32 * h, _this.y + 48 * h];
    _this.selectedPersons = {
      R: [],
      L: [],
      K: []
    };
    _this.addButton(new RLKButton('R', 'Riksdag', _this.x, _this.yoff[0], _this.w - 0, 3 * h - 3, function () {
      pages.partier.select('R', dbTree.R);
      return this.page.selected = this;
    }));
    _this.addButton(new RLKButton('L', dbName.L, _this.x, _this.yoff[1], _this.w - 0, 3 * h - 3, function () {
      pages.partier.select('L', dbTree.L);
      return this.page.selected = this;
    }));
    _this.addButton(new RLKButton('K', dbName.K, _this.x, _this.yoff[2], _this.w - 0, 3 * h - 3, function () {
      pages.partier.select('K', dbTree.K);
      return this.page.selected = this;
    }));
    _this.addButton(new Button('Utskrift', _this.x, _this.yoff[3], _this.w / 3 - 2, 3 * h - 3, function () {
      var qrcode;
      pageStack.push(pages.utskrift);
      pages.utskrift.stopMeasuringTime();
      this.page.qr = this.page.getQR();
      return qrcode = new QRCode(document.getElementById("qrcode"), {
        text: this.page.qr,
        width: 0.25 * width,
        height: 0.25 * width,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.L // Low Medium Q High
      });
    }));
    _this.addButton(new Button('Rensa', _this.x + _this.w / 3, _this.yoff[3], _this.w / 3 - 2, 3 * h - 3, function () {
      return rensa();
    }));
    _this.addButton(new Button('Byt kommun', _this.x + 2 * _this.w / 3, _this.yoff[3], _this.w / 3 - 0, 3 * h - 3, function () {
      return pageStack.push(pages.kommun);
    }));
    return _this;
  }

  _createClass(RLKPage, [{
    key: 'addsButton',
    value: function addsButton(button) {
      button.page = this;
      return this.sbuttons.push(button);
    }
  }, {
    key: 'getQR',
    value: function getQR() {
      var i, k, knr, len, partikod, persons, ref, rlk, s, slump;
      s = kommunkod;
      slump = int(random(1000000));
      s += slump.toString().padStart(6, 0); // to increase probability of uniqueness 
      for (rlk in this.selectedPersons) {
        persons = this.selectedPersons[rlk];
        ref = range(VOTES);
        for (k = 0, len = ref.length; k < len; k++) {
          i = ref[k];
          if (i < persons.length) {
            var _persons$i = _slicedToArray(persons[i], 2);

            partikod = _persons$i[0];
            knr = _persons$i[1];

            if (knr === 0) {
              s += '99' + partikod.padStart(4, '0');
            } else {
              s += knr.padStart(6, '0');
            }
          } else {
            s += '000000';
          }
        }
      }
      assert(s.length, 4 + 6 + 15 * 6);
      return s;
    }
  }, {
    key: 'render',
    value: function render() {
      var x, y;
      this.bg(0);
      if (this.selected !== null) {
        push();
        fc(1);
        textAlign(LEFT, CENTER);
        textSize(0.4 * pages.personer.h / 17);
        sc();
        var _ref = [pages.partier.x, pages.partier.y + pages.partier.h / 34];
        x = _ref[0];
        y = _ref[1];

        if (this.selected.rlk === 'R') {
          text('Riksdag', x, y);
        }
        if (this.selected.rlk === 'L') {
          text(dbName.L, x, y);
        }
        if (this.selected.rlk === 'K') {
          text(dbName.K, x, y);
        }
        pop();
      }
      return this.showSelectedPersons();
    }
  }, {
    key: 'clickDelete',
    value: function clickDelete(rlk, index) {
      this.selectedPersons[rlk].splice(index, 1);
      return this.createSelectButtons();
    }
  }, {
    key: 'clickSwap',
    value: function clickSwap(rlk, index) {
      var arr;
      arr = this.selectedPersons[rlk];
      var _ref2 = [arr[index - 1], arr[index]];
      arr[index] = _ref2[0];
      arr[index - 1] = _ref2[1];

      return this.createSelectButtons();
    }
  }, {
    key: 'createSelectButtons',
    value: function createSelectButtons() {
      var dh, dw, h, i, index, person, persons, ref, results, rlk, w, x1, x2, y, y1, y2;
      this.sbuttons = [];
      w = this.w;
      dw = 0.02 * width;
      dh = 0.025 * height;
      h = height / 51;
      ref = this.selectedPersons;
      results = [];
      for (rlk in ref) {
        persons = ref[rlk];
        index = "RLK".indexOf(rlk);
        results.push(function () {
          var _this2 = this;

          var k, len, results1;
          results1 = [];
          for (i = k = 0, len = persons.length; k < len; i = ++k) {
            person = persons[i];
            x1 = this.x + dw;
            x2 = this.x + 0.93 * this.w;
            y = this.yoff[index] + 4.7 * h + 13 * h / 5 * i;
            y1 = y - 2.3 * h;
            y2 = y - 0.9 * h;
            results1.push(function (rlk, i) {
              if (i > 0) {
                _this2.addsButton(new Button('byt', x1, y1, dw, dh, function () {
                  return _this2.clickSwap(rlk, i);
                }));
              }
              return _this2.addsButton(new Button(' x ', x2, y2, dw, dh, function () {
                return _this2.clickDelete(rlk, i);
              }));
            }(rlk, i));
          }
          return results1;
        }.call(this));
      }
      return results;
    }
  }, {
    key: 'clickPersonButton',
    value: function clickPersonButton(person) {
      // av typen [partikod,knr]
      var i, k, len, pair, persons;
      persons = this.selectedPersons[this.selected.rlk];
      for (i = k = 0, len = persons.length; k < len; i = ++k) {
        pair = persons[i];
        if (pair[0] === person[0]) {
          persons[i][1] = person[1];
          return;
        }
      }
      if (persons.length < VOTES) {
        persons.push(person);
        return this.createSelectButtons();
      }
    }
  }, {
    key: 'clickPartiButton',
    value: function clickPartiButton(button) {
      var i, k, knr, len, pair, partikod, persons;
      persons = this.selectedPersons[this.selected.rlk];
      for (i = k = 0, len = persons.length; k < len; i = ++k) {
        pair = persons[i];
        var _pair = pair;

        var _pair2 = _slicedToArray(_pair, 2);

        partikod = _pair2[0];
        knr = _pair2[1];

        if (partikod === button.partikod) {
          return;
        }
      }
      if (persons.length < VOTES) {
        persons.push([button.partikod, 0]);
        return this.createSelectButtons();
      }
    }
  }, {
    key: 'sample',
    value: function sample(hash, n) {
      var key;
      return _.object(function () {
        var k, len, ref, results;
        ref = _.sample(_.keys(hash), n);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          key = ref[k];
          results.push([key, hash[key]]);
        }
        return results;
      }());
    }
  }, {
    key: 'slumpa',
    value: function slumpa() {
      var knr, knrs, pair, partier, parties, partikod, results, rlk;
      results = [];
      for (rlk in dbTree) {
        partier = dbTree[rlk];
        this.selectedPersons[rlk] = [];
        parties = this.sample(partier, 5);
        results.push(function () {
          var results1;
          results1 = [];
          for (partikod in parties) {
            knrs = parties[partikod];
            if (random() < 0.2) {
              // Vote for a party
              pair = [partikod, 0 // Vote for a person
              ];
            } else {
              knr = _.sample(knrs);
              pair = [partikod, knr];
            }
            results1.push(this.selectedPersons[rlk].push(pair));
          }
          return results1;
        }.call(this));
      }
      return results;
    }
  }, {
    key: 'showSelectedPersons',
    value: function showSelectedPersons() {
      var button, h, i, j, k, knr, l, len, len1, len2, m, namn, pair, parti, partikod, ref, ref1, ref2, results, rlk, y, y0;
      push();
      textAlign(LEFT, CENTER);
      textSize(0.025 * height);
      ref = 'RLK';
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        rlk = ref[i];
        sc();
        sw(1);
        rectMode(CORNER);
        y0 = this.yoff[i];
        if (i === 0) {
          fc(1, 1, 0.5);
        }
        if (i === 1) {
          fc(0.5, 0.75, 1);
        }
        if (i === 2) {
          fc(1);
        }
        h = height / 51;
        rect(this.x, y0 + 3 * h - 1, this.w, 13 * h - 1);
        fc(0);
        sc();
        sw(0);
        ref1 = this.selectedPersons[rlk];
        for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
          pair = ref1[j];
          y = y0 + 4.5 * h + 13 * h / 5 * j;
          var _pair3 = pair;

          var _pair4 = _slicedToArray(_pair3, 2);

          partikod = _pair4[0];
          knr = _pair4[1];

          parti = dbPartier[rlk][partikod][0];
          namn = knr === 0 ? dbPartier[rlk][partikod][1] : dbPersoner[rlk][knr][2];
          text(j + 1 + ' ' + parti + ' - ' + namn, this.x + 10, y);
        }
      }
      pop();
      ref2 = this.sbuttons;
      results = [];
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        button = ref2[m];
        results.push(button.draw());
      }
      return results;
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed() {
      var button, k, len, ref;
      ref = this.sbuttons;
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        if (button.inside()) {
          button.click();
          return true;
        }
      }
      return _get(RLKPage.prototype.__proto__ || Object.getPrototypeOf(RLKPage.prototype), 'mousePressed', this).call(this);
    }
  }]);

  return RLKPage;
}(Page);

RLKButton = function (_Button) {
  _inherits(RLKButton, _Button);

  function RLKButton(rlk1, title, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, RLKButton);

    var _this3 = _possibleConstructorReturn(this, (RLKButton.__proto__ || Object.getPrototypeOf(RLKButton)).call(this, title, x, y, w, h, click));

    _this3.rlk = rlk1;
    return _this3;
  }

  return RLKButton;
}(Button);
//# sourceMappingURL=RLKPage.js.map
