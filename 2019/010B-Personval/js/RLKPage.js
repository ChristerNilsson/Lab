'use strict';

// Generated by CoffeeScript 2.3.2
var RLKButton, RLKPage;

RLKPage = class RLKPage extends Page {
  // Riksdag, Landsting, Kommun
  constructor(x, y, w, h, cols = 1) {
    var i, k, len, ref;
    super(x, y, w, h, cols);
    this.sbuttons = [];
    this.start = new Date().getTime();
    this.qr = '0000000000';
    AES_Init();
    this.key = new Array(32);
    ref = range(32);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.key[i] = i;
    }
    AES_ExpandKey(this.key);
    h = height / 51;
    this.yoff = [this.y + 0, this.y + 16 * h, this.y + 32 * h, this.y + 48 * h];
    this.selectedPersons = {
      R: [],
      L: [],
      K: []
    };
    this.addButton(new RLKButton('R', 'Riksdag', this.x, this.yoff[0], this.w - 0, 3 * h - 3, function () {
      pages.partier.select('R', dbTree.R);
      return this.page.selected = this;
    }));
    this.addButton(new RLKButton('L', dbName.L, this.x, this.yoff[1], this.w - 0, 3 * h - 3, function () {
      pages.partier.select('L', dbTree.L);
      return this.page.selected = this;
    }));
    this.addButton(new RLKButton('K', dbName.K, this.x, this.yoff[2], this.w - 0, 3 * h - 3, function () {
      pages.partier.select('K', dbTree.K);
      return this.page.selected = this;
    }));
    this.addButton(new Button('Utskrift', this.x, this.yoff[3], this.w / 3 - 2, 3 * h - 3, function () {
      var kopia, qr, qrcode;
      pageStack.push(pages.utskrift);
      pages.utskrift.stopMeasuringTime();
      qr = this.page.getQR();
      this.page.crc = this.page.getCRC(qr);
      kopia = qr.slice();
      assert(qr, this.page.decrypt(this.page.encrypt(kopia)));
      this.page.qr = kommunkod + this.page.encrypt(qr);
      return qrcode = new QRCode(document.getElementById("qrcode"), {
        text: this.page.qr,
        width: 0.25 * width,
        height: 0.25 * width,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.L // Low Medium Q High
      });
    }));
    this.addButton(new Button('Rensa', this.x + this.w / 3, this.yoff[3], this.w / 3 - 2, 3 * h - 3, function () {
      return rensa();
    }));
    this.addButton(new Button('Byt kommun', this.x + 2 * this.w / 3, this.yoff[3], this.w / 3 - 0, 3 * h - 3, function () {
      return pageStack.push(pages.kommun);
    }));
  }

  addsButton(button) {
    button.page = this;
    return this.sbuttons.push(button);
  }

  getCRC(qr) {
    var char, i, index, k, len, res;
    res = 0;
    for (i = k = 0, len = qr.length; k < len; i = ++k) {
      char = qr[i];
      index = char;
      if (i % 16 !== 15) {
        res += (i + 1) * (index + 1);
      }
      res %= 1000000;
    }
    return res;
  }

  encryptBlock(block, key) {
    return AES_Encrypt(block, key);
  }

  decryptBlock(block, key) {
    return AES_Decrypt(block, key);
  }

  // kryptering sker via server. Inga nycklar i javascriptkoden!
  encrypt(qr) {
    // 48 bytes => string
    var block, byte, i, k, len, ref, res;
    res = [];
    ref = range(3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      block = qr.slice(16 * i, 16 * (i + 1));
      this.encryptBlock(block, key);
      res = res.concat(block);
    }
    return function () {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = res.length; l < len1; l++) {
        byte = res[l];
        results.push(String.fromCharCode(byte));
      }
      return results;
    }().join('');
  }

  decrypt(s) {
    // 48 bytes => string
    var block, i, k, len, qr, ref, res;
    qr = function () {
      var k, len, ref, results;
      ref = range(s.length);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(s.charCodeAt(i));
      }
      return results;
    }();
    res = [];
    ref = range(3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      block = qr.slice(16 * i, 16 * (i + 1));
      this.decryptBlock(block, key);
      res = res.concat(block.slice());
    }
    return res;
  }

  getQR() {
    var data, i, k, knr, len, partikod, persons, ref, rlk, save3;
    save3 = function (nr) {
      var i, k, len, ref, results;
      ref = range(3);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        data.push(nr % 256);
        results.push(nr = Math.floor(nr / 256));
      }
      return results;
    };
    data = []; // contains 48 bytes
    for (rlk in this.selectedPersons) {
      persons = this.selectedPersons[rlk];
      ref = range(VOTES);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        if (i < persons.length) {
          [partikod, knr] = persons[i];
          save3(knr === 0 ? 990000 + partikod : knr);
        } else {
          save3(0);
        }
      }
      data.push(int(random(256)));
    }
    assert(data.length, 48);
    return data;
  }

  render() {
    var x, y;
    this.bg(0);
    if (this.selected !== null) {
      push();
      fc(1);
      textAlign(LEFT, CENTER);
      textSize(0.4 * pages.personer.h / 17);
      sc();
      [x, y] = [pages.partier.x, pages.partier.y + pages.partier.h / 34];
      if (this.selected.rlk === 'R') {
        text('Riksdag', x, y);
      }
      if (this.selected.rlk === 'L') {
        text(dbName.L, x, y);
      }
      if (this.selected.rlk === 'K') {
        text(dbName.K, x, y);
      }
      pop();
    }
    return this.showSelectedPersons();
  }

  clickDelete(rlk, index) {
    this.selectedPersons[rlk].splice(index, 1);
    return this.createSelectButtons();
  }

  clickSwap(rlk, index) {
    var arr;
    arr = this.selectedPersons[rlk];
    [arr[index], arr[index - 1]] = [arr[index - 1], arr[index]];
    return this.createSelectButtons();
  }

  createSelectButtons() {
    var dh, dw, h, i, index, person, persons, ref, results, rlk, w, x1, x2, y, y1, y2;
    this.sbuttons = [];
    w = this.w;
    dw = 0.02 * width;
    dh = 0.025 * height;
    h = height / 51;
    ref = this.selectedPersons;
    results = [];
    for (rlk in ref) {
      persons = ref[rlk];
      index = "RLK".indexOf(rlk);
      results.push(function () {
        var k, len, results1;
        results1 = [];
        for (i = k = 0, len = persons.length; k < len; i = ++k) {
          person = persons[i];
          x1 = this.x + dw;
          x2 = this.x + 0.93 * this.w;
          y = this.yoff[index] + 4.7 * h + 13 * h / 5 * i;
          y1 = y - 2.3 * h;
          y2 = y - 0.9 * h;
          results1.push(((rlk, i) => {
            if (i > 0) {
              this.addsButton(new Button('byt', x1, y1, dw, dh, () => {
                return this.clickSwap(rlk, i);
              }));
            }
            return this.addsButton(new Button(' x ', x2, y2, dw, dh, () => {
              return this.clickDelete(rlk, i);
            }));
          })(rlk, i));
        }
        return results1;
      }.call(this));
    }
    return results;
  }

  clickPersonButton(person) {
    // av typen [partikod,knr]
    var i, k, len, pair, persons;
    persons = this.selectedPersons[this.selected.rlk];
    for (i = k = 0, len = persons.length; k < len; i = ++k) {
      pair = persons[i];
      if (pair[0] === person[0]) {
        persons[i][1] = person[1];
        return;
      }
    }
    if (persons.length < VOTES) {
      persons.push(person);
      return this.createSelectButtons();
    }
  }

  clickPartiButton(button) {
    var i, k, knr, len, pair, partikod, persons;
    persons = this.selectedPersons[this.selected.rlk];
    for (i = k = 0, len = persons.length; k < len; i = ++k) {
      pair = persons[i];
      [partikod, knr] = pair;
      if (partikod === button.partikod) {
        return;
      }
    }
    if (persons.length < VOTES) {
      persons.push([button.partikod, 0]);
      return this.createSelectButtons();
    }
  }

  sample(hash, n) {
    var key;
    return _.object(function () {
      var k, len, ref, results;
      ref = _.sample(_.keys(hash), n);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        key = ref[k];
        results.push([key, hash[key]]);
      }
      return results;
    }());
  }

  slumpa() {
    var knr, knrs, pair, partier, parties, partikod, results, rlk;
    results = [];
    for (rlk in dbTree) {
      partier = dbTree[rlk];
      this.selectedPersons[rlk] = [];
      parties = this.sample(partier, 5);
      results.push(function () {
        var results1;
        results1 = [];
        for (partikod in parties) {
          knrs = parties[partikod];
          if (random() < 0.2) {
            // Vote for a party
            pair = [partikod, 0 // Vote for a person
            ];
          } else {
            knr = _.sample(knrs);
            pair = [partikod, knr];
          }
          results1.push(this.selectedPersons[rlk].push(pair));
        }
        return results1;
      }.call(this));
    }
    return results;
  }

  showSelectedPersons() {
    var button, h, i, j, k, knr, l, len, len1, len2, m, namn, pair, parti, partikod, ref, ref1, ref2, results, rlk, y, y0;
    push();
    textAlign(LEFT, CENTER);
    textSize(0.025 * height);
    ref = 'RLK';
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      rlk = ref[i];
      sc();
      sw(1);
      rectMode(CORNER);
      y0 = this.yoff[i];
      if (i === 0) {
        fc(1, 1, 0.5); // gul 
      }
      if (i === 1) {
        fc(0.5, 0.75, 1); // blå
      }
      if (i === 2) {
        fc(1); // vit
      }
      h = height / 51;
      rect(this.x, y0 + 3 * h - 1, this.w, 13 * h - 1);
      fc(0);
      sc();
      sw(0);
      ref1 = this.selectedPersons[rlk];
      for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
        pair = ref1[j];
        y = y0 + 4.5 * h + 13 * h / 5 * j;
        [partikod, knr] = pair;
        parti = dbPartier[rlk][partikod][PARTI_FÖRKORTNING];
        namn = knr === 0 ? dbPartier[rlk][partikod][PARTI_BETECKNING] : dbPersoner[rlk][knr][PERSON_NAMN];
        text(`${j + 1} ${parti} - ${namn}`, this.x + 10, y);
      }
    }
    pop();
    ref2 = this.sbuttons;
    results = [];
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      button = ref2[m];
      results.push(button.draw());
    }
    return results;
  }

  mousePressed() {
    var button, k, len, ref;
    ref = this.sbuttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      if (button.inside()) {
        button.click();
        return true;
      }
    }
    return super.mousePressed();
  }

};

RLKButton = class RLKButton extends Button {
  constructor(rlk1, title, x, y, w, h, click = function () {}) {
    super(title, x, y, w, h, click);
    this.rlk = rlk1;
  }

};
//# sourceMappingURL=RLKPage.js.map
