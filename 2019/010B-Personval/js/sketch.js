'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Button, KommunButton, LetterButton, PERSONS_PER_PAGE, PartiButton, PersonButton, TypButton, VOTES, dbKommun, dbName, dbPartier, dbPersoner, dbTree, draw, fetchKommun, getKommun, getParameters, getTxt, gruppera, kommunkod, loadFile, länskod, makeFreq, mousePressed, pages, preload, pressed, rensa, setup;

PERSONS_PER_PAGE = 32;

VOTES = 5;

kommunkod = null;

länskod = null;

dbName = {}; // T Områdesnamn

dbTree = {}; // A

dbPartier = {}; // B 

dbPersoner = {}; // C

dbKommun = {};

pages = {};

pressed = false;

makeFreq = function makeFreq(words) {
  // personer är en lista
  var j, len, letter, res, word;
  res = {};
  words.sort();
  for (j = 0, len = words.length; j < len; j++) {
    word = words[j];
    letter = word[0];
    res[letter] = res[letter] === void 0 ? 1 : res[letter] + 1;
  }
  return res;
};

assert({
  a: 5,
  b: 9,
  c: 4
}, makeFreq('ababcbabcbcbabcbab'.split('')));

gruppera = function gruppera(words) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
  // words är en lista med ord
  var count, group, letter, letters, m, res;
  letters = makeFreq(words);
  res = {};
  group = '';
  count = 0;
  for (letter in letters) {
    m = letters[letter];
    if (count + m <= n) {
      group += letter;
      count += m;
    } else {
      if (count > 0) {
        res[group] = count;
      }
      group = letter;
      count = m;
    }
  }
  if (count > 0) {
    res[group] = count;
  }
  return res;
};

assert({
  abc: 18
}, gruppera('cababbabcbcbabcbab'.split('')));

assert({
  AB: 7,
  C: 5,
  D: 9
}, gruppera('DBDCDADBDADCDBDADCBCC'.split(''), 8));

rensa = function rensa() {
  pages.typ.selectedPersons = {
    R: [],
    L: [],
    K: []
  };
  pages.typ.sbuttons = [];
  pages.typ.selected = null;
  pages.partier.clear();
  pages.letters.clear();
  pages.personer.clear();
  pages.typ.qr = '';
  return pages.typ.start = new Date().getTime();
};

Button = function () {
  function Button(title1, x5, y1, w1, h1) {
    var click1 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, Button);

    this.title = title1;
    this.x = x5;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.click = click1;
    this.ts = 0.6 * this.h;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      push();
      sc();
      rect(this.x, this.y, this.w, this.h);
      pop();
      textSize(this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + this.w / 2, this.y + this.h / 2);
    }
  }, {
    key: 'inside',
    value: function inside() {
      return this.x < mouseX && mouseX < this.x + this.w && this.y < mouseY && mouseY < this.y + this.h;
    }
  }]);

  return Button;
}();

KommunButton = function (_Button) {
  _inherits(KommunButton, _Button);

  function KommunButton(key, x, y, w, h) {
    var click = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, KommunButton);

    var _this = _possibleConstructorReturn(this, (KommunButton.__proto__ || Object.getPrototypeOf(KommunButton)).call(this, dbKommun[key], x, y, w, h, click));

    _this.key = key;
    return _this;
  }

  _createClass(KommunButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      push();
      sc();
      rect(this.x, this.y, this.w, this.h);
      pop();
      textSize(0.65 * this.ts);
      textAlign(LEFT, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + 0.025 * this.w, this.y + this.h / 2);
    }
  }]);

  return KommunButton;
}(Button);

PartiButton = function (_Button2) {
  _inherits(PartiButton, _Button2);

  function PartiButton(rkl1, partikod, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, PartiButton);

    var _this2 = _possibleConstructorReturn(this, (PartiButton.__proto__ || Object.getPrototypeOf(PartiButton)).call(this, '', x, y, w, h, click));

    _this2.rkl = rkl1;
    _this2.partikod = partikod;
    return _this2;
  }

  _createClass(PartiButton, [{
    key: 'draw',
    value: function draw() {
      var partinamn;
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      //print @rkl,@partikod
      partinamn = dbPartier[this.rkl][this.partikod][0];
      if (partinamn === '') {
        partinamn = dbPartier[this.rkl][this.partikod][1];
      }
      return text(partinamn, this.x + this.w / 2, this.y + this.h / 2);
    }
  }]);

  return PartiButton;
}(Button);

LetterButton = function (_Button3) {
  _inherits(LetterButton, _Button3);

  function LetterButton(title, x, y, w, h, antal, click) {
    _classCallCheck(this, LetterButton);

    var _this3 = _possibleConstructorReturn(this, (LetterButton.__proto__ || Object.getPrototypeOf(LetterButton)).call(this, title, x, y, w, h, click));

    _this3.antal = antal;
    _this3.pageNo = -1;
    _this3.pages = 1 + Math.floor(_this3.antal / PERSONS_PER_PAGE);
    if (_this3.antal % PERSONS_PER_PAGE === 0) {
      _this3.pages--;
    }
    return _this3;
  }

  _createClass(LetterButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(0.8 * this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      text(this.title, this.x + this.w / 2, this.y + this.h / 2);
      push();
      this.pageIndicator();
      return pop();
    }
  }, {
    key: 'pageIndicator',
    value: function pageIndicator() {
      var dx, i, j, len, ref, results;
      if (this.pages <= 1) {
        return;
      }
      dx = Math.floor(this.w / (this.pages + 1));
      ref = range(this.pages);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (i === this.pageNo && this.page.selected === this) {
          fc(1);
        } else {
          fc(0);
        }
        results.push(circle(this.x + (i + 1) * dx, this.y + 0.85 * this.h, 3));
      }
      return results;
    }
  }]);

  return LetterButton;
}(Button);

PersonButton = function (_Button4) {
  _inherits(PersonButton, _Button4);

  function PersonButton(rkl1, partikod, knr, x, y, w, h) {
    var click = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};

    _classCallCheck(this, PersonButton);

    var person;

    var _this4 = _possibleConstructorReturn(this, (PersonButton.__proto__ || Object.getPrototypeOf(PersonButton)).call(this, knr, x, y, w, h, click));

    _this4.rkl = rkl1;
    _this4.partikod = partikod;
    _this4.knr = knr;
    person = dbPersoner[_this4.rkl][knr];
    _this4.title0 = person[2];
    _this4.title1 = person[3];
    if (_this4.title1 === '') {
      _this4.title1 = {
        M: 'Man',
        K: 'Kvinna'
      }[person[1]] + ' ' + person[0] + ' \xE5r';
    }
    return _this4;
  }

  _createClass(PersonButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(this.ts / 2);
      textAlign(LEFT, CENTER);
      fc(1);
      text(this.title0, this.x + 2, this.y + 2 + 0.3 * this.h);
      fc(0.75);
      return text(this.title1, this.x + 2, this.y + 2 + 0.7 * this.h);
    }
  }]);

  return PersonButton;
}(Button);

TypButton = function (_Button5) {
  _inherits(TypButton, _Button5);

  function TypButton(typ, title, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, TypButton);

    var _this5 = _possibleConstructorReturn(this, (TypButton.__proto__ || Object.getPrototypeOf(TypButton)).call(this, title, x, y, w, h, click));

    _this5.typ = typ;
    return _this5;
  }

  return TypButton;
}(Button);

getParameters = function getParameters() {
  var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;

  var arr, f;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  if (arr[1] === '') {
    return {};
  }
  return _.object(function () {
    var j, len, ref, results;
    ref = arr[1].split('&');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      f = ref[j];
      results.push(f.split('='));
    }
    return results;
  }());
};

loadFile = function loadFile(filePath) {
  var result, xmlhttp;
  result = null;
  xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", filePath, false);
  xmlhttp.send();
  if (xmlhttp.status === 200) {
    result = xmlhttp.responseText;
  }
  return result;
};

getTxt = function getTxt(rkl, filename) {
  var cells, data, j, len, line, lines;
  data = filename === 'data\\09.txt' ? '' : loadFile(filename);
  dbName[rkl] = '';
  dbTree[rkl] = {};
  dbPartier[rkl] = {};
  dbPersoner[rkl] = {};
  lines = data.split('\n');
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    line = line.trim();
    cells = line.split('|');
    if (cells[0] === 'T') {
      // T|Arjeplog
      dbName[rkl] = cells[1];
    }
    if (cells[0] === 'A') {
      // kandidaturer # A|3|208509|208510|208511|208512|208513|208514
      dbTree[rkl][cells[1]] = cells.slice(2);
    }
    if (cells[0] === 'B') {
      // partier # B|4|C|Centerpartiet
      dbPartier[rkl][cells[1]] = cells.slice(2);
    }
    if (cells[0] === 'C') {
      // personer # C|10552|53|K|Britta Flinkfeldt|53 år, Arjeplog
      dbPersoner[rkl][cells[1]] = cells.slice(2);
    }
  }
  return print('getTxt', rkl, filename, data.length, _.size(dbPersoner[rkl]));
};

//print 'Partier:', _.size dbTree[rkl] 
//print 'Partier:', _.size dbPartier[rkl]
//print 'Personer:', _.size dbPersoner[rkl]
getKommun = function getKommun(filename) {
  var cells, data, j, kod, len, line, lines, namn;
  data = loadFile(filename);
  dbKommun = {};
  lines = data.split('\n');
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    line = line.trim();
    cells = line.split('|');
    kod = cells[0];
    namn = cells[1];
    if (kod.length === 4) {
      dbKommun[kod] = namn;
    }
  }
  return print('getKommun', _.size(dbKommun));
};

preload = function preload() {
  var kommun;

  var _getParameters = getParameters();

  kommun = _getParameters.kommun;

  if (!kommun) {
    kommun = '0180';
  }
  kommunkod = kommun;
  länskod = kommunkod.slice(0, 2);
  getTxt('R', 'data\\00.txt');
  getTxt('L', 'data\\' + länskod + '.txt');
  getTxt('K', 'data\\' + kommunkod + '.txt');
  return getKommun('data\\omraden.txt');
};

fetchKommun = function fetchKommun(kommun) {
  // t ex '0180'
  var j, len, page, start;
  start = new Date().getTime();
  if (länskod !== kommun.slice(0, 2)) {
    länskod = kommun.slice(0, 2);
    getTxt('L', 'data\\' + länskod + '.txt');
  }
  if (kommunkod !== kommun) {
    kommunkod = kommun;
    getTxt('K', 'data\\' + kommunkod + '.txt');
  }
  for (j = 0, len = pages.length; j < len; j++) {
    page = pages[j];
    page.active = true;
  }
  pages.kommun.active = false;
  pages.utskrift.active = false;
  pages.typ.buttons[1].title = dbName.L;
  pages.typ.buttons[2].title = dbName.K;
  return print('time', new Date().getTime() - start);
};

setup = function setup() {
  var x0, x1, x2, x3, x4;
  createCanvas(windowWidth, windowHeight - 1);
  sc();
  textAlign(CENTER, CENTER);
  textSize(20);
  x0 = 0;
  x1 = 0.18 * width;
  x2 = 0.28 * width;
  x3 = 0.64 * width;
  x4 = 1.00 * width;
  pages.partier = new PartiPage(0, 0, x1 - x0, height);
  pages.letters = new LetterPage(x1, 0, x2 - x1, height);
  pages.personer = new PersonPage(x2, 0, x3 - x2, height);
  pages.kommun = new KommunPage(0, 0, x4, height);
  pages.typ = new TypPage(x3, 0, x4 - x3, height);
  pages.utskrift = new UtskriftPage(0, 0, x4, height);
  pages.utskrift.active = false;
  pages.kommun.active = false;
  pages.typ.buttons[1].title = dbName.L;
  pages.typ.buttons[2].title = dbName.K;
  return print(_.keys(pages));
};

draw = function draw() {
  var key, page, results;
  bg(0);
  if (_.size(pages < 6)) {
    return;
  }
  if (pages.utskrift === void 0) {
    return;
  }
  if (pages.utskrift.active) {
    return pages.utskrift.draw();
  } else if (pages.kommun.active) {
    return pages.kommun.draw();
  } else {
    results = [];
    for (key in pages) {
      page = pages[key];
      results.push(page.draw());
    }
    return results;
  }
};

// Denna konstruktion nödvändig eftersom klick på Motala ger Utskrift.
// Dvs ett klick tolkas som två. 
mousePressed = function mousePressed() {
  var j, key, len, page, ps;
  ps = function () {
    var results;
    results = [];
    for (key in pages) {
      page = pages[key];
      if (page.active) {
        results.push(page);
      }
    }
    return results;
  }();
  for (j = 0, len = ps.length; j < len; j++) {
    page = ps[j];
    if (page.mousePressed()) {
      return;
    }
  }
};
//# sourceMappingURL=sketch.js.map
