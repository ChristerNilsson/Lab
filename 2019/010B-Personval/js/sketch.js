'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Button,
    KommunButton,
    KommunPage,
    LetterButton,
    LetterKommunPage,
    LetterPage,
    PERSONS_PER_PAGE,
    Page,
    PartiButton,
    PartiPage,
    PersonButton,
    PersonPage,
    TypButton,
    TypPage,
    UtskriftPage,
    VOTES,
    dbKommun,
    dbName,
    dbPartier,
    dbPersoner,
    dbTree,
    draw,
    fetchKommun,
    getKommun,
    getParameters,
    getTxt,
    gruppera,
    kommunkod,
    loadFile,
    länskod,
    mousePressed,
    pages,
    preload,
    rensa,
    setup,
    indexOf = [].indexOf;

PERSONS_PER_PAGE = 32;

VOTES = 5;

kommunkod = null;

länskod = null;

dbName = {}; // T Områdesnamn

dbTree = {}; // A

dbPartier = {}; // B 

dbPersoner = {}; // C

dbKommun = {};

pages = {};

gruppera = function gruppera(letters) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;

  var count, group, letter, m, res;
  res = {};
  group = '';
  count = 0;
  for (letter in letters) {
    m = letters[letter];
    if (count + m <= n) {
      group += letter;
      count += m;
    } else {
      if (count > 0) {
        res[group] = count;
      }
      group = letter;
      count = m;
    }
  }
  if (count > 0) {
    res[group] = count;
  }
  return res;
};

assert({
  AB: 25,
  C: 14,
  D: 57
}, gruppera({
  A: 12,
  B: 13,
  C: 14,
  D: 57
}));

assert({
  ABDEF: 28,
  GH: 25
}, gruppera({
  A: 2,
  B: 1,
  D: 3,
  E: 10,
  F: 12,
  G: 13,
  H: 12
}));

assert({
  ABDEF: 28,
  NO: 32
}, gruppera({
  A: 2,
  B: 1,
  D: 3,
  E: 10,
  F: 12,
  N: 20,
  O: 12
}));

rensa = function rensa() {
  pages.typ.selectedPersons = {
    R: [],
    L: [],
    K: []
  };
  pages.typ.sbuttons = [];
  pages.typ.selected = null;
  pages.partier.clear();
  pages.letters.clear();
  pages.personer.clear();
  pages.typ.qr = '';
  return pages.typ.start = new Date().getTime();
};

Page = function () {
  function Page(x5, y3, w1, h1) {
    var cols1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

    _classCallCheck(this, Page);

    this.x = x5;
    this.y = y3;
    this.w = w1;
    this.h = h1;
    this.cols = cols1;
    this.selected = null; // anger vilken knapp man klickat på
    this.buttons = [];
    this.active = true;
  }

  _createClass(Page, [{
    key: 'clear',
    value: function clear() {
      this.selected = null;
      return this.buttons = [];
    }
  }, {
    key: 'addButton',
    value: function addButton(button) {
      button.page = this;
      return this.buttons.push(button);
    }
  }, {
    key: 'draw',
    value: function draw() {
      var button, k, len, ref, results;
      if (this.active) {
        this.render();
        ref = this.buttons;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          button = ref[k];
          results.push(button.draw());
        }
        return results;
      }
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed() {
      var button, k, len, ref, results;
      if (this.active) {
        ref = this.buttons;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          button = ref[k];
          if (button.inside(mouseX, mouseY)) {
            results.push(button.click());
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }
  }]);

  return Page;
}();

PartiPage = function (_Page) {
  _inherits(PartiPage, _Page);

  function PartiPage() {
    _classCallCheck(this, PartiPage);

    return _possibleConstructorReturn(this, (PartiPage.__proto__ || Object.getPrototypeOf(PartiPage)).apply(this, arguments));
  }

  _createClass(PartiPage, [{
    key: 'render',
    value: function render() {
      var namn, rkl, s;
      if (this.selected !== null) {
        push();
        textAlign(LEFT, CENTER);
        textSize(0.4 * pages.personer.h / 17);
        rkl = pages.typ.selected.typ;
        namn = dbPartier[rkl][this.selected.partikod][1];
        s = namn + ' (' + pages.personer.buttons.length + ' av ' + _.size(pages.personer.personer) + ')';
        text(s, pages.personer.x, pages.personer.y + pages.personer.h / 34);
        return pop();
      }
    }
  }, {
    key: 'select',
    value: function select(rkl, partier) {
      var _this2 = this;

      var N, h, i, k, len, partikod, partikoder, results, w, x, y;
      N = 16;
      w = this.w / 2;
      h = this.h / (N + 1);
      partikoder = _.keys(partier);
      partikoder.sort(function (a, b) {
        return _.size(partier[b]) - _.size(partier[a]);
      });
      this.buttons = [];
      pages.partier.clear();
      pages.letters.clear();
      pages.personer.clear();
      results = [];
      for (i = k = 0, len = partikoder.length; k < len; i = ++k) {
        partikod = partikoder[i];
        x = this.x + w * Math.floor(i / N);
        y = this.y + h * (1 + i % N);
        //print 'select',dbPartier[rkl][partikod]
        results.push(function (partikod) {
          return _this2.addButton(new PartiButton(rkl, partikod, x, y, w - 2, h - 2, function () {
            this.page.selected = this;
            if (PERSONS_PER_PAGE < _.size(partier[partikod])) {
              pages.letters.makeLetters(rkl, this, partikod, partier[partikod]);
              pages.personer.buttons = [];
            } else {
              pages.letters.buttons = [];
              pages.personer.makePersons(rkl, this, partikod, partier[partikod]);
            }
            pages.typ.clickPartiButton(this);
            return pages.personer.personer = partier[partikod];
          }));
        }(partikod));
      }
      return results;
    }
  }]);

  return PartiPage;
}(Page);

LetterPage = function (_Page2) {
  _inherits(LetterPage, _Page2);

  function LetterPage() {
    _classCallCheck(this, LetterPage);

    return _possibleConstructorReturn(this, (LetterPage.__proto__ || Object.getPrototypeOf(LetterPage)).apply(this, arguments));
  }

  _createClass(LetterPage, [{
    key: 'render',
    value: function render() {}
  }, {
    key: 'makeFreq',
    value: function makeFreq(rkl, personer) {
      // personer är en lista
      var k, key, len, letter, name, names, res;
      res = {};
      names = function () {
        var k, len, results;
        results = [];
        for (k = 0, len = personer.length; k < len; k++) {
          key = personer[k];
          results.push(dbPersoner[rkl][key][2]);
        }
        return results;
      }();
      names.sort();
      for (k = 0, len = names.length; k < len; k++) {
        name = names[k];
        letter = name[0];
        res[letter] = res[letter] === void 0 ? 1 : res[letter] + 1;
      }
      return res;
    }
  }, {
    key: 'makeLetters',
    value: function makeLetters(rkl, button, partikod, personer) {
      var _this4 = this;

      var N, h, i, letters, n, ref, results, title, w, x, y;
      N = 16;
      h = this.h / (N + 1);
      w = this.w / 2;
      this.selected = button;
      this.buttons = [];
      i = 0;
      ref = gruppera(this.makeFreq(rkl, personer));
      results = [];
      for (letters in ref) {
        n = ref[letters];
        x = this.x + w * Math.floor(i / N);
        y = this.y + h * (1 + i % N);
        title = letters.length === 1 ? letters : letters[0] + '-' + _.last(letters);
        (function (letters, title) {
          return _this4.addButton(new LetterButton(title, x, y, w - 2, h - 2, n, function () {
            this.page.selected = this;
            return pages.personer.clickLetterButton(rkl, this, partikod, letters, personer);
          }));
        })(letters, title);
        results.push(i++);
      }
      return results;
    }
  }]);

  return LetterPage;
}(Page);

PersonPage = function (_Page3) {
  _inherits(PersonPage, _Page3);

  function PersonPage() {
    _classCallCheck(this, PersonPage);

    return _possibleConstructorReturn(this, (PersonPage.__proto__ || Object.getPrototypeOf(PersonPage)).apply(this, arguments));
  }

  _createClass(PersonPage, [{
    key: 'render',
    value: function render() {}
  }, {
    key: 'clickLetterButton',
    value: function clickLetterButton(rkl, button, partikod, letters, knrs) {
      var _this6 = this;

      var N, h, j, k, knr, len, person, ref, results, w, x, y;
      //print 'clickLetterButton',knrs
      this.personer = knrs;
      N = PERSONS_PER_PAGE;
      w = 0.36 * width;
      h = height / (PERSONS_PER_PAGE + 2);
      this.selected = button;
      button.pageNo = (button.pageNo + 1) % button.pages;
      this.buttons = [];
      knrs.sort(function (a, b) {
        if (dbPersoner[rkl][a][2] < dbPersoner[rkl][b][2]) {
          return -1;
        } else {
          return 1;
        }
      });
      j = 0;
      results = [];
      for (k = 0, len = knrs.length; k < len; k++) {
        knr = knrs[k];
        person = dbPersoner[rkl][knr];
        if (ref = person[2][0], indexOf.call(letters, ref) >= 0) {
          if (Math.floor(j / N) === button.pageNo) {
            x = Math.floor(j / Math.floor(N / 2)) * w / 2;
            x = x % w;
            y = 2 * h * (1 + j % Math.floor(N / 2));
            (function (knr) {
              return _this6.addButton(new PersonButton(rkl, partikod, knr, _this6.x + x, _this6.y + y, w / 2 - 2, 2 * h - 2, function () {
                this.page.selected = this;
                return pages.typ.clickPersonButton([partikod, knr]);
              }));
            })(knr);
          }
          results.push(j++);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }, {
    key: 'makePersons',
    value: function makePersons(rkl, button, partikod, knrs) {
      var _this7 = this;

      // personer är en lista med knr
      var N, h, j, k, knr, len, person, results, w, x, y;
      this.personer = knrs;
      N = 16;
      w = 0.36 * width;
      h = height / (PERSONS_PER_PAGE + 2);
      this.selected = button;
      this.buttons = [];
      knrs.sort(function (a, b) {
        if (dbPersoner[rkl][a][2] < dbPersoner[rkl][b][2]) {
          return -1;
        } else {
          return 1;
        }
      });
      results = [];
      for (j = k = 0, len = knrs.length; k < len; j = ++k) {
        knr = knrs[j];
        person = dbPersoner[rkl][knr];
        x = Math.floor(j / N) * w / 2;
        x = x % w;
        y = 2 * h * (1 + j % N);
        results.push(function (partikod, knr) {
          return _this7.addButton(new PersonButton(rkl, partikod, knr, _this7.x + x, _this7.y + y, w / 2 - 2, 2 * h - 2, function () {
            this.page.selected = this;
            return pages.typ.clickPersonButton([this.partikod, this.knr]);
          }));
        }(partikod, knr));
      }
      return results;
    }
  }]);

  return PersonPage;
}(Page);

LetterKommunPage = function (_Page4) {
  _inherits(LetterKommunPage, _Page4);

  function LetterKommunPage() {
    _classCallCheck(this, LetterKommunPage);

    return _possibleConstructorReturn(this, (LetterKommunPage.__proto__ || Object.getPrototypeOf(LetterKommunPage)).apply(this, arguments));
  }

  _createClass(LetterKommunPage, [{
    key: 'render',
    value: function render() {}
  }, {
    key: 'makeFreq',
    value: function makeFreq(rkl, personer) {
      // personer är en lista
      var k, key, len, letter, name, names, res;
      res = {};
      names = function () {
        var k, len, results;
        results = [];
        for (k = 0, len = personer.length; k < len; k++) {
          key = personer[k];
          results.push(dbPersoner[rkl][key][2]);
        }
        return results;
      }();
      names.sort();
      for (k = 0, len = names.length; k < len; k++) {
        name = names[k];
        letter = name[0];
        res[letter] = res[letter] === void 0 ? 1 : res[letter] + 1;
      }
      return res;
    }
  }, {
    key: 'makeLetters',
    value: function makeLetters(rkl, button, partikod, personer) {
      var _this9 = this;

      var N, h, i, letters, n, ref, results, title, w, x, y;
      N = 16;
      h = this.h / (N + 1);
      w = this.w / 2;
      this.selected = button;
      this.buttons = [];
      i = 0;
      ref = gruppera(this.makeFreq(rkl, personer));
      results = [];
      for (letters in ref) {
        n = ref[letters];
        x = this.x + w * Math.floor(i / N);
        y = this.y + h * (1 + i % N);
        title = letters.length === 1 ? letters : letters[0] + '-' + _.last(letters);
        (function (letters, title) {
          return _this9.addButton(new LetterButton(title, x, y, w - 2, h - 2, n, function () {
            this.page.selected = this;
            return pages.personer.clickLetterButton(rkl, this, partikod, letters, personer);
          }));
        })(letters, title);
        results.push(i++);
      }
      return results;
    }
  }]);

  return LetterKommunPage;
}(Page);

KommunPage = function (_Page5) {
  _inherits(KommunPage, _Page5);

  function KommunPage(x, y, w, h) {
    _classCallCheck(this, KommunPage);

    var _this10 = _possibleConstructorReturn(this, (KommunPage.__proto__ || Object.getPrototypeOf(KommunPage)).call(this, x, y, w, h));

    _this10.active = true;
    _this10.init();
    return _this10;
  }

  _createClass(KommunPage, [{
    key: 'init',
    value: function init() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var letters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'AM';

      var COLS, N, h, i, k, key, keys, len, namn, ref, w, x, y;
      N = 16;
      COLS = 10; // 7
      this.buttons = [];
      w = this.w / COLS;
      h = this.h / (N + 1);
      keys = _.keys(dbKommun);
      keys.sort(function (a, b) {
        if (dbKommun[a] < dbKommun[b]) {
          return -1;
        } else {
          return 1;
        }
      });
      this.addButton(new Button('A-M', this.x + 0 * w, this.y, w - 1, h - 1, function () {
        return this.page.init(0, 'AM');
      }));
      this.addButton(new Button('L-Ö', this.x + 1 * w, this.y, w - 1, h - 1, function () {
        return this.page.init(1, 'NÖ');
      }));
      i = 0;
      for (k = 0, len = keys.length; k < len; k++) {
        key = keys[k];
        namn = dbKommun[key];
        if (letters[0] <= (ref = namn[0]) && ref <= letters[1]) {
          x = Math.floor(i % (COLS * N) / N) * w;
          y = (1 + i % N) * h;
          this.addButton(new KommunButton(key, this.x + x, this.y + y, w - 1, h - 1, function () {

            //print @key
            rensa();
            return fetchKommun(this.key);
          }));
          i++;
        }
      }
      return this.selected = this.buttons[index];
    }
  }, {
    key: 'render',
    value: function render() {}
  }]);

  return KommunPage;
}(Page);

TypPage = function (_Page6) {
  _inherits(TypPage, _Page6);

  function TypPage(x, y, w, h) {
    var cols = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

    _classCallCheck(this, TypPage);

    var _this11 = _possibleConstructorReturn(this, (TypPage.__proto__ || Object.getPrototypeOf(TypPage)).call(this, x, y, w, h, cols));

    _this11.sbuttons = [];
    _this11.start = new Date().getTime();
    _this11.qr = '0000000000';
    h = height / 51;
    _this11.yoff = [_this11.y + 0, _this11.y + 16 * h, _this11.y + 32 * h, _this11.y + 48 * h];
    _this11.selectedPersons = {
      R: [],
      L: [],
      K: []
    };
    _this11.addButton(new TypButton('R', 'Riksdag', _this11.x, _this11.yoff[0], _this11.w - 0, 3 * h - 3, function () {
      pages.partier.select('R', dbTree.R);
      return this.page.selected = this;
    }));
    _this11.addButton(new TypButton('L', dbName.L, _this11.x, _this11.yoff[1], _this11.w - 0, 3 * h - 3, function () {
      pages.partier.select('L', dbTree.L);
      return this.page.selected = this;
    }));
    _this11.addButton(new TypButton('K', dbName.K, _this11.x, _this11.yoff[2], _this11.w - 0, 3 * h - 3, function () {
      pages.partier.select('K', dbTree.K);
      return this.page.selected = this;
    }));
    _this11.addButton(new Button('Utskrift', _this11.x, _this11.yoff[3], _this11.w / 3 - 2, 3 * h - 3, function () {
      var qrcode;
      pages.utskrift.active = true;
      pages.utskrift.stopMeasuringTime();
      this.page.qr = this.page.getQR();
      return qrcode = new QRCode(document.getElementById("qrcode"), {
        text: this.page.qr,
        width: 256,
        height: 256,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.L // Low Medium Q High
      });
    }));
    _this11.addButton(new Button('Rensa', _this11.x + _this11.w / 3, _this11.yoff[3], _this11.w / 3 - 2, 3 * h - 3, function () {
      return rensa();
    }));
    _this11.addButton(new Button('Byt kommun', _this11.x + 2 * _this11.w / 3, _this11.yoff[3], _this11.w / 3 - 0, 3 * h - 3, function () {
      var k, len, page;

      //print 'Byt kommun'
      for (k = 0, len = pages.length; k < len; k++) {
        page = pages[k];
        page.active = false;
      }
      return pages.kommun.active = true;
    }));
    return _this11;
  }

  //@page.selectedPersons = {R:[], L:[], K:[]}
  //@page.sbuttons = [] 


  _createClass(TypPage, [{
    key: 'addsButton',
    value: function addsButton(button) {
      button.page = this;
      return this.sbuttons.push(button);
    }
  }, {
    key: 'getQR',
    value: function getQR() {
      var i, k, knr, len, partikod, persons, ref, s, slump, typ;
      s = kommunkod;
      slump = int(random(1000000));
      s += slump.toString().padStart(6, 0); // to increase probability of uniqueness 
      for (typ in this.selectedPersons) {
        persons = this.selectedPersons[typ];
        ref = range(VOTES);
        for (k = 0, len = ref.length; k < len; k++) {
          i = ref[k];
          if (i < persons.length) {
            var _persons$i = _slicedToArray(persons[i], 2);

            partikod = _persons$i[0];
            knr = _persons$i[1];

            if (knr === 0) {
              s += '99' + partikod.padStart(4, '0');
            } else {
              s += knr.padStart(6, '0');
            }
          } else {
            s += '000000';
          }
        }
      }
      assert(s.length, 4 + 6 + 15 * 6); // 100
      return s;
    }
  }, {
    key: 'render',
    value: function render() {
      var x, y;
      if (this.selected !== null) {
        push();
        textAlign(LEFT, CENTER);
        textSize(20);
        sc();
        var _ref = [pages.partier.x, pages.partier.y + pages.partier.h / 34];
        x = _ref[0];
        y = _ref[1];

        if (this.selected.typ === 'R') {
          text('Riksdag', x, y);
        }
        if (this.selected.typ === 'L') {
          text(dbName.L, x, y);
        }
        if (this.selected.typ === 'K') {
          text(dbName.K, x, y);
        }
        pop();
      }
      return this.showSelectedPersons(); // 750,100-20
    }
  }, {
    key: 'clickDelete',
    value: function clickDelete(typ, index) {
      this.selectedPersons[typ].splice(index, 1);
      return this.createSelectButtons();
    }
  }, {
    key: 'clickSwap',
    value: function clickSwap(typ, index) {
      var arr;
      arr = this.selectedPersons[typ];
      var _ref2 = [arr[index - 1], arr[index]];
      arr[index] = _ref2[0];
      arr[index - 1] = _ref2[1];

      return this.createSelectButtons();
    }
  }, {
    key: 'createSelectButtons',
    value: function createSelectButtons() {
      var dh, dw, h, i, index, person, persons, ref, results, typ, w, x1, x2, y, y1, y2;
      this.sbuttons = [];
      w = this.w;
      dw = 0.02 * width;
      dh = 0.025 * height;
      h = height / 51;
      ref = this.selectedPersons;
      results = [];
      for (typ in ref) {
        persons = ref[typ];
        index = "RLK".indexOf(typ);
        results.push(function () {
          var _this12 = this;

          var k, len, results1;
          results1 = [];
          for (i = k = 0, len = persons.length; k < len; i = ++k) {
            person = persons[i];
            x1 = this.x + dw;
            x2 = this.x + 0.93 * this.w;
            y = this.yoff[index] + 4.7 * h + 13 * h / 5 * i;
            y1 = y - 2.3 * h;
            y2 = y - 0.9 * h;
            results1.push(function (typ, i) {
              if (i > 0) {
                _this12.addsButton(new Button('byt', x1, y1, dw, dh, function () {
                  return _this12.clickSwap(typ, i);
                }));
              }
              return _this12.addsButton(new Button(' x ', x2, y2, dw, dh, function () {
                return _this12.clickDelete(typ, i);
              }));
            }(typ, i));
          }
          return results1;
        }.call(this));
      }
      return results;
    }
  }, {
    key: 'clickPersonButton',
    value: function clickPersonButton(person) {
      // av typen [partikod,knr]
      var i, k, len, pair, persons;
      persons = this.selectedPersons[this.selected.typ];
      //print person,persons
      // Finns partiet redan? I så fall: ersätt denna person med den nya.
      for (i = k = 0, len = persons.length; k < len; i = ++k) {
        pair = persons[i];
        if (pair[0] === person[0]) {
          persons[i][1] = person[1];
          return;
        }
      }
      //print persons
      if (persons.length < VOTES) {
        pair = person;
        //print person
        persons.push(pair);
        //print persons 
        return this.createSelectButtons();
      }
    }
  }, {
    key: 'clickPartiButton',
    value: function clickPartiButton(button) {
      var i, k, len, p, persons;
      persons = this.selectedPersons[this.selected.typ];
      // Finns partiet redan? I så fall: ersätt denna person med den nya.
      //person = []
      //person[NAMN] = dbPartier[@selected.typ][button.partikod][0]
      //person[PARTIKOD] = button.partikod # dictionary[button.title][1]
      //person[PARTIFÖRKORTNING] = dbPartier[@selected.typ][button.partikod][0] # button.title
      //person[KANDIDATNUMMER] = '99' + person[PARTIKOD].padStart 4,'0'	
      for (i = k = 0, len = persons.length; k < len; i = ++k) {
        p = persons[i];
        if (p.partikod === button.partikod) {
          persons[i].knr = 0;
          return;
        }
      }
      if (persons.length < VOTES) {
        persons.push([button.partikod, 0]);
        return this.createSelectButtons();
      }
    }
  }, {
    key: 'sample',
    value: function sample(hash, n) {
      var key;
      return _.object(function () {
        var k, len, ref, results;
        ref = _.sample(_.keys(hash), n);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          key = ref[k];
          results.push([key, hash[key]]);
        }
        return results;
      }());
    }
  }, {
    key: 'slumpa',
    value: function slumpa() {
      var knr, knrs, pair, partier, parties, partikod, results, rkl;
      results = [];
      for (rkl in dbTree) {
        partier = dbTree[rkl];
        this.selectedPersons[rkl] = [];
        parties = this.sample(partier, 5);
        results.push(function () {
          var results1;
          results1 = [];
          for (partikod in parties) {
            knrs = parties[partikod];
            if (random() < 0.2) {
              // Vote for a party
              //person = []
              //person[NAMN] = dictionary[name][0]
              //person[PARTIKOD] = dictionary[name][1]
              //person[PARTIFÖRKORTNING] = name
              //person[KANDIDATNUMMER] = '99' + person[PARTIKOD].padStart 4,'0'	
              pair = [partikod, 0 // Vote for a person
              ];
            } else {
              knr = _.sample(knrs);
              pair = [partikod, knr];
            }
            results1.push(this.selectedPersons[rkl].push(pair));
          }
          return results1;
        }.call(this));
      }
      return results;
    }

    //print @selectedPersons

  }, {
    key: 'showSelectedPersons',
    value: function showSelectedPersons() {
      var button, h, i, j, k, knr, l, len, len1, len2, namn, o, pair, parti, partikod, ref, ref1, ref2, results, typ, y, y0;
      push();
      textAlign(LEFT, CENTER);
      textSize(0.025 * height);
      ref = 'RLK';
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        typ = ref[i];
        sc();
        sw(1);
        rectMode(CORNER);
        y0 = this.yoff[i];
        if (i === 0) {
          fc(1, 1, 0.5);
        }
        if (i === 1) {
          fc(0.5, 0.75, 1);
        }
        if (i === 2) {
          fc(1);
        }
        h = height / 51;
        rect(this.x, y0 + 3 * h - 1, this.w, 13 * h - 1);
        fc(0);
        sc();
        sw(0);
        ref1 = this.selectedPersons[typ];
        //person = []
        //person[NAMN] = dbPartier[@selected.typ][button.partikod][0]
        //person[PARTIKOD] = button.partikod # dictionary[button.title][1]
        //person[PARTIFÖRKORTNING] = dbPartier[@selected.typ][button.partikod][0] # button.title
        //person[KANDIDATNUMMER] = '99' + person[PARTIKOD].padStart 4,'0'	
        for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
          pair = ref1[j];
          //print 'showSelectedPersons',pair,@selectedPersons[typ]
          y = y0 + 4.5 * h + 13 * h / 5 * j;
          var _pair = pair;

          var _pair2 = _slicedToArray(_pair, 2);

          partikod = _pair2[0];
          knr = _pair2[1];

          parti = dbPartier[typ][partikod][0];
          namn = knr === 0 ? dbPartier[typ][partikod][1] : dbPersoner[typ][knr][2];
          text(j + 1 + ' ' + parti + ' - ' + namn, this.x + 10, y);
        }
      }
      pop();
      ref2 = this.sbuttons;
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        button = ref2[o];
        results.push(button.draw());
      }
      return results;
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed() {
      var button, k, len, ref;
      ref = this.sbuttons;
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        if (button.inside(mouseX, mouseY)) {
          button.click();
        }
      }
      return _get(TypPage.prototype.__proto__ || Object.getPrototypeOf(TypPage.prototype), 'mousePressed', this).call(this);
    }
  }]);

  return TypPage;
}(Page);

UtskriftPage = function (_Page7) {
  _inherits(UtskriftPage, _Page7);

  function UtskriftPage(x, y, w, h) {
    _classCallCheck(this, UtskriftPage);

    var _this13 = _possibleConstructorReturn(this, (UtskriftPage.__proto__ || Object.getPrototypeOf(UtskriftPage)).call(this, x, y, w, h));

    _this13.selected = null;
    _this13.buttons = [];
    _this13.addButton(new Button('Utskrift', 50, height - 482, 270, 45, function () {
      return window.print();
    }));
    _this13.addButton(new Button('Fortsätt', 350, height - 482, 270, 45, function () {
      var myNode;
      myNode = document.getElementById("qrcode");
      myNode.innerHTML = '';
      pages.utskrift.active = false;
      return pages.typ.createSelectButtons();
    }));
    _this13.addButton(new Button('Slump', 650, height - 482, 270, 45, function () {
      var myNode;
      myNode = document.getElementById("qrcode");
      myNode.innerHTML = '';
      pages.utskrift.active = false;
      pages.typ.slumpa();
      return pages.typ.createSelectButtons();
    }));
    return _this13;
  }

  _createClass(UtskriftPage, [{
    key: 'stopMeasuringTime',
    value: function stopMeasuringTime() {
      this.crc = this.getCRC(pages.typ.qr);
      return this.cpu = new Date().getTime() - pages.typ.start;
    }
  }, {
    key: 'getCRC',
    value: function getCRC(qr) {
      var char, i, index, k, len, res;
      res = 0;
      for (i = k = 0, len = qr.length; k < len; i = ++k) {
        char = qr[i];
        index = '0123456789'.indexOf(char);
        res += (i + 1) * (index + 1);
        res %= 1000000;
      }
      return res;
    }
  }, {
    key: 'showSelectedPersons',
    value: function showSelectedPersons() {
      var i, j, k, knr, l, len, len1, pair, partikod, partinamn, personnamn, ref, ref1, typ, y;
      push();
      textAlign(LEFT, CENTER);
      fc(0);
      sc();
      textSize(20);
      ref = 'RLK';
      for (i = k = 0, len = ref.length; k < len; i = ++k) {
        typ = ref[i];
        ref1 = pages.typ.selectedPersons[typ];
        for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {
          pair = ref1[j];
          var _pair3 = pair;

          var _pair4 = _slicedToArray(_pair3, 2);

          partikod = _pair4[0];
          knr = _pair4[1];

          partinamn = dbPartier[typ][partikod][1];
          if (knr === 0) {
            personnamn = '';
          } else {
            personnamn = dbPersoner[typ][knr][2];
          }
          y = [0, 260, 520][i] + 50 + 40 * j;
          text(j + 1 + '  ' + partinamn + ' - ' + personnamn, width / 2, y);
        }
      }
      return pop();
    }
  }, {
    key: 'render',
    value: function render() {
      textAlign(LEFT, CENTER);
      bg(1);
      fc(0);
      text('Riksdag', 10, 50 + 0);
      text(dbName.L, 10, 50 + 260);
      text(dbName.K, 10, 50 + 520);
      text(pages.typ.qr, 20, height - 310);
      text('crc: ' + this.getCRC(pages.typ.qr.slice(10)) + ' ' + ('tid: ' + this.cpu), 20, height - 310 - 50);
      this.showSelectedPersons();
      return pages.typ.sbuttons = [];
    }
  }]);

  return UtskriftPage;
}(Page);

Button = function () {
  function Button(title1, x5, y3, w1, h1) {
    var click1 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, Button);

    this.title = title1;
    this.x = x5;
    this.y = y3;
    this.w = w1;
    this.h = h1;
    this.click = click1;
    this.ts = 0.6 * this.h;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      push();
      sc();
      rect(this.x, this.y, this.w, this.h);
      pop();
      textSize(this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + this.w / 2, this.y + this.h / 2);
    }
  }, {
    key: 'inside',
    value: function inside() {
      return this.x < mouseX && mouseX < this.x + this.w && this.y < mouseY && mouseY < this.y + this.h;
    }
  }]);

  return Button;
}();

KommunButton = function (_Button) {
  _inherits(KommunButton, _Button);

  function KommunButton(key, x, y, w, h) {
    var click = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

    _classCallCheck(this, KommunButton);

    var _this14 = _possibleConstructorReturn(this, (KommunButton.__proto__ || Object.getPrototypeOf(KommunButton)).call(this, dbKommun[key], x, y, w, h, click));

    _this14.key = key;
    return _this14;
  }

  _createClass(KommunButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      push();
      sc();
      rect(this.x, this.y, this.w, this.h);
      pop();
      textSize(0.65 * this.ts);
      textAlign(LEFT, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      return text(this.title, this.x + 0.025 * this.w, this.y + this.h / 2);
    }
  }]);

  return KommunButton;
}(Button);

PartiButton = function (_Button2) {
  _inherits(PartiButton, _Button2);

  function PartiButton(rkl1, partikod1, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, PartiButton);

    var _this15 = _possibleConstructorReturn(this, (PartiButton.__proto__ || Object.getPrototypeOf(PartiButton)).call(this, '', x, y, w, h, click));

    _this15.rkl = rkl1;
    _this15.partikod = partikod1;
    return _this15;
  }

  _createClass(PartiButton, [{
    key: 'draw',
    value: function draw() {
      var partinamn;
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      //print @rkl,@partikod
      partinamn = dbPartier[this.rkl][this.partikod][0];
      if (partinamn === '') {
        partinamn = dbPartier[this.rkl][this.partikod][1];
      }
      return text(partinamn, this.x + this.w / 2, this.y + this.h / 2);
    }
  }]);

  return PartiButton;
}(Button);

LetterButton = function (_Button3) {
  _inherits(LetterButton, _Button3);

  function LetterButton(title, x, y, w, h, antal, click) {
    _classCallCheck(this, LetterButton);

    var _this16 = _possibleConstructorReturn(this, (LetterButton.__proto__ || Object.getPrototypeOf(LetterButton)).call(this, title, x, y, w, h, click));

    _this16.antal = antal;
    _this16.pageNo = -1;
    _this16.pages = 1 + Math.floor(_this16.antal / PERSONS_PER_PAGE);
    if (_this16.antal % PERSONS_PER_PAGE === 0) {
      _this16.pages--;
    }
    return _this16;
  }

  _createClass(LetterButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(0.8 * this.ts);
      textAlign(CENTER, CENTER);
      if (this.page.selected === this) {
        fc(1, 1, 0);
      } else {
        fc(1);
      }
      text(this.title, this.x + this.w / 2, this.y + this.h / 2);
      push();
      this.pageIndicator();
      return pop();
    }
  }, {
    key: 'pageIndicator',
    value: function pageIndicator() {
      var dx, i, k, len, ref, results;
      if (this.pages <= 1) {
        return;
      }
      dx = Math.floor(this.w / (this.pages + 1));
      ref = range(this.pages);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        if (i === this.pageNo && this.page.selected === this) {
          fc(1);
        } else {
          fc(0);
        }
        results.push(circle(this.x + (i + 1) * dx, this.y + 0.85 * this.h, 3));
      }
      return results;
    }
  }]);

  return LetterButton;
}(Button);

PersonButton = function (_Button4) {
  _inherits(PersonButton, _Button4);

  function PersonButton(rkl1, partikod1, knr, x, y, w, h) {
    var click = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};

    _classCallCheck(this, PersonButton);

    var person;

    var _this17 = _possibleConstructorReturn(this, (PersonButton.__proto__ || Object.getPrototypeOf(PersonButton)).call(this, knr, x, y, w, h, click));

    _this17.rkl = rkl1;
    _this17.partikod = partikod1;
    _this17.knr = knr;
    person = dbPersoner[_this17.rkl][knr];
    _this17.title0 = person[2];
    _this17.title1 = person[3];
    if (_this17.title1 === '') {
      _this17.title1 = {
        M: 'Man',
        K: 'Kvinna'
      }[person[1]] + ' ' + person[0] + ' \xE5r';
    }
    return _this17;
  }

  _createClass(PersonButton, [{
    key: 'draw',
    value: function draw() {
      fc(0.5);
      rect(this.x, this.y, this.w, this.h);
      textSize(this.ts / 2);
      textAlign(LEFT, CENTER);
      fc(1);
      text(this.title0, this.x + 2, this.y + 2 + 0.3 * this.h);
      fc(0.75);
      return text(this.title1, this.x + 2, this.y + 2 + 0.7 * this.h);
    }
  }]);

  return PersonButton;
}(Button);

TypButton = function (_Button5) {
  _inherits(TypButton, _Button5);

  function TypButton(typ1, title, x, y, w, h) {
    var click = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};

    _classCallCheck(this, TypButton);

    var _this18 = _possibleConstructorReturn(this, (TypButton.__proto__ || Object.getPrototypeOf(TypButton)).call(this, title, x, y, w, h, click));

    _this18.typ = typ1;
    return _this18;
  }

  return TypButton;
}(Button);

getParameters = function getParameters() {
  var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;

  var arr, f;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  if (arr[1] === '') {
    return {};
  }
  return _.object(function () {
    var k, len, ref, results;
    ref = arr[1].split('&');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      f = ref[k];
      results.push(f.split('='));
    }
    return results;
  }());
};

loadFile = function loadFile(filePath) {
  var result, xmlhttp;
  result = null;
  xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", filePath, false);
  xmlhttp.send();
  if (xmlhttp.status === 200) {
    result = xmlhttp.responseText;
  }
  return result;
};

getTxt = function getTxt(rkl, filename) {
  var cells, data, k, len, line, lines;
  data = filename === 'data\\09.txt' ? '' : loadFile(filename);
  dbName[rkl] = '';
  dbTree[rkl] = {};
  dbPartier[rkl] = {};
  dbPersoner[rkl] = {};
  lines = data.split('\n');
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    line = line.trim();
    cells = line.split('|');
    if (cells[0] === 'T') {
      // T|Arjeplog
      dbName[rkl] = cells[1];
    }
    if (cells[0] === 'A') {
      // kandidaturer # A|3|208509|208510|208511|208512|208513|208514
      dbTree[rkl][cells[1]] = cells.slice(2);
    }
    if (cells[0] === 'B') {
      // partier # B|4|C|Centerpartiet
      dbPartier[rkl][cells[1]] = cells.slice(2);
    }
    if (cells[0] === 'C') {
      // personer # C|10552|53|K|Britta Flinkfeldt|53 år, Arjeplog
      dbPersoner[rkl][cells[1]] = cells.slice(2);
    }
  }
  print('getTxt', rkl, filename, data.length);
  print('Partier:', _.size(dbTree[rkl]));
  print('Partier:', _.size(dbPartier[rkl]));
  return print('Personer:', _.size(dbPersoner[rkl]));
};

getKommun = function getKommun(filename) {
  var cells, data, k, kod, len, line, lines, namn;
  data = loadFile(filename);
  dbKommun = {};
  lines = data.split('\n');
  for (k = 0, len = lines.length; k < len; k++) {
    line = lines[k];
    line = line.trim();
    cells = line.split('|');
    kod = cells[0];
    namn = cells[1];
    if (kod.length === 4) {
      dbKommun[kod] = namn;
    }
  }
  return print('getKommun', _.size(dbKommun));
};

preload = function preload() {
  var kommun;

  var _getParameters = getParameters();

  kommun = _getParameters.kommun;

  if (!kommun) {
    kommun = '0180';
  }
  kommunkod = kommun;
  länskod = kommunkod.slice(0, 2);
  getTxt('R', 'data\\00.txt');
  getTxt('L', 'data\\' + länskod + '.txt');
  getTxt('K', 'data\\' + kommunkod + '.txt');
  return getKommun('data\\omraden.txt');
};

fetchKommun = function fetchKommun(kommun) {
  // t ex '0180'
  var k, len, page, start;
  start = new Date().getTime();
  if (länskod !== kommun.slice(0, 2)) {
    länskod = kommun.slice(0, 2);
    getTxt('L', 'data\\' + länskod + '.txt');
  }
  if (kommunkod !== kommun) {
    kommunkod = kommun;
    getTxt('K', 'data\\' + kommunkod + '.txt');
  }
  //getKommun 'data\\omraden.txt'
  for (k = 0, len = pages.length; k < len; k++) {
    page = pages[k];
    page.active = true;
  }
  pages.kommun.active = false;
  pages.utskrift.active = false;
  pages.typ.buttons[1].title = dbName.L;
  pages.typ.buttons[2].title = dbName.K;
  return print('time', new Date().getTime() - start);
};

setup = function setup() {
  var x0, x1, x2, x3, x4;
  createCanvas(windowWidth, windowHeight - 1);
  sc();
  textAlign(CENTER, CENTER);
  textSize(20);
  x0 = 0;
  x1 = 0.18 * width;
  x2 = 0.28 * width;
  x3 = 0.64 * width;
  x4 = 1.00 * width;
  pages.partier = new PartiPage(0, 0, x1 - x0, height);
  pages.letters = new LetterPage(x1, 0, x2 - x1, height);
  pages.personer = new PersonPage(x2, 0, x3 - x2, height);
  pages.kommun = new KommunPage(0, 0, width, height);
  pages.typ = new TypPage(x3, 0, x4 - x3, height);
  pages.utskrift = new UtskriftPage(0, 0, x4, height);
  pages.utskrift.active = false;
  pages.kommun.active = false;
  pages.typ.buttons[1].title = dbName.L;
  return pages.typ.buttons[2].title = dbName.K;
};

draw = function draw() {
  var key, page, results;
  bg(0);
  if (_.size(pages < 6)) {
    return;
  }
  if (pages.utskrift === void 0) {
    return;
  }
  if (pages.utskrift.active) {
    return pages.utskrift.draw();
  } else if (pages.kommun.active) {
    return pages.kommun.draw();
  } else {
    results = [];
    for (key in pages) {
      page = pages[key];
      results.push(page.draw());
    }
    return results;
  }
};

mousePressed = function mousePressed() {
  var key, page, results;
  results = [];
  for (key in pages) {
    page = pages[key];
    results.push(page.mousePressed());
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
