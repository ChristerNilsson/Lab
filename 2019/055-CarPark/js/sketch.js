// Generated by CoffeeScript 2.3.2
var Car, Point, SIZE, bestScore, cars, distance, draw, init, intersecting, lastX, lastY, mousePressed, score, setup, start;

SIZE = 2;

cars = [];

start = new Date();

bestScore = 999999999;

lastX = null;

lastY = null;

Point = class Point {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

};

Car = class Car {
  
  // @active 
  //   0 = passive car
  //   1 = moving car 
  //   2 = target parking spot
  // @x,@y anger bakaxelns mittpunkt
  constructor(x1, y1, length, width, active = 0, direction = 0, speed = 0, steering = 0) {
    this.makePolygon = this.makePolygon.bind(this);
    this.transform = this.transform.bind(this);
    this.x = x1;
    this.y = y1;
    this.length = length;
    this.width = width;
    this.active = active;
    this.direction = direction;
    this.speed = speed;
    this.steering = steering;
    this.makePolygon();
  }

  clone() {
    return JSON.parse(JSON.stringify(this));
  }

  makePolygon() {
    var a1, a2, d1, d2;
    a1 = atan2(-1, -1); // degrees 
    a2 = atan2(-1, 4); // degrees
    d1 = SIZE * sqrt(20 * 20 + 20 * 20);
    d2 = SIZE * sqrt(80 * 80 + 20 * 20);
    this.polygon = [];
    this.polygon.push(this.transform(d1, a1));
    this.polygon.push(this.transform(d2, a2));
    this.polygon.push(this.transform(d2, -a2));
    return this.polygon.push(this.transform(d1, -a1));
  }

  transform(d, a) {
    return new Point(this.x + d * cos(this.direction + a), this.y + d * sin(this.direction + a));
  }

  draw() {
    if (this.active === 2) {
      return;
    }
    push();
    translate(this.x, this.y);
    rotate(this.direction);
    fc(1);
    if (this.active === 1) {
      fc(1, 1, 0);
    }
    rectMode(CORNER);
    rect(-0.2 * this.length, -0.5 * this.width, this.length, this.width);
    sw(5);
    sc(0);
    point(0, 0);
    sw(1);
    this.x0 = 0; // bakaxel
    this.x1 = 0 + 0.60 * this.length; // framaxel
    this.y0 = 0 - 0.4 * this.width;
    this.y1 = 0 + 0.4 * this.width;
    line(this.x0, this.y0, this.x0, this.y1);
    line(this.x1, this.y0, this.x1, this.y1);
    fc(0);
    rectMode(CENTER);
    // rita bakhjul
    rect(this.x0, this.y0, 0.2 * this.length, 0.2 * this.width);
    rect(this.x0, this.y1, 0.2 * this.length, 0.2 * this.width);
    // rita VF
    push();
    translate(this.x1, this.y0);
    rotate(5 * this.steering);
    rect(0, 0, 0.2 * this.length, 0.2 * this.width);
    pop();
    // rita HF
    push();
    translate(this.x1, this.y1);
    rotate(5 * this.steering);
    rect(0, 0, 0.2 * this.length, 0.2 * this.width);
    pop();
    return pop();
  }

  update() {
    if (this.active !== 1) {
      return;
    }
    if (lastX === null || lastX === (void 0)) {
      return;
    }
    if (lastY === null || lastY === (void 0)) {
      return;
    }
    // gs = navigator.getGamepads()
    // if gs and gs[0] then @speed = -2 * gs[0].axes[1] 
    // if gs and gs[0] then @steering = 10 * gs[0].axes[0] 
    // @steering = constrain @steering,-30,30
    this.steering += (mouseX - lastX) / 50;
    this.speed += (lastY - mouseY) / 50;
    lastX = mouseX;
    lastY = mouseY;
    this.steering = constrain(this.steering, -30, 30);
    this.speed = constrain(this.speed, -30, 30);
    this.x += this.speed * cos(this.direction);
    this.y += this.speed * sin(this.direction);
    this.direction += this.speed / 10 * this.steering;
    this.makePolygon();
    return this.checkCollision();
  }

  checkCollision() {
    var car, k, len, results;
    results = [];
    for (k = 0, len = cars.length; k < len; k++) {
      car = cars[k];
      if (car.active === 0) {
        if (intersecting(this.polygon, car.polygon)) {
          results.push(this.active = 0);
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

setup = function() {
  //gs = navigator.getGamepads()
  createCanvas(SIZE * 800, 1000);
  angleMode(DEGREES);
  return textSize(100);
};

init = function() {
  var i, j, k, l, len, len1, ref, ref1, x, y;
  cars = [];
  start = new Date();
  bestScore = 999999999;
  lastX = mouseX;
  lastY = mouseY;
  ref = range(5);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(2);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      x = 400 + i * 50 * SIZE;
      y = 100 + j * 300 * SIZE;
      cars.push(new Car(x, y, SIZE * 100, SIZE * 40, 0, j === 0 ? 90 : 270));
    }
  }
  cars[7].active = 2; // target parking lot
  return cars.push(new Car(SIZE * 100, SIZE * 200, SIZE * 100, SIZE * 40, 1));
};

// car = new Car 100,100,100,40,false,0
// assert car.polygon, [new Point(80,80),new Point(180,80),new Point(180,120),new Point(80,120)]
// car.direction = 90
// car.makePolygon()
// assert car.polygon, [new Point(120,80),new Point(120.00000000000001,180),new Point(80,180), new Point(80,80)]
// car.direction = 45
// car.makePolygon()
// assert car.polygon, [new Point(100, 71.7157287525381), new Point(170.71067811865476, 142.42640687119285), new Point(142.42640687119285, 170.71067811865476), new Point(71.7157287525381, 100)]
// console.log 'ready'
mousePressed = function() {
  return init();
};

draw = function() {
  var car, k, len, stopp, temp;
  if (cars.length === 0) {
    return;
  }
  bg(0.5);
  for (k = 0, len = cars.length; k < len; k++) {
    car = cars[k];
    car.draw();
  }
  cars[10].update();
  stopp = new Date();
  temp = score(cars[10], cars[7]) + (stopp - start) / 1000;
  if (temp < bestScore) {
    bestScore = temp;
  }
  return text(round(bestScore), 100, 100);
};

score = function(a, b) {
  var i, k, len, ref, result;
  result = 0;
  ref = range(4);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    result += distance(a.polygon[i], b.polygon[i]);
  }
  return result;
};

distance = function(p1, p2) {
  return dist(p1.x, p1.y, p2.x, p2.y);
};

// Checks if two polygons are intersecting.
intersecting = (a, b) => { // polygons
  var i1, i2, k, l, len, len1, len2, len3, m, maxA, maxB, minA, minB, n, normal, p, p1, p2, polygon, projected, ref, ref1;
  ref = [a, b];
  for (k = 0, len = ref.length; k < len; k++) {
    polygon = ref[k];
    ref1 = range(polygon.length);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i1 = ref1[l];
      i2 = (i1 + 1) % polygon.length;
      p1 = polygon[i1];
      p2 = polygon[i2];
      normal = new Point(p2.y - p1.y, p1.x - p2.x);
      minA = null;
      maxA = null;
      for (m = 0, len2 = a.length; m < len2; m++) {
        p = a[m];
        projected = normal.x * p.x + normal.y * p.y;
        if (minA === null || projected < minA) {
          minA = projected;
        }
        if (maxA === null || projected > maxA) {
          maxA = projected;
        }
      }
      minB = null;
      maxB = null;
      for (n = 0, len3 = b.length; n < len3; n++) {
        p = b[n];
        projected = normal.x * p.x + normal.y * p.y;
        if (minB === null || projected < minB) {
          minB = projected;
        }
        if (maxB === null || projected > maxB) {
          maxB = projected;
        }
      }
      if (maxA < minB || maxB < minA) {
        return false;
      }
    }
  }
  return true;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\055-CarPark\coffee\sketch.coffee