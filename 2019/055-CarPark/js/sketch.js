// Generated by CoffeeScript 2.3.2
var Car, Point, SIZE, active, bestScore, calc, cars, centerX, centerY, distance, draw, init, intersecting, keyPressed, parkinglot, problem1, problem2, score, setup, start;

SIZE = 2;

cars = [];

start = new Date();

bestScore = 999999999;

centerX = null;

centerY = null;

active = null;

parkinglot = null;

Point = class Point {
  constructor(x1, y1) {
    this.x = x1;
    this.y = y1;
  }

};

Car = class Car {
  
  // @active 
  //   0 = passive car
  //   1 = moving car 
  //   2 = target parking spot
  // @x,@y is the middle point of the read axis
  constructor(x1, y1, length1, width1, active1 = 0, direction1 = 0, speed1 = 0, steering1 = 0) {
    this.makePolygon = this.makePolygon.bind(this);
    this.makeTrack = this.makeTrack.bind(this);
    this.transform = this.transform.bind(this);
    this.x = x1;
    this.y = y1;
    this.length = length1;
    this.width = width1;
    this.active = active1;
    this.direction = direction1;
    this.speed = speed1;
    this.steering = steering1;
    this.tracks = [];
    this.makePolygon();
  }

  clone() {
    return JSON.parse(JSON.stringify(this));
  }

  makePolygon() {
    var a1, a2, d1, d2;
    a1 = atan2(-1, -1); // degrees 
    a2 = atan2(-1, 4); // degrees
    d1 = SIZE * sqrt(20 * 20 + 20 * 20);
    d2 = SIZE * sqrt(80 * 80 + 20 * 20);
    this.polygon = [];
    this.polygon.push(this.transform(d1, a1));
    this.polygon.push(this.transform(d2, a2));
    this.polygon.push(this.transform(d2, -a2));
    return this.polygon.push(this.transform(d1, -a1));
  }

  makeTrack() {
    var a1, a2, d1, d2, n, p1, p2, p3, p4, polygon, q1, q2, q3, q4;
    a1 = atan2(-1, 0); // degrees 
    a2 = atan2(-1, 4); // degrees
    d1 = SIZE * sqrt(15 * 15);
    d2 = SIZE * sqrt(60 * 60 + 15 * 15);
    polygon = [];
    polygon.push(this.transform(d2, -a2));
    polygon.push(this.transform(d1, -a1));
    polygon.push(this.transform(d1, a1));
    polygon.push(this.transform(d2, a2));
    this.tracks.push(polygon);
    n = this.tracks.length;
    if (n < 2) {
      return;
    }
    [p1, p2, p3, p4] = this.tracks[n - 1];
    [q1, q2, q3, q4] = this.tracks[n - 2];
    if (10 > dist(p1.x, p1.y, q1.x, q1.y)) {
      this.tracks.pop();
    }
    if (n > 50) {
      return this.tracks.shift();
    }
  }

  transform(d, a) {
    return new Point(this.x + d * cos(this.direction + a), this.y + d * sin(this.direction + a));
  }

  drawTracks() {
    var i, k, len1, p1, p2, p3, p4, q1, q2, q3, q4, ref;
    if (this.tracks.length < 1) {
      return;
    }
    sw(12);
    ref = range(this.tracks.length - 1);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      sc(0.5 - i * 0.01);
      [p1, p2, p3, p4] = this.tracks[i];
      [q1, q2, q3, q4] = this.tracks[i + 1];
      line(p1.x, p1.y, q1.x, q1.y);
      line(p2.x, p2.y, q2.x, q2.y);
      line(p3.x, p3.y, q3.x, q3.y);
      line(p4.x, p4.y, q4.x, q4.y);
    }
    return sw(1);
  }

  draw() {
    var ww;
    if (this.active === 2) {
      return;
    }
    this.drawTracks();
    push();
    translate(this.x, this.y);
    rotate(this.direction);
    fc(1);
    if (this.active === 1) {
      fc(1, 1, 0);
    }
    rectMode(CORNER);
    rect(-0.2 * this.length, -0.5 * this.width, this.length, this.width);
    sw(5);
    sc(0);
    point(0, 0);
    sw(1);
    ww = 0.15 * this.width;
    this.x0 = 0; // read axis
    this.x1 = 0 + 0.6 * this.length; // front axis
    this.y0 = 0 - 0.4 * this.width;
    this.y1 = 0 + 0.4 * this.width;
    line(this.x0, this.y0, this.x0, this.y1);
    line(this.x1, this.y0, this.x1, this.y1);
    fc(0);
    rectMode(CENTER);
    // draw rear wheels
    rect(this.x0, this.y0, 0.2 * this.length, ww);
    rect(this.x0, this.y1, 0.2 * this.length, ww);
    // draw front left wheel
    push();
    translate(this.x1, this.y0);
    rotate(this.steering);
    rect(0, 0, 0.2 * this.length, ww);
    pop();
    // draw front right wheel
    push();
    translate(this.x1, this.y1);
    rotate(this.steering);
    rect(0, 0, 0.2 * this.length, ww);
    pop();
    return pop();
  }

  update() {
    if (this.active !== 1) {
      return;
    }
    if (centerX === null) {
      return;
    }
    if (centerY === null) {
      return;
    }
    // gs = navigator.getGamepads()
    // if gs and gs[0] then @speed = -2 * gs[0].axes[1] 
    // if gs and gs[0] then @steering = 10 * gs[0].axes[0] 
    // @steering = constrain @steering,-30,30
    this.steering = (mouseX - centerX) / 10;
    this.speed = (centerY - mouseY) / 100;
    this.steering = constrain(this.steering, -90, 90);
    this.speed = constrain(this.speed, -10, 10);
    [this.x, this.y, this.direction] = calc(this.x, this.y, this.length, this.direction, this.speed, this.steering);
    this.makePolygon();
    this.makeTrack();
    return this.checkCollision();
  }

  checkCollision() {
    var car, k, len1, results;
    results = [];
    for (k = 0, len1 = cars.length; k < len1; k++) {
      car = cars[k];
      if (car.active === 0) {
        if (intersecting(this.polygon, car.polygon)) {
          results.push(this.active = 0);
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

calc = function(x, y, length, direction, speed, steering) {
  var d, distance, len, xc, yc;
  len = 0.6 * length;
  xc = x + len * cos(direction) + speed * cos(direction + steering);
  yc = y + len * sin(direction) + speed * sin(direction + steering);
  distance = dist(x, y, xc, yc);
  d = distance - len;
  direction = atan2(yc - y, xc - x);
  return [x + d * cos(direction), y + d * sin(direction), direction];
};

setup = function() {
  angleMode(DEGREES);
  //assert [], calc 0,0,3,90,1,45
  //gs = navigator.getGamepads()
  createCanvas(SIZE * 800, 1000);
  return textSize(100);
};

problem1 = function() {
  var i, j, k, l, len1, len2, ref, ref1, x, y;
  ref = range(5);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    ref1 = range(2);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      j = ref1[l];
      x = 400 + i * 50 * SIZE;
      y = 100 + j * 300 * SIZE;
      cars.push(new Car(x, y, SIZE * 100, SIZE * 40, 0, j === 0 ? 90 : 270));
    }
  }
  parkinglot = cars[7];
  parkinglot.active = 2;
  active = new Car(SIZE * 100, SIZE * 200, SIZE * 100, SIZE * 40, 1);
  return cars.push(active);
};

problem2 = function() {
  var i, j, k, l, len1, len2, ref, ref1, x, y;
  ref = range(2);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    ref1 = range(3);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      j = ref1[l];
      x = 400 + i * 150 * SIZE;
      y = 200 + j * 120 * SIZE;
      cars.push(new Car(x, y, SIZE * 100, SIZE * 40, 0, i === 0 ? 90 : 270));
    }
  }
  parkinglot = cars[4];
  parkinglot.active = 2; // target parking lot
  x = 400 + 1 * 95 * SIZE;
  y = 200 + 3 * 120 * SIZE;
  active = new Car(x, y, SIZE * 100, SIZE * 40, 1, 270);
  return cars.push(active);
};

init = function() {
  cars = [];
  start = new Date();
  bestScore = 999999999;
  centerX = width / 2;
  centerY = height / 2;
  if (random() < 0.5) {
    return problem1();
  } else {
    return problem2();
  }
};

// car = new Car 100,100,100,40,false,0
// assert car.polygon, [new Point(80,80),new Point(180,80),new Point(180,120),new Point(80,120)]
// car.direction = 90
// car.makePolygon()
// assert car.polygon, [new Point(120,80),new Point(120.00000000000001,180),new Point(80,180), new Point(80,80)]
// car.direction = 45
// car.makePolygon()
// assert car.polygon, [new Point(100, 71.7157287525381), new Point(170.71067811865476, 142.42640687119285), new Point(142.42640687119285, 170.71067811865476), new Point(71.7157287525381, 100)]
// console.log 'ready'
keyPressed = function() {
  return init();
};

draw = function() {
  var car, k, len1, stopp, temp;
  if (cars.length === 0) {
    return;
  }
  bg(0.5);
  sc(0);
  line(0, centerY, width, centerY);
  line(centerX, height, centerX, 0);
  for (k = 0, len1 = cars.length; k < len1; k++) {
    car = cars[k];
    car.draw();
  }
  active.update();
  stopp = new Date();
  temp = score(parkinglot, active) + (stopp - start) / 1000;
  if (temp < bestScore) {
    bestScore = temp;
  }
  text(round(score(parkinglot, active)), 100, 100);
  text(round(stopp - start) / 1000, 500, 100);
  return text(round(bestScore), 1000, 100);
};

score = function(a, b) {
  var i, k, len1, ref, result;
  result = 0;
  ref = range(4);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    result += distance(a.polygon[i], b.polygon[i]);
  }
  return result;
};

distance = function(p1, p2) {
  return dist(p1.x, p1.y, p2.x, p2.y);
};

// Checks if two polygons are intersecting.
intersecting = (a, b) => { // polygons
  var i1, i2, k, l, len1, len2, len3, len4, m, maxA, maxB, minA, minB, normal, o, p, p1, p2, polygon, projected, ref, ref1;
  ref = [a, b];
  for (k = 0, len1 = ref.length; k < len1; k++) {
    polygon = ref[k];
    ref1 = range(polygon.length);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      i1 = ref1[l];
      i2 = (i1 + 1) % polygon.length;
      p1 = polygon[i1];
      p2 = polygon[i2];
      normal = new Point(p2.y - p1.y, p1.x - p2.x);
      minA = null;
      maxA = null;
      for (m = 0, len3 = a.length; m < len3; m++) {
        p = a[m];
        projected = normal.x * p.x + normal.y * p.y;
        if (minA === null || projected < minA) {
          minA = projected;
        }
        if (maxA === null || projected > maxA) {
          maxA = projected;
        }
      }
      minB = null;
      maxB = null;
      for (o = 0, len4 = b.length; o < len4; o++) {
        p = b[o];
        projected = normal.x * p.x + normal.y * p.y;
        if (minB === null || projected < minB) {
          minB = projected;
        }
        if (maxB === null || projected > maxB) {
          maxB = projected;
        }
      }
      if (maxA < minB || maxB < minA) {
        return false;
      }
    }
  }
  return true;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\055-CarPark\coffee\sketch.coffee