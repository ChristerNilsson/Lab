// Generated by CoffeeScript 2.3.2
var body, books, crap, createAndAppend, div, fmt, h1, h2, h3, head, img, li, lis, print, stack, title, ul;

print = function() {
  console.log(arguments[0]);
  return arguments[0];
};

createAndAppend = (type, parent, attributes = {}) => {
  var elem, key, value;
  elem = document.createElement(type);
  parent.appendChild(elem);
  for (key in attributes) {
    value = attributes[key];
    elem[key] = value;
  }
  return elem;
};

stack = [];

crap = (attributes, f, type) => {
  if (typeof type === 'object') {
    stack.push(type);
  } else {
    stack.push(createAndAppend(type, _.last(stack), attributes));
  }
  f();
  return stack.pop();
};

head = (f = () => {}) => {
  return crap({}, f, document.head);
};

body = (f = () => {}) => {
  return crap({}, f, document.body);
};

title = (attributes, f = () => {}) => {
  return crap(attributes, f, 'title');
};

h1 = (attributes, f = () => {}) => {
  return crap(attributes, f, 'h1');
};

h2 = (attributes, f = () => {}) => {
  return crap(attributes, f, 'h2');
};

h3 = (attributes, f = () => {}) => {
  return crap(attributes, f, 'h3');
};

ul = (attributes, f = () => {}) => {
  return crap(attributes, f, 'ul');
};

li = (attributes, f = () => {}) => {
  return crap(attributes, f, 'li');
};

img = (attributes, f = () => {}) => {
  return crap(attributes, f, 'img');
};

div = (attributes, f = () => {}) => {
  return crap(attributes, f, 'div');
};

// saves space in defining an object array
fmt = (titles, data, sep = '|') => {
  return print(data.map((lst) => {
    return _.object(titles.split(sep), lst.split(sep));
  }));
};

//##############################################################

// books = [
// 	{title: 'The Kite Runner',     author: 'Khaled Hosseini',	language: 'English', cover: '3.jpg', },
// 	{title: 'Number the Stars',    author: 'lois Lowry',      language: 'English', cover: '4.jpg', },
// 	{title: 'Pride and Prejudice', author: 'Jane Austen',     language: 'English', cover: '5.jpg', },
// 	{title: 'The Outsiders',       author: 'S.E Hinton',      language: 'English', cover: '7.jpg', },
// 	{title: 'Little Women',        author: 'Louisa May',      language: 'English', cover: '8.jpg', },
// ]
books = fmt('title|author|language|cover', ['The Kite Runner|Khaled Hosseini|English|3.jpg', 'Number the Stars|lois Lowry|English|4.jpg', 'Pride and Prejudice|Jane Austen|English|5.jpg', 'The Outsiders|S.E Hinton|English|7.jpg', 'Little Women|Louisa May|English|8.jpg']);

lis = []; // Just to show how elements in a loop can be accessed afterwards.

head(() => {
  return title({
    innerText: 'Elia Books'
  });
});

body(() => {
  h1({
    innerText: 'My Must Read Books',
    style: 'background:red'
  });
  return ul({
    style: 'background:yellow'
  }, () => {
    var book, i, len, results;
    results = [];
    for (i = 0, len = books.length; i < len; i++) {
      book = books[i];
      results.push(lis.push(li({
        style: 'background:gray'
      }, () => {
        h2({
          innerText: book.title,
          style: 'background:green; color:yellow'
        });
        h3({
          innerText: 'Author: ' + book.author,
          style: 'background:orange'
        });
        h3({
          innerText: 'Language: ' + book.language
        });
        return img({
          src: book.cover,
          height: 42
        });
      })));
    }
    return results;
  });
});

document.body.children[4].children[0].children[0].style.background = 'red';

lis[2].style.background = 'white';

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2019\061-Foo-Elia\coffee\sketch.coffee