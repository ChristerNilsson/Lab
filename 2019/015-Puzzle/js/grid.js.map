{
  "version": 3,
  "file": "grid.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\grid.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "originalPosition = (num) ->\t[(num-1) // 4, (num-1) % 4]\n\nmanhattanDist = (num, curRow, curCol) ->\n\t[origRow, origCol] = originalPosition(num)\n\tMath.abs(origRow - curRow) + Math.abs(origCol - curCol)\n\nclass Grid\n\tconstructor: (grid=INIT_GRID, emptyPos=[3,3]) ->\n\t\t@emptyPos = emptyPos.slice()\n\n\t\t@grid = []\n\t\tfor row in grid\n\t\t\t@grid.push row.slice()\n\n\tcopy : ->\n\t\tnew Grid @grid,@emptyPos\n\n\tvalidMoves: ->\n\t\t[rowNum, colNum] = @emptyPos\n\t\tvalid = []\n\t\tvalid.push XLEFT  if colNum != 0\n\t\tvalid.push XRIGHT if colNum != 3\n\t\tvalid.push XABOVE if rowNum != 0\n\t\tvalid.push XBELOW if rowNum != 3\n\t\tvalid\n\n\tpositionToMove: (rowNum, colNum) ->\n\t\t[emptyRow, emptyCol] = @emptyPos\n\t\tif rowNum == emptyRow\n\t\t\tif colNum == emptyCol - 1 then return XLEFT\n\t\t\tif colNum == emptyCol + 1 then return XRIGHT\n\t\tif colNum == emptyCol\n\t\t\tif rowNum == emptyRow - 1 then return XABOVE\n\t\t\tif rowNum == emptyRow + 1 then return XBELOW\n\t\tnull\n\n\tapplyMoveFrom: (sourceDirection) ->\n\t\t[targetRow, targetCol] = @emptyPos\n\t\t[deltaRow, deltaCol] = directionToDelta sourceDirection\n\t\temptyPos = [sourceRow, sourceCol] = [\n\t\t\ttargetRow + deltaRow,\n\t\t\ttargetCol + deltaCol\n\t\t]\n\n\t\tgrid = []\n\t\tfor row in @grid\n\t\t\tgrid.push row.slice()\n\n\t\tgrid[targetRow][targetCol] = grid[sourceRow][sourceCol]\n\t\tgrid[sourceRow][sourceCol] = 0\n\n\t\tnextGrid = new Grid grid, emptyPos\n\n\t\tnumber = grid[targetRow][targetCol]\n\t\tnextGrid._lowerSolutionBound = @lowerSolutionBound() -\n\t\t\tmanhattanDist(number, sourceRow, sourceCol) +\n\t\t\tmanhattanDist(number, targetRow, targetCol)\n\n\t\tnextGrid\n\n\tapplyMoves: (sourceDirections) ->\n\t\tnextGrid = @\n\t\tfor dir in sourceDirections\n\t\t\tnextGrid = nextGrid.applyMoveFrom dir\n\t\tnextGrid\n\n\tlowerSolutionBound: ->\n\t\t# This calculates a lower bound on the minimum\n\t\t# number of steps required to solve the puzzle\n\n\t\t# This is the sum of the rectilinear distances\n\t\t# from where each number is to where it should\n\t\t# be\n\t\tif not @_lowerSolutionBound?\n\t\t\tmoveCount = 0\n\t\t\tfor rowNum of @grid\n\t\t\t\tfor colNum of @grid[rowNum]\n\t\t\t\t\tnumber = @grid[rowNum][colNum]\n\t\t\t\t\tcontinue if number == 0\n\t\t\t\t\tmoveCount += manhattanDist number, rowNum, colNum\n\t\t\t@_lowerSolutionBound = moveCount\n\t\treturn @_lowerSolutionBound\n\n\tisSolved: -> @lowerSolutionBound() == 0\n\n\tlog: ->\n\t\tconsole.log \"Empty: #{@emptyPos}\"\n\t\tfor row in @grid\n\t\t\tconsole.log row\n"
  ]
}