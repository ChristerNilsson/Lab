"use strict";

// Generated by CoffeeScript 2.3.2
var Board,
    board,
    draw,
    keyPressed,
    move,
    setup,
    modulo = function (a, b) {
  return (+a % (b = +b) + b) % b;
};

move = function (lst) {
  var i, j, len, ref, res, value;
  res = lst;
  i = res.length - 1;
  while (i >= 0) {
    if (res[i] === 0) {
      res.splice(i, 1);
    } else {
      i--;
    }
  }
  i = res.length - 1;
  while (i > 0) {
    if (res[i] === res[i - 1]) {
      value = res[i] + 1;
      res.splice(i, 1);
      res[i - 1] = value;
    }
    i--;
  }
  ref = range(4 - res.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res.unshift(0);
  }
  return res;
};

assert([0, 0, 0, 2], move([1, 0, 0, 1]));

assert([0, 0, 2, 1], move([0, 2, 0, 1]));

assert([1, 2, 3, 4], move([1, 2, 3, 4]));

assert([0, 1, 3, 1], move([1, 2, 2, 1]));

assert([0, 0, 2, 2], move([1, 1, 1, 1]));

Board = class Board {
  constructor() {
    var i, index, j, len, ref;
    this.grid = function () {
      var j, len, ref, results;
      ref = range(16);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(0);
      }
      return results;
    }();
    ref = _.sample(range(16), 2);
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      this.grid[index] = 1;
    }
  }

  mv(indices) {
    var i, index, j, len, lst, results;
    lst = function () {
      var j, len, results;
      results = [];
      for (j = 0, len = indices.length; j < len; j++) {
        index = indices[j];
        results.push(this.grid[index]);
      }
      return results;
    }.call(this);
    lst = move(lst);
    results = [];
    for (i = j = 0, len = indices.length; j < len; i = ++j) {
      index = indices[i];
      results.push(this.grid[index] = lst[i]);
    }
    return results;
  }

  addTile(lst) {
    var cands, index;
    cands = function () {
      var j, len, results;
      results = [];
      for (j = 0, len = lst.length; j < len; j++) {
        index = lst[j];
        if (this.grid[index] === 0) {
          results.push(index);
        }
      }
      return results;
    }.call(this);
    if (cands.length === 0) {
      return false;
    }
    index = _.sample(cands);
    this.grid[index] = 1;
    return true;
  }

  make(lst, d) {
    var i, item, j, k, len, ref, results;
    ref = range(4);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(function () {
        var l, len1, results1;
        results1 = [];
        for (k = l = 0, len1 = lst.length; l < len1; k = ++l) {
          item = lst[k];
          results1.push(item + d * i);
        }
        return results1;
      }());
    }
    return results;
  }

  move(m) {
    var j, len, lst, t, ts;
    if (m !== 0 && m !== 1 && m !== 2 && m !== 3) {
      return;
    }
    ts = [];
    ts.push(this.make([12, 8, 4, 0], 1));
    ts.push(this.make([0, 1, 2, 3], 4));
    ts.push(this.make([0, 4, 8, 12], 1));
    ts.push(this.make([3, 2, 1, 0], 4));
    lst = ts[m];
    for (j = 0, len = lst.length; j < len; j++) {
      t = lst[j];
      this.mv(t);
    }
    return this.addTile(function () {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        t = lst[l];
        results.push(t[0]);
      }
      return results;
    }());
  }

  draw() {
    var cell, i, j, len, ref, results, x, y;
    textSize(64);
    textAlign(CENTER, CENTER);
    rectMode(CENTER);
    ref = this.grid;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      cell = ref[i];
      x = 100 + 200 * modulo(i, 4);
      y = 100 + 200 * Math.floor(i / 4);
      fc(1, 1, cell * 0.1);
      rect(x, y, 180, 180, 4);
      fc(cell < 5 ? 0 : 0);
      if (cell !== 0) {
        results.push(text(2 ** cell, x, y + 3));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

board = null;

setup = function () {
  createCanvas(801, 801);
  return board = new Board();
};

draw = function () {
  bg(0.5);
  return board.draw();
};

keyPressed = function () {
  return board.move([UP_ARROW, RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW].indexOf(keyCode));
};
//# sourceMappingURL=sketch.js.map
