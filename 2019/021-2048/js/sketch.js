'use strict';

// Generated by CoffeeScript 2.3.2
var Board,
    COLORS,
    SIZES,
    board,
    draw,
    keyPressed,
    make,
    move,
    setup,
    ts,
    modulo = function (a, b) {
  return (+a % (b = +b) + b) % b;
};

SIZES = [0, 128, 96, 80, 64];

COLORS = '0 F00 0F0 FF0 0FF F0F FFF 08F 0F8 800 808 80F 00F 080'.split(' ');

ts = null;

board = null;

move = function (lst) {
  var i, item, j, l, len, len1, ref, ref1;
  lst = function () {
    var j, len, results;
    results = [];
    for (j = 0, len = lst.length; j < len; j++) {
      item = lst[j];
      if (item > 0) {
        results.push(item);
      }
    }
    return results;
  }();
  ref = range(lst.length - 1);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (lst[i] === lst[i + 1]) {
      [lst[i], lst[i + 1]] = [lst[i] + 1, 0];
    }
  }
  lst = function () {
    var l, len1, results;
    results = [];
    for (l = 0, len1 = lst.length; l < len1; l++) {
      item = lst[l];
      if (item > 0) {
        results.push(item);
      }
    }
    return results;
  }();
  ref1 = range(4 - lst.length);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    lst.unshift(0);
  }
  return lst;
};

// assert [0,0,0,2], move [1,0,0,1]
// assert [0,0,2,1], move [0,2,0,1]
// assert [1,2,3,4], move [1,2,3,4]
// assert [0,1,3,1], move [1,2,2,1]
// assert [0,0,2,2], move [1,1,1,1]
// assert [0,0,2,2], move [0,2,1,1]
// assert [0,0,0,2], move [1,1,0,0]
// assert [0,0,0,2], move [0,1,1,0]
Board = class Board {
  constructor() {
    var i;
    this.grid = function () {
      var j, len, ref, results;
      ref = range(16);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(0);
      }
      return results;
    }();
    this.addTile(2);
  }

  mv(indices) {
    var i, index, j, len, lst, results;
    lst = move(function () {
      var j, len, results;
      results = [];
      for (j = 0, len = indices.length; j < len; j++) {
        index = indices[j];
        results.push(this.grid[index]);
      }
      return results;
    }.call(this));
    results = [];
    for (i = j = 0, len = indices.length; j < len; i = ++j) {
      index = indices[i];
      results.push(this.grid[index] = lst[i]);
    }
    return results;
  }

  addTile(n = 1) {
    var cands, index, j, len, ref, results, tile;
    cands = function () {
      var j, len, ref, results;
      ref = this.grid;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        tile = ref[index];
        if (tile === 0) {
          results.push(index);
        }
      }
      return results;
    }.call(this);
    ref = _.sample(cands, n);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      results.push(this.grid[index] = 1);
    }
    return results;
  }

  move(m) {
    var j, len, original, ref, t;
    original = this.grid.slice();
    if (m !== 0 && m !== 1 && m !== 2 && m !== 3) {
      return;
    }
    ref = ts[m];
    for (j = 0, len = ref.length; j < len; j++) {
      t = ref[j];
      this.mv(t);
    }
    if (!_.isEqual(this.grid, original)) {
      return this.addTile();
    }
  }

  draw() {
    var cell, i, j, len, ref, results, value, x, y;
    ref = this.grid;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      cell = ref[i];
      x = 100 + 200 * modulo(i, 4);
      y = 100 + 200 * Math.floor(i / 4);
      fill(`#${COLORS[cell]}8`);
      rect(x, y, 180, 180, 4);
      value = 2 ** cell;
      textSize(SIZES[value.toString().length]);
      fill(0);
      if (cell > 0) {
        results.push(text(value, x, y + 3));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

make = function (lst, d) {
  var i, item, j, k, len, ref, results;
  ref = range(4);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(function () {
      var l, len1, results1;
      results1 = [];
      for (k = l = 0, len1 = lst.length; l < len1; k = ++l) {
        item = lst[k];
        results1.push(item + d * i);
      }
      return results1;
    }());
  }
  return results;
};

setup = function () {
  createCanvas(801, 801);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  board = new Board();
  ts = [];
  ts.push(make([12, 8, 4, 0], 1));
  ts.push(make([0, 1, 2, 3], 4));
  ts.push(make([0, 4, 8, 12], 1));
  return ts.push(make([3, 2, 1, 0], 4));
};

draw = function () {
  bg(0.5);
  return board.draw();
};

keyPressed = function () {
  return board.move([UP_ARROW, RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW].indexOf(keyCode));
};
//# sourceMappingURL=sketch.js.map
