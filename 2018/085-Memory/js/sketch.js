'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button,
    SIZE,
    buttons,
    clicked,
    clicks,
    draw,
    mousePressed,
    setup,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

SIZE = 100;

Button = function () {
  function Button(title1, x1, y1, event) {
    _classCallCheck(this, Button);

    this.title = title1;
    this.x = x1;
    this.y = y1;
    this.event = event;
    this.visible = false;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      var x, y;
      x = SIZE + this.x * SIZE;
      y = SIZE + this.y * SIZE;
      rect(x, y, SIZE, SIZE);
      if (this.visible) {
        return text(this.title, x, y);
      }
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      var ref, ref1;
      return this.x - 1 / 2 < (ref = mx / SIZE - 1) && ref < this.x + 1 / 2 && this.y - 1 / 2 < (ref1 = my / SIZE - 1) && ref1 < this.y + 1 / 2;
    }
  }, {
    key: 'execute',
    value: function execute() {
      return this.event();
    }
  }]);

  return Button;
}();

clicks = 0;

buttons = [];

clicked = [];

setup = function setup() {
  var arr, i, j, len, results, title;
  createCanvas(600, 500);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(50);
  arr = _.shuffle('ABCDEFGHIJABCDEFGHIJ'.split(''));
  results = [];
  for (i = j = 0, len = arr.length; j < len; i = ++j) {
    title = arr[i];
    results.push(buttons.push(new Button(title, modulo(i, 5), Math.floor(i / 5), function () {
      var click, k, l, len1, len2;
      if (this.found) {
        return;
      }
      if (clicked.length === 0 || clicked.length === 1 && clicked[0] !== this) {
        clicks++;
        clicked.push(this);
        return this.visible = true;
      } else {
        if (clicked[0].title === clicked[1].title) {
          for (k = 0, len1 = clicked.length; k < len1; k++) {
            click = clicked[k];
            click.visible = true;
            click.found = true;
          }
        } else {
          for (l = 0, len2 = clicked.length; l < len2; l++) {
            click = clicked[l];
            click.visible = false;
          }
        }
        return clicked = [];
      }
    })));
  }
  return results;
};

draw = function draw() {
  var button, j, len;
  bg(0.5);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  return text(clicks, width / 2, SIZE / 4);
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.execute());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
