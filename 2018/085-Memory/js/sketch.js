'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button,
    SIZE,
    buttons,
    clicked,
    clicks,
    draw,
    mousePressed,
    setup,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

SIZE = 100;

Button = function () {
  function Button(title1, i, j, event) {
    _classCallCheck(this, Button);

    this.title = title1;
    this.event = event;
    this.visible = false;
    this.x = (i + 1) * SIZE;
    this.y = (j + 1) * SIZE;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      rect(this.x, this.y, SIZE, SIZE);
      if (this.visible) {
        return text(this.title, this.x, this.y);
      }
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.x - SIZE / 2 < mx && mx < this.x + SIZE / 2 && this.y - SIZE / 2 < my && my < this.y + SIZE / 2;
    }
  }, {
    key: 'execute',
    value: function execute() {
      return this.event();
    }
  }]);

  return Button;
}();

clicks = 0;

buttons = [];

clicked = [];

setup = function setup() {
  var arr, i, k, len, results, title;
  createCanvas(600, 500);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(50);
  arr = _.shuffle('ABCDEFGHIJABCDEFGHIJ'.split(''));
  results = [];
  for (i = k = 0, len = arr.length; k < len; i = ++k) {
    title = arr[i];
    results.push(buttons.push(new Button(title, modulo(i, 5), Math.floor(i / 5), function () {
      var click, l, len1, len2, m;
      if (this.visible) {
        return;
      } else {
        this.visible = true;
      }
      if (clicked.length === 0) {
        clicked === [];
      } else if (clicked.length === 1 && clicked[0] !== this) {} else {
        if (clicked[0].title === clicked[1].title) {
          for (l = 0, len1 = clicked.length; l < len1; l++) {
            click = clicked[l];
            click.found = true;
          }
        } else {
          for (m = 0, len2 = clicked.length; m < len2; m++) {
            click = clicked[m];
            click.visible = false;
          }
        }
        clicked = [];
      }
      clicks++;
      return clicked.push(this);
    })));
  }
  return results;
};

draw = function draw() {
  var button, k, len;
  bg(0.5);
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  return text(clicks, width / 2, SIZE / 4);
};

mousePressed = function mousePressed() {
  var button, k, len, results;
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.execute());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
