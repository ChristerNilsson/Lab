"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var ALFABET,
    Button,
    CARDS,
    SIZE,
    buttons,
    clicked,
    clicks,
    draw,
    found,
    mousePressed,
    _newGame,
    setup,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

ALFABET = "ABCDEFGHIJKLMOPQRSTUVWXYZ@0123456789";

CARDS = 3; // 3,6,9,12,15,18,21,24,27,30,33,36 

SIZE = 80;

Button = function () {
  function Button(title1, i, j, event) {
    _classCallCheck(this, Button);

    this.title = title1;
    this.event = event;
    this.visible = false;
    this.x = (i + 1) * SIZE;
    this.y = (j + 1) * SIZE;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      rect(this.x, this.y, SIZE, SIZE);
      if (this.visible) {
        return text(this.title, this.x, this.y);
      }
    }
  }, {
    key: "inside",
    value: function inside(mx, my) {
      return this.x - SIZE / 2 < mx && mx < this.x + SIZE / 2 && this.y - SIZE / 2 < my && my < this.y + SIZE / 2;
    }
  }, {
    key: "execute",
    value: function execute() {
      return this.event();
    }
  }]);

  return Button;
}();

clicks = 0;

found = 0;

buttons = [];

clicked = [];

_newGame = function newGame() {
  var arr, i, k, len, results, s, title;
  clicks = Math.floor(CARDS / 3) * 10;
  found = 0;
  buttons = [];
  clicked = [];
  s = ALFABET.substr(0, CARDS);
  arr = _.shuffle((s + s).split(''));
  results = [];
  for (i = k = 0, len = arr.length; k < len; i = ++k) {
    title = arr[i];
    results.push(buttons.push(new Button(title, modulo(i, 6), Math.floor(i / 6), function () {
      var click, l, len1;
      if (this.visible) {
        return;
      } else {
        this.visible = true;
      }
      if (clicked.length === 0) {
        clicked === [];
      } else if (clicked.length === 1 && clicked[0] !== this) {
        if (found === CARDS - 1) {
          CARDS += clicks >= 0 ? 3 : -3;
          CARDS = constrain(CARDS, 3, 36);
          return _newGame();
        }
      } else {
        if (clicked[0].title === clicked[1].title) {
          found++;
        } else {
          for (l = 0, len1 = clicked.length; l < len1; l++) {
            click = clicked[l];
            click.visible = false;
          }
        }
        clicked = [];
      }
      clicks--;
      return clicked.push(this);
    })));
  }
  return results;
};

setup = function setup() {
  createCanvas((6 + 1) * SIZE, SIZE + 12 * SIZE);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(SIZE / 2);
  return _newGame();
};

draw = function draw() {
  var button, k, len;
  bg(0.5);
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    button.draw();
  }
  return text(clicks, width / 2, SIZE / 4);
};

mousePressed = function mousePressed() {
  var button, k, len;
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      return button.execute();
    }
  }
};
//# sourceMappingURL=sketch.js.map
