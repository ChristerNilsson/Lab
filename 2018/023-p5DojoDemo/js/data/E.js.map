{
  "version": 3,
  "file": "E.js",
  "sourceRoot": "..\\..",
  "sources": [
    "coffee\\data\\E.coffee"
  ],
  "names": [],
  "mappings": ";;;AAAA,IAAA;;AAAA;AACC,KAAA,AAAE;AACF,KADA,AACE;AACF,KAFA,AAEE;AACF,KAHA,AAGE;AASF,KAZA,AAYE;AAgCF;AACC,SA7CD,AA6CC,AAAM;AAAN;AACD;AACC,yBA/CD,AA+CC,AAAsB;AAAtB;AA/CD",
  "sourcesContent": [
    "ID_EngineeringNotation =\n\tv:'2017-04-29'\n\tk:'fc sc bg int log10 constrain operators text class'\n\tl:28\n\tb:\"\"\"\nclass Engineering extends Application\n\treset : ->\n\t\tsuper\n\tdraw  : ->\n\tmore  : ->\n\tless  : ->\napp = new Engineering\n\"\"\"\n\ta:\"\"\"\nclass Engineering extends Application\n\treset : ->\n\t\tsuper\n\t\t@PREFIXES = \"yzafpnÂµm kMGTPEZY\"\n\t\t@numbers = \"-273.15 1.6021766208e-19 3.1415926535 9.80665 101325 299792458 1073741824 6.022140857e23\"\n\t\t@digits = 3\n\tformat : (x) ->\n\t\tif x<0 then return \"-\" + @format(-x)\n\t\texponent = 3 * int Math.log10(x)/3\n\t\tx = x / 10 ** exponent\n\t\tif x < 10 then factor = 10 ** (@digits-1)\n\t\telse if x < 100 then factor = 10 ** (@digits-2)\n\t\telse factor = 10 ** (@digits-3)\n\t\tMath.round(x * factor) / factor + @PREFIXES[8+exponent/3]\n\tdraw  : ->\n\t\tbg 0\n\t\ttextAlign RIGHT,TOP\n\t\ttextSize 20\n\t\ttextFont \"monospace\"\n\t\tfc 1,0,0\n\t\tsc()\n\t\ttextAlign RIGHT,TOP\n\t\tfor nr,i in @numbers.split \" \"\n\t\t\tx = parseFloat nr\n\t\t\tif i<8 then text @format(1/x), 100-5,i*20\n\t\t\ttext @format(x), 200-5,i*20\n\tmore  : -> @digits = constrain @digits+1, 1,6\n\tless  : -> @digits = constrain @digits-1, 1,6\n\napp = new Engineering \"a\"\n\"\"\"\n\tc:\n\t\tapp : \"reset()|more()|less()\"\n\te:\n\t\tEngineeringNotation : \"https://en.wikipedia.org/wiki/Engineering_notation\"\n\n"
  ]
}