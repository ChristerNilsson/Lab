{
  "version": 3,
  "file": "F.js",
  "sourceRoot": "..\\..",
  "sources": [
    "coffee\\data\\F.coffee"
  ],
  "names": [],
  "mappings": ";;;AAAA,IAAA,SAAA,eAAA;;AAAA;AACC,KAAA,AAAE;AACF,KADA,AACE;AACF,KAFA,AAEE;AACF,KAHA,AAGG;AAGH,KANA,AAMG;AANH;;AAqBD;AACC,KAAA,AAAE;AACF,KADA,AACE;AACF,KAFA,AAEE;AACF,KAHA,AAGE;AAWF,KAdA,AAcE;AAoDF;AACC,SAnED,AAmEC,AAAM;AAAN;AACD;AACC,kBArED,AAqEC,AAAe;AAAf;AArED;;AAuED;AACC,KAAA,AAAE;AACF,KADA,AACE;AACF,KAFA,AAEE;AACF,KAHA,AAGE;AAuBF,KA1BA,AA0BE;AA6IF;AACC,SAxKD,AAwKC,AAAM;AAAN;AACD;AACC,gBAAA,AAAa;AACb,aADA,AACU;AACV,mBA5KD,AA0KC,AAEgB;AAFhB;AA1KD",
  "sourcesContent": [
    "ID_Five =\n\tv:'2017-04-29'\n\tk:'bg circle fc sc'\n\tl:12\n\tb: \"\"\"\n# LÄXA: Hela uppgiften utom vitt.\n\"\"\"\n\ta: \"\"\"\nbg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20\n\"\"\"\n\nID_ForthHaiku =\n\tv:'2017-04-29'\n\tk:'fc range if [] _.last rect for parseFloat class'\n\tl:45\n\tb:\"\"\"\n# Lös först exemplen mha länken nedan!\n\nclass ForthHaiku extends Application\n\treset : ->\n\t\tsuper\n\tresolution : (@n,@size) ->\n\tnextExample : ->\n\tprevExample : ->\napp = new ForthHaiku\n\"\"\"\n\ta:\"\"\"\nclass ForthHaiku extends Application\n\tdraw : ->\n\t\tbg 0.5\n\t\tdigit = (bool) -> if bool then 1 else 0\n\t\tstack = []\n\t\tdict = {}\n\t\tdict['x'] = => stack.push x / @n\n\t\tdict['y'] = => stack.push y / @n\n\t\tdict['<'] = -> stack.push(digit stack.pop() > stack.pop())\n\t\tdict['>'] = -> stack.push(digit(stack.pop() < stack.pop()))\n\t\tdict['+'] = -> stack.push stack.pop() + stack.pop()\n\t\tdict['-'] = -> stack.push -stack.pop() + stack.pop()\n\t\tdict['*'] = -> stack.push stack.pop() * stack.pop()\n\t\tdict['sq'] = ->\n\t\t\ttemp = stack.pop()\n\t\t\tstack.push temp * temp\n\t\tdict['%'] = ->\n\t\t\ta = stack.pop()\n\t\t\tb = stack.pop()\n\t\t\tstack.push b % a\n\t\tdict['floor'] = -> stack.push floor stack.pop()\n\t\tdict['and'] = -> #  pga kortslutning\n\t\t\ta = stack.pop() != 0\n\t\t\tb = stack.pop() != 0\n\t\t\tstack.push digit a and b\n\t\tarr = @example.split ' '\n\t\tsc()\n\t\tfor x in range @n\n\t\t  for y in range @n\n\t\t    stack = []\n\t\t    for cmd in arr\n\t\t      if dict[cmd] then dict[cmd]()\n\t\t      else stack.push parseFloat cmd\n\t\t    stack.push 0 for i in range 3-stack.length\n\t\t    fc stack[0], stack[1], stack[2]\n\t\t    rect @size * x, @size * y, @size, @size\n\treset : ->\n\t\tsuper\n\t\t@resolution()\n\t\t@select 0\n\tresolution : (@n=10,@size=20) ->\n\tnextExample : -> @select @index+1\n\tprevExample : -> @select @index-1\n\tselect : (n) ->\n\t\texamples = '1|1 1|0 1|0.25 0.25 0.25|1 1 1|x|x y|x y >|x 0.5 >|x 0.5 - sq y 0.5 - sq + 0.25 <|x 8 * floor y 8 * floor + 2 %|x 0.5 < y 0.5 <|x 0.5 < y 0.5 < and'\n\t\texamples = examples.split '|'\n\t\t@index = constrain n,0,examples.length-1\n\t\t@example = examples[@index]\n\napp = new ForthHaiku \"a\"\n\"\"\"\n\tc:\n\t\tapp : \"reset()|resolution 10,20|resolution 20,10|resolution 50,4|resolution 100,2|resolution 200,1|nextExample()|prevExample()\"\n\te:\n\t\t\"ForthHaiku\" : \"http://forthsalon.appspot.com\"\n\nID_ForthHaiku3D =\n\tv:'2017-05-30'\n\tk:'bg sc fc range for if quad line operators class []'\n\tl:138\n\tb:\"\"\"\n# Stack-1 : < > == <= >= != + - * / // % %% and or xor & | ^ bit\n# Stack   : abs not swp rot ~ biti bitj bitk\n# Stack+1 : i j k t dup bitij bitik bitjk\n# Stack+2 : bitijk\n\n# false      <=> 0\n#  true      <=> 1\n# i b bit    <=> b >> i & 1\n# b biti     <=> b >> i & 1\n# b bitij    <=> i b bit j b bit\n# b bitijk   <=> i b bit j b bit k b bit\n# Exempel: t 10 % k ==\n\nclass ForthHaiku3D extends Application\n\treset : (n,dx,dy)->\n\t\tsuper\n\tdraw : ->\n\tenter : ->\n\ttick : ->\n\tmousePressed : ->\napp = new ForthHaiku3D\n\"\"\"\n\ta:\"\"\"\nclass ForthHaiku3D extends Application\n\treset : (n,dx,dy)->\n\t\tsuper\n\t\t@SHADE = [0.5,0.75,1]\n\t\t@N = n\n\t\t@DX = dx\n\t\t@DY = dy\n\t\t@showGrid = true\n\t\t@clear()\n\t\t@t = 0\n\tclear : -> @blocks = Array(@N*@N*@N).fill 0\n\tadd : (i,j,k) -> @blocks[@N*@N*k+@N*j+i] = 1\n\tdraw : ->\n\t\tbg 0.5\n\t\tif @showGrid then @grid()\n\t\tsc()\n\t\t@drawBlock index for index in range @N*@N*@N\n\tdrawBlock : (index) ->\n\t\tf = (i,j,k) => [100+(@N-i)*2*@DY-2*(@N-j)*@DY, 200-(@N-j)*@DY-(@N-i)*@DY - k*2*@DY]\n\t\tq = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n\t\tix=index\n\t\ti = ix % @N; ix //= @N\n\t\tj = ix % @N; ix //= @N\n\t\tk = ix\n\t\tblock = @blocks[index]\n\t\tif not block? or block==0 then return\n\t\t[r,g,b] = [i/(@N-1),j/(@N-1),k/(@N-1)] # borde vara i,j,k\n\t\tp0 = f i,  j,  k # egentligen osynlig\n\t\tp1 = f i+1,j,  k\n\t\tp2 = f i,  j+1,k\n\t\tp3 = f i+1,j+1,k\n\t\tp4 = f i  ,j,  k+1\n\t\tp5 = f i+1,j,  k+1\n\t\tp6 = f i  ,j+1,k+1\n\t\tp7 = f i+1,j+1,k+1\n\t\t[si,sj,sk] = @SHADE\n\t\tfc r*sj,g*sj,b*sj\n\t\tq p2,p6,p7,p3 # left\n\t\tfc r*si,g*si,b*si\n\t\tq p1,p3,p7,p5 # right\n\t\tfc r*sk,g*sk,b*sk\n\t\tq p4,p5,p7,p6 # roof\n\tgrid : ->\n\t\tsc 0.75\n\t\t[h2,h3,h4] = [200-2*@N*@DY, 200-@N*@DY, 200]\n\t\t[w2,w3,w4] = [100-@N*@DX,   100,        100+@N*@DX]\n\t\tfor i in range @N+1\n\t\t\tline w3+@DX*i, h4-@DY*i, w2+@DX*i, h3-@DY*i\n\t\t\tline w2+@DX*i, h3+@DY*i, w3+@DX*i, h2+@DY*i\n\tmousePressed : ->\n\t\t@showGrid = not @showGrid\n\t\t@enter()\n\ttick : ->\n\t\t@t = @t + 1\n\t\t@enter()\n\tenter : ->\n\t\tdigit = (bool) -> if bool then 1 else 0\n\t\t@clear()\n\t\ts = @readText().trim()\n\t\tif s=='' then s='k t ' + @N + ' % =='\n\t\tarr = s.split ' '\n\t\t@words = arr.length\n\t\t@trace = ''\n\t\t@count = 0\n\t\tfor i in range @N\n\t\t\tfor j in range @N\n\t\t\t\tfor k in range @N\n\t\t\t\t\tstack = []\n\t\t\t\t\tfor cmd in arr\n\t\t\t\t\t\tif cmd == 'dup' then stack.push _.last stack\n\t\t\t\t\t\telse if cmd == 'swp'\n\t\t\t\t\t\t\tn = stack.length - 1\n\t\t\t\t\t\t\t[stack[n-1],stack[n]] = [stack[n],stack[n-1]]\n\t\t\t\t\t\telse if cmd == 'rot' then stack.push stack.shift()\n\t\t\t\t\t\telse if cmd == 'i'  then stack.push i\n\t\t\t\t\t\telse if cmd == 'j'  then stack.push j\n\t\t\t\t\t\telse if cmd == 'k'  then stack.push k\n\t\t\t\t\t\telse if cmd == 't'  then stack.push @t\n\t\t\t\t\t\telse if cmd == '<'  then stack.push digit stack.pop() > stack.pop()\n\t\t\t\t\t\telse if cmd == '>'  then stack.push digit stack.pop() < stack.pop()\n\t\t\t\t\t\telse if cmd == '==' then stack.push digit stack.pop() == stack.pop()\n\t\t\t\t\t\telse if cmd == '<=' then stack.push digit stack.pop() >= stack.pop()\n\t\t\t\t\t\telse if cmd == '>=' then stack.push digit stack.pop() <= stack.pop()\n\t\t\t\t\t\telse if cmd == '!=' then stack.push digit stack.pop() != stack.pop()\n\t\t\t\t\t\telse if cmd == '+'  then stack.push stack.pop() + stack.pop()\n\t\t\t\t\t\telse if cmd == '-'  then stack.push -stack.pop() + stack.pop()\n\t\t\t\t\t\telse if cmd == '*'  then stack.push stack.pop() * stack.pop()\n\t\t\t\t\t\telse if cmd == '/'\n\t\t\t\t\t\t\ta = stack.pop()\n\t\t\t\t\t\t\tstack.push stack.pop() / a\n\t\t\t\t\t\telse if cmd == '//'\n\t\t\t\t\t\t\ta = stack.pop()\n\t\t\t\t\t\t\tstack.push stack.pop() // a\n\t\t\t\t\t\telse if cmd == '%'\n\t\t\t\t\t\t\ta = stack.pop()\n\t\t\t\t\t\t\tstack.push stack.pop() % a\n\t\t\t\t\t\telse if cmd == '%%'\n\t\t\t\t\t\t\ta = stack.pop()\n\t\t\t\t\t\t\tstack.push stack.pop() %% a\n\t\t\t\t\t\telse if cmd == 'bit' then stack.push stack.pop() >> stack.pop() & 1\n\t\t\t\t\t\telse if cmd == 'biti' then stack.push stack.pop() >> i & 1\n\t\t\t\t\t\telse if cmd == 'bitj' then stack.push stack.pop() >> j & 1\n\t\t\t\t\t\telse if cmd == 'bitk' then stack.push stack.pop() >> k & 1\n\t\t\t\t\t\telse if cmd == 'bitij'\n\t\t\t\t\t\t\tbits = stack.pop()\n\t\t\t\t\t\t\tstack = stack.concat [bits >> i & 1, bits >> j & 1]\n\t\t\t\t\t\telse if cmd == 'bitik'\n\t\t\t\t\t\t\tbits = stack.pop()\n\t\t\t\t\t\t\tstack = stack.concat [bits >> i & 1, bits >> k & 1]\n\t\t\t\t\t\telse if cmd == 'bitjk'\n\t\t\t\t\t\t\tbits = stack.pop()\n\t\t\t\t\t\t\tstack = stack.concat [bits >> j & 1, bits >> k & 1]\n\t\t\t\t\t\telse if cmd == 'bitijk'\n\t\t\t\t\t\t\tbits = stack.pop()\n\t\t\t\t\t\t\tstack = stack.concat [bits >> i & 1, bits >> j & 1, bits >> k & 1]\n\t\t\t\t\t\telse if cmd == '&' then stack.push stack.pop() & stack.pop()\n\t\t\t\t\t\telse if cmd == '|' then stack.push stack.pop() | stack.pop()\n\t\t\t\t\t\telse if cmd == '^' then stack.push stack.pop() ^ stack.pop()\n\t\t\t\t\t\telse if cmd == '~' then stack.push ~stack.pop()\n\t\t\t\t\t\telse if cmd == 'and'\n\t\t\t\t\t\t\t[a,b] = [stack.pop(),stack.pop()]\n\t\t\t\t\t\t\tstack.push digit a!=0 and b!=0\n\t\t\t\t\t\telse if cmd == 'or'\n\t\t\t\t\t\t\t[a,b] = [stack.pop(),stack.pop()]\n\t\t\t\t\t\t\tstack.push digit a!=0 or b!=0\n\t\t\t\t\t\telse if cmd == 'xor'\n\t\t\t\t\t\t\ta = digit stack.pop() != 0\n\t\t\t\t\t\t\tb = digit stack.pop() != 0\n\t\t\t\t\t\t\tstack.push digit a+b == 1\n\t\t\t\t\t\telse if cmd == 'not' then stack.push digit stack.pop() == 0\n\t\t\t\t\t\telse if cmd == 'abs' then stack.push abs stack.pop()\n\t\t\t\t\t\telse stack.push parseFloat cmd\n\t\t\t\t\t\tif i==@N-1 and j==@N-1 and k==@N-1 then @trace += cmd + ' [' + stack.join(',') + '] '\n\t\t\t\t\tif stack.pop() != 0\n\t\t\t\t\t\t@count++\n\t\t\t\t\t\t@add i,j,k\n\t\t@trace = @trace.trim()\napp = new ForthHaiku3D \"a\"\n\n\"\"\"\n\tc:\n\t\tapp : \"reset 2,50,25|reset 10,10,5|reset 17,6,3|enter()|tick()\"\n\te:\n\t\tForthHaiku : \"http://forthsalon.appspot.com/haiku-editor\"\n\t\tExempel : 'ForthHaiku3D.html'\n\t\t\"Beck & Jung\" : 'https://www.google.se/search?q=beck+jung&tbm=isch&imgil=fTDB34quIvQVtM%253A%253BujSokE1Q4La-QM%253Bhttp%25253A%25252F%25252Fonline.auktionsverket.se%25252F1111%25252F109534-beck-jung-computer-ink-plot&source=iu&pf=m&fir=fTDB34quIvQVtM%253A%252CujSokE1Q4La-QM%252C_&usg=__eBA4v2Ol5RdVComTBJqPkozH59s%3D&biw=1920&bih=1108&dpr=1&ved=0ahUKEwiH0qmqzInUAhVmDZoKHTcYD7wQyjcIQw&ei=hQsmWcf7EOaa6AS3sLzgCw#imgrc=fTDB34quIvQVtM:'\n"
  ]
}