'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Application,
    indexOf = [].indexOf;

Application = function () {
  function Application() {
    var _name1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'b';

    _classCallCheck(this, Application);

    var _name, classes, i, key, klass, len, obj, ref, ref1, value;
    this._name = _name1;
    classes = {};
    ref = this.classes();
    for (i = 0, len = ref.length; i < len; i++) {
      klass = ref[i];
      classes[klass.name] = klass;
    }
    _name = meny.exercise + "/" + this._name;
    obj = localStorage.getItem(_name);
    if (obj) {
      ref1 = JSON.parse(obj);
      for (key in ref1) {
        value = ref1[key];
        this[key] = this.deserialize(value, classes);
      }
    }
  }

  _createClass(Application, [{
    key: 'classes',
    value: function classes() {
      return [];
    }
  }, {
    key: 'deserialize',
    value: function deserialize(obj, classes) {
      var item, key, o, res, value;
      if (_.isObject(obj)) {
        if (_.isArray(obj)) {
          return function () {
            var i, len, results;
            results = [];
            // array
            for (i = 0, len = obj.length; i < len; i++) {
              item = obj[i];
              results.push(this.deserialize(item, classes));
            }
            return results;
          }.call(this);
        }
        if (indexOf.call(_.keys(obj), '_type') >= 0) {
          if (classes[obj["_type"]] === void 0) {
            print("Please define classes : -> [" + obj["_type"] + "] in your Application");
            return;
          }
          o = _.create(classes[obj["_type"]].prototype, {});
          for (key in obj) {
            value = obj[key];
            if (key !== '_type') {
              o[key] = this.deserialize(value, classes);
            }
          }
          return o; // dict
        } else {
          res = {};
          for (key in obj) {
            value = obj[key];
            res[key] = this.deserialize(value, classes);
          }
          return res;
        }
      }
      return obj; // catches Number, String, Boolean, null etc
    }
  }, {
    key: 'draw',
    value: function draw() {}
  }, {
    key: 'mark',
    value: function mark() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      var i, item, len, ref, results, value;
      //if _.isNull(obj) then return
      if (_.isArray(obj)) {
        return function () {
          var i, len, results;
          results = [];
          // array
          for (i = 0, len = obj.length; i < len; i++) {
            item = obj[i];
            results.push(this.mark(item));
          }
          return results;
        }.call(this);
      }
      if (_.isObject(obj)) {
        if (obj.constructor.name !== 'Object') {
          obj['_type'] = obj.constructor.name;
        }
        ref = _.values(obj);
        // annars kommer metoderna med.
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          value = ref[i];
          if (value != null) {
            results.push(this.mark(value));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }
  }, {
    key: 'mousePressed',
    value: function mousePressed(mx, my) {} // print "mousePressed", mx, mx

  }, {
    key: 'store',
    value: function store() {
      var _name, obj;
      _name = meny.exercise + "/" + this._name;
      this.mark();
      obj = JSON.stringify(this);
      localStorage.setItem(_name, obj);
      return fillTable(meny.exercise + "/a", meny.exercise + "/b");
    }
  }, {
    key: 'readText',
    value: function readText() {
      return $('#input').val();
    }
  }, {
    key: 'readInt',
    value: function readInt() {
      return parseInt(this.readText());
    }
  }, {
    key: 'readFloat',
    value: function readFloat() {
      return parseFloat(this.readText());
    }
  }, {
    key: 'reset',
    value: function reset() {
      var i, key, len, ref, results;
      ref = _.keys(this);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        if (key !== "_name") {
          results.push(delete this[key]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }]);

  return Application;
}();
//# sourceMappingURL=application.js.map
