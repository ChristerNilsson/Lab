"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var DIST, N, draw, i, setup, turtles;

turtles = [];

i = 0;

N = 3;

DIST = 0;

setup = function setup() {
  var dx, dy, k, len, ref, v, x, y;
  createCanvas(700, 700);
  angleMode(DEGREES);
  sw(20);
  bg(0);
  v = 360 / N;
  ref = range(N);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    x = 300 * cos(v * i);
    y = 300 * sin(v * i);
    if (i === 0) {
      dx = x;
      dy = y;
    }
    if (i === 1) {
      var _ref = [dx - x, dy - y];
      dx = _ref[0];
      dy = _ref[1];
    }
    turtles.push([x, y, v * (i + 0.5 + 0.25 * N)]);
    x = 300 * cos(v * (i + 0.5));
    y = 300 * sin(v * (i + 0.5));
    turtles.push([x, y, v * (i + 1 + 0.25 * N)]);
  }
  return DIST = sqrt(dx * dx + dy * dy);
};

draw = function draw() {
  var dir, j, k, len, results, x, y;
  i++;
  if (i < DIST) {
    translate(width / 2, height / 2);
    results = [];
    for (j = k = 0, len = turtles.length; k < len; j = ++k) {
      var _turtles$j = _slicedToArray(turtles[j], 3);

      x = _turtles$j[0];
      y = _turtles$j[1];
      dir = _turtles$j[2];

      if (j % 2 === 0) {
        sc(1, 0, 0);
      } else {
        sc(0, 1, 0);
      }
      results.push(point(x + i * cos(dir), y + i * sin(dir)));
    }
    return results;
  }
};
//# sourceMappingURL=sketch1.js.map
