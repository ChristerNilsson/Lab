"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var DIST, N, Turtle, draw, i, setup, turtles;

turtles = [];

i = 0;

N = 3; // 3,4,5,6

DIST = 0;

Turtle = function () {
  function Turtle(x1, y1) {
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var g = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var b = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
    var dir = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    _classCallCheck(this, Turtle);

    this.x = x1;
    this.y = y1;
    this.r = r;
    this.g = g;
    this.b = b;
    this.dir = dir;
  }

  _createClass(Turtle, [{
    key: "fd",
    value: function fd() {
      var _ref;

      var dx, dy;
      sc(this.r, this.g, this.b);
      dx = cos(this.dir);
      dy = sin(this.dir);
      line(this.x, this.y, this.x + dx, this.y + dy);
      return _ref = [this.x + dx, this.y + dy], this.x = _ref[0], this.y = _ref[1], _ref;
    }
  }]);

  return Turtle;
}();

setup = function setup() {
  var dx, dy, j, len, ref, v, x, y;
  createCanvas(700, 700);
  angleMode(DEGREES);
  sw(20);
  bg(0);
  v = 360 / N;
  ref = range(N);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = 300 * cos(v * i);
    y = 300 * sin(v * i);
    if (i === 0) {
      dx = x;
      dy = y;
    }
    if (i === 1) {
      var _ref2 = [dx - x, dy - y];
      dx = _ref2[0];
      dy = _ref2[1];
    }
    turtles.push(new Turtle(x, y, 1, 0, 0, v * (i + 0.5 + 0.25 * N)));
    x = 300 * cos(v * (i + 0.5));
    y = 300 * sin(v * (i + 0.5));
    turtles.push(new Turtle(x, y, 0, 1, 0, v * (i + 1 + 0.25 * N)));
  }
  return DIST = sqrt(dx * dx + dy * dy);
};

draw = function draw() {
  var j, len, results, t;
  i++;
  if (i < DIST) {
    translate(width / 2, height / 2);
    results = [];
    for (j = 0, len = turtles.length; j < len; j++) {
      t = turtles[j];
      results.push(t.fd());
    }
    return results;
  }
};
//# sourceMappingURL=sketch.js.map
