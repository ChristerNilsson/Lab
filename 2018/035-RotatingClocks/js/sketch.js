"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Clock, N, clocks, draw, mousePressed, rotation, setup, total;

clocks = [];

rotation = 0;

N = 60;

total = 0;

setup = function setup() {
  createCanvas(600, 600);
  textAlign(CENTER, CENTER);
  angleMode(DEGREES);
  textSize(50);
  clocks.push(new Clock(100, 100, 2, 0));
  clocks.push(new Clock(100, 200, 3, 1));
  clocks.push(new Clock(100, 300, 5, 3));
  clocks.push(new Clock(100, 400, 7, 5));
  return clocks.push(new Clock(100, 500, 11, 5));
};

Clock = function () {
  function Clock(x, y, ticks, value) {
    _classCallCheck(this, Clock);

    this.x = x;
    this.y = y;
    this.ticks = ticks;
    this.value = value;
    this.oldValue = 0;
    this.delta = this.value;
    this.n = N;
    this.radius = 45;
  }

  _createClass(Clock, [{
    key: "draw",
    value: function draw() {
      push();
      translate(this.x, this.y);
      if (this.n < N) {
        this.n++;
      }
      sw(1);
      circle(0, 0, this.radius);
      rotate((this.oldValue + this.n / N * this.delta) / this.ticks * 360);
      this.drawTicks();
      text(this.ticks, 0, 0);
      return pop();
    }
  }, {
    key: "add",
    value: function add(delta) {
      this.delta = delta;
      this.oldValue = this.value;
      this.value += delta;
      return this.n = 0;
    }
  }, {
    key: "mousePressed",
    value: function mousePressed() {
      var clock, i, len;
      if (dist(mouseX, mouseY, this.x, this.y) < this.radius) {
        for (i = 0, len = clocks.length; i < len; i++) {
          clock = clocks[i];
          clock.add(this.ticks);
        }
        return total += this.ticks;
      }
    }
  }, {
    key: "drawTicks",
    value: function drawTicks() {
      var i, j, len, ref;
      push();
      rotate(this.value / this.ticks * 360 - 90);
      ref = range(this.ticks);
      for (i = 0, len = ref.length; i < len; i++) {
        j = ref[i];
        sw(7);
        point(this.radius, 0);
        sw(5);
        if ((j + this.value) % this.ticks === 0) {
          line(25, 0, this.radius - 10, 0);
        }
        rotate(360 / this.ticks);
      }
      return pop();
    }
  }]);

  return Clock;
}();

draw = function draw() {
  var clock, i, len, results;
  bg(0.5);
  text(total, 300, 300);
  results = [];
  for (i = 0, len = clocks.length; i < len; i++) {
    clock = clocks[i];
    clock.draw();
    if (rotation > 0) {
      results.push(rotation--);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

mousePressed = function mousePressed() {
  var clock, i, len, results;
  results = [];
  for (i = 0, len = clocks.length; i < len; i++) {
    clock = clocks[i];
    results.push(clock.mousePressed());
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
