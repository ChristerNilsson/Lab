'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Player;

Player = function () {
  function Player(nr, x, y1, w, h, up, down) {
    _classCallCheck(this, Player);

    this.nr = nr;
    this.x = x;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.up = up;
    this.down = down;
    this.dy = 0;
    this.score = 0;
  }

  _createClass(Player, [{
    key: 'update',
    value: function update(dt) {
      var y;
      y = this.y + this.dy * dt;
      return this.y = this.dy < this.h / 2 ? max(this.h / 2, y) : min(HEIGHT - this.h / 2, y);
    }
  }, {
    key: 'handleKey',
    value: function handleKey() {
      this.dy = 0;
      if (keyIsDown(this.up)) {
        this.dy = -PADDLE_SPEED;
      }
      if (keyIsDown(this.down)) {
        return this.dy = PADDLE_SPEED;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return rect(this.x, this.y, this.w, this.h);
    }
  }, {
    key: 'checkCollision',
    value: function checkCollision(ball, dx) {
      if (ball.collides(this)) {
        ball.dx *= -1.03;
        ball.x = this.x + dx;
        return ball.dy = ball.dy < 0 ? -random(10, 150) : random(10, 150);
      }
    }
  }, {
    key: 'incr',
    value: function incr(sp) {
      game.servingPlayer = sp;
      this.score++;
      if (this.score === 10) {
        game.winningPlayer = this.nr;
        return game.gameState = 'done';
      } else {
        game.gameState = 'serve';
        return game.ball.reset();
      }
    }
  }]);

  return Player;
}();
//# sourceMappingURL=player.js.map
