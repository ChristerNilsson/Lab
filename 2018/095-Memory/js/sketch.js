'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, DONE, HIDDEN, VISIBLE, alfabet, buttons, draw, mousePressed, setup;

Button = function () {
  function Button(title, x1, y1) {
    _classCallCheck(this, Button);

    this.title = title;
    this.x = x1;
    this.y = y1;
    this.state = HIDDEN;
    this.w = 50;
    this.h = 50;
  }

  _createClass(Button, [{
    key: 'inside',
    value: function inside(x, y) {
      return this.x - this.w / 2 < x && x < this.x + this.w / 2 && this.y - this.h / 2 < y && y < this.y + this.h / 2;
    }
  }, {
    key: 'draw',
    value: function draw() {
      if (this.state !== DONE) {
        rect(this.x, this.y, this.w, this.h);
      }
      if (this.state === VISIBLE) {
        return text(this.title, this.x, this.y);
      }
    }
  }]);

  return Button;
}();

HIDDEN = 0;

VISIBLE = 1;

DONE = 2;

buttons = [];

alfabet = 'AABBCC';

setup = function setup() {
  var i, j, len, letter, ref, results;
  createCanvas(600, 600);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  textSize(42);
  ref = range(6);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    letter = alfabet[i];
    results.push(buttons.push(new Button(letter, 100 + 50 * i, 100)));
  }
  return results;
};

draw = function draw() {
  var button, j, len, results;
  bg(0.5);
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    results.push(button.draw());
  }
  return results;
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.state = VISIBLE);
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
