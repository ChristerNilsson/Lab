"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var addLine, addText, commands, gridLines, index, keyPressed, makeCommands, move, rests, setup, ticks, xdraw;

setup = function setup() {
  createCanvas(800, 600);
  textSize(20);
  textFont('monospace');
  strokeCap(SQUARE);
  makeCommands();
  return xdraw();
};

addText = function addText() {
  return commands.push(arguments);
};

addLine = function addLine() {
  return commands.push(arguments);
};

ticks = [3, 11, 13];

rests = [2, 7, 10];

commands = [];

index = 1;

gridLines = function gridLines(x, y, w, h, xCount, yCount) {
  var i, j, k, l, len, len1, ref, ref1, results;
  sc(0);
  sw(1);
  ref = range(xCount + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(x + w * i, y, x + w * i, y + yCount * h);
  }
  ref1 = range(yCount + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    j = ref1[l];
    results.push(line(x, y + h * j, x + xCount * w, y + h * j));
  }
  return results;
};

makeCommands = function makeCommands() {
  var i, j, k, l, len, len1, len2, len3, m, n, ref, ref1, ref2, ref3, x, y;
  addText(0, 0, 0, "Använd piltangenterna");
  addText("Problem:", 100, 20, "Tag reda på vilka klockor man ska klicka på");
  addText("Klockor: [3,11,13]", 120, 20);
  addText("Rester:  [2, 7,10]", 120, 50);
  addText("Steg: 8", 120, 80);
  addText("Lösning:", 15, 80 + 30);
  ref = range(3);
  //addText 0,0,0,
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    addText(ticks[i], 40, 30 + 125 + 30 * i, "Skriv upp klockorna");
  }
  ref1 = range(3);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    addText(rests[i], 80, 30 + 125 + 30 * i, "Skriv upp resterna");
  }
  addLine(90, 30 + 100 + 4, 90, 30 + 100 + 94, 3);
  addText(18, 120, 30 + 100 + 55, "Vrid klockan med näst störst värde (11). 11 + 7 = 18");
  addText(23, 120, 30 + 100 + 85, "Vrid klockan med näst störst värde (13). 13 + 10 = 23");
  addText(29, 160, 30 + 100 + 55, "Vrid klockan med näst störst värde (11). 11 + 18 = 29");
  addText(36, 160, 30 + 100 + 85, "Vrid klockan med näst störst värde");
  addText(40, 200, 30 + 100 + 55, "Vrid klockan med näst störst värde");
  addText(49, 200, 30 + 100 + 85, "Vrid klockan med näst störst värde");
  addText(51, 240, 30 + 100 + 55, "Vrid klockan med näst störst värde");
  addText(62, 240, 30 + 100 + 85, "Vrid klockan med näst störst värde");
  addText(62, 280, 30 + 100 + 55, "Vrid klockan med näst störst värde");
  addText(0, 0, 0, "De två största klockorna har nu samma värde. Summa=62");
  addText(0, 0, 0, "Kontrollera att alla klockor uppfyller summa % klocka = rest");
  addText(2, 80, 30 + 100 + 25, "62 % 3 är 2");
  addText(7, 80, 30 + 100 + 55, "62 % 11 är 7");
  addText(10, 80, 30 + 100 + 85, "62 % 13 är 10");
  addText(62, 280, 30 + 155, "Detta innebär att summan 62 är den vi söker");
  addText(0, 0, 0, "Nu skapar vi en differensmatris som vi kommer att behöva senare");
  // Differensmatrisen
  addText(3, 80, 30 + 100 + 140, "Skriv upp klockornas kolumnrubriker");
  addText(11, 120, 30 + 100 + 140, "Skriv upp klockornas kolumnrubriker");
  addText(13, 160, 30 + 100 + 140, "Skriv upp klockornas kolumnrubriker");
  addLine(4, 30 + 100 + 148, 164, 30 + 100 + 148, 3);
  addText(3, 40, 30 + 100 + 170, "Skriv upp klockornas radrubriker");
  addText(11, 40, 30 + 100 + 200, "Skriv upp klockornas radrubriker");
  addText(13, 40, 30 + 100 + 230, "Skriv upp klockornas radrubriker");
  addLine(45, 30 + 100 + 119, 45, 30 + 100 + 238, 3);
  ref2 = range(3);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    j = ref2[m];
    ref3 = range(3);
    for (n = 0, len3 = ref3.length; n < len3; n++) {
      i = ref3[n];
      x = 80 + 40 * i;
      y = 30 + 100 + 170 + 30 * j;
      addText(ticks[i] - ticks[j], x, y, "Differensen blir " + ticks[i] + " - " + ticks[j]);
    }
  }
  addText(0, 0, 0, "Nu ska de åtta stegen fördelas på de tre klockorna");
  addText(3, 60, 30 + 100 + 270, "Skriv upp klockornas kolumnrubriker");
  addText(11, 100, 30 + 100 + 270, "Skriv upp klockornas kolumnrubriker");
  addText(13, 140, 30 + 100 + 270, "Skriv upp klockornas kolumnrubriker");
  addLine(25, 30 + 100 + 280, 145, 30 + 100 + 280, 3);
  addText('Uppnå summan 62 med 8 steg', 160, 30 + 100 + 270);
  addText(3, 60, 30 + 100 + 300, "Fördela de 8 stegen på de 3 klockorna efter eget behag");
  addText(3, 100, 30 + 100 + 300, "Fördela de 8 stegen på de tre klockorna efter eget behag");
  addText(2, 140, 30 + 100 + 300, "Fördela de 8 stegen på de tre klockorna efter eget behag");
  addLine(25, 30 + 100 + 310, 145, 30 + 100 + 310, 2);
  addText('3*3 + 3*11 + 2*13 = 68', 400, 30 + 100 + 300, "Beräkna en ny summa, 68. Den måste minskas med 6 för att bli 62");
  addText(0, 0, 0, "I matrisen kan vi erhålla -6 genom att lägga ihop 2 och -8");
  addText('2', 80 + 40 * 2, 30 + 270 + 30 * 1, "Här är 2");
  addText('-8', 80 + 40 * 0, 30 + 270 + 30 * 1, "Här är -8");
  addText('-1', 100, 30 + 100 + 330, "2 uppnås genom att minska antalet steg på 11 ...");
  addText('+1', 140, 30 + 100 + 330, "... och öka antalet steg på 13");
  addText('Ger summan 68 + 2 = 70', 160, 30 + 100 + 330);
  addText('-1', 100, 30 + 100 + 360, "-8 uppnås genom att minska antalet steg på 11 ...");
  addText('+1', 60, 30 + 100 + 360, "... och öka antalet steg på 3");
  addText('Ger summan 70 - 8 = 62', 160, 30 + 100 + 360);
  addLine(25, 30 + 100 + 370, 145, 30 + 100 + 370, 3);
  addText(4, 60, 30 + 100 + 390, "Beräkna det justerade antalet 3 +1 = 4");
  addText(1, 100, 30 + 100 + 390, "Beräkna det justerade antalet 3 -1 -1 = 1");
  addText(3, 140, 30 + 100 + 390, "Beräkna det justerade antalet 2 +1 = 3");
  addText("4*3 + 1*11 + 3*13 = 62", 400, 30 + 100 + 390, "Kontroll av summa");
  addLine(25, 30 + 100 + 403, 145, 30 + 100 + 403, 1);
  return addText(0, 0, 0, "Dvs, klicka 4, 1 samt 3 gånger på klockorna");
};

//index = 70 #commands.length
xdraw = function xdraw() {
  var command, d, i, k, len, ref, txt, x, x1, x2, y, y1, y2;
  bg(0.5);
  textAlign(RIGHT);
  gridLines(10, 30 + 100 + 4, 40, 30, 10, 3);
  gridLines(4, 30 + 100 + 118, 40, 30, 4, 4);
  gridLines(25, 30 + 100 + 250, 40, 30, 3, 5);
  ref = range(index);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    if (commands[i].length === 5) {
      var _commands$i = _slicedToArray(commands[i], 5); // line


      x1 = _commands$i[0];
      y1 = _commands$i[1];
      x2 = _commands$i[2];
      y2 = _commands$i[3];
      d = _commands$i[4];

      sw(d);
      if (i === index - 1) {
        sc(1, 1, 0);
      } else {
        sc(0);
      }
      line(x1, y1, x2, y2);
    } else {
      textAlign(commands[i].length === 4 ? RIGHT : LEFT);

      var _commands$i2 = _slicedToArray(commands[i], 3);

      txt = _commands$i2[0];
      x = _commands$i2[1];
      y = _commands$i2[2];

      if (i === index - 1) {
        fc(1, 1, 0);
      } else {
        fc(0);
      }
      sc();
      text(txt, x, y);
    }
  }
  command = commands[index - 1];
  fc(0);
  sc();
  if (command.length === 4) {
    textAlign(LEFT);
    text(command[3], 10, height - 10);
  }
  textAlign(RIGHT);
  return text('#' + index, width - 10, height - 10);
};

move = function move(delta) {
  var i, lst, lstr;
  if (delta === -1) {
    lstr = [commands.length, 47, 29, 6, 1];
    i = _.findIndex(lstr, function (x) {
      return index > x;
    });
    if (i === -1) {
      return;
    }
    return index = lstr[i];
  } else {
    lst = [1, 6, 29, 47, commands.length];
    i = _.findIndex(lst, function (x) {
      return index < x;
    });
    if (i === -1) {
      return;
    }
    return index = lst[i];
  }
};

keyPressed = function keyPressed() {
  if (keyCode === LEFT_ARROW) {
    index--;
  }
  if (keyCode === RIGHT_ARROW) {
    index++;
  }
  if (keyCode === UP_ARROW || keyCode === 33) {
    move(-1);
  }
  if (keyCode === DOWN_ARROW || keyCode === 34) {
    move(1);
  }
  if (keyCode === 36) {
    index = 1;
  }
  if (keyCode === 35) {
    index = commands.length;
  }
  index = constrain(index, 1, commands.length);
  return xdraw();
};
//# sourceMappingURL=sketch.js.map
