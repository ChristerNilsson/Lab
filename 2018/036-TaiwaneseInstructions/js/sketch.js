'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var HEIGHT, WIDTH, addGrid, addLine, addText, commands, drawComment, drawGrid, drawLine, drawText, index, keyPressed, makeCommands, move, rests, setup, ticks, xdraw;

WIDTH = 10; // pixels per character

HEIGHT = 23; // pixels per character

setup = function setup() {
  createCanvas(800, 600);
  textSize(20);
  textFont('monospace');
  strokeCap(SQUARE);
  makeCommands();
  return xdraw();
};

// negativt x innebär högerjustering. Characters, not pixels
addText = function addText() {
  return commands.push(arguments);
};

addLine = function addLine() {
  return commands.push(arguments);
};

addGrid = function addGrid() {
  return commands.push(arguments);
};

ticks = [3, 11, 13];

rests = [2, 7, 10];

commands = [];

index = 1;

makeCommands = function makeCommands() {
  var i, j, k, l, len, len1, len2, len3, m, n, ref, ref1, ref2, ref3, x, y;
  addText('', 0, 0, "Använd piltangenterna");
  addText("Problem:", 0, 0, "Tag reda på vilka klockor man ska klicka på");
  addText("Klockor: [3,11,13]", 10, 0);
  addText("Rester:  [2, 7,10]", 10, 1);
  addText("Steg: 8", 10, 2);
  addText("(% innebär modulo, dvs resten vid heltalsdivision)", 20, 2);
  addText("Lösning:", 0, 3);
  addGrid(0, 4, 4, 1, 10, 3);
  ref = range(3);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    addText(ticks[i], -4, 4 + i, 'Klocka ' + ticks[i]);
  }
  ref1 = range(3);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    addText(rests[i], -8, 4 + i, 'Rest ' + rests[i]);
  }
  addLine(8, 4, 8, 7, 3);
  addText(18, -12, 5, "Vrid klockan med näst störst värde (7). 11 + 7 = 18");
  addText(23, -12, 6, "Vrid klockan med näst störst värde (10). 13 + 10 = 23");
  addText(29, -16, 5, "Vrid klockan med näst störst värde (18). 11 + 18 = 29");
  addText(36, -16, 6, "Vrid klockan med näst störst värde");
  addText(40, -20, 5, "Vrid klockan med näst störst värde");
  addText(49, -20, 6, "Vrid klockan med näst störst värde");
  addText(51, -24, 5, "Vrid klockan med näst störst värde");
  addText(62, -24, 6, "Vrid klockan med näst störst värde");
  addText(62, -28, 5, "Vrid klockan med näst störst värde");
  addText('', 0, 0, "De två största klockorna har nu samma värde. Summa=62");
  addText('', 0, 0, "Kontrollera att alla klockor uppfyller summa % klocka = rest");
  addText(2, -8, 4, "62 % 3 = 2");
  addText(7, -8, 5, "62 % 11 = 7");
  addText(10, -8, 6, "62 % 13 = 10");
  addText(62, -28, 5, "Detta innebär att summan 62 är den vi söker");
  addText('', 0, 0, "Nu skapar vi en differensmatris som vi kommer att behöva senare");
  // Differensmatrisen
  addGrid(0, 8, 4, 1, 4, 4);
  addText(3, -8, 8, "till-klocka 3");
  addText(11, -12, 8, "till-klocka 11");
  addText(13, -16, 8, "till-klocka 13");
  addLine(0, 9, 16, 9, 3);
  addText('Till', 17, 8, "Dessa klockor utgör till-klockor");
  addText(3, -4, 9, "från-klocka 3");
  addText(11, -4, 10, "från-klocka 11");
  addText(13, -4, 11, "från-klocka 13");
  addLine(4, 8, 4, 12, 3);
  addText('Från', 0, 12, "Dessa klockor utgör från-klockor");
  ref2 = range(3);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    j = ref2[m];
    ref3 = range(3);
    for (n = 0, len3 = ref3.length; n < len3; n++) {
      i = ref3[n];
      x = -8 - 4 * i;
      y = 9 + j;
      if (ticks[i] !== ticks[j]) {
        addText(ticks[i] - ticks[j], x, y, 'Differensen blir ' + ticks[i] + ' - ' + ticks[j] + ' = ' + (ticks[i] - ticks[j]));
      }
    }
  }
  addText('', 0, 0, "Nu ska de åtta stegen fördelas på de tre klockorna");
  addGrid(4, 14, 4, 1, 3, 5);
  addText(3, -8, 14, "Skriv upp klockornas kolumnrubriker");
  addText(11, -12, 14, "Skriv upp klockornas kolumnrubriker");
  addText(13, -16, 14, "Skriv upp klockornas kolumnrubriker");
  addLine(4, 15, 16, 15, 3);
  addText('Uppnå summan 62 med 8 steg', 20, 14);
  addText(3, -8, 15, "Fördela de 8 stegen på de 3 klockorna efter eget behag");
  addText(3, -12, 15, "Fördela de 8 stegen på de tre klockorna efter eget behag");
  addText(2, -16, 15, "Fördela de 8 stegen på de tre klockorna efter eget behag");
  addLine(4, 16, 16, 16, 2);
  addText('3*3 + 3*11 + 2*13 = 68  (3+3+2=8)', 20, 15, "Beräkna en ny summa, 68. Den måste minskas med 6 för att bli 62");
  addText('', 0, 0, "I matrisen kan vi erhålla -6, dvs 62-68, genom att addera 2 och -8");
  addText('2', -16, 10, "Här är 2");
  addText('-8', -8, 10, "Här är -8");
  addText('-1', -12, 16, "2 uppnås genom att minska antalet steg på klocka 11 ...");
  addText('+1', -16, 16, "... och öka antalet steg på klocka 13");
  addText('Flytta ett steg från klocka 11 till klocka 13', 20, 16, "Observera att ibland blir -2, +3 osv nödvändigt");
  addText('-1', -12, 17, "-8 uppnås genom att minska antalet steg på klocka 11 ...");
  addText('+1', -8, 17, "... och öka antalet steg på klocka 3");
  addText('Flytta ett steg från klocka 11 till klocka 3', 20, 17, "Observera att stegantalet för en klocka ej kan vara negativt");
  addLine(4, 18, 16, 18, 3);
  addText(4, -8, 18, "Beräkna det justerade antalet 3 +1 = 4");
  addText(1, -12, 18, "Beräkna det justerade antalet 3 -1 -1 = 1");
  addText(3, -16, 18, "Beräkna det justerade antalet 2 +1 = 3");
  addText("4*3 + 1*11 + 3*13 = 62", 20, 18, "Kontroll av summa");
  addText("Svar: Klicka 4, 1 samt 3 gånger på klockorna", 0, 20, "Ibland kan man behöva utföra fler flyttningar");
  return addText("", 0, 0, "Ibland kan man finna flera lösningar");
};

//index = 70 #commands.length
drawLine = function drawLine(command, i) {
  var d, x1, x2, y1, y2;

  var _command = _slicedToArray(command, 5);

  x1 = _command[0];
  y1 = _command[1];
  x2 = _command[2];
  y2 = _command[3];
  d = _command[4];

  sw(d);
  if (i === index - 1) {
    sc(1, 1, 0);
  } else {
    sc(0);
  }
  return line(WIDTH * (x1 + 0.5), HEIGHT * y1, WIDTH * (x2 + 0.5), HEIGHT * y2);
};

drawText = function drawText(command, i) {
  var txt, x, y;

  var _command2 = _slicedToArray(command, 3);

  txt = _command2[0];
  x = _command2[1];
  y = _command2[2];

  if (x < 0) {
    textAlign(RIGHT, TOP);
  } else {
    textAlign(LEFT, TOP);
  }
  if (i === index - 1) {
    fc(1, 1, 0);
  } else {
    fc(0);
  }
  sc();
  return text(txt, WIDTH * abs(x), HEIGHT * y);
};

drawGrid = function drawGrid(command, i) {
  // characters, not pixels
  var h, j, k, l, len, len1, ref, ref1, results, w, x, xCount, y, yCount;

  var _command3 = _slicedToArray(command, 6);

  x = _command3[0];
  y = _command3[1];
  w = _command3[2];
  h = _command3[3];
  xCount = _command3[4];
  yCount = _command3[5];

  sw(1);
  if (i === index - 1) {
    sc(1, 1, 0);
  } else {
    sc(0);
  }
  ref = range(xCount + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    line(WIDTH * (0.5 + x + w * j), HEIGHT * y, WIDTH * (0.5 + x + w * j), HEIGHT * (y + yCount * h));
  }
  ref1 = range(yCount + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    j = ref1[l];
    results.push(line(WIDTH * (0.5 + x), HEIGHT * (y + h * j), WIDTH * (0.5 + x + xCount * w), HEIGHT * (y + h * j)));
  }
  return results;
};

drawComment = function drawComment(command) {
  fc(0);
  sc();
  if (command.length === 4) {
    textAlign(LEFT, BOTTOM);
    text(command[3], 10, height - 10);
  }
  textAlign(RIGHT, BOTTOM);
  return text('#' + index, width - 10, height - 10);
};

xdraw = function xdraw() {
  var command, i, k, len, ref;
  bg(0.5);
  ref = range(index);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    command = commands[i];
    if (command.length === 5) {
      drawLine(command, i);
    } else if (command.length === 6) {
      drawGrid(command, i);
    } else {
      drawText(command, i);
    }
  }
  return drawComment(commands[index - 1]);
};

move = function move(delta) {
  var i, lst, lstr;
  if (delta === -1) {
    lstr = [commands.length, 47, 30, 7, 1];
    i = _.findIndex(lstr, function (x) {
      return index > x;
    });
    if (i === -1) {
      return;
    }
    return index = lstr[i];
  } else {
    lst = [1, 7, 30, 47, commands.length];
    i = _.findIndex(lst, function (x) {
      return index < x;
    });
    if (i === -1) {
      return;
    }
    return index = lst[i];
  }
};

keyPressed = function keyPressed() {
  if (keyCode === LEFT_ARROW) {
    index--;
  }
  if (keyCode === RIGHT_ARROW) {
    index++;
  }
  if (keyCode === UP_ARROW || keyCode === 33) {
    move(-1);
  }
  if (keyCode === DOWN_ARROW || keyCode === 34) {
    move(1);
  }
  if (keyCode === 36) {
    index = 1;
  }
  if (keyCode === 35) {
    index = commands.length;
  }
  index = constrain(index, 1, commands.length);
  return xdraw();
};
//# sourceMappingURL=sketch.js.map
