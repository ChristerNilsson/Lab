"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var BLACK,
    Tree,
    WHITE,
    YELLOW,
    indexOf = [].indexOf;

BLACK = "#000";

WHITE = "#FFF";

YELLOW = "#FF0";

Tree = function () {
  function Tree(tree) {
    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'tree';

    _classCallCheck(this, Tree);

    this.tree = tree;
    this.div = document.getElementById(id);
    this.traverse([]);
  }

  _createClass(Tree, [{
    key: "traverse",
    value: function traverse(branch) {
      var _this = this;

      var arr, children, fn, i, j, k, key, keys, len, len1, node, ref, results;
      this.div.innerHTML = "";
      node = this.tree;
      fn = function fn(arr) {
        return _this.button(key, i, WHITE, BLACK, function () {
          return _this.traverse(arr);
        });
      };
      for (i = j = 0, len = branch.length; j < len; i = ++j) {
        key = branch[i];
        node = node[key];
        if (indexOf.call(branch, key) >= 0) {
          arr = branch.slice(0, i);
        } else {
          arr = branch.concat(key);
        }
        fn(arr);
      }
      keys = Object.keys(node);
      ref = keys.sort();
      results = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        key = ref[k];
        children = node[key];
        if (indexOf.call(branch, key) >= 0) {
          arr = branch.slice(0, branch.length - 1);
        } else if (Object.keys(children).length > 0) {
          arr = branch.concat(key);
        } else {
          arr = branch;
        }
        results.push(function (arr) {
          return _this.button(key, branch.length, BLACK, YELLOW, function () {
            return _this.traverse(arr);
          });
        }(arr));
      }
      return results;
    }
  }, {
    key: "button",
    value: function button(value, level, bg, sc, onclick) {
      var res;
      res = document.createElement("input");
      res.type = 'button';
      res.value = value;
      res.style.width = "100%";
      res.style.backgroundColor = bg;
      res.style.color = sc;
      res.style.textAlign = 'left';
      res.style.paddingLeft = 10 * level + "px";
      res.onclick = onclick;
      return this.div.appendChild(res);
    }
  }]);

  return Tree;
}();
//# sourceMappingURL=tree.js.map
