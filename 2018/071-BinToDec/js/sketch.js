"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, buttons, draw, mousePressed, setup;

buttons = [];

Button = function () {
  function Button(x, y) {
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12.5;
    var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Button);

    this.x = x;
    this.y = y;
    this.r = r;
    this.value = value;
    this.active = 0;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      fc(this.active);
      circle(this.x, this.y, this.r);
      fc(0.5);
      text(this.value, this.x, this.y);
      return this.active * this.value;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      return this.active = 1 - this.active;
    }
  }, {
    key: "inside",
    value: function inside(mx, my) {
      return this.r > dist(mx, my, this.x, this.y);
    }
  }]);

  return Button;
}();

setup = function setup() {
  var i, j, len, ref, results;
  createCanvas(200, 200);
  textAlign(CENTER, CENTER);
  ref = range(8);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(buttons.push(new Button(188 - i * 25, 100, 12, Math.pow(2, i))));
  }
  return results;
};

draw = function draw() {
  var button, i, res;
  bg(0.5);
  res = function () {
    var j, len, results;
    results = [];
    for (i = j = 0, len = buttons.length; j < len; i = ++j) {
      button = buttons[i];
      results.push(button.draw());
    }
    return results;
  }().reduce(function (a, b) {
    return a + b;
  });
  fc(0);
  return text(res, 100, 150);
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.toggle());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
