"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, Clock, buttons, circles, game, hist, info, mousePressed, newGame, okidoki, setup, steps, total, xdraw;

steps = 1;

total = 0;

hist = [];

buttons = [];

circles = [];

game = null;

Button = function () {
  function Button(txt, x, y, size) {
    var f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, Button);

    this.txt = txt;
    this.x = x;
    this.y = y;
    this.size = size;
    this.f = f;
    this.enabled = false;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      if (this.enabled) {
        fc(1);
      } else {
        fc(0);
      }
      textSize(this.size);
      return text(this.txt, this.x, this.y);
    }
  }]);

  return Button;
}();

Clock = function () {
  function Clock(rests, ticks, x, y) {
    var f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, Clock);

    this.rests = rests;
    this.ticks = ticks;
    this.x = x;
    this.y = y;
    this.f = f;
  }

  _createClass(Clock, [{
    key: "draw",
    value: function draw() {
      var j, k, len, ref, twelve;
      push();
      translate(this.x, this.y);
      sw(2);
      twelve = total % this.ticks === this.rests;
      if (twelve) {
        fc(0, 1, 0);
      } else {
        fc(1, 0, 0);
      }
      if (twelve) {
        sc(0);
      } else {
        sc(1);
      }
      circle(0, 0, 50);
      if (twelve) {
        fc(0);
      } else {
        fc(1);
      }
      sw(1);
      textSize(40);
      text(this.ticks, 0, 0);
      rotate(radians(-90 - this.rests * 360 / this.ticks));
      ref = range(this.ticks);
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        sw(7);
        point(50, 0);
        sw(5);
        if (j === total % this.ticks) {
          line(25, 0, 40, 0);
        }
        rotate(radians(360 / this.ticks));
      }
      return pop();
    }
  }]);

  return Clock;
}();

okidoki = function okidoki() {
  var i, k, len, ref;
  if (hist.length !== game.steps) {
    return false;
  }
  ref = range(game.ticks.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    if (total % game.ticks[i] !== game.rests[i]) {
      return false;
    }
  }
  return true;
};

newGame = function newGame(delta) {
  var i, k, len, ref, state;
  steps += delta;
  if (steps < 1) {
    steps = 1;
  }
  game = createProblem(steps);
  print(game.steps);
  print("[" + game.ticks.toString() + "]");
  print("[" + game.rests.toString() + "]");
  print('');
  buttons[3].enabled = okidoki();
  state = 0;
  total = 0;
  hist = [];
  circles = [];
  ref = range(game.ticks.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    circles.push(new Clock(game.rests[i], game.ticks[i], 60, 60 + 110 * i, function () {
      hist.push(total);
      return total += this.ticks;
    }));
  }
  return xdraw();
};

setup = function setup() {
  createCanvas(windowWidth, windowHeight);
  textAlign(CENTER, CENTER);
  textSize(64);
  buttons.push(new Button('', 300, 60, 64, function () {}));
  buttons.push(new Button('', 300, 210, 64, function () {}));
  buttons.push(new Button('undo', 300, 360, 64, function () {
    if (hist.length > 0) {
      return total = hist.pop();
    }
  }));
  buttons.push(new Button('ok', 300, 510, 64, function () {
    if (this.enabled) {
      if (steps === hist.length && total === game.total) {
        return newGame(1);
      } else {
        return newGame(-1);
      }
    }
  }));
  buttons.push(new Button('Taiwanese Remainder:', 300, 650, 24, function () {}));
  buttons.push(new Button('All clocks green', 300, 680, 24, function () {}));
  buttons.push(new Button('Minimize total', 300, 710, 24, function () {}));
  buttons.push(new Button('Use all steps', 300, 740, 24, function () {}));
  return newGame(0);
};

info = function info() {
  var button, k, len, results;
  buttons[0].txt = 'steps: ' + (steps - hist.length);
  buttons[1].txt = 'total: ' + total;
  buttons[2].enabled = hist.length > 0;
  buttons[3].enabled = okidoki();
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

xdraw = function xdraw() {
  var c, k, len, results;
  bg(0.5);
  info();
  results = [];
  for (k = 0, len = circles.length; k < len; k++) {
    c = circles[k];
    results.push(c.draw());
  }
  return results;
};

mousePressed = function mousePressed() {
  var k, len, obj, ref;
  ref = buttons.concat(circles);
  for (k = 0, len = ref.length; k < len; k++) {
    obj = ref[k];
    if (70 > dist(mouseX, mouseY, obj.x, obj.y)) {
      obj.f();
    }
  }
  return xdraw();
};
//# sourceMappingURL=sketch.js.map
