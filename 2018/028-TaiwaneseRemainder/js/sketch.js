"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var BLACK,
    Button,
    Clock,
    GREEN,
    RED,
    WHITE,
    buttons,
    clocks,
    copyToClipboard,
    game,
    info,
    mousePressed,
    newGame,
    newGame1,
    okidoki,
    setup,
    xdraw,
    indexOf = [].indexOf;

buttons = [];

clocks = [];

game = {
  steps: 1
};

RED = "#F00";

GREEN = "#0F0";

BLACK = "#000";

WHITE = "#FFF";

copyToClipboard = function copyToClipboard(s) {
  var el;
  el = document.createElement('textarea');
  el.value = s;
  document.body.appendChild(el);
  el.select();
  document.execCommand('copy');
  return document.body.removeChild(el);
};

setup = function setup() {
  var params, r;
  createCanvas(600, windowHeight);
  textAlign(CENTER, CENTER);
  textSize(64);
  buttons.push(new Button('Steps:', 400, 50, 64));
  buttons.push(new Button('reset', 400, 150, 64, function () {
    var clock, k, len, results;
    if (this.enabled && 50 > dist(mouseX, mouseY, this.x, this.y)) {
      game.totalSteps = 0;
      game.totalPoints = 0;
      results = [];
      for (k = 0, len = clocks.length; k < len; k++) {
        clock = clocks[k];
        results.push(clock.count = 0);
      }
      return results;
    }
  }));
  buttons.push(new Button('ok', 400, 250, 64, function () {
    if (this.enabled && 50 > dist(mouseX, mouseY, this.x, this.y)) {
      if (game.steps === game.totalSteps && game.totalPoints === game.total) {
        newGame(1);
      }
      if (game.steps === game.totalSteps) {
        return newGame(1);
      } else {
        return newGame(-1);
      }
    }
  }));
  buttons.push(new Button('All clocks green', 400, 380, 24));
  buttons.push(new Button('Use all steps', 400, 410, 24));
  buttons.push(new Button('Share via clipboard', 400, 440, 24, function () {
    if (50 > dist(mouseX, mouseY, this.x, this.y)) {
      return copyToClipboard(game.url);
    }
  }));
  buttons[5].enabled = true;
  print(window.location.href);
  if (indexOf.call(window.location.href, '?') >= 0) {
    params = getParameters();
    if (3 === _.size(params)) {
      game = {
        steps: parseInt(params.steps),
        ticks: function () {
          var k, len, ref, results;
          ref = params.ticks.split(',');
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            r = ref[k];
            results.push(parseInt(r));
          }
          return results;
        }(),
        rests: function () {
          var k, len, ref, results;
          ref = params.rests.split(',');
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            r = ref[k];
            results.push(parseInt(r));
          }
          return results;
        }(),
        url: window.location.href
      };
      newGame1();
      return;
    }
  }
  return newGame(0);
};

Button = function () {
  function Button(txt, x, y, size) {
    var f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};

    _classCallCheck(this, Button);

    this.txt = txt;
    this.x = x;
    this.y = y;
    this.size = size;
    this.f = f;
    this.enabled = false;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      if (this.enabled) {
        fill(WHITE);
      } else {
        fill(BLACK);
      }
      textSize(this.size);
      return text(this.txt, this.x, this.y);
    }
  }]);

  return Button;
}();

Clock = function () {
  function Clock(rests, ticks, x, y) {
    _classCallCheck(this, Clock);

    this.rests = rests;
    this.ticks = ticks;
    this.x = x;
    this.y = y;
    this.count = 0;
  }

  _createClass(Clock, [{
    key: "draw",
    value: function draw() {
      var j, k, len, ref, twelve;
      push();
      translate(this.x, this.y);
      sw(2);
      twelve = game.totalPoints % this.ticks === this.rests;
      fill(twelve ? GREEN : RED);
      stroke(WHITE);
      circle(0, 0, 50);
      fill(twelve ? BLACK : WHITE);
      sw(1);
      textSize(40);
      text(this.ticks, 0, 0);
      // subtract
      fill(this.count > 0 ? WHITE : BLACK);
      stroke(this.count > 0 ? WHITE : BLACK);
      text(this.count, 100, 0);
      rotate(radians(-90 - this.rests * 360 / this.ticks));
      stroke(WHITE);
      ref = range(this.ticks);
      for (k = 0, len = ref.length; k < len; k++) {
        j = ref[k];
        sw(7);
        point(50, 0);
        sw(5);
        if (j === game.totalPoints % this.ticks) {
          line(25, 0, 40, 0);
        }
        rotate(radians(360 / this.ticks));
      }
      return pop();
    }
  }]);

  return Clock;
}();

okidoki = function okidoki() {
  var i, k, len, ref;
  if (game.totalSteps !== game.steps) {
    return false;
  }
  ref = range(game.ticks.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    if (game.totalPoints % game.ticks[i] !== game.rests[i]) {
      return false;
    }
  }
  return true;
};

newGame = function newGame(delta) {
  game.steps += delta;
  if (game.steps < 1) {
    game.steps = 1;
  }
  game = createProblem(game.steps);
  return newGame1();
};

newGame1 = function newGame1() {
  var clock, i, k, len, ref;
  print(game.steps);
  print("[" + game.ticks.toString() + "]");
  print("[" + game.rests.toString() + "]");
  print('');
  game.totalSteps = 0;
  game.totalPoints = 0;
  clocks = [];
  ref = range(game.ticks.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    clock = new Clock(game.rests[i], game.ticks[i], 60, 60 + 110 * i);
    clock.f = function () {
      if (50 > dist(mouseX, mouseY, this.x, this.y)) {
        game.totalPoints += this.ticks;
        game.totalSteps++;
        return this.count++;
      } else if (this.count > 0 && 50 > dist(mouseX, mouseY, this.x + 100, this.y)) {
        game.totalPoints -= this.ticks;
        game.totalSteps--;
        return this.count--;
      }
    };
    clocks.push(clock);
  }
  return xdraw();
};

info = function info() {
  var button, k, len, results;
  buttons[0].txt = 'steps: ' + (game.steps - game.totalSteps);
  buttons[1].enabled = game.totalSteps > 0;
  buttons[2].enabled = okidoki();
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

xdraw = function xdraw() {
  var c, k, len, results;
  bg(0.5);
  info();
  results = [];
  for (k = 0, len = clocks.length; k < len; k++) {
    c = clocks[k];
    results.push(c.draw());
  }
  return results;
};

mousePressed = function mousePressed() {
  var k, len, obj, ref;
  ref = buttons.concat(clocks);
  for (k = 0, len = ref.length; k < len; k++) {
    obj = ref[k];
    obj.f();
  }
  return xdraw();
};
//# sourceMappingURL=sketch.js.map
