"use strict";

// Generated by CoffeeScript 2.0.3
var createProblem,
    createRests,
    indexOf = [].indexOf;

createRests = function createRests(ticks, path) {
  var i, j, k, lastp, len, len1, p, rests, t;
  rests = function () {
    var j, len, results;
    results = [];
    for (j = 0, len = ticks.length; j < len; j++) {
      t = ticks[j];
      results.push(0);
    }
    return results;
  }();
  lastp = 0;
  path.reverse();
  for (j = 0, len = path.length; j < len; j++) {
    p = path[j];
    for (i = k = 0, len1 = ticks.length; k < len1; i = ++k) {
      t = ticks[i];
      rests[i] = (rests[i] + p - lastp) % t;
    }
    lastp = p;
  }
  path.reverse();
  return rests;
};

createProblem = function createProblem(steps) {
  var cand, cands, item, j, k, l, len, len1, len2, nextcand, nextcands, path, primes, ref, rests, result, step, ticks, total, tree;
  primes = [2, 3, 5, 7, 11, 13, 17, 19];
  ticks = _.sample(primes, 2 + Math.floor(steps / 5));
  ticks.sort(function (a, b) {
    return a - b;
  });
  //ticks = [2,3,5,7,11,13,17,19]
  tree = {};
  cands = [0];
  ref = range(steps);
  for (j = 0, len = ref.length; j < len; j++) {
    step = ref[j];
    nextcands = [];
    for (k = 0, len1 = cands.length; k < len1; k++) {
      cand = cands[k];
      for (l = 0, len2 = ticks.length; l < len2; l++) {
        item = ticks[l];
        nextcand = cand + item;
        if (indexOf.call(nextcands, nextcand) < 0) {
          if (!(nextcand in tree)) {
            tree[nextcand] = cand;
            nextcands.push(nextcand);
          }
        }
      }
    }
    cands = nextcands;
  }
  path = [];
  total = _.sample(cands);
  while (total > 0) {
    path.push(total);
    total = tree[total];
  }
  rests = createRests(ticks, path);
  result = {
    rests: rests,
    ticks: ticks,
    total: path[0],
    steps: path.length,
    path: path
  };
  return result;
};
//# sourceMappingURL=utils.js.map
