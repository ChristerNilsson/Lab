'use strict';

// Generated by CoffeeScript 2.0.3
var PRIMES, copyToClipboard, createProblem, createRests, solve;

PRIMES = [2, 3, 5, 7, 11, 13, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127 //,131,137,139,149,151,157,163,167,173]
];

createRests = function createRests(ticks, total) {
  var l, len, results, t;
  results = [];
  for (l = 0, len = ticks.length; l < len; l++) {
    t = ticks[l];
    results.push(total % t);
  }
  return results;
};

createProblem = function createProblem(steps) {
  var antalKlockor, antalPrimtal, h, pathname, rests, solution, ticks, total, url;
  antalPrimtal = int(map(steps, 1, 125, 4, PRIMES.length));
  antalPrimtal = constrain(antalPrimtal, 4, PRIMES.length);
  antalKlockor = constrain(2 + Math.floor(steps / 5), 2, 125);
  ticks = _.sample(PRIMES.slice(0, +antalPrimtal + 1 || 9e9), antalKlockor);
  ticks.sort(function (a, b) {
    return a - b;
  });
  // första metoden ger alltför jämnt fördelade problem.
  // total = (_.sample ticks for i in range steps).reduce (a,b)->a+b 
  // Vissa totalsummor är omöjliga att uppnå. Max 50%
  solution = null;
  while (solution === null) {
    total = _.random(steps * ticks[0], steps * _.last(ticks));
    solution = solve(ticks, total, steps);
  }
  rests = createRests(ticks, total);
  h = window.location.href;
  pathname = h.split('?')[0];
  url = pathname + '?steps=' + steps + '&ticks=' + ticks + '&rests=' + rests;
  print(url);
  return { steps: steps, ticks: ticks, rests: rests, url: url };
};

solve = function solve(ticks, sum, n) {
  var i, index, j, k, l, len, len1, len2, m, o, rad, ref, ref1, ref2, tabell, tj, tk;
  tabell = new Array(sum + 1);
  tabell.fill(null);
  rad = new Array(ticks.length);
  rad.fill(0);
  tabell[n * ticks[0]] = rad;
  tabell[n * ticks[0]][0] = n;
  ref = range(n, sum);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    rad = tabell[i];
    if (rad === null) {
      continue;
    }
    ref1 = range(ticks.length);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      if (rad[j] === 0) {
        continue;
      }
      tj = ticks[j];
      ref2 = range(ticks.length);
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        k = ref2[o];
        if (k <= j) {
          continue;
        }
        tk = ticks[k];
        index = i - tj + tk;
        if (index > sum) {
          continue;
        }
        if (tabell[index] === null) {
          tabell[index] = rad.slice(0);
          tabell[index][j] -= 1;
          tabell[index][k] += 1;
        }
      }
    }
  }
  return tabell[sum];
};

assert([5, 1, 0, 0, 0, 4], solve([2, 3, 5, 7, 11, 13], 65, 10));

copyToClipboard = function copyToClipboard(s) {
  var el;
  el = document.createElement('textarea');
  el.value = s;
  document.body.appendChild(el);
  el.select();
  document.execCommand('copy');
  return document.body.removeChild(el);
};
//# sourceMappingURL=utils.js.map
