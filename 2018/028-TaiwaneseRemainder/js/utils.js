"use strict";

// Generated by CoffeeScript 2.0.3
var createProblem, createRests;

createRests = function createRests(ticks, path) {
  var i, j, k, lastp, len, len1, p, rests, t;
  rests = function () {
    var j, len, results;
    results = [];
    for (j = 0, len = ticks.length; j < len; j++) {
      t = ticks[j];
      results.push(0);
    }
    return results;
  }();
  lastp = 0;
  path.reverse();
  for (j = 0, len = path.length; j < len; j++) {
    p = path[j];
    for (i = k = 0, len1 = ticks.length; k < len1; i = ++k) {
      t = ticks[i];
      rests[i] = (rests[i] + p - lastp) % t;
    }
    lastp = p;
  }
  path.reverse();
  return rests;
};

createProblem = function createProblem(steps) {
  var i, j, len, path, primes, ref, rests, result, ticks, total;
  primes = [2, 3, 5, 7, 11, 13, 17, 19];
  ticks = _.sample(primes, 2 + Math.floor(steps / 5));
  ticks.sort(function (a, b) {
    return a - b;
  });
  //ticks = [2,3,5,7,11,13,17,19]

  // tree = {}
  // cands = [0]
  // for step in range steps 
  // 	nextcands = []
  // 	for cand in cands
  // 		for item in ticks
  // 			nextcand = cand+item
  // 			if nextcand not in nextcands
  // 				if nextcand not of tree 
  // 					tree[nextcand] = cand 
  // 					nextcands.push nextcand
  // 	cands = nextcands 
  // path = []
  // total = _.sample cands
  // while total > 0
  // 	path.push total
  // 	total = tree[total]
  path = [];
  total = 0;
  ref = range(steps);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    total += _.sample(ticks);
    path.unshift(total);
  }
  rests = createRests(ticks, path);
  result = {
    rests: rests,
    ticks: ticks,
    total: path[0],
    steps: path.length,
    path: path
  };
  return result;
};
//# sourceMappingURL=utils.js.map
