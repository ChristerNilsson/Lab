"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var draw, points, setup, x, y;

points = [];

x = 0;
y = 0;


setup = function setup() {
  var i, j, len, ref, results;
  createCanvas(windowWidth, windowHeight);
  ref = range(3);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(points.push([random(width), random(height)]));
  }
  return results;
};

draw = function draw() {
  var i, j, len, px, py, ref, results;
  ref = range(100);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    var _ref;

    i = ref[j];
    point(x, y);

    var _$sample = _.sample(points);

    var _$sample2 = _slicedToArray(_$sample, 2);

    px = _$sample2[0];
    py = _$sample2[1];

    results.push((_ref = [lerp(x, px, 0.5), lerp(y, py, 0.5)], x = _ref[0], y = _ref[1], _ref));
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
