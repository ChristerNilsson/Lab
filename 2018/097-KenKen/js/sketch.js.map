{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "N = null\r\nALFABET = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\t\r\n\r\n# setup = ->\r\n# \tcreateCanvas 200,200\r\n# draw = ->\r\n# \tbg 0.5\r\n\r\narrayExcept = (arr, idx) ->\r\n\tres = arr[0..]\r\n\tres.splice idx, 1\r\n\tres \r\npermute = (arr) ->\r\n\tarr = Array::slice.call arr, 0\r\n\treturn [[]] if arr.length == 0\r\n\tpermutations = (for value,idx in arr\r\n\t\t[value].concat perm for perm in permute arrayExcept arr, idx)\r\n\t[].concat permutations...\t\r\nassert [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], permute [1,2,3]\r\n\r\nf = (kenken) ->\r\n\tres = {}\r\n\tfor letter in kenken\r\n\t\tres[letter] = []\t\r\n\tfor key,i in kenken\r\n\t\tres[key].push i\r\n\tres\r\n\r\n#        0123456789012345  \r\n# rf =  f(\"abbcddecffgghhii\")\r\n# assert rf,\r\n# \ta:[0]\r\n# \tb:[1,2]\r\n# \tc:[3,7]\r\n# \td:[4,5]\r\n# \te:[6]\r\n# \tf:[8,9]\r\n# \tg:[10,11]\r\n# \th:[12,13]\r\n# \ti:[14,15]\r\n\r\nuniq = (lst) ->\r\n\tres = [lst[0]]\r\n\tfor item,i in lst\r\n\t\tif i>0\r\n\t\t\tif not _.isEqual item, _.last res\r\n\t\t\t\tres.push item\r\n\tres \r\n\r\nmatch2 = (total,operation) ->\r\n\tres = []\r\n\tfor a in range 1,N+1\r\n\t\tfor b in range 1,N+1\r\n\t\t\tif total == operation a,b\r\n\t\t\t\tlst = [a,b].sort()\r\n\t\t\t\tres.push lst\r\n\tuniq res.sort()\r\n\r\nmatch3 = (total,operation) ->\r\n\tres = []\r\n\tfor a in range 1,N+1\r\n\t\tfor b in range 1,N+1\r\n\t\t\tfor c in range 1,N+1\r\n\t\t\t\tif total == operation a,b,c\r\n\t\t\t\t\tlst = [a,b,c].sort()\r\n\t\t\t\t\tres.push lst\r\n\tuniq res.sort()\r\n\r\nmatch4 = (total,operation) ->\r\n\tres = []\r\n\tfor a in range 1,N+1\r\n\t\tfor b in range 1,N+1\r\n\t\t\tfor c in range 1,N+1\r\n\t\t\t\tfor d in range 1,N+1\r\n\t\t\t\t\tif total == operation a,b,c,d\r\n\t\t\t\t\t\tlst = [a,b,c,d].sort()\r\n\t\t\t\t\t\tres.push lst\r\n\tuniq res.sort()\r\n\r\ng = (rf,ops) -> # gets possible operands\r\n\tres = {}\r\n\tfor key of rf\r\n\t\ttotal = parseInt ops[key]\r\n\t\tswitch rf[key].length\r\n\t\t\twhen 1\r\n\t\t\t\tres[key] = [[total]]\r\n\t\t\twhen 2\r\n\t\t\t\tswitch _.last ops[key]\r\n\t\t\t\t\twhen '/' then\tres[key] = match2 total,(a,b) -> a // b\r\n\t\t\t\t\twhen '+' then\tres[key] = match2 total,(a,b) -> a + b\r\n\t\t\t\t\twhen '*' then res[key] = match2 total,(a,b) -> a * b\r\n\t\t\t\t\twhen '-' then res[key] = match2 total,(a,b) -> a - b\r\n\t\t\twhen 3\r\n\t\t\t\tswitch _.last ops[key]\r\n\t\t\t\t\twhen '+' then\tres[key] = match3 total,(a,b,c) -> a + b + c\r\n\t\t\t\t\twhen '*' then res[key] = match3 total,(a,b,c) -> a * b * c\r\n\t\t\twhen 4\r\n\t\t\t\tswitch _.last ops[key]\r\n\t\t\t\t\twhen '+' then\tres[key] = match4 total,(a,b,c,d) -> a + b + c + d\r\n\t\t\t\t\twhen '*' then res[key] = match4 total,(a,b,c,d) -> a * b * c * d\r\n\t\t\telse\r\n\t\t\t\tprint 'Problem!'\r\n\tres\r\n\r\n# rg = g rf,\r\n# \ta: '4'\r\n# \tb: '2/'\r\n# \tc: '12*'\r\n# \td: '1-'\r\n# \te: '3'\r\n# \tf: '7+'\r\n# \tg: '2/'\r\n# \th: '1-'\r\n# \ti: '3-'\r\n\r\n# assert rg,\r\n# \ta: [[4]]\r\n# \tb: [[1,2],[2,4]]\r\n# \tc: [[3,4]]\r\n# \td: [[1,2],[2,3],[3,4]]\r\n# \te: [[3]]\r\n# \tf: [[3,4]]\r\n# \tg: [[1,2],[2,4]]\r\n# \th: [[1,2],[2,3],[3,4]]\r\n# \ti: [[1,4]]\r\n\r\nmakePerms = (rg) -> # adds permutations\r\n\tres = {}\r\n\tfor key of rg\r\n\t\tlst = rg[key]\r\n\t\ta = []\r\n\t\ta = a.concat permute pair for pair in lst\r\n\t\tres[key] = uniq a.sort()\r\n\tres\r\n\r\n# rp = makePerms rg\r\n# assert rp,\r\n# \ta: [[4]]\r\n# \tb: [[1,2],[2,1],[2,4],[4,2]]\r\n# \tc: [[3,4],[4,3]]\r\n# \td: [[1,2],[2,1],[2,3],[3,2],[3,4],[4,3]]\r\n# \te: [[3]]\r\n# \tf: [[3,4],[4,3]]\r\n# \tg: [[1,2],[2,1],[2,4],[4,2]]\r\n# \th: [[1,2],[2,1],[2,3],[3,2],[3,4],[4,3]]\r\n# \ti: [[1,4],[4,1]]\r\n\r\nok = (lst) ->\r\n\tlst = _.without lst, 0\r\n\tlst.length == _.uniq(lst).length\r\nassert [1,2,3,4], _.uniq [1,2,3,4] \r\nassert true, ok [1,2,3,4]\r\nassert false,ok [1,2,2,4]\r\nassert true, ok [0,0,0,0]\r\nassert true, ok [4,0,0,1]\r\nassert false,ok [4,0,0,4]\r\n\r\nvalid = (indexes,pointer,rf,rp) -> # 1..4 must be unique in each row and col. 0 is ok\r\n\tprint indexes,pointer\r\n\tif pointer == ' ' then return true\r\n\tgrid = (0 for i in range N*N)\r\n\tfor p in ALFABET.slice 1,1+ALFABET.indexOf pointer\r\n\t\tfor x,j in rf[p]\r\n\t\t\tprint p,x,j,indexes[p]\r\n\t\t\ty = rp[p][indexes[p]][j]\r\n\t\t\tgrid[x] = y\r\n\tfor row in range N\r\n\t\tif not ok (grid[i] for i in range row*N,row*N+N) then return false \r\n\tfor col in range N\r\n\t\tif not ok (grid[i] for i in range col,N*N,N) then return false \r\n\ttrue\t\t \r\n#assert true, valid {a:-1,b:-1,c:-1,d:-1,e:-1,f:-1,g:-1,h:-1,i:-1}, ' ', rf, rp\t\r\n#assert true, valid {a:0, b:0,c:0,d:0,e:0,f:0,g:0,h:2,i:1}, 'i', rf, rp\t\r\n\t\r\nincr = (pointer) -> ALFABET[ALFABET.indexOf(pointer)+1]\r\ndecr = (pointer) -> ALFABET[ALFABET.indexOf(pointer)-1]\r\nassert 'b',incr 'a'\r\nassert 'a',decr 'b'\r\n\r\nsolve = (kenken,ops) ->\r\n\tprint N = Math.sqrt kenken.length\r\n\tprint rf = f kenken\r\n\tprint rg = g rf, ops\r\n\tprint rp = makePerms rg\r\n\tindexes = {}\r\n\tfor key of ops\r\n\t\tindexes[key] = -1 \r\n\tpointer = 'a'\r\n\tindexes['a'] = 0\r\n\tstopper = ALFABET[1 + _.size ops]\r\n\r\n\twhile pointer not in [' ',stopper]\r\n\t\tflag = indexes[pointer] < rp[pointer].length\r\n\t\tif flag and valid indexes,pointer,rf,rp\r\n\t\t\tpointer = incr pointer \r\n\t\t\tif pointer < stopper \r\n\t\t\t\tindexes[pointer]++\r\n\t\t\t\t#print 'A',pointer, indexes[pointer]\r\n\t\telse if indexes[pointer] < rp[pointer].length-1\r\n\t\t\tindexes[pointer]++\r\n\t\t\tif pointer < indexes.length then indexes[incr pointer] = -1\r\n\t\t\t#print 'B',pointer,indexes[pointer]\r\n\t\telse\r\n\t\t\tindexes[pointer] = -1\r\n\t\t\tpointer = decr pointer\r\n\t\t\tindexes[pointer]++\r\n\t\t\t#print 'C',pointer,indexes[pointer]\r\n\r\n\tindexes\r\n\r\nstart = Date.now()\r\n\r\n# assert {a: 0, b: 0, c: 0, d: 0, e: 0}, solve \"abbacdeed\", {a:'5+',b:'3/',c:'2',d:'1-',e:'2-'}\r\n# assert {a:0,b:0,c:0,d:0,e:0,f:0,g:0,h:2,i:1}, solve \"abbcddecffgghhii\", {a:'4',b:'2/',c:'12*',d:'1-',e:'3',f:'7+',g:'2/',h:'1-',i:'3-'}\r\n# assert {a:0,b:5,c:3,d:2,e:2,f:0,g:5,h:0}, solve \"aabbcdefcdeghhgg\", {a:'2/',b:'1-',c:'2/',d:'4+',e:'1-',f:'1',g:'8*',h:'7+'}\r\n\r\nsol6x6 = \r\n\ta: 1\r\n\tb: 13\r\n\tc: 2\r\n\td: 7\r\n\te: 4\r\n\tf: 3\r\n\tg: 2\r\n\th: 4\r\n\ti: 0\r\n\tj: 4\r\n\tk: 0\r\n\tl: 1\r\n\tm: 3\r\n\tn: 4\r\n\to: 10\r\n\tp: 3\r\n\tq: 0\r\n#assert sol6x6, solve \"aabccdeebbddffgghijflmhnjklmonppqqoo\", {a:'11+',b:'11+',c:'3/',d:'12*',e:'1-',f:'6*',g:'5+',h:'3-',i:'4',j:'7+',k:'3',l:'11+',m:'5+',n:'2/',o:'12+',p:'6+',q:'5-'}\r\n\r\nsol7x7 =\r\n\ta: 1\r\n\tb: 16\r\n\tc: 2\r\n\td: 6\r\n\te: 0\r\n\tf: 7\r\n\tg: 2\r\n\th: 4\r\n\ti: 0\r\n\tj: 8\r\n\tk: 1\r\n\tl: 0\r\n\tm: 0\r\n\tn: 2\r\n\to: 5\r\n\tp: 5\r\n\tq: 5\r\n\tr: 3\r\n\ts: 4\r\n\tt: 1\r\n\tu: 10\r\n\tv: 2\t# 200 ms\r\n#assert sol7x7, solve \"aabbcddefbbcghefijjghklimjnokppmnnoqrssstuqrvvvtu\", {a:'6-',b:'360*',c:'5-',d:'2/',e:'15*',f:'3-',g:'1-',h:'6+',i:'13+',j:'12+',k:'3+',l:'6',m:'8+',n:'120*',o:'1-',p:'3-',q:'2-',r:'1-',s:'8+',t:'6-',u:'1-',v:'60*'}\r\n\r\n# 9x9\r\nprint solve \"abcccddeeabfgghdeeiifjjhkkklmfnoopqqlmrnsppttumrvspwwxuuyyzAAwxBByCzzDDEFFFCGGHHE\", {a:'3-',b:'8+',c:'16+',d:'9+',e:'33+',f:'10+',g:'3+',h:'7+',i:'7+',j:'1-',k:'16+',l:'8-',m:'18+',n:'16+',o:'9+',p:'21+',q:'4-',r:'8-',s:'2-',t:'3-',u:'16+',v:'5',w:'17+',x:'7+',y:'16+',z:'22+',A:'3+',B:'7-',C:'7+',D:'4+',E:'9+',F:'13+',G:'17+',H:'12+'}\r\n\r\nprint 'Ready!',Date.now()-start\r\n"
  ]
}