{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": ";;;AAAA;;;;;AAAA,IAAA,MAAA,MAAA,MAAA,MAAA,cAAA,OAAA,OAAA;;AAMA,OAAO,IAAI,AAAJ;;AACP,OAAO,IAAI,AAAJ,WAAe,AAAf;;AAEP,QAAQ,AAAI,KAAC,AAAL;;AACR,SAAS,AAAI,KAAC,AAAL,OAAY,AAAZ,AAVT;;;AAaA,QAAQ,iBACP;MAAA;AAAA,eAAa,AAAb,KAAiB,AAAjB;AACA,AAAI,OAAC,AAAL,UAAe,AAAf,OAAsB,AAAtB,AADA;;AAGA,SAAO,AAAI,KAAC,AAAL,SAAc,AAAd,OAAqB,AAArB;AACP,QAAM,AAAN;AACA,QAAM,AAAN;SACA,QAAQ,AAAI,KAAC,AAAL,UAAe,AAAf,OAAsB,AAAtB,AAPD;AAbR;;;AAuBA,OAAO,cAAC,AAAD,OACN;MAAA,MAAA,GAAA,GAAA,KAAA,MAAA,KAAA;AAAA,MAAI;AACJ,OAAA,oCAAA;;AACC,SAAA,oCAAA;;AACC,UAAG,SAAM,CAAC,AAAV;AAAiB,eAAK,AAAtB;;AACA,WAAK,OAAO,AAFb;;AAGA,SAAK,AAJN;;SAKA,MAAM,AAAN,AAPM;;;AASP,OAAO,gBACN;MAAA,GAAA,MAAA,GAAA,GAAA,KAAA,KAAA,SAAA;AAAA,KAAG,AAAH,AACA;cAAA;;AAAA,OAAA,4CAAA;;;mBACC;;AAAA,WAAA,8CAAA;;AACC,WAAG,AAAH;AACA,YAAG,SAAQ,CAAC,AAAZ;AAAmB,aAAG,AAAH,GAAK,AAAL,GAAO,AAAP,AAAnB;;AACA,YAAG,SAAQ,CAAC,AAAZ;AAAmB,aAAG,AAAH,GAAK,AAAL,GAAO,AAAP,AAAnB;;sBACA,OAAO,KAAG,KAAG,AAAb,GAAe,KAAG,KAAG,AAArB,GAAuB,AAAvB,AAJD;AAAA;;AADD;AAAA;SAFM;;;AAUP,eAAe,wBAEd;MAAA,KAAA,GAAA,KAAA,MAAA,KAAA;;AAAA,mBAAM,CAAC,SAAO,AAAR,MAAe,AACrB;;AAAA,OAAA,kCAAA;;AACC,QAAG,AAAK,MAAC,AAAM,MAAA,AAAK,KAAA,AAAjB,SAAyB,AAA5B,GAAmC;AAAnC;AADD;;AAGA,SAAO,IAAI,AAAJ,KAAS,AAAT,KAAc,AAAd;AACP,QAAM,AAAN;AACA,UAAQ,AAAI,KAAC,AAAL,UAAe,AAAf,OAAsB,AAAtB;AACR,WAAS,AAAI,KAAC,AAAL,OAAY,AAAZ,AAPT;;AAUA,AAAI,OAAC,AAAL,UAAe,AAAf,OAAsB,AAAtB,AAVA;;AAYA,SAAO,AAAI,KAAC,AAAL,SAAc,AAAd,OAAqB,AAArB;AACP,QAAM,AAAN;AACA,UAAQ,AAAI,KAAC,AAAL,UAAe,AAAf,OAAsB,AAAtB,AAdR;;AAgBA,WAAS,AAAI,KAAC,AAAL,OAAY,AAAZ;AACT,MAAG,AAAH;WAAe,KAAK,AAAL,QAAY,QAAM,AAAlB,GAAoB,AAApB,AAAf;AAnBc",
  "sourcesContent": [
    "#'use strict'\r\n\r\n# const util = require('util')\r\n# const Game_C4 = require('./game-c4.js')\r\n# const MonteCarlo = require('./monte-carlo.js')\r\n\r\ngame = new Game()\r\nmcts = new MonteCarlo(game)\r\n\r\nstate = game.start()\r\nwinner = game.winner(state)\r\n\r\n# // Setup\r\nsetup = ->\r\n\tcreateCanvas 200,200\r\n\tmcts.runSearch(state, 1)\r\n\t#stats = mcts.getStats(state)\r\n\tplay = mcts.bestPlay(state, \"robust\")\r\n\tprint mcts\r\n\tprint play\r\n\tstate = game.nextState(state, play)\t\r\n\r\n# // From initial state, play games until end\r\ndump = (board) ->\r\n\ts = ''\r\n\tfor row in board\r\n\t\tfor item in row\r\n\t\t\tif item==-1 then item=2\r\n\t\t\ts += item + ' '\r\n\t\ts += \"\\n\"\r\n\tprint s\r\n\r\ndraw = ->\r\n\tbg 0.5\r\n\tfor row,j in state.board\r\n\t\tfor item,i in row\r\n\t\t\tfc 0.5\r\n\t\t\tif item == -1 then fc 1,0,0\r\n\t\t\tif item == +1 then fc 1,1,0\r\n\t\t\tcircle 20+20*i,20+20*j,10\r\n\r\n\r\nmousePressed = ->\r\n\t# human move\r\n\tcol = (mouseX-10) // 20\r\n\tfor row in range 5,-1,-1\r\n\t\tif state.board[row][col] == 0 then break\r\n\r\n\tplay = new Play row, col\r\n\tprint play\r\n\tstate = game.nextState(state, play)\r\n\twinner = game.winner(state)\r\n\r\n\t# computer move\r\n\tmcts.runSearch(state, 1)\r\n\t#stats = mcts.getStats(state)\r\n\tplay = mcts.bestPlay(state, \"robust\")\r\n\tprint mcts \r\n\tstate = game.nextState(state, play)\r\n\t#dump state.board\r\n\twinner = game.winner(state)\r\n\tif winner then text winner,width/2,150\r\n"
  ]
}