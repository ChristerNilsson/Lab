"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Computer;

Computer = function () {
  function Computer() {
    _classCallCheck(this, Computer);
  }

  _createClass(Computer, [{
    key: "play_complete",
    value: function play_complete(b) {
      var marker;
      while (true) {
        marker = b.last_marker();
        b.move(b.rand());
        if (b.done()) {
          return marker;
        }
        if (M * N === b.moves.length) {
          return "draw";
        }
      }
    }
  }, {
    key: "move",
    value: function move(board) {
      var antal, b, cand, cands, end, i, len, m, marker, mrkr, start;
      start = Date.now();
      marker = board.last_marker();
      cands = function () {
        var i, len, ref, results;
        ref = range(N);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          m = ref[i];
          if (board.board[m].length < M) {
            results.push([0, m]);
          }
        }
        return results;
      }();
      if (cands.length === 1) {
        return cands[0][1];
      }
      antal = 0;
      end = Date.now() + 3 * 1000;
      while (Date.now() < end) {
        for (i = 0, len = cands.length; i < len; i++) {
          cand = cands[i];
          antal++;
          b = board.copy();
          b.move(cand[1]);
          if (b.done()) {
            return cand[1];
          }
          mrkr = this.play_complete(b);
          if (mrkr === marker) {
            cand[0]++;
          } else if (mrkr !== 'draw') {
            cand[0]--;
          }
        }
      }
      cand = _.max(cands, function (cand) {
        return cand[0];
      });
      print(Date.now() - start, antal);
      return cand[1];
    }
  }]);

  return Computer;
}();
//# sourceMappingURL=computer.js.map
