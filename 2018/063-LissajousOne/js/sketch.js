"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var dangleX, dangleY, draw, makePoint, r, setup;

r = 300;

dangleX = 0;

dangleY = 0;

setup = function setup() {
  createCanvas(2 * r, 2 * r);
  return angleMode(DEGREES);
};

makePoint = function makePoint(angle) {
  var x, y;
  dangleY += (mouseY - r) / 100000;
  dangleX += (mouseX - r) / 100000;
  x = r + r * cos(3 * angle + dangleX);
  y = r + r * sin(5 * angle + dangleY);
  return [x, y];
};

draw = function draw() {
  var angle, i, len, ref, x, y;
  bg(0);
  noFill();
  stroke(255);
  beginShape();
  ref = range(360);
  for (i = 0, len = ref.length; i < len; i++) {
    angle = ref[i];

    var _makePoint = makePoint(angle);

    var _makePoint2 = _slicedToArray(_makePoint, 2);

    x = _makePoint2[0];
    y = _makePoint2[1];

    vertex(x, y);
    if (angle % 10 === 0) {
      sw(angle === 0 ? 8 : 4);
      point(x, y);
    }
  }

  var _makePoint3 = makePoint(360);

  var _makePoint4 = _slicedToArray(_makePoint3, 2);

  x = _makePoint4[0];
  y = _makePoint4[1];

  vertex(x, y);
  sw(1);
  return endShape();
};
//# sourceMappingURL=sketch.js.map
