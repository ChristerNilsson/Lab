"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
// http://rosettacode.org/wiki/Morse_code#JavaScript
var Morse, morse;

Morse = function () {
  function Morse() {
    var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.2;
    var freq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 700;

    _classCallCheck(this, Morse);

    this.unit = unit;
    this.freq = freq;
    this.cont = new AudioContext();
    this.time = this.cont.currentTime;
    this.alfabet = "..etianmsurwdkgohvf.l.pjbxcyzq..54.3...2.......16.......7...8.90";
  }

  _createClass(Morse, [{
    key: "getCode",
    value: function getCode(letter) {
      var i, result;
      i = this.alfabet.indexOf(letter);
      result = "";
      while (i > 1) {
        result = "._"[i % 2] + result;
        i = Math.floor(i / 2);
      }
      return result;
    }
  }, {
    key: "makecode",
    value: function makecode(data) {
      var code, j, len, letter, results;
      results = [];
      for (j = 0, len = data.length; j < len; j++) {
        letter = data[j];
        code = this.getCode(letter);
        if (code !== void 0) {
          results.push(this.maketime(code));
        } else {
          results.push(this.time += this.unit * 7);
        }
      }
      return results;
    }
  }, {
    key: "maketime",
    value: function maketime(data) {
      var j, len, timedata;
      for (j = 0, len = data.length; j < len; j++) {
        timedata = data[j];
        timedata = this.unit * ' . _'.indexOf(timedata);
        if (timedata > 0) {
          this.maketone(timedata);
          this.time += timedata;
          this.time += this.unit;
        }
      }
      return this.time += this.unit * 2;
    }
  }, {
    key: "maketone",
    value: function maketone(data) {
      var start, stop;
      start = this.time;
      stop = this.time + data;
      this.gain.gain.linearRampToValueAtTime(0, start);
      this.gain.gain.linearRampToValueAtTime(1, start + this.unit / 8);
      this.gain.gain.linearRampToValueAtTime(1, stop - this.unit / 16);
      return this.gain.gain.linearRampToValueAtTime(0, stop);
    }
  }, {
    key: "send",
    value: function send(text) {
      var osci;
      osci = this.cont.createOscillator();
      osci.frequency.value = this.freq;
      this.gain = this.cont.createGain();
      this.gain.gain.value = 0;
      osci.connect(this.gain);
      this.gain.connect(this.cont.destination);
      osci.start(this.time);
      this.makecode(text);
      return this.cont;
    }
  }]);

  return Morse;
}();

morse = new Morse();

morse.send('sos');
//# sourceMappingURL=sketch1.js.map
