"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.3.2
var floodFill, mousePressed, setup, stack;

stack = [];

setup = function setup() {
  createCanvas(750, 750);
  background(128);
  noFill();
  scale(14);
  circle(16, 21, 15);
  circle(31, 16, 15);
  return circle(26, 36, 15);
};

floodFill = function floodFill(x, y, c2) {
  var add, c1;
  add = function add(x, y) {
    if (_.isEqual(c1, get(x, y))) {
      return stack.push([x, y]);
    }
  };
  stack.push([x, y]);
  c1 = get(x, y);
  while (stack.length > 0) {
    var _stack$pop = stack.pop();

    var _stack$pop2 = _slicedToArray(_stack$pop, 2);

    x = _stack$pop2[0];
    y = _stack$pop2[1];

    set(x, y, c2);
    add(x - 1, y);
    add(x + 1, y);
    add(x, y - 1);
    add(x, y + 1);
  }
  return updatePixels();
};

mousePressed = function mousePressed() {
  var b, g, r;
  r = random(256);
  g = random(256);
  b = random(256);
  return floodFill(mouseX, mouseY, [r, g, b, 255]);
};
//# sourceMappingURL=sketch.js.map
