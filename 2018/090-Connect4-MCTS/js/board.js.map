{
  "version": 3,
  "file": "board.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\board.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "M = 6  # antal rader\r\nN = 7  # antal kolumner\r\n\r\ngetRandom = (b) -> int b * Math.random()\r\n\r\nclass Board\r\n\r\n\tconstructor : (moves='') -> \r\n\t\t@clear()\r\n\t\tfor digit in moves\r\n\t\t\t@move parseInt digit\r\n \r\n\tcopy : ->\r\n\t\tb = new Board()\r\n\t\tb.board = @board.slice() \r\n\t\tb.moves = @moves.slice()\r\n\t\tb\r\n\r\n\trand : -> _.sample (i for b,i in @board when b.length < M)\r\n\r\n\tclear : ->\r\n\t\t@moves = []\r\n\t\t@board = ('' for i in range N)\r\n\r\n\tmove : (m) ->\r\n\t\t@board[m] += @nextMarker()\r\n\t\t@moves.push m\r\n\r\n\tnextBoard : (play) ->\r\n\t\tb = @copy()\r\n\t\tb.move play\r\n\t\tb\r\n\r\n\tundo : -> \r\n\t\tindex = @moves.pop() \r\n\t\t@board[index] = @board[index].slice 0, @board[index].length-1\r\n\r\n\tlastMarker : -> 'OX'[@moves.length % 2]\r\n\tnextMarker : -> 'XO'[@moves.length % 2]\r\n\r\n\tcalcColumns : ->\r\n\t\tm = _.last @moves\r\n\t\trow = @board[m]\r\n\t\ti = row.length - 2\r\n\t\tif i<2 then return false # 50% more pos/sec\r\n\t\tmarker = @lastMarker()\r\n\t\tcount = 1\r\n\t\twhile row[i] == marker and i >= 0\r\n\t\t\tcount++\r\n\t\t\ti--\r\n\t\tcount == 4\r\n\r\n\tcalcRows : ->\r\n\t\tmarker = @lastMarker()\r\n\t\tm = _.last @moves\r\n\t\tcount = 1\r\n\t\tn = @board[m].length - 1\r\n\r\n\t\tfor i in range m+1,N\r\n\t\t\tif n >= @board[i].length or @board[i][n] != marker then break\r\n\t\t\tcount++\r\n\r\n\t\tfor i in range m-1,-1,-1\r\n\t\t\tif n >= @board[i].length or @board[i][n] != marker then break\r\n\t\t\tcount++\r\n\r\n\t\tcount >= 4\r\n\r\n\thelper : (di, dj, marker, m, n) ->\r\n\t\ti = m+di\r\n\t\tj = n+dj\r\n\t\tres = 0\r\n\t\twhile 0 <= j < M and 0 <= i < N and j < @board[i].length and @board[i][j] == marker\r\n\t\t\tres++\r\n\t\t\ti += di\r\n\t\t\tj += dj\r\n\t\treturn res\r\n\r\n\tcalcDiagonal : (dj) ->\r\n\t\tmarker = @lastMarker()\r\n\t\tm = _.last @moves\r\n\t\tcount = 1\r\n\t\tn = @board[m].length - 1\r\n\t\tcount += @helper +1,+dj,marker,m,n\r\n\t\tcount += @helper -1,-dj,marker,m,n\r\n\t\tcount >= 4\r\n\r\n\tdone : ->\r\n\t\tif @moves.length<=6 then return false\r\n\t\tif @calcColumns()   then return true\r\n\t\tif @calcRows()      then return true\r\n\t\tif @calcDiagonal +1 then return true\r\n\t\tif @calcDiagonal -1 then return true\r\n\t\tfalse\r\n\r\n\tdraw : -> @moves.length == M*N\r\n\r\n\tlegalPlays : -> (col for col in range N when @board[col].length < M)\r\n\twinner : ->\r\n\t\tif @draw() then return 0\r\n\t\tif @done() then return [1,-1][@moves.length % 2] \r\n\t\tnull\r\n\r\n\tisPlayer : (player) -> player == [-1,1][@moves.length % 2]  \r\n\t\r\n\r\n###### tester ######\r\n\r\n# b = new Board()\r\n# b.move 1\r\n# b.move 2\r\n# c = b.copy()\r\n# c.move 1\r\n\r\n# assert b.moves,[1,2]\r\n# assert b.board[1],'X'\r\n# assert b.board[2],'O'\r\n# assert b.lastMarker(), 'O'\r\n\r\n# assert c.moves,[1,2,1]\r\n# assert c.board[1],'XX'\r\n# assert c.board[2],'O'\r\n# assert c.lastMarker(), 'X'\r\n\r\n# b.clear()\r\n# assert b.moves,[]\r\n# assert b.board[1],''\r\n# assert b.board[2],''\r\n\r\n# c = b.nextBoard 3\r\n# assert c.moves,[3]\r\n# assert c.board[3],'X'\r\n\r\n# c.undo()\r\n# assert c.moves,[]\r\n# assert c.board[3],''\r\n# assert c.legalPlays(), [0,1,2,3,4,5,6]\r\n# c.move 3 for i in range 6\r\n# assert c.board[3],'XOXOXO'\r\n# assert c.legalPlays(), [0,1,2,4,5,6]\r\n\r\n# # Vertikalt fyra\r\n# c = new Board '131313' \r\n# assert c.done(),false \r\n# c.move 1\r\n# assert c.board[1],'XXXX'\r\n# assert c.board[3],'OOO'\r\n# assert c.done(),true\r\n\r\n# # Horisontell fyra\r\n# c = new Board '061626'\r\n# assert c.done(),false \r\n# c.move 3\r\n# assert c.done(),true\r\n\r\n# # Diagonal fyra\r\n# c = new Board '543253445'\r\n# assert c.done(),false \r\n# c.move 5\r\n# assert c.done(),true\r\n# assert c.winner(),1\r\n# assert c.draw(),false\r\n\r\n# print 'Ready!'"
  ]
}