{
  "version": 3,
  "file": "node.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\node.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,IAAA;;AAAA,AAAM;AACL,AAAc,gBAAA,QAAA,OAAA;AACb;;QAAA,GAAA,KAAA,MAAA;AADc,AAAC,SAAA;AAAQ,AAAC,SAAA;AAAM,AAAC,SAAA;AAC/B,AAAC,SAAD,AAAC,IAAD,AAAK;AACL,AAAC,SAAD,AAAC,IADD,AACK;AACL,AAAC,SAAD,AAAC,WAFD,AAEY,IACZ;;AAAA,SAAA,kCAAA;;AACC,UAAG,AAAC,KAAA,AAAK,MAAC,AAAM,MAAA,AAAK,MAAlB,AAAmB,SAAtB,AAA+B;AAC9B,AAAC,aAAA,AAAS,SAAV,AAAU,QADX,AACmB;AAFpB;AAJa;AAAd;;AASA,AAAS;;;;;2BAAA,AAAC,MACT;UAAA,YAAA;AAAA,mBAAa,AAAC,KAAA,AAAK,MAAN,AAAO,UAAP,AAAiB;AAC9B,kBAAY,IAAA,AAAI,KAAJ,AAAS,MAAT,AAAY,MAAZ,AAAkB;AAC9B,AAAC,WAAA,AAAS,SAAV,AAAU,QAAQ;aAHV,AAIR;AAED,AAAW;;;+BAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;qBAAd,SAAA,AAAS,AAAK;AAAA;aAAlB;AACX,AAAkB;;;sCAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;YAAiC,UAAS;uBAAxD,SAAA,AAAS;AAAK;AAAA;aAAlB;AAhBlB;;AAkBA,AAAS;;;;;aAAA,AAAG;AAlBZ;;;;;AAwBA,AAAkB;;;;sCACjB;UAAA,OAAA,KAAA;;AAAA,WAAA,OAAA;;AACC,YAAG,UAAH,AAAY,MAAU;iBAAtB,AAA6B;AAD9B;;aADiB,AAGjB;AAED,AAAU;;;;aAAI,AAAC,KAAD,AAAC,IAAI,AAAC,KAAP,AAAO,CAAP,GAAY,AAAI,KAAJ,AAAK,KAAK,IAAI,AAAI,KAAJ,AAAK,IAAI,AAAC,KAAA,AAAM,OAApB,AAAI,AAAiB,KAAK,AAAC,KAApD,AAAe,AAAqC;AA9B/D;;;;;;AAAA",
  "sourcesContent": [
    "class Node \r\n\tconstructor : (@parent, @play, @board) ->\r\n\t\t@t = 0 # number of wins\r\n\t\t@n = 0 # number of games\r\n\t\t@children = {} # of Nodes\r\n\t\tfor play in range N\r\n\t\t\tif @board.board[play].length < M\r\n\t\t\t\t@children[play] = null\r\n\t\t#print @children\r\n\r\n\texpand : (play) ->\r\n\t\tchildBoard = @board.nextBoard play\r\n\t\tchildNode = new Node @, play, childBoard\r\n\t\t@children[play] = childNode\r\n\t\tchildNode\r\n\r\n\tallPlays : -> (parseInt play for play,child of @children)\r\n\tunexpandedPlays : -> (parseInt play for play,child of @children when child == null)\r\n\t#isLeaf : -> 0 == _.size @children \r\n\tisLeaf : -> false \r\n\t\t# antal = 0\r\n\t\t# for child in @children \r\n\t\t# \tif child == null then antal++\r\n\t\t# antal == @children.length\r\n\r\n\tisFullyExpanded : ->\r\n\t\tfor key,child of @children \r\n\t\t\tif child == null then return false\r\n\t\ttrue\r\n\t\r\n\tgetUCB1 : -> (@t / @n) + Math.sqrt(2 * Math.log(@parent.n) / @n)\r\n\r\n###### tester ######\r\n\r\n# b = new Board '333333'\r\n# n = new Node null,null,b,[0,1,2,4,5,6]\r\n# assert n.parent, null\r\n# assert n.play, null\r\n# assert n.board.board.length, N\r\n# assert n.children, {0:null, 1:null, 2:null, 4:null, 5:null, 6:null}\r\n\r\n# assert n.isLeaf(), false\r\n# child = n.expand 2\r\n# print n\r\n# assert child.board.board[2], 'X'\r\n# assert child.board.board[3], 'XOXOXO'\r\n# assert child.n, 0\r\n# assert child.parent, n\r\n# assert child.play, 2\r\n# assert child.t, 0\r\n# assert n.isLeaf(), false\r\n# assert child.isLeaf(), false\r\n# assert n.allPlays(),[0, 1, 2, 4, 5, 6]\r\n# assert n.unexpandedPlays(),[0, 1, 4, 5, 6]\r\n# assert n.isFullyExpanded(),false\r\n# for play in n.unexpandedPlays()\r\n# \tn.expand parseInt play \r\n# assert n.unexpandedPlays(),[]\r\n# assert n.isFullyExpanded(),true \r\n\r\n# child.t = 1\r\n# child.n = 2\r\n# grandChild = child.expand 4\r\n# assert grandChild.isLeaf(), false \r\n# grandChild.t = 1\r\n# grandChild.n = 2\r\n# assert 1.3325546111576978, grandChild.getUCB1()\r\n"
  ]
}