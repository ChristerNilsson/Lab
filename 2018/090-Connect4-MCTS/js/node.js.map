{
  "version": 3,
  "file": "node.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\node.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,IAAA;;AAAA,AAAM;AACL,AAAc,gBAAA,QAAA,OAAA;AACb;;QAAA,GAAA,KAAA,MAAA;AADc,AAAC,SAAA;AAAQ,AAAC,SAAA;AAAM,AAAC,SAAA;AAC/B,AAAC,SAAD,AAAC,IAAD,AAAK;AACL,AAAC,SAAD,AAAC,IADD,AACK;AACL,AAAC,SAAD,AAAC,WAFD,AAEY,IACZ;;AAAA,SAAA,kCAAA;;AACC,UAAG,AAAC,KAAA,AAAK,MAAC,AAAM,MAAA,AAAK,MAAlB,AAAmB,SAAtB,AAA+B;AAC9B,AAAC,aAAA,AAAS,SAAV,AAAU,QADX,AACmB;AAFpB;AAJa;AAQd,AAAS;;;;2BAAA,AAAC,MACT;UAAA,YAAA;AAAA,mBAAa,AAAC,KAAA,AAAK,MAAN,AAAO,UAAP,AAAiB;AAC9B,kBAAY,IAAA,AAAI,KAAJ,AAAS,MAAT,AAAY,MAAZ,AAAkB;AAC9B,AAAC,WAAA,AAAS,SAAV,AAAU,QAAQ;aAHV,AAIR;AAED,AAAW;;;+BAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;qBAAd,SAAA,AAAS,AAAK;AAAA;aAAlB;AACX,AAAkB;;;sCAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;YAAiC,UAAS;uBAAxD,SAAA,AAAS;AAAK;AAAA;aAAlB;AAClB,AAAU;;;;aAAI,AAAC,KAAD,AAAC,IAAI,AAAC,KAAP,AAAO,CAAP,GAAY,AAAI,KAAJ,AAAK,KAAK,IAAI,AAAI,KAAJ,AAAK,IAAI,AAAC,KAAA,AAAM,OAApB,AAAI,AAAiB,KAAK,AAAC,KAApD,AAAe,AAAqC;AAE9D,AAAkB;;;sCACjB;UAAA,OAAA,KAAA;;AAAA,WAAA,OAAA;;AACC,YAAG,UAAH,AAAY,MAAU;iBAAtB,AAA6B;AAD9B;;aADiB,AAGjB;AAtBF",
  "sourcesContent": [
    "class Node \r\n\tconstructor : (@parent, @play, @board) ->\r\n\t\t@t = 0 # number of wins\r\n\t\t@n = 0 # number of games\r\n\t\t@children = {} # of Nodes\r\n\t\tfor play in range N\r\n\t\t\tif @board.board[play].length < M\r\n\t\t\t\t@children[play] = null\r\n\r\n\texpand : (play) ->\r\n\t\tchildBoard = @board.nextBoard play\r\n\t\tchildNode = new Node @, play, childBoard\r\n\t\t@children[play] = childNode\r\n\t\tchildNode\r\n\r\n\tallPlays : -> (parseInt play for play,child of @children)\r\n\tunexpandedPlays : -> (parseInt play for play,child of @children when child == null)\r\n\tgetUCB1 : -> (@t / @n) + Math.sqrt(2 * Math.log(@parent.n) / @n)\r\n\r\n\tisFullyExpanded : ->\r\n\t\tfor key,child of @children \r\n\t\t\tif child == null then return false\r\n\t\ttrue\r\n"
  ]
}