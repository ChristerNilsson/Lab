{
  "version": 3,
  "file": "game.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\game.coffee"
  ],
  "names": [],
  "mappings": ";AAAA",
  "sourcesContent": [
    "# N_ROWS = 6\r\n# N_COLS = 7\r\n\r\n# boardPrototype = ([0,0,0,0,0,0,0] for i in range N_ROWS)\r\n# checkPrototype = ([0,0,0,0,0,0,0,0,0] for in range N_COLS)\r\n\r\n# class Game \r\n\r\n# \tstart : ->\r\n# \t\tnewBoard = boardPrototype.map (row) => row.slice()\r\n# \t\tnew State [], newBoard, 1\r\n\r\n# \tlegalPlays : (board) -> (col for col in range N_COLS when board[col].length < N_ROWS)\r\n\r\n# \tnextState : (board, play) ->\r\n# \t\tlet newHistory = state.playHistory.slice() \r\n# \t\tnewHistory.push(play)\r\n# \t\tlet newBoard = state.board.map((row) => row.slice())\r\n# \t\tnewBoard[play.row][play.col] = state.player\r\n# \t\tlet newPlayer = -state.player\r\n\r\n# \t\treturn new State(newHistory, newBoard, newPlayer)\r\n# \t}\r\n\r\n# \t/** Return the winner of the game. */\r\n# \twinner(state) {\r\n\r\n# \t\t// if board is full, there's no winner\r\n# \t\tif (!isNaN(state.board[0].reduce(\r\n# \t\t\t(acc, cur) => cur == 0 ? NaN : acc + cur))\r\n# \t\t) return 0\r\n\r\n# \t\t// one board for each possible winning run orientation\r\n# \t\tlet checkBoards = new Map()\r\n# \t\tcheckBoards.set(\"horiz\", checkPrototype.map((row) => row.slice()))\r\n# \t\tcheckBoards.set(\"verti\", checkPrototype.map((row) => row.slice()))\r\n# \t\tcheckBoards.set(\"ldiag\", checkPrototype.map((row) => row.slice()))\r\n# \t\tcheckBoards.set(\"rdiag\", checkPrototype.map((row) => row.slice()))\r\n\r\n# \t\t// iterate over the board\r\n# \t\tfor (let row = 0; row < N_ROWS; row++) {\r\n# \t\t\tfor (let col = 0; col < N_COLS; col++) {\r\n# \t\t\t\tlet cell = state.board[row][col]\r\n# \t\t\t\tfor (let [key, val] of checkBoards) {\r\n\r\n# \t\t\t\t\t// accumulator\r\n# \t\t\t\t\tlet acc // = 0\r\n# \t\t\t\t\tswitch(key) {\r\n# \t\t\t\t\t\tcase \"horiz\": acc = val[row + 1][col] // left\r\n# \t\t\t\t\t\tbreak\r\n# \t\t\t\t\t\tcase \"verti\": acc = val[row][col + 1] // top\r\n# \t\t\t\t\t\tbreak\r\n# \t\t\t\t\t\tcase \"ldiag\": acc = val[row][col] // top left\r\n# \t\t\t\t\t\tbreak\r\n# \t\t\t\t\t\tcase \"rdiag\": acc = val[row][col + 2] // top right\r\n# \t\t\t\t\t\tbreak\r\n# \t\t\t\t\t}\r\n\r\n# \t\t\t\t\tval[row + 1][col + 1] = cell\r\n# \t\t\t\t\tif (cell < 0 && acc < 0 || cell > 0 && acc > 0) {\r\n# \t\t\t\t\t\tval[row + 1][col + 1] += acc\r\n# \t\t\t\t\t}\r\n# \t\t\t\t\tif (val[row + 1][col + 1] == 4) return 1\r\n# \t\t\t\t\tif (val[row + 1][col + 1] == -4) return -1\r\n# \t\t\t\t}\r\n# \t\t\t}\r\n# \t\t}\r\n# \t\treturn null\r\n# \t}\r\n\r\n# }\r\n\r\n# // module.exports = Game_C4\r\n"
  ]
}