// Generated by CoffeeScript 2.3.2
var MonteCarlo, TRACE;

TRACE = true;

MonteCarlo = class MonteCarlo {
  constructor(root) {
    this.root = root;
  }

  dump(node, key = '', level = '*') {
    var child, ref, results;
    print(level, key, `t:${node.t}`, `n:${node.n}`, `moves:${JSON.stringify(node.board.moves)}`, `board:${JSON.stringify(node.board.board)}`);
    ref = node.children;
    results = [];
    for (key in ref) {
      child = ref[key];
      if (child !== null) {
        results.push(this.dump(child, key, level + '|'));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  runSearch(factor = 1) {
    var end, node, winner;
    end = Date.now() + factor * thinkingTime;
    while (Date.now() < end) {
      // if TRACE
      // 	print ''
      // 	print montecarlo
      // 	@dump montecarlo.root
      node = this.select();
      if (node === null) {
        return;
      }
      winner = node.board.winner();
      if (winner === null) {
        node = this.expand(node);
        winner = this.simulate(node);
      }
      this.backpropagate(node, winner);
    }
    return print('');
  }

  //print montecarlo
  //@dump montecarlo.root
  bestPlay(node) {
    var pairs, play, res;
    pairs = (function() {
      var i, len, ref, results;
      ref = node.allPlays();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        play = ref[i];
        results.push([node.children[play].n, play]);
      }
      return results;
    })();
    //pairs = ([node.children[play].t / node.children[play].n, play] for play in node.allPlays())
    if (pairs.length === 0) {
      print('Problem in bestPlay');
      return null;
    }
    res = _.max(pairs, function(pair) {
      return pair[0];
    })[1];
    if (TRACE) {
      print('bestPlay', pairs, res);
    }
    return res;
  }

  select() { // väljer en nod ur trädet
    var bestPlay, node, pairs, play, plays;
    node = this.root;
    while (node.isFullyExpanded()) {
      plays = node.allPlays();
      pairs = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = plays.length; i < len; i++) {
          play = plays[i];
          results.push([node.children[play].getUCB1(), play]);
        }
        return results;
      })();
      if (pairs.length === 0) {
        return null;
      }
      bestPlay = _.max(pairs, function(pair) {
        return pair[0];
      })[1];
      node = node.children[bestPlay];
    }
    //if TRACE then print 'selecting',JSON.stringify(node.board.moves), pairs
    //if TRACE then print 'selected',JSON.stringify node.board.moves
    return node;
  }

  expand(node) {
    var randomNode;
    randomNode = _.sample(node.unexpandedPlays());
    
    //if TRACE then print 'expand chooses',JSON.stringify randomNode
    return node.expand(randomNode);
  }

  simulate(node) {
    var board, winner;
    board = node.board;
    winner = board.winner();
    while (winner === null) {
      board = board.nextBoard(_.sample(board.legalPlays()));
      winner = board.winner();
    }
    //if TRACE then print 'simulate',winner,"#{JSON.stringify node.board.moves}",board.board,board.moves
    return winner;
  }

  // Anderson & Hesselberg 2016
  backpropagate(node, score) { // score in [0, 0.5, 1]
    var results;
    results = [];
    while (node !== null) {
      node.n++;
      node.t += [score, 1 - score][node.board.moves.length % 2];
      results.push(node = node.parent);
    }
    return results;
  }

};


// b = new Board()
// n = new Node null,null,b
// mc = new MonteCarlo n
// mc.runSearch()
// print mc
// print mc.bestPlay mc.root

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGVjYXJsby5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxtb250ZWNhcmxvLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxVQUFBLEVBQUE7O0FBQUEsS0FBQSxHQUFROztBQUVGLGFBQU4sTUFBQSxXQUFBO0VBRUMsV0FBYyxLQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7RUFBRjs7RUFFZCxJQUFPLENBQUMsSUFBRCxFQUFNLE1BQUksRUFBVixFQUFhLFFBQU0sR0FBbkIsQ0FBQTtBQUNOLFFBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLEtBQUEsQ0FBTSxLQUFOLEVBQVksR0FBWixFQUFnQixDQUFBLEVBQUEsQ0FBQSxDQUFLLElBQUksQ0FBQyxDQUFWLENBQUEsQ0FBaEIsRUFBK0IsQ0FBQSxFQUFBLENBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBVixDQUFBLENBQS9CLEVBQThDLENBQUEsTUFBQSxDQUFBLENBQVMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQTFCLENBQVQsQ0FBQSxDQUE5QyxFQUEwRixDQUFBLE1BQUEsQ0FBQSxDQUFTLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUExQixDQUFULENBQUEsQ0FBMUY7QUFDQTtBQUFBO0lBQUEsS0FBQSxVQUFBOztNQUNDLElBQUcsS0FBQSxLQUFTLElBQVo7cUJBQXNCLElBQUMsQ0FBQSxJQUFELENBQU0sS0FBTixFQUFZLEdBQVosRUFBZ0IsS0FBQSxHQUFRLEdBQXhCLEdBQXRCO09BQUEsTUFBQTs2QkFBQTs7SUFERCxDQUFBOztFQUZNOztFQUtQLFNBQVksQ0FBQyxTQUFTLENBQVYsQ0FBQTtBQUNYLFFBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTtJQUFBLEdBQUEsR0FBTSxJQUFJLENBQUMsR0FBTCxDQUFBLENBQUEsR0FBYSxNQUFBLEdBQVM7QUFDNUIsV0FBTSxJQUFJLENB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QUFRLElBQWQ7TUFDQyxJQUFJLENBQUMsQ0FBTDtNQUNBLElBQUksQ0FBQyxDQUFMLElBQVUsQ0FBQyxLQUFELEVBQU8sQ0FBQSxHQUFFLEtBQVQsQ0FBZ0IsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFqQixHQUEwQixDQUExQjttQkFDMUIsSUFBQSxHQUFPLElBQUksQ0FBQztJQUhiLENBQUE7O0VBRGU7O0FBbkVqQjs7QUFGQSIsInNvdXJjZXNDb250ZW50IjpbIlRSQUNFID0gdHJ1ZVxyXG5cclxuY2xhc3MgTW9udGVDYXJsb1xyXG5cclxuXHRjb25zdHJ1Y3RvciA6IChAcm9vdCkgLT5cclxuXHJcblx0ZHVtcCA6IChub2RlLGtleT0nJyxsZXZlbD0nKicpIC0+XHJcblx0XHRwcmludCBsZXZlbCxrZXksXCJ0OiN7bm9kZS50fVwiLCBcIm46I3tub2RlLm59XCIsIFwibW92ZXM6I3tKU09OLnN0cmluZ2lmeSBub2RlLmJvYXJkLm1vdmVzfVwiLCBcImJvYXJkOiN7SlNPTi5zdHJpbmdpZnkgbm9kZS5ib2FyZC5ib2FyZH1cIlxyXG5cdFx0Zm9yIGtleSxjaGlsZCBvZiBub2RlLmNoaWxkcmVuXHJcblx0XHRcdGlmIGNoaWxkICE9IG51bGwgdGhlbiBAZHVtcCBjaGlsZCxrZXksbGV2ZWwgKyAnfCcgXHJcblxyXG5cdHJ1blNlYXJjaCA6IChmYWN0b3IgPSAxKSAtPlxyXG5cdFx0ZW5kID0gRGF0ZS5ub3coKSArIGZhY3RvciAqIHRoaW5raW5nVGltZSBcclxuXHRcdHdoaWxlIERhdGUubm93KCkgPCBlbmRcclxuXHJcblx0XHRcdCMgaWYgVFJBQ0VcclxuXHRcdFx0IyBcdHByaW50ICcnXHJcblx0XHRcdCMgXHRwcmludCBtb250ZWNhcmxvXHJcblx0XHRcdCMgXHRAZHVtcCBtb250ZWNhcmxvLnJvb3RcclxuXHRcdFx0bm9kZSA9IEBzZWxlY3QoKVxyXG5cclxuXHRcdFx0aWYgbm9kZSA9PSBudWxsIHRoZW4gcmV0dXJuXHJcblx0XHRcdHdpbm5lciA9IG5vZGUuYm9hcmQud2lubmVyKClcclxuXHRcdFx0aWYgd2lubmVyID09IG51bGxcclxuXHRcdFx0XHRub2RlID0gQGV4cGFuZCBub2RlXHJcblx0XHRcdFx0d2lubmVyID0gQHNpbXVsYXRlIG5vZGVcclxuXHRcdFx0QGJhY2twcm9wYWdhdGUgbm9kZSwgd2lubmVyXHJcblxyXG5cdFx0cHJpbnQgJydcclxuXHRcdCNwcmludCBtb250ZWNhcmxvXHJcblx0XHQjQGR1bXAgbW9udGVjYXJsby5yb290XHJcblxyXG5cdGJlc3RQbGF5IDogKG5vZGUpIC0+XHJcblx0XHRwYWlycyA9IChbbm9kZS5jaGlsZHJlbltwbGF5XS5uLCBwbGF5XSBmb3IgcGxheSBpbiBub2RlLmFsbFBsYXlzKCkpXHJcblx0XHQjcGFpcnMgPSAoW25vZGUuY2hpbGRyZW5bcGxheV0udCAvIG5vZGUuY2hpbGRyZW5bcGxheV0ubiwgcGxheV0gZm9yIHBsYXkgaW4gbm9kZS5hbGxQbGF5cygpKVxyXG5cdFx0aWYgcGFpcnMubGVuZ3RoID09IDAgXHJcblx0XHRcdHByaW50ICdQcm9ibGVtIGluIGJlc3RQbGF5J1xyXG5cdFx0XHRyZXR1cm4gbnVsbCBcclxuXHRcdHJlcyA9IF8ubWF4KHBhaXJzLCAocGFpcikgLT4gcGFpclswXSlbMV1cclxuXHRcdGlmIFRSQUNFIHRoZW4gcHJpbnQgJ2Jlc3RQbGF5JywgcGFpcnMscmVzXHJcblx0XHRyZXNcclxuXHJcblx0c2VsZWN0IDogLT4gIyB2w6RsamVyIGVuIG5vZCB1ciB0csOkZGV0XHJcblx0XHRub2RlID0gQHJvb3RcclxuXHRcdHdoaWxlIG5vZGUuaXNGdWxseUV4cGFuZGVkKClcclxuXHRcdFx0cGxheXMgPSBub2RlLmFsbFBsYXlzKClcclxuXHRcdFx0cGFpcnMgPSAoW25vZGUuY2hpbGRyZW5bcGxheV0uZ2V0VUNCMSgpLCBwbGF5XSBmb3IgcGxheSBpbiBwbGF5cylcclxuXHRcdFx0aWYgcGFpcnMubGVuZ3RoPT0wIHRoZW4gcmV0dXJuIG51bGwgXHJcblx0XHRcdGJlc3RQbGF5ID0gXy5tYXgocGFpcnMsIChwYWlyKSAtPiBwYWlyWzBdKVsxXVxyXG5cdFx0XHRub2RlID0gbm9kZS5jaGlsZHJlbltiZXN0UGxheV1cclxuXHRcdFx0I2lmIFRSQUNFIHRoZW4gcHJpbnQgJ3NlbGVjdGluZycsSlNPTi5zdHJpbmdpZnkobm9kZS5ib2FyZC5tb3ZlcyksIHBhaXJzXHJcblx0XHQjaWYgVFJBQ0UgdGhlbiBwcmludCAnc2VsZWN0ZWQnLEpTT04uc3RyaW5naWZ5IG5vZGUuYm9hcmQubW92ZXNcclxuXHRcdG5vZGVcclxuIFxyXG5cdGV4cGFuZCA6IChub2RlKSAtPiBcclxuXHRcdHJhbmRvbU5vZGUgPSBfLnNhbXBsZSBub2RlLnVuZXhwYW5kZWRQbGF5cygpICBcclxuXHRcdCNpZiBUUkFDRSB0aGVuIHByaW50ICdleHBhbmQgY2hvb3NlcycsSlNPTi5zdHJpbmdpZnkgcmFuZG9tTm9kZVxyXG5cdFx0bm9kZS5leHBhbmQgcmFuZG9tTm9kZVxyXG5cclxuXHRzaW11bGF0ZSA6IChub2RlKSAtPlxyXG5cdFx0Ym9hcmQgPSBub2RlLmJvYXJkXHJcblx0XHR3aW5uZXIgPSBib2FyZC53aW5uZXIoKVxyXG5cdFx0d2hpbGUgd2lubmVyID09IG51bGxcclxuXHRcdFx0Ym9hcmQgPSBib2FyZC5uZXh0Qm9hcmQgXy5zYW1wbGUgYm9hcmQubGVnYWxQbGF5cygpXHJcblx0XHRcdHdpbm5lciA9IGJvYXJkLndpbm5lcigpXHJcblx0XHQjaWYgVFJBQ0UgdGhlbiBwcmludCAnc2ltdWxhdGUnLHdpbm5lcixcIiN7SlNPTi5zdHJpbmdpZnkgbm9kZS5ib2FyZC5tb3Zlc31cIixib2FyZC5ib2FyZCxib2FyZC5tb3Zlc1xyXG5cdFx0d2lubmVyXHJcblxyXG5cdCMgQW5kZXJzb24gJiBIZXNzZWxiZXJnIDIwMTZcclxuXHRiYWNrcHJvcGFnYXRlIDogKG5vZGUsIHNjb3JlKSAtPiAjIHNjb3JlIGluIFswLCAwLjUsIDFdXHJcblx0XHR3aGlsZSBub2RlICE9IG51bGxcclxuXHRcdFx0bm9kZS5uKytcclxuXHRcdFx0bm9kZS50ICs9IFtzY29yZSwxLXNjb3JlXVtub2RlLmJvYXJkLm1vdmVzLmxlbmd0aCAlIDJdXHJcblx0XHRcdG5vZGUgPSBub2RlLnBhcmVudFxyXG5cdFxyXG4jIGIgPSBuZXcgQm9hcmQoKVxyXG4jIG4gPSBuZXcgTm9kZSBudWxsLG51bGwsYlxyXG4jIG1jID0gbmV3IE1vbnRlQ2FybG8gblxyXG4jIG1jLnJ1blNlYXJjaCgpXHJcbiMgcHJpbnQgbWNcclxuIyBwcmludCBtYy5iZXN0UGxheSBtYy5yb290XHJcblxyXG4iXX0=
//# sourceURL=C:\Lab\2018\090-Connect4-MCTS\coffee\montecarlo.coffee