{
  "version": 3,
  "file": "montecarlo.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\montecarlo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class MonteCarlo\r\n\r\n\tconstructor : (@root) ->\r\n\r\n\trunSearch : (timeout = 3) ->\r\n\t\tdraws = 0\r\n\t\ttotalSims = 0    \r\n\r\n\t\tend = Date.now() + 100 # 3 * 1000\r\n\t\twhile Date.now() < end\r\n\t\t\tnode = @select()\r\n\t\t\twinner = node.board.winner()\r\n\r\n\t\t\tif node.isLeaf() == false and winner == null\r\n\t\t\t\tnode = @expand node\r\n\t\t\t\twinner = @simulate node\r\n\t\t\t\r\n\t\t\t@backpropagate node, winner\r\n\r\n\t\t\tif winner == 0 then draws++\r\n\t\t\ttotalSims++\r\n\t\t\r\n\t\t{ runtime: timeout, simulations: totalSims, draws: draws }\r\n\r\n\r\n\tbestPlay : (node) ->\r\n\t\tallPlays = node.allPlays()\r\n\t\tbestPlay = null\r\n\t\tmax = -Infinity\r\n\t\tfor play in allPlays\r\n\t\t\tchildNode = node.children[play]\r\n\r\n\t\t\t#ratio = childNode.t / childNode.n\r\n\t\t\tratio = childNode.n\r\n\t\t\tprint 'bestPlay',play,childNode.t,childNode.n,childNode.t/childNode.n\r\n\r\n\t\t\tif ratio > max\r\n\t\t\t\tbestPlay = play\r\n\t\t\t\tmax = ratio\r\n\t\tbestPlay\r\n\r\n\r\n\tselect : -> # väljer en nod ur trädet\r\n\t\tnode = @root\r\n\t\twhile node.isFullyExpanded() and not node.isLeaf()\r\n\t\t\tplays = node.allPlays()\r\n\t\t\tpairs = ([node.children[\"#{play}\"].getUCB1(), play] for play in plays)\r\n\t\t\tbestPlay = _.max(pairs, (pair) -> pair[0])[1]\r\n\t\t\tnode = node.children[\"#{bestPlay}\"]\r\n\t\tnode\r\n \r\n\texpand : (node) -> node.expand _.sample node.unexpandedPlays() \r\n\r\n\tsimulate : (node) ->\r\n\t\tboard = node.board\r\n\t\twinner = board.winner()\r\n\t\twhile winner == null\r\n\t\t\tboard = board.nextBoard _.sample board.legalPlays()\r\n\t\t\twinner = board.winner()\r\n\t\t#print winner,board\r\n\t\twinner\r\n\r\n\tbackpropagate : (node, winner) ->\r\n\t\twhile node != null\r\n\t\t\tnode.n++\r\n\t\t\tif node.board.isPlayer -winner then node.t++\r\n\t\t\tnode = node.parent\r\n\t\r\n\t# getStats : (state) ->\r\n\r\n###### tester ######\r\n\r\nb = new Board()\r\nn = new Node null,null,b\r\nmc = new MonteCarlo n\r\nmc.runSearch()\r\nprint mc\r\nprint mc.bestPlay mc.root\r\n\r\n# assert mc.root.board.board, ['','','','','','','']\r\n# assert mc.root.board.moves, []\r\n#child = mc.root.children[0]\r\n#assert child.play, 0\r\n#assert child.board.board[0], \"X\"\r\n\r\n# print 'n1'\r\n# n1 = mc.select()\r\n# assert n,n1\r\n# assert n1.board.done(), false\r\n# assert n1.isLeaf(), false\r\n# child = mc.expand n1,0\r\n# print child\r\n# assert child.board.board[child.play], 'X'\r\n# winner = mc.simulate child\r\n# print mc,winner\r\n# mc.backpropagate child,winner\r\n# print mc\r\n\r\n# print 'n2'\r\n# n2 = mc.select()\r\n# #assert n,n2\r\n# #assert n1.board.done(), false\r\n# #assert n1.isLeaf(), false\r\n# child = mc.expand n2,0\r\n# print child\r\n# #assert child.board.board[child.play], 'X'\r\n# winner = mc.simulate child\r\n# print mc,winner\r\n# mc.backpropagate child,winner\r\n# print mc\r\n\r\n"
  ]
}