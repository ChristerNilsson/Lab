'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, H, W, buttons, draw, h, mousePressed, myround, setup, w;

buttons = [];

W = 8;

H = 10;

w = null;

h = null;

myround = function myround(x) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  return round(x * Math.pow(10, decimals)) / Math.pow(10, decimals);
};

Button = function () {
  function Button(txt, x1, y, url1, event) {
    _classCallCheck(this, Button);

    this.txt = txt;
    this.x = x1;
    this.y = y;
    this.url = url1;
    this.event = event;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      return text(this.txt, this.x, this.y);
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.x - w / 2 < mx && mx < this.x + w / 2 && this.y - h / 2 < my && my < this.y + h / 2;
    }
  }]);

  return Button;
}();

setup = function setup() {
  var i, j, k, len, level, nr, params, ref, results, seed, size, speed1, speed2, url;
  createCanvas(windowWidth, windowHeight);
  params = getParameters();
  size = params.size;
  size = parseInt(size.replace('m', ''));
  textAlign(CENTER, CENTER);
  w = width / W;
  h = height / H;
  textSize(0.4 * h);
  sc();
  ref = range(H);
  // level
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    results.push(function () {
      var l, len1, ref1, results1;
      ref1 = range(W);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        level = j + 1;
        nr = level + "ABCDEFGH"[i];
        seed = myround(0.1 * i, 1);
        speed1 = '' + myround((level - 1) * 0.05 / size, 4);
        if (level <= 5) {
          speed2 = 0;
        } else {
          speed2 = '' + myround((level - 5) * 0.01 / (0.3 * size), 4);
        }
        url = 'index.html?radius1=' + size + '&nr=' + nr + '&level=' + level + '&seed=' + seed + '&speed1=' + speed1 + '&speed2=' + speed2;
        results1.push(buttons.push(new Button(nr, w / 2 + i * w, h / 2 + j * h, url, function () {
          return window.open(this.url);
        })));
      }
      return results1;
    }());
  }
  return results;
};

draw = function draw() {
  var button, k, len, results;
  bg(1);
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

mousePressed = function mousePressed() {
  var button, k, len, results;
  results = [];
  for (k = 0, len = buttons.length; k < len; k++) {
    button = buttons[k];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.event());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=Shortcut-GPS2.js.map
