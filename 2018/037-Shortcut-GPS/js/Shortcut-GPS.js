'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, buttons, draw, h, mousePressed, setup, w;

buttons = [];

w = null;

h = null;

Button = function () {
  function Button(txt1, x, y, radius, event) {
    _classCallCheck(this, Button);

    this.txt = txt1;
    this.x = x;
    this.y = y;
    this.radius = radius;
    this.event = event;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      return text(this.txt, this.x, this.y);
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.x - w / 2 < mx && mx < this.x + w / 2 && this.y - h / 2 < my && my < this.y + h / 2;
    }
  }]);

  return Button;
}();

setup = function setup() {
  var button, i, j, len, ref, results, txt;
  createCanvas(windowWidth, windowHeight);
  textAlign(CENTER, CENTER);
  w = width / 1;
  h = height / 7;
  textSize(h);
  sc();
  ref = "Instructions 10m 20m 50m 100m 200m 500m".split(' ');
  results = [];
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    txt = ref[i];
    button = new Button(txt, width / 2, h / 2 + i * h, txt);
    buttons.push(button);
    if (i === 0) {
      results.push(button.event = function () {
        return window.open('https://github.com/ChristerNilsson/Lab/blob/master/2018/037-Shortcut-GPS/README.md#shortcut-gps');
      });
    } else {
      results.push(button.event = function () {
        return window.open('Shortcut-GPS2.html?size=' + this.radius);
      });
    }
  }
  return results;
};

draw = function draw() {
  var button, j, len, results;
  bg(1);
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    results.push(button.draw());
  }
  return results;
};

mousePressed = function mousePressed(mx, my) {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.event());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=Shortcut-GPS.js.map
