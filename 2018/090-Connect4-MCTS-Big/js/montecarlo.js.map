{
  "version": 3,
  "file": "montecarlo.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\montecarlo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "TRACE = true\r\n\r\nclass MonteCarlo\r\n\r\n\tconstructor : (@root) ->\r\n\r\n\tdump : (node,key='',level='*') ->\r\n\t\tprint level,key,\"t:#{node.t}\", \"n:#{node.n}\", \"moves:#{JSON.stringify node.board.moves}\", \"board:#{JSON.stringify node.board.board}\"\r\n\t\tfor child,key in node.children\r\n\t\t\tif child != null then @dump child,key,level + '|' \r\n\r\n\trunSearch : (factor = 1) ->\r\n\t\tend = Date.now() + factor * thinkingTime \r\n\t\twhile Date.now() < end\r\n\r\n\t\t\t# if TRACE\r\n\t\t\t# \tprint ''\r\n\t\t\t# \tprint montecarlo\r\n\t\t\t# \t@dump montecarlo.root\r\n\t\t\tnode = @select()\r\n\r\n\t\t\tif node == null then return\r\n\t\t\twinner = node.board.winner()\r\n\t\t\tif winner == null\r\n\t\t\t\tnode = @expand node\r\n\t\t\t\twinner = @simulate node\r\n\t\t\t@backpropagate node, winner\r\n\r\n\t\tprint ''\r\n\t\t#print montecarlo\r\n\t\t#@dump montecarlo.root\r\n\r\n\tbestPlay : (node) ->\r\n\t\tpairs = ([node.children[play].n, play] for play in node.allPlays())\r\n\t\tif pairs.length == 0 \r\n\t\t\tprint 'Problem in bestPlay'\r\n\t\t\treturn null \r\n\t\tres = _.max(pairs, (pair) -> pair[0])[1]\r\n\t\tlst = JSON.stringify (a for [a,b] in pairs)\r\n\t\tif TRACE then print 'bestPlay', res, lst\r\n\t\tres\r\n\r\n\tselect : -> # väljer en nod ur trädet\r\n\t\tnode = @root\r\n\t\twhile node.isFullyExpanded()\r\n\t\t\tplays = node.allPlays()\r\n\t\t\tpairs = ([node.children[play].getUCB1(), play] for play in plays)\r\n\t\t\tif pairs.length==0 then return null \r\n\t\t\tbestPlay = _.max(pairs, (pair) -> pair[0])[1]\r\n\t\t\tnode = node.children[bestPlay]\r\n\t\t\t# if TRACE then print 'selecting',JSON.stringify(node.board.moves), pairs\r\n\t\t# if TRACE then print 'selected',JSON.stringify node.board.moves\r\n\t\tnode\r\n \r\n\texpand : (node) -> \r\n\t\trandomNode = _.sample node.unexpandedPlays()  \r\n\t\t# if TRACE then print 'expand chooses',JSON.stringify randomNode\r\n\t\tnode.expand randomNode\r\n\r\n\tsimulate : (node) ->\r\n\t\tboard = node.board\r\n\t\twinner = board.winner()\r\n\t\twhile winner == null\r\n\t\t\tboard = board.nextBoard _.sample board.legalPlays()\r\n\t\t\twinner = board.winner()\r\n\t\t# if TRACE then print 'simulate',winner,\"#{JSON.stringify node.board.moves}\",board.board,board.moves\r\n\t\twinner\r\n\r\n\t# Anderson & Hesselberg 2016\r\n\tbackpropagate : (node, score) -> # score in [0, 0.5, 1]\r\n\t\twhile node != null\r\n\t\t\tnode.n++\r\n\t\t\tnode.t += [score,1-score][node.board.moves.length % 2]\r\n\t\t\tnode = node.parent\r\n\t"
  ]
}