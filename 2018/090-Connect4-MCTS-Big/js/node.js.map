{
  "version": 3,
  "file": "node.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\node.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,IAAA;;AAAM,AAAN;AACC,AAAc,gBAAA,GAAA,GAAA,QAAA;AAAA;;AACb;QAAA,GAAA,KAAA,MAAA;AADc,AAAC,SAAA;AAAE,AAAC,SAAA;AAAE,AAAC,SAAA;AAAO,AAAC,SAAA;AAC7B;AACA,AAAC,SAAA,AAAD,WAAY,AADZ,IAEA;;AAAA,SAAA,kCAAA;;AACC,UAAG,AAAC,KAAA,AAAK,MAAC,AAAM,MAAA,AAAK,MAAC,AAAnB,SAA4B,AAA/B;AACC,AAAC,aAAA,AAAS,SAAA,AAAV,QAAkB,AADnB;AADD;AAHa;AAOd,AAAS;;;;2BAAC,AAAD,MACR;UAAA,YAAA;AAAA,mBAAa,AAAC,KAAA,AAAK,MAAC,AAAP,UAAiB,AAAjB;AACb,kBAAY,IAAI,AAAJ,KAAS,AAAT,GAAW,AAAX,GAAa,AAAb,MAAe,AAAf;AACZ,AAAC,WAAA,AAAS,SAAA,AAAV,QAAkB;aAClB,AAJQ;AAMT,AAAW;;;+BAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;qBAAd,SAAS,AAAT,AAAc;AAAA;aAAlB;AACX,AAAkB;;;sCAAG;UAAA,OAAA,MAAA,KAAA,AAAe;iBAAA;;AAAA,WAAA,QAAA;;YAAiC,UAAS;uBAAxD,SAAS,AAAT;AAAc;AAAA;aAAlB;AAClB,AAAU;;;;aAAG,AAAC,KAAA,AAAD,IAAK,AAAC,KAAA,AAAN,IAAU,AAAI,KAAC,AAAL,KAAU,MAAM,AAAI,KAAC,AAAL,IAAS,AAAC,KAAA,AAAM,OAAC,AAAjB,AAAN,KAA4B,AAAC,KAAA,AAAvC,AAAb;AAEV,AAAkB;;;sCACjB;UAAA,OAAA,KAAA;;AAAA,WAAA,OAAA;;AACC,YAAG,UAAS,AAAZ,MAAsB;iBAAO,AAA7B;AADD;;aAEA,AAHiB;AAlBnB",
  "sourcesContent": [
    "class Node \r\n\tconstructor : (@t,@n,@parent,@board) -> # t=number of wins. n=number of games\r\n\t\tantal++\r\n\t\t@children = {} # of Nodes\r\n\t\tfor play in range N\r\n\t\t\tif @board.board[play].length < M\r\n\t\t\t\t@children[play] = null\r\n\r\n\texpand : (play) ->\r\n\t\tchildBoard = @board.nextBoard play\r\n\t\tchildNode = new Node 0,0,@,childBoard\r\n\t\t@children[play] = childNode\r\n\t\tchildNode\r\n\r\n\tallPlays : -> (parseInt play for play,child of @children)\r\n\tunexpandedPlays : -> (parseInt play for play,child of @children when child == null)\r\n\tgetUCB1 : -> @t / @n + Math.sqrt(UCB * Math.log(@parent.n) / @n)\r\n\r\n\tisFullyExpanded : ->\r\n\t\tfor key,child of @children \r\n\t\t\tif child == null then return false\r\n\t\ttrue\r\n"
  ]
}