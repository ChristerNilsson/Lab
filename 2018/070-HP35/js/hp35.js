'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var HP35,
    SPEED,
    TRACE,
    indexOf = [].indexOf;

TRACE = false;

SPEED = 1000; // 1=slow 1000=fast

HP35 = function () {
  function HP35() {
    _classCallCheck(this, HP35);

    this.rom = [0, 221, 2, 255, 2, 36, 0, 23, 1, 68, 2, 68, 0, 132, 1, 16, 2, 209, 3, 251, 0, 95, 0, 195, 1, 168, 3, 103, 2, 238, 3, 226, 0, 46, 0, 144, 3, 234, 3, 234, 3, 234, 0, 107, 2, 105, 0, 168, 2, 168, 0, 255, 3, 234, 3, 234, 3, 234, 0, 48, 0, 204, 0, 170, 1, 168, 0, 67, 1, 211, 0, 204, 0, 48, 0, 0, 0, 131, 1, 68, 0, 68, 0, 187, 2, 68, 0, 159, 2, 132, 3, 11, 0, 46, 0, 144, 3, 40, 3, 111, 3, 234, 3, 234, 3, 234, 0, 75, 2, 103, 3, 168, 1, 113, 3, 119, 3, 203, 2, 206, 0, 196, 1, 219, 1, 40, 0, 52, 2, 206, 3, 117, 1, 46, 2, 250, 1, 22, 3, 106, 3, 131, 1, 186, 3, 155, 3, 54, 3, 76, 3, 155, 0, 28, 1, 234, 0, 2, 1, 51, 2, 196, 2, 214, 3, 166, 1, 20, 2, 31, 1, 125, 3, 119, 0, 210, 1, 114, 0, 218, 3, 138, 1, 119, 0, 206, 0, 52, 1, 142, 3, 12, 1, 42, 1, 138, 1, 186, 1, 163, 0, 170, 1, 122, 1, 95, 1, 76, 3, 170, 1, 20, 1, 11, 3, 42, 0, 42, 3, 221, 1, 10, 2, 206, 3, 44, 2, 39, 3, 178, 1, 235, 2, 209, 0, 144, 1, 20, 3, 219, 3, 178, 0, 250, 1, 142, 1, 186, 1, 255, 0, 218, 0, 170, 3, 76, 1, 22, 1, 106, 2, 126, 1, 59, 2, 118, 2, 3, 0, 202, 3, 221, 2, 214, 1, 158, 3, 44, 2, 79, 0, 142, 1, 238, 0, 76, 1, 18, 0, 60, 1, 162, 2, 63, 3, 174, 0, 236, 3, 231, 0, 202, 1, 132, 1, 235, 0, 254, 1, 168, 0, 46, 3, 250, 3, 250, 1, 250, 1, 250, 0, 74, 2, 143, 3, 174, 3, 166, 1, 166, 2, 159, 3, 174, 2, 38, 0, 74, 2, 251, 2, 142, 3, 234, 0, 14, 2, 251, 2, 163, 2, 246, 0, 212, 2, 211, 3, 126, 0, 254, 1, 212, 2, 223, 1, 40, 1, 196, 0, 206, 1, 110, 0, 190, 1, 254, 2, 46, 0, 48, 0, 144, 1, 113, 1, 68, 3, 119, 2, 206, 1, 158, 2, 36, 3, 63, 1, 250, 2, 4, 1, 84, 3, 55, 1, 234, 3, 27, 0, 40, 0, 20, 3, 31, 0, 36, 0, 28, 3, 44, 3, 67, 2, 40, 2, 20, 3, 51, 1, 14, 1, 100, 0, 208, 1, 40, 3, 174, 1, 117, 1, 196, 3, 221, 2, 189, 2, 43, 2, 214, 0, 28, 0, 172, 1, 23, 3, 12, 2, 238, 2, 246, 3, 226, 3, 226, 0, 140, 0, 60, 3, 98, 3, 191, 0, 2, 3, 171, 3, 226, 3, 46, 0, 48, 1, 4, 2, 212, 0, 115, 1, 191, 0, 254, 2, 164, 3, 15, 1, 148, 3, 243, 0, 28, 2, 146, 1, 233, 2, 168, 3, 111, 3, 207, 3, 46, 0, 161, 1, 168, 0, 161, 1, 168, 2, 84, 0, 39, 3, 174, 1, 84, 0, 75, 0, 222, 2, 153, 1, 40, 2, 149, 2, 97, 0, 149, 1, 168, 2, 153, 2, 148, 3, 107, 2, 238, 3, 226, 1, 38, 3, 166, 1, 106, 2, 146, 1, 186, 0, 103, 2, 210, 1, 234, 0, 119, 2, 206, 2, 142, 1, 40, 2, 46, 1, 7, 2, 46, 1, 12, 3, 123, 1, 40, 3, 174, 1, 162, 0, 183, 0, 174, 1, 142, 0, 138, 3, 47, 1, 142, 0, 84, 0, 151, 2, 148, 1, 183, 1, 84, 0, 87, 0, 254, 3, 190, 0, 55, 2, 146, 3, 126, 0, 235, 1, 254, 3, 50, 1, 210, 3, 46, 1, 46, 3, 82, 0, 239, 1, 168, 2, 206, 3, 178, 3, 46, 1, 18, 1, 40, 3, 254, 3, 254, 0, 143, 0, 206, 0, 42, 2, 214, 2, 201, 1, 98, 1, 168, 3, 174, 1, 12, 2, 145, 1, 140, 2, 109, 2, 12, 2, 109, 0, 140, 2, 24, 2, 140, 2, 109, 2, 57, 2, 109, 3, 49, 1, 14, 2, 109, 0, 142, 3, 45, 3, 49, 2, 174, 2, 153, 2, 84, 1, 179, 0, 254, 2, 97, 0, 100, 0, 206, 1, 98, 1, 234, 0, 84, 2, 151, 2, 153, 3, 49, 2, 174, 2, 149, 3, 49, 2, 174, 2, 174, 2, 85, 2, 174, 3, 173, 3, 49, 2, 140, 2, 113, 2, 57, 2, 12, 2, 117, 0, 140, 2, 24, 1, 140, 2, 113, 1, 12, 2, 113, 2, 113, 3, 46, 2, 78, 3, 76, 1, 88, 3, 239, 1, 140, 2, 24, 1, 152, 1, 88, 0, 152, 1, 24, 2, 88, 0, 84, 3, 107, 0, 48, 2, 238, 3, 226, 0, 16, 1, 16, 1, 14, 2, 150, 2, 46, 2, 135, 1, 254, 3, 14, 2, 131, 3, 142, 1, 16, 1, 16, 1, 74, 1, 16, 1, 226, 3, 78, 2, 163, 3, 206, 1, 14, 0, 28, 2, 82, 0, 44, 2, 167, 0, 183, 1, 226, 3, 22, 2, 203, 3, 150, 1, 22, 0, 28, 0, 44, 2, 207, 0, 183, 0, 28, 3, 150, 3, 111, 0, 16, 1, 122, 1, 122, 2, 234, 3, 94, 2, 126, 3, 27, 1, 16, 2, 6, 3, 43, 0, 254, 3, 46, 3, 14, 1, 16, 0, 206, 2, 204, 1, 216, 2, 24, 1, 88, 0, 216, 2, 88, 2, 24, 0, 88, 1, 152, 0, 216, 1, 88, 3, 12, 0, 48, 0, 16, 3, 138, 3, 123, 1, 98, 1, 254, 0, 44, 2, 239, 3, 170, 2, 234, 0, 98, 3, 155, 2, 206, 2, 78, 2, 42, 0, 202, 3, 12, 2, 187, 1, 16, 2, 146, 2, 146, 1, 126, 3, 179, 1, 210, 3, 18, 2, 50, 0, 142, 3, 126, 3, 187, 3, 178, 1, 168, 0, 30, 0, 7, 1, 14, 3, 178, 1, 40, 2, 146, 1, 126, 2, 62, 0, 16, 3, 62, 3, 254, 2, 86, 1, 18, 0, 75, 1, 168, 2, 153, 1, 142, 2, 20, 1, 11, 2, 238, 3, 70, 0, 3, 2, 206, 1, 126, 0, 3, 1, 254, 1, 46, 2, 89, 3, 98, 0, 71, 3, 50, 3, 158, 0, 7, 1, 204, 1, 181, 2, 12, 2, 117, 2, 76, 2, 113, 3, 249, 2, 140, 2, 113, 1, 245, 2, 204, 2, 113, 3, 125, 2, 113, 2, 229, 2, 113, 3, 217, 3, 174, 1, 78, 0, 26, 0, 191, 1, 78, 3, 46, 0, 28, 1, 14, 0, 108, 0, 195, 3, 174, 1, 190, 0, 227, 0, 230, 1, 234, 2, 204, 3, 21, 2, 84, 0, 27, 1, 84, 2, 83, 3, 217, 2, 157, 2, 83, 3, 217, 3, 177, 2, 229, 2, 204, 2, 109, 3, 125, 2, 140, 2, 109, 1, 245, 2, 76, 2, 109, 3, 249, 2, 12, 2, 109, 2, 109, 2, 109, 1, 140, 2, 242, 3, 76, 2, 46, 3, 174, 1, 152, 2, 59, 0, 148, 1, 123, 3, 234, 2, 122, 3, 11, 3, 22, 1, 103, 3, 150, 1, 14, 1, 106, 1, 115, 2, 206, 0, 210, 3, 170, 1, 190, 1, 179, 3, 46, 3, 14, 0, 238, 2, 206, 2, 46, 0, 206, 1, 102, 0, 148, 1, 219, 1, 24, 1, 230, 1, 231, 1, 152, 0, 108, 1, 215, 2, 78, 2, 78, 0, 148, 2, 83, 0, 48, 1, 204, 0, 216, 0, 216, 0, 24, 2, 24, 1, 88, 0, 24, 2, 88, 3, 171, 2, 89, 3, 226, 1, 46, 1, 126, 2, 27, 2, 210, 3, 174, 1, 22, 3, 174, 3, 126, 2, 35, 3, 46, 3, 226, 3, 49, 0, 144, 2, 210, 3, 126, 2, 87, 2, 254, 3, 142, 0, 48, 0, 144, 2, 206, 2, 46, 2, 131, 3, 142, 1, 126, 2, 127, 3, 174, 1, 22, 3, 174, 1, 183, 0, 204, 1, 202, 1, 94, 2, 175, 0, 190, 3, 38, 2, 238, 3, 44, 3, 23, 0, 102, 2, 219, 0, 84, 0, 3, 0, 146, 3, 102, 1, 250, 2, 50, 3, 166, 0, 144, 2, 36, 1, 152, 2, 88, 0, 216, 0, 88, 1, 24, 1, 216, 0, 88, 3, 155, 3, 230, 1, 147, 3, 142, 1, 98, 3, 19, 2, 206, 0, 60, 3, 108, 3, 23, 1, 234, 2, 254, 3, 12, 0, 46, 2, 98, 3, 91, 1, 14, 1, 106, 2, 110, 3, 63, 0, 206, 1, 42, 3, 142, 2, 126, 3, 31, 3, 166, 1, 142, 0, 46, 3, 12, 1, 235, 2, 76, 0, 216, 0, 88, 0, 24, 0, 88, 1, 216, 2, 88, 2, 24, 0, 24, 1, 88, 1, 88, 0, 216, 3, 119, 3, 174, 1, 46, 1, 134, 2, 186, 1, 123, 1, 250, 2, 206, 1, 234, 3, 203, 1, 159, 0, 206, 3, 12, 0, 152, 0, 216, 0, 24, 0, 152, 1, 88, 2, 7, 1, 76, 1, 251];
    this.asm = asm.split("\n");
    // register
    this.a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.c = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.d = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.e = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.f = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 // 12 bit Status
    ];
    this.p = 0;
    this.offset = 0; // bank
    this.pc = 0; // program counter
    this.first = -1; // first digit
    this.last = -1; // last digit
    this.fetch_h = -1;
    this.fetch_l = -1;
    this.op_code = 0;
    this.key_code = 255;
    this.display_enable = true;
    this.update_display = true;
    this.carry = 0;
    this.prevCarry = 0;
    this.ret = 0;
    this.zero = 0; // alltid 0
    this.word_select = 0;
    this.key_rom = 0;
    this.error = 0;
  }

  _createClass(HP35, [{
    key: 'compact',
    value: function compact(lst) {
      var n, res;
      n = lst.length;
      if (n === 16) {
        n = 14;
      }
      res = lst.slice(0, n);
      res.reverse();
      return res.join('');
    }
  }, {
    key: 'decorate',
    value: function decorate(trace, data) {
      if (TRACE) {
        return print(trace.padEnd(40) + ' ' + data);
      }
    }
  }, {
    key: 'singleStep',
    value: function singleStep() {
      var cmd, constant, data, i, i1, i2, instr, j, j1, j2, k, k1, k2, l, l1, l2, lbl, len, len1, len10, len11, len12, len13, len14, len15, len16, len17, len18, len19, len2, len20, len21, len22, len23, len24, len25, len26, len27, len28, len29, len3, len30, len31, len32, len33, len34, len35, len36, len37, len38, len4, len5, len6, len7, len8, len9, m, m1, m2, n1, n2, o, o1, o2, p, p1, q, q1, r, r1, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref36, ref37, ref38, ref39, ref4, ref5, ref6, ref7, ref8, ref9, s, s1, t, t1, trace, u, u1, v, v1, w, w1, x1, y1, z, z1;
      data = '';
      this.prevCarry = this.carry;
      this.carry = 0;
      this.fetch_h = this.rom[this.offset * 256 * 2 + this.pc * 2 + 0];
      this.fetch_l = this.rom[this.offset * 256 * 2 + this.pc * 2 + 1];
      instr = this.asm[this.offset * 256 + this.pc];
      if (indexOf.call(instr, ':') >= 0) {
        var _instr$split = instr.split(':');

        var _instr$split2 = _slicedToArray(_instr$split, 2);

        lbl = _instr$split2[0];
        cmd = _instr$split2[1];

        lbl = (lbl + ':').padEnd(8);
        cmd = cmd.trim();
      } else {
        var _ref = ['        ', instr.trim()];
        lbl = _ref[0];
        cmd = _ref[1];
      }
      if (cmd.startsWith('then ')) {
        cmd = '  ' + cmd;
      }
      instr = lbl + cmd;
      trace = this.offset + ':' + str(this.pc).padStart(3, '0') + ' ' + instr;
      if (this.pc === 191 & this.offset === 0) {
        this.error = 1;
      }
      this.pc++;
      this.pc %= 256;
      if (this.key_code < 255) {
        this.error = 0;
        this.key_rom = this.key_code;
        this.key_code = 255;
        this.s[0] = 1;
      }
      if ((this.fetch_l & 0x03) === 0x01) {
        // Jump subroutine
        this.ret = this.pc;
        this.pc = this.fetch_l >> 2 & 0x3f | this.fetch_h << 6 & 0x0c0;
        data = 'PC=' + this.pc;
      }
      if ((this.fetch_l & 0x7F) === 0x030) {
        this.pc = this.ret;
      }
      if ((this.fetch_l & 0x7F) === 0x010) {
        this.offset = this.fetch_h << 1 & 6 | this.fetch_l >> 7 & 1;
      }
      if (this.fetch_l === 0x0D0) {
        this.pc = this.key_rom;
        this.s[0] = 0;
        data = 'PC=' + this.pc;
      }
      if (keyboard.available()) {
        this.key_code = keyboard.read();
      }

      // *********************************************************
      if ((this.fetch_l & 0x03f) === 0x014) {
        this.carry = this.s[(this.fetch_h & 0x03) << 2 | (this.fetch_l & 0x0c0) >> 6];
        data = 'S=' + this.compact(this.s);
      }
      if ((this.fetch_l & 0x03f) === 0x004) {
        this.s[(this.fetch_h & 0x03) << 2 | (this.fetch_l & 0x0c0) >> 6] = 1;
        data = 'S=' + this.compact(this.s);
      }
      if ((this.fetch_l & 0x03f) === 0x024) {
        this.s[(this.fetch_h & 0x03) << 2 | (this.fetch_l & 0x0c0) >> 6] = 0;
        data = 'S=' + this.compact(this.s);
      }
      if ((this.fetch_l & 0x03f) === 0x034) {
        ref = range(12);
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          this.s[i] = 0;
        }
        data = 'S=' + this.compact(this.s);
      }
      //*********************************************************
      if ((this.fetch_l & 0x03f) === 0x02C) {
        this.carry = 0;
        if (this.p === ((this.fetch_h & 0x03) << 2 | (this.fetch_l & 0x0c0) >> 6)) {
          this.carry = 1;
        }
        data = 'P=' + this.p;
      }
      if ((this.fetch_l & 0x03f) === 0x00C) {
        this.p = (this.fetch_h & 0x03) << 2 | (this.fetch_l & 0x0c0) >> 6;
        data = 'P=' + this.p;
      }
      if ((this.fetch_l & 0x03f) === 0x03C) {
        this.p = this.p + 1 & 0x0f;
        data = 'P=' + this.p;
      }
      if ((this.fetch_l & 0x03f) === 0x01C) {
        this.p = this.p - 1 & 0x0f;
        data = 'P=' + this.p;
      }
      //********************************* math operation
      if ((this.fetch_l & 0x3F) === 0x18) {
        // load constant
        constant = this.fetch_l >> 6 | this.fetch_h << 2;
        this.c[this.p] = constant;
        this.p = this.p - 1 & 0x0f;
        data = 'C=' + this.compact(this.c) + '  P=' + this.p;
      }
      if ((this.fetch_h & 0x03) === 0x00 && (this.fetch_l & 0x0ef) === 0x0A8) {
        // print 'exch_m'
        ref1 = range(WSIZE);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          i = ref1[k];
          var _ref2 = [this.m[i], this.c[i]];
          this.c[i] = _ref2[0];
          this.m[i] = _ref2[1];
        }
        data = 'C=' + this.compact(this.c) + ' M=' + this.compact(this.m);
      }
      if ((this.fetch_h & 0x03) === 0x01 && (this.fetch_l & 0x0ef) === 0x028) {
        // print 'c_to_stack'
        ref2 = range(WSIZE);
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          i = ref2[l];
          var _ref3 = [this.e[i], this.d[i], this.c[i]];
          this.f[i] = _ref3[0];
          this.e[i] = _ref3[1];
          this.d[i] = _ref3[2];
        }
        data = 'F=' + this.compact(this.f) + ' E=' + this.compact(this.e) + ' D=' + this.compact(this.d);
      }
      if ((this.fetch_h & 0x03) === 0x01 && (this.fetch_l & 0x0ef) === 0x0A8) {
        // print 'stack_to_a'   
        ref3 = range(WSIZE);
        for (m = 0, len3 = ref3.length; m < len3; m++) {
          i = ref3[m];
          var _ref4 = [this.d[i], this.e[i], this.f[i]];
          this.a[i] = _ref4[0];
          this.d[i] = _ref4[1];
          this.e[i] = _ref4[2];
        }
        data = 'A=' + this.compact(this.a) + ' D=' + this.compact(this.d) + ' E=' + this.compact(this.e);
      }
      if ((this.fetch_h & 0x03) === 0x02 && (this.fetch_l & 0x0ef) === 0x0A8) {
        // print 'm_to_c'    
        ref4 = range(WSIZE);
        for (o = 0, len4 = ref4.length; o < len4; o++) {
          i = ref4[o];
          this.c[i] = this.m[i];
        }
        data = 'C=' + this.compact(this.c);
      }
      if ((this.fetch_h & 0x03) === 0x03 && (this.fetch_l & 0x0ef) === 0x028) {
        // print 'down_rotate'    
        ref5 = range(WSIZE);
        for (p = 0, len5 = ref5.length; p < len5; p++) {
          i = ref5[p];
          var _ref5 = [this.d[i], this.e[i], this.f[i], this.c[i]];
          this.c[i] = _ref5[0];
          this.d[i] = _ref5[1];
          this.e[i] = _ref5[2];
          this.f[i] = _ref5[3];
        }
        data = 'C=' + this.compact(this.c) + ' D=' + this.compact(this.d) + ' E=' + this.compact(this.e) + ' F=' + this.compact(this.f);
      }
      if ((this.fetch_h & 0x03) === 0x03 && (this.fetch_l & 0x0ef) === 0x0A8) {
        // print 'clear_reg'  
        ref6 = range(WSIZE);
        for (q = 0, len6 = ref6.length; q < len6; q++) {
          i = ref6[q];
          this.a[i] = this.b[i] = this.c[i] = this.d[i] = this.e[i] = this.f[i] = this.m[i] = 0;
        }
      }
      if ((this.fetch_h & 0x03) === 0x00 && (this.fetch_l & 0x0ef) === 0x028) {
        this.display_enable = false;
        this.update_display = false;
      }
      if ((this.fetch_h & 0x03) === 0x02 && (this.fetch_l & 0x0ef) === 0x028) {
        // print 'display toggle'
        this.display_enable = !this.display_enable;
        if (this.display_enable) {
          this.update_display = true;
        }
      }
      if ((this.fetch_l & 0x03) === 0x03) {
        // print "Cond Branch: ",@pc
        if (this.prevCarry !== 1) {
          this.pc = (this.fetch_l & 0x0fc) >> 2 | (this.fetch_h & 0x03) << 6;
        }
        data = 'PC=' + this.pc;
      }
      if ((this.fetch_l & 0x03) === 0x02) {
        // A&R
        this.word_select = this.fetch_l >> 2 & 0x07;
        this.op_code = this.fetch_l >> 5 & 0x07;
        this.op_code = this.op_code | this.fetch_h << 3 & 0x018;
        this.get_f_l(this.word_select);
        if (this.op_code === 0x0) {
          // 0 + B
          this.carry = 0;
          ref7 = range(this.first, this.last + 1);
          for (r = 0, len7 = ref7.length; r < len7; r++) {
            i = ref7[r];
            this.carry |= this.b[i] !== 0 ? 1 : 0;
          }
          data = 'Carry=' + this.carry;
        }
        if (this.op_code === 0x01) {
          // 0 -> B
          ref8 = range(this.first, this.last + 1);
          for (s = 0, len8 = ref8.length; s < len8; s++) {
            i = ref8[s];
            this.b[i] = 0;
          }
          this.carry = 0;
          data = 'B=' + this.compact(this.b);
        }
        if (this.op_code === 0x02) {
          // A-C
          this.carry = 0;
          ref9 = range(this.first, this.last + 1);
          for (t = 0, len9 = ref9.length; t < len9; t++) {
            i = ref9[t];
            this.t[i] = this.do_sub(this.a[i], this.c[i]);
          }
          data = 'T=' + this.compact(this.t);
        }
        if (this.op_code === 0x03) {
          // C-1
          this.carry = 1;
          ref10 = range(this.first, this.last + 1);
          for (u = 0, len10 = ref10.length; u < len10; u++) {
            i = ref10[u];
            this.carry &= this.c[i] === 0 ? 1 : 0;
          }
          data = 'Carry=' + this.carry;
        }
        if (this.op_code === 0x04) {
          // B->C
          ref11 = range(this.first, this.last + 1);
          for (v = 0, len11 = ref11.length; v < len11; v++) {
            i = ref11[v];
            this.c[i] = this.b[i];
          }
          this.carry = 0;
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x05) {
          // 0-C -> C
          this.carry = 0;
          ref12 = range(this.first, this.last + 1);
          for (w = 0, len12 = ref12.length; w < len12; w++) {
            i = ref12[w];
            this.c[i] = this.do_sub(this.zero, this.c[i]);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x06) {
          // 0 -> C
          ref13 = range(this.first, this.last + 1);
          for (z = 0, len13 = ref13.length; z < len13; z++) {
            i = ref13[z];
            this.c[i] = 0;
          }
          this.carry = 0;
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x07) {
          // 0-C-1 -> C
          this.carry = 1;
          ref14 = range(this.first, this.last + 1);
          for (i1 = 0, len14 = ref14.length; i1 < len14; i1++) {
            i = ref14[i1];
            this.c[i] = this.do_sub(this.zero, this.c[i]);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x08) {
          // Shift A Left
          ref15 = range(this.last, this.first - 1, -1);
          for (j1 = 0, len15 = ref15.length; j1 < len15; j1++) {
            i = ref15[j1];
            this.a[i] = i === this.first ? 0 : this.a[i - 1];
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a);
        }
        if (this.op_code === 0x09) {
          // A -> B
          ref16 = range(this.first, this.last + 1);
          for (k1 = 0, len16 = ref16.length; k1 < len16; k1++) {
            i = ref16[k1];
            this.b[i] = this.a[i];
          }
          this.carry = 0;
          data = 'B=' + this.compact(this.b);
        }
        if (this.op_code === 0x0a) {
          // A-C -> C
          this.carry = 0;
          ref17 = range(this.first, this.last + 1);
          for (l1 = 0, len17 = ref17.length; l1 < len17; l1++) {
            i = ref17[l1];
            this.c[i] = this.do_sub(this.a[i], this.c[i]);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x0b) {
          // C-1 -> C
          this.carry = 1;
          ref18 = range(this.first, this.last + 1);
          for (m1 = 0, len18 = ref18.length; m1 < len18; m1++) {
            i = ref18[m1];
            this.c[i] = this.do_sub(this.c[i], this.zero);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x0c) {
          // C -> A
          ref19 = range(this.first, this.last + 1);
          for (n1 = 0, len19 = ref19.length; n1 < len19; n1++) {
            i = ref19[n1];
            this.a[i] = this.c[i];
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a);
        }
        if (this.op_code === 0x0d) {
          // 0-C 
          ref20 = range(this.first, this.last + 1);
          for (o1 = 0, len20 = ref20.length; o1 < len20; o1++) {
            i = ref20[o1];
            this.carry |= this.c[i] !== 0 ? 1 : 0;
          }
          data = 'Carry=' + this.carry;
        }
        if (this.op_code === 0x0e) {
          // A+C -> C
          this.carry = 0;
          ref21 = range(this.first, this.last + 1);
          for (p1 = 0, len21 = ref21.length; p1 < len21; p1++) {
            i = ref21[p1];
            this.c[i] = this.do_add(this.a[i], this.c[i]);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x0f) {
          // C+1 -> C
          this.carry = 1;
          ref22 = range(this.first, this.last + 1);
          for (q1 = 0, len22 = ref22.length; q1 < len22; q1++) {
            i = ref22[q1];
            this.c[i] = this.do_add(this.c[i], this.zero);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x010) {
          // A-B
          ref23 = range(this.first, this.last + 1);
          for (r1 = 0, len23 = ref23.length; r1 < len23; r1++) {
            i = ref23[r1];
            this.t[i] = this.do_sub(this.a[i], this.b[i]);
          }
          data = 'T=' + this.compact(this.t);
        }
        if (this.op_code === 0x011) {
          // B <-> C
          ref24 = range(this.first, this.last + 1);
          for (s1 = 0, len24 = ref24.length; s1 < len24; s1++) {
            i = ref24[s1];
            var _ref6 = [this.c[i], this.b[i]];
            this.b[i] = _ref6[0];
            this.c[i] = _ref6[1];
          }
          this.carry = 0;
          data = 'B=' + this.compact(this.b) + ' C=' + this.compact(this.c);
        }
        if (this.op_code === 0x012) {
          // Shift C Right
          ref25 = range(this.first, this.last + 1);
          for (t1 = 0, len25 = ref25.length; t1 < len25; t1++) {
            i = ref25[t1];
            this.c[i] = i === this.last ? 0 : this.c[i + 1];
          }
          this.carry = 0;
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x013) {
          // A-1
          this.carry = 1;
          ref26 = range(this.first, this.last + 1);
          for (u1 = 0, len26 = ref26.length; u1 < len26; u1++) {
            i = ref26[u1];
            this.carry &= this.a[i] === 0 ? 1 : 0;
          }
          data = 'Carry=' + this.carry;
        }
        if (this.op_code === 0x014) {
          // Shift B Right
          ref27 = range(this.first, this.last + 1);
          for (v1 = 0, len27 = ref27.length; v1 < len27; v1++) {
            i = ref27[v1];
            this.b[i] = i === this.last ? 0 : this.b[i + 1];
          }
          this.carry = 0;
          data = 'B=' + this.compact(this.b);
        }
        if (this.op_code === 0x015) {
          // C+C -> C
          this.carry = 0;
          ref28 = range(this.first, this.last + 1);
          for (w1 = 0, len28 = ref28.length; w1 < len28; w1++) {
            i = ref28[w1];
            this.c[i] = this.do_add(this.c[i], this.c[i]);
          }
          data = 'C=' + this.compact(this.c);
        }
        if (this.op_code === 0x016) {
          // Shift A Right
          ref29 = range(this.first, this.last + 1);
          for (x1 = 0, len29 = ref29.length; x1 < len29; x1++) {
            i = ref29[x1];
            this.a[i] = i === this.last ? 0 : this.a[i + 1];
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a);
        }
        if (this.op_code === 0x017) {
          // 0 -> A
          ref30 = range(this.first, this.last + 1);
          for (y1 = 0, len30 = ref30.length; y1 < len30; y1++) {
            i = ref30[y1];
            this.a[i] = 0;
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a);
        }
        if (this.op_code === 0x018) {
          // A-B -> A
          this.carry = 0;
          ref31 = range(this.first, this.last + 1);
          for (z1 = 0, len31 = ref31.length; z1 < len31; z1++) {
            i = ref31[z1];
            this.a[i] = this.do_sub(this.a[i], this.b[i]);
          }
          data = 'A=' + this.compact(this.a) + ' B=' + this.compact(this.b);
        }
        if (this.op_code === 0x019) {
          // A <-> B
          ref32 = range(this.first, this.last + 1);
          for (i2 = 0, len32 = ref32.length; i2 < len32; i2++) {
            i = ref32[i2];
            var _ref7 = [this.b[i], this.a[i]];
            this.a[i] = _ref7[0];
            this.b[i] = _ref7[1];
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a) + ' B=' + this.compact(this.b);
        }
        if (this.op_code === 0x01a) {
          // A-C -> A
          this.carry = 0;
          ref33 = range(this.first, this.last + 1);
          for (j2 = 0, len33 = ref33.length; j2 < len33; j2++) {
            i = ref33[j2];
            this.a[i] = this.do_sub(this.a[i], this.c[i]);
          }
          data = 'A=' + this.compact(this.a) + ' C=' + this.compact(this.c);
        }
        if (this.op_code === 0x01b) {
          // A-1 -> A
          this.carry = 1;
          ref34 = range(this.first, this.last + 1);
          for (k2 = 0, len34 = ref34.length; k2 < len34; k2++) {
            i = ref34[k2];
            this.a[i] = this.do_sub(this.a[i], this.zero);
          }
          data = 'A=' + this.compact(this.a);
        }
        if (this.op_code === 0x01c) {
          // A+B -> A
          this.carry = 0;
          ref35 = range(this.first, this.last + 1);
          for (l2 = 0, len35 = ref35.length; l2 < len35; l2++) {
            i = ref35[l2];
            this.a[i] = this.do_add(this.a[i], this.b[i]);
          }
          data = 'A=' + this.compact(this.a) + ' B=' + this.compact(this.b);
        }
        if (this.op_code === 0x01d) {
          // C <-> A
          ref36 = range(this.first, this.last + 1);
          for (m2 = 0, len36 = ref36.length; m2 < len36; m2++) {
            i = ref36[m2];
            var _ref8 = [this.c[i], this.a[i]];
            this.a[i] = _ref8[0];
            this.c[i] = _ref8[1];
          }
          this.carry = 0;
          data = 'A=' + this.compact(this.a) + ' C=' + this.compact(this.c);
        }
        if (this.op_code === 0x01e) {
          // A+C -> A
          this.carry = 0;
          ref37 = range(this.first, this.last + 1);
          for (n2 = 0, len37 = ref37.length; n2 < len37; n2++) {
            i = ref37[n2];
            this.a[i] = this.do_add(this.a[i], this.c[i]);
          }
          data = 'A=' + this.compact(this.a) + ' C=' + this.compact(this.c);
        }
        if (this.op_code === 0x01f) {
          // A+1 -> A
          this.carry = 1;
          ref38 = range(this.first, this.last + 1);
          for (o2 = 0, len38 = ref38.length; o2 < len38; o2++) {
            i = ref38[o2];
            this.a[i] = this.do_add(this.a[i], this.zero);
          }
          data = 'A=' + this.compact(this.a);
        }
        //**************************************************************************
        if (this.display_enable) {
          this.update_display = true;
        }
        // if !@display_enable
        // 	if @update_display then lcd.update()
        // 	@update_display = false
        lcd.update();
      }
      if (ref39 = this.offset + ':' + this.pc, indexOf.call("0:199 0:200 0:201 0:205 0:206".split(' '), ref39) < 0) {
        // the display loop
        return this.decorate(trace, data);
      }
    }
  }, {
    key: 'get_f_l',
    value: function get_f_l(ws) {
      if (this.word_select === 0) {
        var _ref9 = [this.p, this.p];
        this.first = _ref9[0];
        this.last = _ref9[1];
      }
      if (this.word_select === 1) {
        var _ref10 = [3, 12];
        this.first = _ref10[0];
        this.last = _ref10[1];
      }
      if (this.word_select === 2) {
        var _ref11 = [0, 2];
        this.first = _ref11[0];
        this.last = _ref11[1];
      }
      if (this.word_select === 3) {
        var _ref12 = [0, 13];
        this.first = _ref12[0];
        this.last = _ref12[1];
      }
      if (this.word_select === 4) {
        var _ref13 = [0, this.p];
        this.first = _ref13[0];
        this.last = _ref13[1];
      }
      if (this.word_select === 5) {
        var _ref14 = [3, 13];
        this.first = _ref14[0];
        this.last = _ref14[1];
      }
      if (this.word_select === 6) {
        var _ref15 = [2, 2];
        this.first = _ref15[0];
        this.last = _ref15[1];
      }
      if (this.word_select === 7) {
        var _ref16;

        return _ref16 = [13, 13], this.first = _ref16[0], this.last = _ref16[1], _ref16;
      }
    }
  }, {
    key: 'do_add',
    value: function do_add(x, y) {
      this.res = x + y + this.carry;
      if (this.res > 9) {
        this.res -= 10;
        this.carry = 1;
      } else {
        this.carry = 0;
      }
      return this.res;
    }
  }, {
    key: 'do_sub',
    value: function do_sub(x, y) {
      this.res = x - y - this.carry;
      if (this.res < 0) {
        this.res += 10;
        this.carry = 1;
      } else {
        this.carry = 0;
      }
      return this.res;
    }
  }]);

  return HP35;
}();
//# sourceMappingURL=hp35.js.map
