"use strict";

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, Enemy, Market, Node, Person, Place, buttons, display, messages, mousePressed, nodes, p, page, person, randint, setup;

nodes = {};

person = null;

page = 'Town';

buttons = [];

messages = [];

randint = function randint(a, b) {
  return int(a + random(b - a));
};

p = function p(s) {
  return messages.push(s);
};

Button = function () {
  function Button(command1, x, y, w, h) {
    _classCallCheck(this, Button);

    this.command = command1;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  _createClass(Button, [{
    key: "inside",
    value: function inside(mx, my) {
      var ref, ref1;
      return this.x < (ref = mx + this.w / 2) && ref < this.x + this.w && this.y < (ref1 = my + this.h / 2) && ref1 < this.y + this.h;
    }
  }, {
    key: "show",
    value: function show() {
      rect(this.x, this.y, this.w, this.h);
      return text(this.command, this.x, this.y);
    }
  }]);

  return Button;
}();

Node = function () {
  function Node(name1, commands1) {
    _classCallCheck(this, Node);

    this.name = name1;
    this.commands = commands1;
  }

  _createClass(Node, [{
    key: "buy",
    value: function buy(name, p1, p2) {}
  }, {
    key: "enter",
    value: function enter() {}
  }, {
    key: "execute",
    value: function execute(command) {
      page = command;
      return nodes[page].enter();
    }
  }]);

  return Node;
}();

Person = function Person() {
  var health = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var sword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var coins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var points = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var ax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

  _classCallCheck(this, Person);

  this.health = health;
  this.sword = sword;
  this.coins = coins;
  this.points = points;
  this.ax = ax;
};

Enemy = function () {
  function Enemy() {
    _classCallCheck(this, Enemy);

    this.name = _.sample(["Giant Spider", "Zombie", "Ghost", "Pizza Rat"]);
    this.punch = randint(1, 9);
    this.kick = 10 - this.punch;
    this.health = randint(20, 40) + person.points * 0.1;
  }

  _createClass(Enemy, [{
    key: "attack",
    value: function attack() {
      var hit;
      if (this.health > 0) {
        hit = randint(1, 3) + randint(1, 3);
        p("The " + this.name + " attacks You!");
        person.health -= hit;
        return person.points += hit;
      } else {
        p('You have defeated the {@name}!');
        person.points += 10;
        return person.coins += randint(25, 50);
      }
    }
  }]);

  return Enemy;
}();

Market = function (_Node) {
  _inherits(Market, _Node);

  function Market() {
    _classCallCheck(this, Market);

    return _possibleConstructorReturn(this, (Market.__proto__ || Object.getPrototypeOf(Market)).apply(this, arguments));
  }

  _createClass(Market, [{
    key: "buy",
    value: function buy(name, p1, p2) {
      if (person.coins >= p1) {
        person.coins -= p1;
        return person[name] += p2;
      } else {
        return p("You cant afford a " + name);
      }
    }
  }, {
    key: "execute",
    value: function execute(command) {
      if (command === 'Medicine') {
        return this.buy('health', 10, 10);
      } else if (command === 'Sword') {
        return this.buy('sword', 50, 1);
      } else if (command === 'Ax') {
        return this.buy('ax', 100, 1);
      } else {
        return _get(Market.prototype.__proto__ || Object.getPrototypeOf(Market.prototype), "execute", this).call(this, command);
      }
    }
  }]);

  return Market;
}(Node);

Place = function (_Node2) {
  _inherits(Place, _Node2);

  function Place() {
    _classCallCheck(this, Place);

    return _possibleConstructorReturn(this, (Place.__proto__ || Object.getPrototypeOf(Place)).apply(this, arguments));
  }

  _createClass(Place, [{
    key: "execute",
    value: function execute(command) {
      if (command === 'Punch') {
        return this.punch();
      } else if (command === 'Kick') {
        return this.kick();
      } else if (command === 'Slash') {
        return this.slash();
      } else if (command === 'Ax') {
        return this.ax();
      } else {
        return _get(Place.prototype.__proto__ || Object.getPrototypeOf(Place.prototype), "execute", this).call(this, command);
      }
    }
  }, {
    key: "enter",
    value: function enter() {
      if (0 === randint(0, 1)) {
        this.enemy = new Enemy();
        return p("There is an " + this.enemy.name + " here");
      } else {
        this.enemy = null;
        return p('There is nothing here');
      }
    }
  }, {
    key: "punch",
    value: function punch() {
      if (this.enemy != null) {
        return this.attack('punch', 8, this.enemy.punch + randint(1, 6));
      }
    }
  }, {
    key: "kick",
    value: function kick() {
      if (this.enemy != null) {
        return this.attack('kick', 6, this.enemy.kick + randint(1, 6));
      }
    }
  }, {
    key: "slash",
    value: function slash() {
      if (person.sword > 0) {
        return this.attack('slash', 10, 10 + person.sword * (randint(1, 6) + randint(1, 6)));
      } else {
        return p('You have no sword');
      }
    }
  }, {
    key: "ax",
    value: function ax() {
      if (person.ax > 0) {
        return this.attack('ax', 5, 10 + person.ax * (randint(4, 6) + randint(4, 6) + randint(4, 6)));
      } else {
        return p('You have no ax');
      }
    }
  }, {
    key: "attack",
    value: function attack(weapon, n, hit) {
      if (this.enemy === null) {
        p('There is nothing to attack!');
        return;
      }
      this.enemy.attack();
      if (1 === randint(1, n)) {
        return p("Your " + weapon + " missed the " + this.enemy.name + "!");
      } else {
        this.enemy.health -= hit;
        person.points += hit;
        p("You hit with your " + weapon + "!");
        if (this.enemy.health <= 0) {
          p("The " + this.enemy.name + " dies");
          return this.enemy = null;
        }
      }
    }
  }]);

  return Place;
}(Node);

display = function display() {
  var button, command, commands, i, j, k, len, len1, message, node, ref;
  bg(0.75);
  messages.unshift('');
  messages.unshift("Inventory " + JSON.stringify(person));
  messages.unshift("You are in the " + nodes[page].name);
  for (i = j = 0, len = messages.length; j < len; i = ++j) {
    message = messages[i];
    text(message, 20, (i + 4) * 20);
  }
  node = nodes[page];
  commands = node.commands;
  buttons = [];
  push();
  textAlign(CENTER, CENTER);
  ref = commands.split(' ');
  for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
    command = ref[i];
    button = new Button(command, 100 + i * 100, 30, 100, 30);
    button.show();
    buttons.push(button);
  }
  return pop();
};

setup = function setup() {
  createCanvas(600, 600);
  rectMode(CENTER);
  textSize(20);
  person = new Person();
  nodes.Town = new Node('Town', 'Market Castle Graveyard Farm');
  nodes.Market = new Market('Market', 'Medicine Sword Ax Town');
  nodes.Castle = new Place('Castle', 'Punch Kick Slash Ax Town');
  nodes.Graveyard = new Place('Graveyard', 'Punch Kick Slash Ax Town');
  nodes.Farm = new Place('Farm', 'Punch Kick Slash Ax Town');
  return display();
};

mousePressed = function mousePressed() {
  var button, j, len, node;
  messages = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      print('You clicked on ' + button.command);
      node = nodes[page];
      node.execute(button.command);
    }
  }
  return display();
};
//# sourceMappingURL=sketch.js.map
