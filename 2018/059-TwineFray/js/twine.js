'use strict';

// Generated by CoffeeScript 2.0.3
var Black, Green, H, Red, Yellow, button, buttons, clr, display, draw, either, events, goto, link, links, mousePressed, page, rand, setup, t, texts;

H = 20;

events = {};

texts = [];

links = [];

buttons = [];

page = 'Start';

Black = function Black(txt) {
  return t(txt, 0, 0, 0);
};

Green = function Green(txt) {
  return t(txt, 0, 1, 0);
};

Red = function Red(txt) {
  return t(txt, 1, 0, 0);
};

Yellow = function Yellow(txt) {
  return t(txt, 1, 1, 0);
};

t = function t(txt, r, g, b) {
  return texts.push({ txt: txt, r: r, g: g, b: b });
};

link = function link(name) {
  var txt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  return links.push({ name: name, txt: txt });
};

button = function button(txt, event) {
  return buttons.push({ txt: txt, event: event });
};

display = function display(txt) {
  return events[txt]();
};

goto = function goto(loc) {
  return display(loc);
};

rand = function rand(a, b) {
  return int(a + random(b - a));
};

either = _.sample;

setup = function setup() {
  createCanvas(600, 600);
  textSize(0.8 * H);
  return events.Start();
};

//print data 
draw = function draw() {
  var b, g, i, item, j, k, l, len, len1, len2, len3, m, message, n, r, results, s, txt;
  bg(0.75);
  for (i = j = 0, len = texts.length; j < len; i = ++j) {
    item = texts[i];
    var _item = item;
    txt = _item.txt;
    r = _item.r;
    g = _item.g;
    b = _item.b;

    fc(r, g, b);
    text(txt, H, H + H * i);
  }
  for (i = k = 0, len1 = links.length; k < len1; i = ++k) {
    item = links[i];
    s = item.txt;
    if (s === '') {
      s = item.name;
    }
    fc(0, 0, 1);
    text(s, H, H + H * (i + texts.length));
  }
  for (i = l = 0, len2 = buttons.length; l < len2; i = ++l) {
    item = buttons[i];
    fc(0, 0, 1);
    text(item.txt, H, H + H * (i + texts.length + links.length));
  }
  results = [];
  for (i = m = 0, len3 = messages.length; m < len3; i = ++m) {
    message = messages[i];
    fc(0);
    n = i + texts.length + links.length + buttons.length;
    results.push(text(message, H, H + H * n));
  }
  return results;
};

clr = function clr() {
  texts = [];
  links = [];
  return buttons = [];
};

mousePressed = function mousePressed() {
  var i, item, j, k, len, len1, messages, n;
  for (i = j = 0, len = links.length; j < len; i = ++j) {
    item = links[i];
    n = i + texts.length;
    if (H * n < mouseY && mouseY < H + H * n) {
      clr();
      page = item.name;
      events[item.name]();
      messages = [];
      return;
    }
  }
  for (i = k = 0, len1 = buttons.length; k < len1; i = ++k) {
    item = buttons[i];
    n = i + texts.length + links.length;
    if (H * n < mouseY && mouseY < H + H * n) {
      clr();
      item.event();
      events[page]();
      messages = [];
      return;
    }
  }
};

//inventory()
//print JSON.stringify person
//# sourceMappingURL=twine.js.map
