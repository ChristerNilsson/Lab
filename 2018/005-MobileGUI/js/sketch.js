'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
// https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage
var Page, draw, fetchData, oldName, pages, place, places, setup, storeData;

places = [];

places.push({
  name: 'Bagarmossen Sushi',
  lat: 59.277560,
  lng: 18.132739
});

places.push({
  name: 'Bagarmossen T',
  lat: 59.276264,
  lng: 18.131465
});

places.push({
  name: 'Björkhagens Golfklubb',
  lat: 59.284052,
  lng: 18.145925
});

places.push({
  name: 'Björkhagen T',
  lat: 59.291114,
  lng: 18.115521
});

places.push({
  name: 'Brotorpsbron',
  lat: 59.270067,
  lng: 18.150236
});

places.push({
  name: 'Brotorpsstugan',
  lat: 59.270542,
  lng: 18.148473
});

places.push({
  name: 'Kärrtorp T',
  lat: 59.284505,
  lng: 18.114477
});

places.push({
  name: 'Hellasgården',
  lat: 59.289813,
  lng: 18.160577
});

places.push({
  name: 'Hem',
  lat: 59.265205,
  lng: 18.132735
});

places.push({
  name: 'Parkeringsgran',
  lat: 59.274916,
  lng: 18.161353
});

places.push({
  name: 'Pers badställe',
  lat: 59.289571,
  lng: 18.170767
});

places.push({
  name: 'Skarpnäck T',
  lat: 59.266432,
  lng: 18.133093
});

places.push({
  name: 'Söderbysjön N Bron',
  lat: 59.285500,
  lng: 18.150542
});

places.push({
  name: 'Söderbysjön S Bron',
  lat: 59.279155,
  lng: 18.149318
});

places.push({
  name: 'Ulvsjön, Udden',
  lat: 59.277103,
  lng: 18.164897
});

pages = {};

place = null;

oldName = null;

Page = function () {
  function Page(actionCount, init) {
    _classCallCheck(this, Page);

    this.actionCount = actionCount;
    this.init = init;
    this.table = document.getElementById("table");
    this.actions = [];
  }

  _createClass(Page, [{
    key: 'addAction',
    value: function addAction(title, f) {
      return this.actions.push(makeButton(title, this.actionCount, f));
    }
  }, {
    key: 'display',
    value: function display() {
      var action, elem, j, len, ref, span;
      // actions
      elem = document.getElementById('myActions');
      elem.innerHTML = "";
      span = document.createElement("span");
      ref = this.actions;
      for (j = 0, len = ref.length; j < len; j++) {
        action = ref[j];
        span.appendChild(action);
      }
      elem.appendChild(span);
      // init page
      hideCanvas();
      this.table.innerHTML = "";
      return this.init();
    }
  }, {
    key: 'addRow',
    value: function addRow(b) {
      var tr;
      tr = document.createElement("tr");
      addCell(tr, b);
      return this.table.appendChild(tr);
    }
  }]);

  return Page;
}();

fetchData = function fetchData() {
  var data;
  data = localStorage["GPSCompass"];
  if (data) {
    return places = JSON.parse(data);
  }
};

//console.log 'fetch',places 
storeData = function storeData() {
  return localStorage["GPSCompass"] = JSON.stringify(places);
};

//console.log 'store',localStorage["GPSCompass"]
setup = function setup() {
  var c;
  fetchData();
  c = createCanvas(windowWidth, windowHeight);
  c.parent('myContainer');
  hideCanvas();
  pages.List = new Page(1, function () {
    var _this = this;

    var i, j, len, p, results;
    results = [];
    for (i = j = 0, len = places.length; j < len; i = ++j) {
      p = places[i];
      results.push(function (i) {
        var b;
        b = makeButton(p.name, _this.actionCount, function () {
          place = places[i];
          return pages.Nav.display();
        });
        b.style.textAlign = 'left';
        return _this.addRow(b);
      }(i));
    }
    return results;
  });
  pages.List.addAction('Add', function () {
    return pages.Add.display();
  });
  pages.Nav = new Page(4, function () {
    return showCanvas();
  });
  pages.Nav.addAction('List', function () {
    return pages.List.display();
  });
  pages.Nav.addAction('Map', function () {
    return window.open('http://maps.google.com/maps?q=' + place.lat + ',' + place.lng);
  });
  pages.Nav.addAction('Edit', function () {
    return pages.Edit.display();
  });
  pages.Nav.addAction('Del', function () {
    places = places.filter(function (e) {
      return e.name !== place.name;
    });
    storeData();
    return pages.List.display();
  });
  pages.Edit = new Page(2, function () {
    oldName = place.name;
    this.addRow(makeInput('name', place.name));
    this.addRow(makeInput('lat', place.lat));
    return this.addRow(makeInput('lng', place.lng));
  });
  pages.Edit.addAction('Update', function () {
    var j, lat, len, lng, name, p;
    name = getField("name");
    lat = parseFloat(getField("lat"));
    lng = parseFloat(getField("lng"));
    if (isNumeric(lat) && isNumeric(lng)) {
      if (oldName === name) {
        // finns namnet redan?
        for (j = 0, len = places.length; j < len; j++) {
          p = places[j];
          if (oldName === p.name) {
            p.lat = lat;
            p.lng = lng;
          }
        }
      } else {
        places = places.filter(function (e) {
          return e.name !== oldName;
        });
        places.push({
          name: name,
          lat: lat,
          lng: lng
        });
        places.sort(function (a, b) {
          if (a.name > b.name) {
            return 1;
          } else {
            return -1;
          }
        });
      }
      storeData();
      return pages.List.display();
    }
  });
  pages.Edit.addAction('Cancel', function () {
    return pages.List.display();
  });
  pages.Add = new Page(2, function () {
    this.addRow(makeInput('name', '2018-01-15 12:34:56'));
    this.addRow(makeInput('lat', '59.123456'));
    return this.addRow(makeInput('lng', '18.123456'));
  });
  pages.Add.addAction('Save', function () {
    var lat, lng, name;
    name = getField("name");
    lat = parseFloat(getField("lat"));
    lng = parseFloat(getField("lng"));
    if (isNumeric(lat) && isNumeric(lng)) {
      places.push({
        name: name,
        lat: lat,
        lng: lng
      });
      places.sort(function (a, b) {
        if (a.name > b.name) {
          return 1;
        } else {
          return -1;
        }
      });
      storeData();
      return pages.List.display();
    }
  });
  pages.Add.addAction('Cancel', function () {
    return pages.List.display();
  });
  // startsida:
  return pages.List.display();
};

draw = function draw() {
  bg(0.5);
  if (place) {
    return text(place.name, 100, 100);
  }
};
//# sourceMappingURL=sketch.js.map
