'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Page, addCell, draw, getField, latitude, longitude, makeButton, makeCanvas, makeDiv, makeInput, name, oldName, pages, place, placeIndex, places, setup;

places = [];

places.push({
  name: 'Bagarmossen Sushi',
  lat: 59.277560,
  lng: 18.132739
});

places.push({
  name: 'Bagarmossen T',
  lat: 59.276264,
  lng: 18.131465
});

places.push({
  name: 'Björkhagens Golfklubb',
  lat: 59.284052,
  lng: 18.145925
});

places.push({
  name: 'Björkhagen T',
  lat: 59.291114,
  lng: 18.115521
});

places.push({
  name: 'Brotorpsbron',
  lat: 59.270067,
  lng: 18.150236
});

places.push({
  name: 'Brotorpsstugan',
  lat: 59.270542,
  lng: 18.148473
});

places.push({
  name: 'Kärrtorp T',
  lat: 59.284505,
  lng: 18.114477
});

places.push({
  name: 'Hellasgården',
  lat: 59.289813,
  lng: 18.160577
});

places.push({
  name: 'Hem',
  lat: 59.265205,
  lng: 18.132735
});

places.push({
  name: 'Parkeringsgran',
  lat: 59.274916,
  lng: 18.161353
});

places.push({
  name: 'Pers badställe',
  lat: 59.289571,
  lng: 18.170767
});

places.push({
  name: 'Skarpnäck T',
  lat: 59.266432,
  lng: 18.133093
});

places.push({
  name: 'Söderbysjön N Bron',
  lat: 59.285500,
  lng: 18.150542
});

places.push({
  name: 'Söderbysjön S Bron',
  lat: 59.279155,
  lng: 18.149318
});

places.push({
  name: 'Ulvsjön, Udden',
  lat: 59.277103,
  lng: 18.164897
});

pages = [];

placeIndex = 0;

place = places[placeIndex];

oldName = null;

name = null;

latitude = null;

longitude = null;

makeCanvas = function makeCanvas() {
  var elem;
  elem = document.getElementById('myContainer');
  return elem.style.display = 'block';
};

makeDiv = function makeDiv(title) {
  var b;
  b = document.createElement('div');
  b.innerHTML = title;
  return b;
};

makeInput = function makeInput(title, value) {
  var b;
  b = document.createElement('input');
  b.id = title;
  b.value = value;
  return b;
};

makeButton = function makeButton(title, f) {
  var b;
  b = document.createElement('input');
  b.type = 'button';
  b.value = title;
  b.onclick = f;
  return b;
};

addCell = function addCell(tr, value) {
  var td;
  td = document.createElement("td");
  td.appendChild(value);
  return tr.appendChild(td);
};

getField = function getField(name) {
  var element;
  element = document.getElementById(name);
  if (element) {
    return element.value;
  } else {
    return null;
  }
};

Page = function () {
  function Page(title1, elements) {
    _classCallCheck(this, Page);

    this.title = title1;
    this.elements = elements;
    this.table = document.getElementById("table");
  }

  _createClass(Page, [{
    key: 'display',
    value: function display() {
      var elem, element, j, len, ref, results;
      elem = document.getElementById('myTitle');
      elem.innerHTML = this.title + (this.title === 'Nav' ? ': ' + place.name : "");
      elem = document.getElementById('myContainer');
      elem.style.display = 'none';

      // rensa body
      this.table.innerHTML = "";
      ref = this.elements;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        element = ref[j];
        results.push(this.makeElement(element));
      }
      return results;
    }
  }, {
    key: 'handleRow',
    value: function handleRow(b) {
      var tr;
      tr = document.createElement("tr");
      addCell(tr, b);
      return this.table.appendChild(tr);
    }
  }, {
    key: 'makeElement',
    value: function makeElement(nr) {
      var _this = this;

      var i, j, len, p, results;
      // After Add
      if (nr === 2) {
        this.handleRow(makeButton('Save', function () {
          name = getField("name");
          latitude = getField("latitude");
          longitude = getField("longitude");
          places.push({
            name: name,
            lat: latitude,
            lng: longitude
          });
          places.sort(function (a, b) {
            if (a.name > b.name) {
              return 1;
            } else {
              return -1;
            }
          });
          return pages[0].display();
        }));
      }
      if (nr === 3) {
        // Edit
        oldName = place.name;
        this.handleRow(makeInput('name', place.name));
        this.handleRow(makeInput('latitude', place.lat));
        this.handleRow(makeInput('longitude', place.lng));
      }
      if (nr === 4) {
        // Add
        this.handleRow(makeInput('name', '2018-01-15 12:34:56'));
        this.handleRow(makeInput('latitude', '59.123456'));
        this.handleRow(makeInput('longitude', '18.123456'));
      }
      if (nr === 5) {
        this.handleRow(makeButton('List', function () {
          return pages[0].display();
        }));
      }
      if (nr === 6) {
        this.handleRow(makeButton('Map', function () {
          return window.open('http://maps.google.com/maps?q=' + place.lat + ',' + place.lng);
        }));
      }
      if (nr === 7) {
        this.handleRow(makeButton('Update', function () {
          // After Edit 
          var j, len, p;
          name = getField("name");
          latitude = getField("latitude");
          longitude = getField("longitude");
          // finns namnet redan?
          if (oldName === name) {
            for (j = 0, len = places.length; j < len; j++) {
              p = places[j];
              if (oldName === p.name) {
                p.lat = latitude;
                p.lng = longitude;
              }
            }
          } else {
            places = places.filter(function (e) {
              return e.name !== oldName;
            });
            places.push({
              name: name,
              lat: latitude,
              lng: longitude
            });
            places.sort(function (a, b) {
              if (a.name > b.name) {
                return 1;
              } else {
                return -1;
              }
            });
          }
          return pages[0].display();
        }));
      }
      if (nr === 8) {
        this.handleRow(makeButton('Delete', function () {
          places = places.filter(function (e) {
            return e.name !== place.name;
          });
          return pages[0].display();
        }));
      }
      if (nr === 9) {
        this.handleRow(makeButton('Cancel', function () {
          return pages[1].display();
        }));
      }
      if (nr === 10) {
        this.handleRow(makeButton('Add', function () {
          return pages[3].display();
        }));
      }
      if (nr === 11) {
        this.handleRow(makeButton('Edit', function () {
          return pages[2].display();
        }));
      }
      if (nr === 12) {
        makeCanvas();
      }
      if (nr === 13) {
        results = [];
        for (i = j = 0, len = places.length; j < len; i = ++j) {
          p = places[i];
          results.push(function (i) {
            return _this.handleRow(makeButton(p.name, function () {
              placeIndex = i;
              place = places[i];
              return pages[1].display();
            }));
          }(i));
        }
        return results;
      }
    }
  }]);

  return Page;
}();

setup = function setup() {
  var c, elem;
  c = createCanvas(200, 200);
  c.parent('myContainer');
  elem = document.getElementById('myContainer');
  elem.style.display = 'none';
  pages.push(new Page('List', [10, 13 // Add Places
  ]));
  pages.push(new Page('Nav', [12, 5, 6, 10, 11, 8 // Canvas List Map Add Edit Delete
  ]));
  pages.push(new Page('Edit', [3, 7, 9 // 3fält Update Cancel
  ]));
  pages.push(new Page('Add', [4, 2, 9 // 3fält Save Cancel
  ]));
  return pages[0].display();
};

draw = function draw() {
  bg(0.5);
  return text(place.name, 100, 100);
};
//# sourceMappingURL=sketch.js.map
