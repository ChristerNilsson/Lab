'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, back, buttons, clr, draw, forw, mousePressed, setup, vars;

buttons = [];

vars = [];

Button = function () {
  function Button(title, x1, y1, r, event) {
    _classCallCheck(this, Button);

    this.title = title;
    this.x = x1;
    this.y = y1;
    this.r = r;
    this.event = event;
  }

  _createClass(Button, [{
    key: 'inside',
    value: function inside(x, y) {
      return this.r > dist(x, y, this.x, this.y);
    }
  }, {
    key: 'execute',
    value: function execute() {
      return this.event();
    }
  }, {
    key: 'draw',
    value: function draw() {
      fc(1);
      circle(this.x, this.y, this.r);
      fc(0);
      return text(this.title, this.x, this.y);
    }
  }]);

  return Button;
}();

setup = function setup() {
  var fn, i, j, len, ref;
  createCanvas(200, 200);
  buttons.push(new Button('Back', 135, 135, 17, function () {
    return back();
  }));
  buttons.push(new Button('Forw', 175, 135, 17, function () {
    return forw();
  }));
  buttons.push(new Button('Clr', 155, 170, 17, function () {
    return clr();
  }));
  ref = range(10);
  fn = function fn(i) {
    buttons.push(new Button('+', 80, 190 - 20 * i, 8, function () {
      return vars[i]++;
    }));
    return buttons.push(new Button('-', 100, 190 - 20 * i, 8, function () {
      return vars[i]--;
    }));
  };
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    fn(i);
  }
  return clr();
};

draw = function draw() {
  var button, i, j, k, l, len, len1, len2, ref, results, t, v;
  bg(0.5);
  fc(0);
  sc();
  textAlign(CENTER, CENTER);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  fc(1, 1, 0);
  ref = 'Scheutz Difference Engine 1843'.split(' ');
  for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
    t = ref[i];
    text(t, 155, 30 + 20 * i);
  }
  textAlign(RIGHT, CENTER);
  results = [];
  for (i = l = 0, len2 = vars.length; l < len2; i = ++l) {
    v = vars[i];
    results.push(text(v, 60, 190 - 20 * i));
  }
  return results;
};

clr = function clr() {
  return vars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 // 0th to 9th differnce
  ];
};

forw = function forw() {
  var i, j, len, ref, results;
  ref = range(9);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(vars[i] += vars[i + 1]);
  }
  return results;
};

back = function back() {
  var i, j, len, ref, results;
  ref = range(8, -1, -1);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push(vars[i] -= vars[i + 1]);
  }
  return results;
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.execute());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
