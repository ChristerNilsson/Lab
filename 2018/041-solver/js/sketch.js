'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var setup, solve;

setup = function setup() {
  var answer, button, input;
  input = createInput();
  input.position(0, 10);
  answer = createElement('h2');
  answer.position(0, 20);
  button = createButton('solve');
  button.position(input.x + input.width, 10);
  return button.mousePressed(function () {
    var a, b;

    var _input$value$split = input.value().split(' ');

    var _input$value$split2 = _slicedToArray(_input$value$split, 2);

    a = _input$value$split2[0];
    b = _input$value$split2[1];

    a = parseInt(a);
    b = parseInt(b);
    return answer.html(solve(a, b));
  });
};

solve = function solve(a, b) {
  var back, i, item, la, lb, len, p, save, solution;
  back = {};
  la = [a];
  lb = [];
  save = function save(x, y) {
    if (y in back) {
      return;
    }
    lb.push(y);
    return back[y] = x;
  };
  while (!(b in back)) {
    for (i = 0, len = la.length; i < len; i++) {
      item = la[i];
      save(item, item + 2);
      save(item, item * 2);
      if (item % 2 === 0) {
        save(item, item / 2);
      }
    }
    var _ref = [lb, la];
    la = _ref[0];
    lb = _ref[1];
  }
  solution = [];
  p = b;
  while (true) {
    solution.push(p);
    p = back[p];
    if (p === a) {
      return solution.concat(a).reverse().join(' ');
    }
  }
};
//# sourceMappingURL=sketch.js.map
