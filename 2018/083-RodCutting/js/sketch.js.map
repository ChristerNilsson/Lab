{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": ";;;;;AAAA,IAAA,GAAA,MAAA,SAAA,GAAA,IAAA,OAAA,QAAA,SAAA,SAAA,OAAA,UAAA;;AAAA,SAAS;;AACT,QAAQ;;AACR,IAAI,CAAA,AAAC,IAAD,AAAI,IAAJ,AAAO,KAAP,AAAW,KAAX,AAAe,KAAf,AAAmB;;AACvB,UAAU;;AAEV,WAAW,kBAAA,AAAC,GACX;MAAA;AAAA;AACA,KAAA,AAAG;AACH,OAAK,AAAO,OAAZ,AAAY,IAAG,AAAE,EAAjB,AAAiB,IAAG,MAAI,KAAxB,AAA2B;AAC3B,MAAI,AAAI,KAAJ,AAAK,MAAM,AAAO,OAAP,AAAO,AAAG,MAAC,IAAX,AAAU,AAAG,KAAxB,AAA6B,OAAO;AACxC,OAAK,GAAA,AAAG,GAAH,AAAK,GAAV,AAAK,AAAO,IAAI,AAAE,EAAlB,AAAkB,IAAG,MAAI,KAAzB,AAA4B;SALlB,AAMV;;;AAED,QAAQ;AACP,eAAA,AAAa,KAAb,AAAiB;AACjB,WAAA,AAAS;SACT,SAAS,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAS,GAAT,AAAW,IAAX,AAAc,IAAd,AAAiB,IAAjB,AAAoB,IAHtB,AAGE,AAAuB;AAhBjC;;;AAmBA,QAAQ,eAAA,AAAC,OAAD,AAAO,GACd;MAAA,GAAA,GAAA,KAAA,KAAA,SAAA;oBAAA;;AAAA,OAAA,4CAAA;;iBACC,KAAA,AAAK,GAAL,AAAO,GAAE,CAAA,AAAC,IAAD,AAAI,IAAJ,AAAO,AAAI,IADrB,AACC,AAAoB;AADrB;SADO;;;AAIR,OAAO,gBACN;MAAA,GAAA,GAAA,KAAA,MAAA,GAAA,MAAA,OAAA,OAAA;AAAA,KAAA,AAAG;AACH,WAAA,AAAS;AACT,YAAA,AAAU,QAAV,AAAiB;AACjB;AACA,KAAA,AAAG;AACH,OAAA,AAAK,QAAQ,AAAE,EAAf,AAAe,IAAf,AAAkB;AAClB,OAAA,AAAK,SAAS,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,YAAA,AAAU,OAAV,AAAgB;AAChB,QAAA,AAAM,gBAAgB,AAAE,EAAxB,AAAwB;AACxB,OAAA,AAAK,SAAS,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,QAAA,AAAM,gBAAgB,AAAE,EAAxB,AAAwB;AACxB,QAAA,AAAM,iBAAiB,AAAE,EAAzB,AAAyB;AACzB,OAAA,+CAAA;;AACC,aADD,AACC,AAAS;;AACV;AAEA,UAAQ,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK;AACb,YAAA,AAAU,QAAV,AAAiB;AACjB,YAAA,AAAU,OAAV,AAAgB;AAChB,OAAA,gDAAA;;AACC;AACA,OAAA,AAAG;AACH,SAAK,IAAL,AAAO,GAAG,AAAE,EAAZ,AAAY,IAAG,MAAI,KAAnB,AAAsB;AACtB;AACA,SAAK,AAAM,MAAX,AAAW,IAAc,AAAE,EAA3B,AAA2B,IAAG,MAAI,KAAlC,AAAqC;AACrC,SAAK,CAAC,IAAD,AAAG,KAAG,AAAM,MAAjB,AAAiB,IAAQ,AAAE,EAA3B,AAA2B,IAAG,MAAI,KAAlC,AAAqC;AACrC,SAAK,AAAO,OAAP,AAAO,KAAG,AAAM,MAArB,AAAqB,IAAI,AAAE,EAA3B,AAA2B,IAAG,MAAI,KAAlC,AAAqC;AACrC,AAAM,UAAN,AAAM,MAAM,AAAM,MAAA;AAClB,AAAM,UAAN,AAAM,MAAM,CAAC,IAAD,AAAG,KAAG,AAAM,MAAA;AACxB,AAAM,UAAN,AAAM,MAAM,AAAO,OAAP,AAAO,KAAG,AAAM,MAAA;AAC5B,OAAA,AAAG;AACH,QAAI,MAAI,KAAG;AACX,QAAG,MAAH,AAAM;AAAO,WAAA,AAAK,GAAE,IAAP,AAAS,IAAT,AAAY,OAAM,IAA/B,AAAa,AAAoB;;AACjC,SAAA,AAAK,GAAL,AAAO,GAAP,AAAS,OAAT,AAAe;AAdhB,AAeC;;AACD,YAAA,AAAU,QAAV,AAAiB;AAEjB,YAAA,AAAU,MAAV,AAAe;AACf,OAAA,AAAK,UAAS,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,YAAA,AAAU,OAAV,AAAgB;AAChB,OAAK,AAAM,MAAX,AAAW,IAAG,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,OAAK,AAAM,MAAX,AAAW,IAAG,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,OAAK,AAAM,MAAX,AAAW,IAAG,AAAE,EAAhB,AAAgB,IAAhB,AAAmB;AACnB,YAAA,AAAU,QAAV,AAAiB;AACjB;AACA,KAAA,AAAG;AACH,OAAA,AAAK,iCAAgC,QAArC,AAA2C,GAA3C,AAA6C;AAC7C,WAAA,AAAS;AACT,OAAA,AAAK,4BAA2B,QAAhC,AAAsC,GAAtC,AAAwC;SAjDlC,AAkDN;;;AAED,UAAU;SAAG,QAAQ,GAAA,AAAG,QAAd,AAAW,AAAW;;;AAEhC,UAAU,iBAAA,AAAC,OACV;MAAA,GAAA,KAAA,KAAA;AAAA,WAAS,AACT;;AAAA,OAAA,kCAAA;;AACC,QAAG,AAAK,MAAL,AAAM,SAAT,AAAkB;AAAO,AAAM,aAAN,AAAO,KAAK,SAArC,AAAyB,AAAY,AAAS;AAD/C;;AAEA,YAAU,AAAM,OAAN,AAAO;AACjB,MAAG,WAAH,AAAc;AAAO,cAArB,AAA+B;;SALtB,AAMT;AAnFD;;;;;AAwFA,KAAK,YAAA,AAAC,QAAD,AAAS;MAEb,MAAA,GAAA,KAAA,MAAA,OAAA;;AAAA;gBAAO;;AAAA,SAAA,+CAAA;;mBAAA,CAAC,AAAM,SAAC,IAAR,AAAO,AAAG,IAAG,IAAb,AAAe;AAAf;;;AACP,AAAM,aAAN,AAAM,AAAG;AACT,AAAG,MAAH,AAAI,KAAK,UAAA,AAAC,GAAD,AAAG;WAAM,AAAE,EAAF,AAAE,KAAK,AAAE,EAAlB,AAAkB;AAA3B,AACA;;AAHA,6BAGY,AAAI,IAAA;;AAAhB,AAAC;AAAD,AAAI;;AACJ,QAAA,AAAM,GAAN,AAAQ,GAAR,AAAU,MAAV,AAAe;AAEf,MAAG,IAAH,AAAO,MAAU;WAAO,EAAA,AAAE,QAAF,AAAU,GAAlC,AAAwB,AAAa;;AACrC,SAAO,EAAA,AAAE,QAAO,OAAO,IAAhB,AAAoB,MAApB,AAAyB;AAChC,QAAA,AAAM,QAAN,AAAa;AACb,AAAK,OAAA,OAAL,AAAK,AAAK,iBAAM,CAAC,IAAD,AAAG,QAAO;SAXtB,AAYJ;AApGD;;;AAuGA,IAAI,WAAA,AAAC,GAAD,AAAI,IAAJ,AAAQ,MACX;MAAA,GAAA,GAAA,OAAA,SAAA,GAAA,GAAA,GAAA,KAAA,MAAA,MAAA,MAAA,MAAA,GAAA,OAAA,IAAA,GAAA,GAAA,MAAA,GAAA,KAAA,MAAA,MAAA,GAAA,MAAA;AAAA,OAAK,AAAC,EAAC;AACP,QAAI,AAAE;qBAAQ;gBAAA;;AAAA,SAAA,kCAAA;;mBAAA;AAAA;;AAAV,KAAA,AAAC;AACL,UAAQ,AACR;;AAAA,OAAA,kCAAA;;AACC,UAAA,AAAM,QAAN,AAAa,GAAb,AAAe;AACf,YAAQ,AAAE,EAAA;AACV,cAAU,CAAA,AAAC,AACX;;AAAA,SAAA,qCAAA;;AACC,UAAI,IAAA,AAAI,IAAI;AACZ,UAAG,KAAH,AAAQ;AACP,eAAO,AAAE,EAAF,AAAE,KAAK,AAAE,EAAA;AAChB,YAAG,QAAH,AAAW;AACV,kBAAQ;AACR,oBAAU,CAAA,AAAC,GAFZ,AAEW,AAAI;AAJhB;AAFD;;AAOA,AAAE,MAAF,AAAE,KAAK;AACP;yBAAQ;mBAAA;;AAAA,WAAA,qCAAA;;qBAAA;AAAA;;;AACR,QAAG,KAAH,AAAQ;AACP,WAAA,wCAAA;;AACC,AAAK,aAAL,AAAK,UADN,AACgB;AAFjB;AAAA,WAAA;AAIC,YAAA,AAAM;AACN,YAAA,AAAM,WAAN,AAAgB,AAChB;;AAAA,WAAA,qCAAA;;AACC,aAAA,wCAAA;;AACC,AAAK,eAAL,AAAK,MAAM,AAAM,MAAA,AAAO,OADzB,AACyB;AAF1B;AAND;;AASA,AAAK,UAAL,AAAM,KAtBP,AAsBC,AAAW;;SACZ,AAAC,EAAD,AAAE,KA3BC,AA2BH,AAAO;AAlIR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA,MAAM,GAAG,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAS,GAAT,AAAW,IAAX,AAAc,IAAd,AAAiB,IAAjB,AAAoB,IAAvB,AAAG,AAAuB,KA3KhC,AA2KA,AAAM,AAA8B,OA3KpC",
  "sourcesContent": [
    "prices = null\r\nparts = null\r\nX = [30,90,170,300,450,600]\r\nrodsize = 100\r\n\r\nshowInfo = (i) ->\r\n\tpush()\r\n\tfc 0\r\n\ttext prices[i],X[1],110+50*i\r\n\tx = Math.round(prices[i]/(i+1) * 100) / 100\r\n\ttext nf(x,0,2), X[2],110+50*i\r\n\tpop()\r\n\r\nsetup = ->\r\n\tcreateCanvas 610,700\r\n\ttextSize 16\r\n\tprices = [1,3,4,7,9,11,13,17,19,21]\r\n\t#execute()\r\n\r\ntext3 = (texts,x) ->\r\n\tfor t,i in texts.split ' '\r\n\t\ttext t,x,[20,40,60][i]\r\n\r\ndraw = ->\r\n\tbg 0.5\r\n\ttextSize 20\r\n\ttextAlign CENTER,CENTER\r\n\tpush()\r\n\tfc 0.75\r\n\ttext 'size', X[0],40\r\n\ttext 'price', X[1],40\r\n\ttextAlign RIGHT,CENTER\r\n\ttext3 'price / size', X[2]\r\n\ttext 'count', X[3],40\r\n\ttext3 'size x count', X[4]\r\n\ttext3 'price x count', X[5]\r\n\tfor price,i in prices\r\n\t\tshowInfo i\r\n\tpop()\r\n\r\n\ttotal = [0,0,0]\r\n\ttextAlign CENTER,CENTER\r\n\ttextAlign RIGHT,CENTER\r\n\tfor part,i in parts\r\n\t\tpush()\r\n\t\tfc 0.75\r\n\t\ttext i+1, X[0],110+50*i\r\n\t\tpop()\r\n\t\ttext parts[i],           X[3],110+50*i\r\n\t\ttext (i+1)*parts[i],     X[4],110+50*i\r\n\t\ttext prices[i]*parts[i], X[5],110+50*i\r\n\t\ttotal[0] += parts[i]\r\n\t\ttotal[1] += (i+1)*parts[i]\r\n\t\ttotal[2] += prices[i]*parts[i]\r\n\t\tsc 0.75\r\n\t\ty = 135+50*i\r\n\t\tif i==0 then line 0,y-50,width,y-50\r\n\t\tline 0,y,width,y\r\n\t\tsc()\r\n\ttextAlign CENTER,CENTER\r\n\r\n\ttextAlign LEFT,CENTER\r\n\ttext 'Total:',X[1],610\r\n\ttextAlign RIGHT,CENTER\r\n\ttext total[0],X[3],610\r\n\ttext total[1],X[4],610\r\n\ttext total[2],X[5],610\r\n\ttextAlign CENTER,CENTER\r\n\tpush()\r\n\tfc 0.75\r\n\ttext 'janchrister.nilsson@gmail.com',width/2,680\r\n\ttextSize 50\r\n\ttext 'Constant Time Rod Cutter',width/2,650\r\n\tpop()\r\n\r\nexecute = -> parts = gc prices, rodsize\r\n\r\nrodSize = (input) ->\r\n\tprices = []\r\n\tfor value in input.value.split ' '\r\n\t\tif value.length > 0 then prices.push parseInt value \r\n\trodsize = prices.shift()\r\n\tif rodsize <= 0 then rodsize = 1\r\n\texecute()\r\n\r\n######\r\n\r\n# Constant + Parts\r\ngc = (prices, n) ->\r\n\t# Om lika maxkvot, välj högsta index\r\n\tlst = ([price/(i+1),i+1] for price,i in prices)\r\n\tprint \"#{lst}\"\r\n\tlst.sort (a,b) -> b[0] - a[0]\r\n\t[q, clen] = lst[0]\r\n\tprint n,q,clen,lst\r\n\r\n\tif n < clen then return g prices, n, clen\r\n\tpart = g prices,clen + n % clen,clen\r\n\tprint 'part',part\r\n\tpart[clen-1] += (n-clen)//clen\r\n\tpart\r\n\r\n# Quadratic + Parts\r\ng = (v, n2, clen) ->\r\n\tn1 = v.length\r\n\tc = v.concat (0 for i in range n2) \r\n\tparts = []\r\n\tfor i in range n2\r\n\t\tprint 'i n2',i,n2\r\n\t\tmax_c = c[i]\r\n\t\tindexes = [i]\r\n\t\tfor j in range n2\r\n\t\t\tk = i - j - 1\r\n\t\t\tif k >= 0\r\n\t\t\t\ttemp = c[j] + c[k]\r\n\t\t\t\tif temp >= max_c\r\n\t\t\t\t\tmax_c = temp\r\n\t\t\t\t\tindexes = [k, j]\r\n\t\tc[i] = max_c\r\n\t\tpart = (0 for z in range n1) \r\n\t\tif i <= clen\r\n\t\t\tfor index in indexes\r\n\t\t\t\tpart[index] += 1\r\n\t\telse\r\n\t\t\tprint parts\r\n\t\t\tprint 'indexes',indexes\r\n\t\t\tfor m in range n1\r\n\t\t\t\tfor index in indexes\r\n\t\t\t\t\tpart[m] += parts[index][m]\r\n\t\tparts.push part\r\n\t_.last parts\r\n\r\n# assert [0,2,0,0], g [1,5,7,10],4,4  # 26\r\n\r\n# prices = [1, 6, 10, 14]  # 1 3 3.33 3.5 clen=4\r\n# assert g(prices,1,4) , [1,0,0,0] # 1\r\n# assert g(prices,2,4) , [0,1,0,0] # 6\r\n# assert g(prices,3,4) , [0,0,1,0] # 10\r\n# assert g(prices,4,4) , [0,0,0,1] # 14\r\n# assert g(prices,5,4) , [0,1,1,0] # 16\r\n# assert g(prices,6,4) , [0,1,0,1] # 20\r\n# assert g(prices,7,4) , [0,0,1,1] # 24\r\n# assert g(prices,8,4) , [0,0,0,2] # 28\r\n# assert g(prices,9,4) , [0,1,1,1] # 30\r\n# assert g(prices,10,4), [0,1,0,2] # 34\r\n\r\n# prices = [5, 6, 7, 10]  # 5 3 3.5 2.5 clen=1\r\n# assert g(prices,1,1) , [1,0,0,0]\r\n# assert g(prices,2,1) , [2,0,0,0]\r\n# assert g(prices,3,1) , [3,0,0,0]\r\n# assert g(prices,4,1) , [4,0,0,0]\r\n# assert g(prices,5,1) , [5,0,0,0]\r\n# assert g(prices,6,1) , [6,0,0,0]\r\n# assert g(prices,7,1) , [7,0,0,0]\r\n\r\n# prices = [1, 5, 8, 9]  # 1 2.5 2.67 2.25 clen=3\r\n# assert g(prices,1,3) , [1,0,0,0] # 1\r\n# assert g(prices,2,3) , [0,1,0,0] # 5\r\n# assert g(prices,3,3) , [0,0,1,0] # 8\r\n# assert g(prices,4,3) , [0,2,0,0] # 10\r\n# assert g(prices,5,3) , [0,1,1,0] # 13\r\n# assert g(prices,6,3) , [0,0,2,0] # 16\r\n# assert g(prices,7,3) , [0,2,1,0] # 18\r\n# assert g(prices,8,3) , [0,1,2,0] # 21\r\n# assert g(prices,9,3) , [0,0,3,0] # 24\r\n# assert g(prices,10,3), [0,2,2,0] # 26\r\n\r\n\r\n#####################################\r\n\r\n\r\nprint gc [1,3,4,7,9,11,13,17,19,21],100 #)  , [0,0, 2,1]\r\n\r\n# assert gc([1,12,19,25],10) , [0,0, 2,1]\r\n# assert gc([1,5,7,10],4), [0,2, 0,0]\r\n\r\n# prices = [1,5,8,9]  # 1 2.5 2.67 2.25 clen=3\r\n# assert gc(prices,1) , [1,0, 0,0]\r\n# assert gc(prices,2) , [0,1, 0,0]\r\n# assert gc(prices,3) , [0,0, 1,0]\r\n# assert gc(prices,4) , [0,2, 0,0]\r\n# assert gc(prices,5) , [0,1, 1,0]\r\n# assert gc(prices,6) , [0,0, 2,0]\r\n# assert gc(prices,7) , [0,2, 1,0]\r\n# assert gc(prices,8) , [0,1, 2,0]\r\n# assert gc(prices,9) , [0,0, 3,0]\r\n# assert gc(prices,10), [0,2, 2,0]\r\n\r\n# prices = [1,6,10,14]  # 1 3 3.33 3.5 clen=4\r\n# assert gc(prices,1) , [1,0, 0,0]\r\n# assert gc(prices,2) , [0,1, 0,0]\r\n# assert gc(prices,3) , [0,0, 1,0]\r\n# assert gc(prices,4) , [0,0, 0,1]\r\n# assert gc(prices,5) , [0,1, 1,0]\r\n# assert gc(prices,6) , [0,1, 0,1]\r\n# assert gc(prices,7) , [0,0, 1,1]\r\n# assert gc(prices,8) , [0,0, 0,2]\r\n# assert gc(prices,9) , [0,1, 1,1]\r\n# assert gc(prices,10), [0,1, 0,2]\r\n# assert gc(prices,11), [0,0, 1,2]\r\n# assert gc(prices,12), [0,0, 0,3]\r\n\r\n# prices = [5,6,7,10]  # 5 3 3.5 2.5 clen=1\r\n# assert gc(prices,1) , [1,0,0,0] # 5\r\n# assert gc(prices,2) , [2,0,0,0] # 10\r\n# assert gc(prices,3) , [3,0,0,0] # 15\r\n# assert gc(prices,4) , [4,0,0,0] # 20\r\n# assert gc(prices,5) , [5,0,0,0] # 25\r\n# assert gc(prices,6) , [6,0,0,0] # 30\r\n# assert gc(prices,7) , [7,0,0,0] # 35\r\n# assert gc(prices,8) , [8,0,0,0] # 40\r\n# assert gc(prices,9) , [9,0,0,0] # 45\r\n# assert gc(prices,10), [10,0,0,0] # 50\r\n\r\n# prices = [46, 64, 75, 96] # 46 32 25 24 clen=1\r\n# assert gc(prices,1) , [1,0,0,0] # 46\r\n# assert gc(prices,2) , [2,0,0,0] # 92\r\n# assert gc(prices,3) , [3,0,0,0] # ...\r\n# assert gc(prices,4) , [4,0,0,0] #\r\n# assert gc(prices,5) , [5,0,0,0] #\r\n# assert gc(prices,6) , [6,0,0,0] #\r\n# assert gc(prices,7) , [7,0,0,0] #\r\n# assert gc(prices,8) , [8,0,0,0] #\r\n# assert gc(prices,9) , [9,0,0,0] #\r\n# assert gc(prices,10), [10,0,0,0] #\r\n\r\n# for k in range 100\r\n# \tprices = []\r\n# \tfor i in range 10\r\n# \t\tprices.push Math.round 10 + 90 * Math.random()\r\n# \tprices.sort()\r\n# \tprint prices \r\n# \tfor i in range 1,101\r\n# \t\tprint \"#{gc prices,i}\"\r\n# print 'Ready!'"
  ]
}