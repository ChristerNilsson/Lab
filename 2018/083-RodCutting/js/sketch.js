'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, buttons, cut_rod, draw, execute, lst, mousePressed, parts, prices, setup;

Button = function () {
  function Button(title, x, y, event) {
    _classCallCheck(this, Button);

    this.title = title;
    this.x = x;
    this.y = y;
    this.event = event;
    this.r = 15;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      circle(this.x, this.y, this.r);
      return text(this.title, this.x, this.y);
    }
  }, {
    key: 'inside',
    value: function inside(mx, my) {
      return this.r > dist(mx, my, this.x, this.y);
    }
  }, {
    key: 'execute',
    value: function execute() {
      return this.event();
    }
  }]);

  return Button;
}();

buttons = [];

prices = null;

lst = null;

parts = null;

cut_rod = function cut_rod(v, n2) {
  var c, i, index, indexes, j, k, l, len, len1, len2, len3, len4, m, max_c, n, n1, o, p, part, q, ref, ref1, ref2, temp;
  n1 = v.length;
  c = v.concat(function () {
    var l, len, ref, results;
    ref = range(n2 - n1);
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      results.push(0);
    }
    return results;
  }());
  parts = [];
  ref = range(n2);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    max_c = c[i];
    indexes = [i];
    ref1 = range(Math.floor((i + 1) / 2));
    for (n = 0, len1 = ref1.length; n < len1; n++) {
      j = ref1[n];
      k = i - j - 1;
      temp = c[j] + c[k];
      if (temp > max_c) {
        max_c = temp;
        indexes = [j, k];
      }
    }
    c[i] = max_c;
    part = function () {
      var len2, o, ref2, results;
      ref2 = range(n1);
      results = [];
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        j = ref2[o];
        results.push(0);
      }
      return results;
    }();
    if (i < n1) {
      for (o = 0, len2 = indexes.length; o < len2; o++) {
        index = indexes[o];
        part[index]++;
      }
    } else {
      ref2 = range(n1);
      for (p = 0, len3 = ref2.length; p < len3; p++) {
        m = ref2[p];
        for (q = 0, len4 = indexes.length; q < len4; q++) {
          index = indexes[q];
          part[m] += parts[index][m];
        }
      }
    }
    parts.push(part);
  }
  return [c, parts];
};

setup = function setup() {
  var fn, i, l, len, price;
  createCanvas(500, 400);
  textSize(16);
  prices = [1, 5, 8, 9];
  fn = function fn(i) {
    buttons.push(new Button(i + 1, 110 + 50 * i, 30, function () {
      if (prices[i] > 1) {
        prices[i]--;
      }
      buttons[2 * i + 1].title = prices[i];
      return execute();
    }));
    return buttons.push(new Button(price, 110 + 50 * i, 70, function () {
      prices[i]++;
      buttons[2 * i + 1].title = prices[i];
      return execute();
    }));
  };
  for (i = l = 0, len = prices.length; l < len; i = ++l) {
    price = prices[i];
    fn(i);
  }
  return execute();
};

draw = function draw() {
  var button, i, index, l, len, len1, n, ref, results;
  bg(0.5);
  textAlign(LEFT, CENTER);
  text('Rod Size:', 10, 30);
  text('Rod Value:', 10, 70);
  textAlign(CENTER, CENTER);
  for (l = 0, len = buttons.length; l < len; l++) {
    button = buttons[l];
    button.draw();
  }
  textAlign(LEFT, CENTER);
  ref = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9995, 9996, 9997, 9998, 9999];
  results = [];
  for (i = n = 0, len1 = ref.length; n < len1; i = ++n) {
    index = ref[i];
    results.push(text('Rod sized ' + (index + 1) + ' is cut to [' + parts[index] + '] and valued ' + lst[index], 10, 100 + 20 * i));
  }
  return results;
};

execute = function execute() {
  var _cut_rod, _cut_rod2;

  return _cut_rod = cut_rod(prices, 10000), _cut_rod2 = _slicedToArray(_cut_rod, 2), lst = _cut_rod2[0], parts = _cut_rod2[1], _cut_rod;
};

mousePressed = function mousePressed() {
  var button, l, len, results;
  results = [];
  for (l = 0, len = buttons.length; l < len; l++) {
    button = buttons[l];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.execute());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
