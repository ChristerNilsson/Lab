"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
// Använd _.range istf range
// Före setup, draw och mousePressed måste 'window.' användas
var Button, buttons, draw, h, minute, mouseDragged, preload, setup, snd, startTid;

Button = function () {
  function Button(title, x1, y1, r) {
    var radie1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;

    _classCallCheck(this, Button);

    this.title = title;
    this.x = x1;
    this.y = y1;
    this.r = r;
    this.radie = radie1;
  }

  _createClass(Button, [{
    key: "inside",
    value: function inside(x, y) {
      return this.radie > dist(this.x, this.y, x, y);
    }
  }, {
    key: "draw",
    value: function draw() {
      fc(0.5);
      if (this.title === "") {
        circle(this.x, this.y, this.radie);
      }
      fc(0);
      return text(this.title, this.x, this.y);
    }
  }]);

  return Button;
}();

buttons = [];

startTid = null;

minute = 0;

h = null;

snd = null;

preload = function preload() {
  return snd = new Audio("https://www.soundjay.com/button/beep-01a.wav");
};

setup = function setup() {
  var i, j, k, len, len1, radie, ref, ref1, results, vinkel, x, y;
  h = windowHeight;
  createCanvas(windowWidth, windowHeight);
  // scale 0.25
  print('Hello p5.js and Coffeescript!');
  angleMode(DEGREES);
  sc();
  ref = _.range(60);
  // minut
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    vinkel = 360 / 60 * i - 90;
    x = 0.48 * h * cos(vinkel);
    y = 0.48 * h * sin(vinkel);
    if (vinkel % 30 === 0) {
      radie = 0.012 * h;
    } else {
      radie = 0.01 * h;
    }
    buttons.push(new Button("", x, y, 1, radie));
  }
  ref1 = _.range(12);
  // timme
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    vinkel = 360 / 12 * i - 90;
    x = 0.4 * h * cos(vinkel);
    y = 0.4 * h * sin(vinkel);
    results.push(buttons.push(new Button((60 - 5 * i) % 60, x, y, 1, 0.07 * h)));
  }
  return results;
};

draw = function draw() {
  var button, j, len, start, stopp, t, tid;
  textAlign(CENTER, CENTER);
  textSize(0.1 * h);
  bg(1);
  translate(width / 2, height / 2);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  tid = new Date();
  t = minute - (tid - startTid) / -60000;
  if (t > 60) {
    snd.play();
    t = 0;
  }
  start = 6 * t - 90;
  stopp = 360 - 90;
  fc(1, 0, 0);
  arc(0, 0, 0.65 * h, 0.65 * h, start, stopp);
  fc(0);
  return textSize(20);
};

mouseDragged = function mouseDragged() {
  minute = map(mouseY, 0, height, 0, 60);
  return startTid = new Date();
};
//# sourceMappingURL=sketch.js.map
