'use strict';

// Generated by CoffeeScript 2.3.2
var SIZE,
    UCB,
    antal,
    board,
    computerMove,
    delta,
    draw,
    level,
    montecarlo,
    mousePressed,
    moves,
    newGame,
    setup,
    showSurr,
    thinkingTime,
    modulo = function modulo(a, b) {
  return (+a % (b = +b) + b) % b;
};

thinkingTime = 1000;

UCB = 2;

SIZE = Math.floor(600 / (N + 1));

level = 0;

moves = null;

board = null;

delta = 0;

montecarlo = null;

antal = 0;

setup = function setup() {
  createCanvas(600, 660);
  newGame();
  textAlign(CENTER, CENTER);
  return textSize(SIZE / 2);
};

newGame = function newGame() {
  antal = 0;
  print(' ');
  level += delta;
  if (level < 0) {
    level = 0;
  }
  delta = -2;
  board = new Board();
  moves = [];
  return montecarlo = null;
};

//computerMove()
showSurr = function showSurr() {
  var col, index, j, len, ref, results, row;
  ref = board.surr;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    //if index not in board.moves
    row = 1 + Math.floor(index / N);
    col = 1 + modulo(index, N);
    sc(0, 1, 0);
    fc();
    results.push(circle(SIZE * col, SIZE * row, 10));
  }
  return results;
};

draw = function draw() {
  var c, i, index, j, k, len, len1, msg, r, ref, x, y;
  bg(0);
  fc();
  sc(0.1, 0.3, 1);
  sw(0.2 * SIZE);
  ref = range(M * N);
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    r = Math.floor(index / N);
    c = modulo(index, N);
    x = SIZE * (c + 1);
    y = SIZE * (r + 1);
    circle(x, y, SIZE / 2);
  }
  sw(1);
  for (i = k = 0, len1 = moves.length; k < len1; i = ++k) {
    index = moves[i];
    r = Math.floor(index / N);
    c = modulo(index, N);
    x = SIZE * (c + 1);
    y = SIZE * (r + 1);
    fc(1, i % 2, 0);
    circle(x, y, SIZE * 0.4);
    fc(0);
    sc();
    text(i, x, y + 4);
  }
  sc();
  fc(1);
  msg = ['', 'Computer Wins!', 'Remis!', 'You win!'][delta + 2];
  text(msg, width / 2, height - SIZE / 2 - 10);
  text(level, SIZE / 2, height - SIZE / 2 - 10);
  //text UCB,width-50,SIZE/2-10
  return showSurr();
};

computerMove = function computerMove() {
  var m, result, start;
  montecarlo = new MonteCarlo(new Node(0, 0, null, board));
  start = Date.now();
  result = montecarlo.runSearch(Math.pow(2, level));
  print('ms=', Date.now() - start, 'games=' + montecarlo.root.n, 'nodes=' + antal);
  print(montecarlo);

  //montecarlo.dump montecarlo.root
  //print ''
  m = montecarlo.bestPlay(montecarlo.root);
  moves.push(m);
  board.move(m);
  if (board.done()) {
    return delta = -1;
  }
  if (board.moves.length === M * N) {
    return delta = 0;
  }
};

mousePressed = function mousePressed() {
  var col, index, row;
  antal = 0;
  if (delta !== -2) {
    return newGame();
  }
  row = int((mouseY - SIZE / 2) / SIZE);
  col = int((mouseX - SIZE / 2) / SIZE);
  if (!(0 <= row && row < N)) {
    return;
  }
  if (!(0 <= col && col < N)) {
    return;
  }
  index = row * N + col;
  if (0 <= index && index < M * N) {
    moves.push(index);
    board.move(index);
  }
  if (board.done()) {
    return delta = 1;
  }
  return computerMove();
};

// undo : -> if moves.length > 0 then list[moves.pop()].pop()
//# sourceMappingURL=sketch.js.map
