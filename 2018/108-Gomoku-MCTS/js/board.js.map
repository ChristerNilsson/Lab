{
  "version": 3,
  "file": "board.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\board.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "M = 10  # number of rows\r\nN = 10  # number of cols\r\nWINSIZE = 5 # number of markers to win\r\n\r\nclass Board\r\n\r\n\tconstructor : (moves='') -> \r\n\t\t@clear()\r\n\t\tfor digit in moves\r\n\t\t\t@move parseInt digit\r\n \r\n\tcopy : ->\r\n\t\tb = new Board()\r\n\t\tb.board = @board.slice() \r\n\t\tb.moves = @moves.slice()\r\n\t\tb\r\n\r\n\tsurr : -> # one step neighbours in eight directions \r\n\t\tres = {}\r\n\t\tfor move in @moves\r\n\t\t\trow = move // N\r\n\t\t\tcol = move %% N\r\n\t\t\tfor dr in [-1,0,1]\r\n\t\t\t\tfor dc in [-1,0,1]\r\n\t\t\t\t\tif dr!=0 or dc!=0\r\n\t\t\t\t\t\tif 0 <= row+dr < N and 0 <= col+dc < N \r\n\t\t\t\t\t\t\tindex = N*(row+dr)+col+dc \r\n\t\t\t\t\t\t\tres[index] = index\r\n\t\tres[move] = -1 for move in @moves\r\n\t\t(m for i,m of res when m != -1)\r\n\r\n\tclear : ->\r\n\t\t@moves = []\r\n\t\t@board = (0 for i in range M*N)\r\n\r\n\tmove : (play) ->\r\n\t\t@board[play] = @nextMarker()\r\n\t\t@moves.push play\r\n\r\n\tnextBoard : (play) ->\r\n\t\tb = @copy()\r\n\t\tb.move play\r\n\t\tb\r\n\r\n\tlastMarker : -> [1,2][@moves.length % 2]\r\n\tnextMarker : -> [2,1][@moves.length % 2]\r\n\r\n\tcalc : (dr,dc) ->\r\n\t\thelper = =>\r\n\t\t\trow = dr + index // N\r\n\t\t\tcol = dc + index %% N\r\n\t\t\tres = 0\r\n\t\t\twhile 0 <= row < N and 0 <= col < N and @board[row*N+col] == marker\r\n\t\t\t\tres++\r\n\t\t\t\trow += dr\r\n\t\t\t\tcol += dc\r\n\t\t\tres\r\n\t\tmarker = @lastMarker()\r\n\t\tindex = _.last @moves\r\n\t\t1 + helper() >= WINSIZE\r\n\r\n\tdone : ->\r\n\t\tif @moves.length <= 2 * (WINSIZE-1) then return false\r\n\t\tfor dr in [-1,0,1]\r\n\t\t\tfor dc in [-1,0,1]\r\n\t\t\t\tif dr!=0 or dc!=0\r\n\t\t\t\t\tif @calc dr,dc then return true \r\n\t\tfalse\r\n\r\n\tdraw : -> @moves.length == M*N # OBS! Kan vara vinst!\r\n\r\n\tlegalPlays : -> (i for i in range M*N when @board[i] == 0)\r\n\r\n\twinner : -> \r\n\t\tif @draw() then return 0.5\r\n\t\tif @done() then return [1,0][@moves.length % 2] \r\n\t\tnull\r\n\t\r\n######\r\n# rand : -> _.sample (i for b,i in @board when b.length < M)\r\n# getRandom = (b) -> int b * Math.random()\r\n# undo : -> \r\n# \tindex = @moves.pop() \r\n# \t@board[index] = @board[index].slice 0, @board[index].length-1\r\n\r\n\r\n\r\n"
  ]
}