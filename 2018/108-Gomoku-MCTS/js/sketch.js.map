{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "thinkingTime = 5000 # 50 milliseconds is ok\r\nUCB = 2\r\n\r\nSIZE = 600//(N+1)\r\nlevel = 0\r\nmoves = null\r\nboard = null\r\ndelta = 0\r\nmontecarlo = null\r\nantal = 0\r\n\r\nsetup = ->\r\n\tcreateCanvas 600,660\r\n\tnewGame()\r\n\ttextAlign CENTER,CENTER\r\n\ttextSize SIZE/2\r\n\r\nnewGame = () ->\r\n\tantal = 0\r\n\tprint ' '\r\n\tlevel += delta\r\n\tif level < 0 then level = 0\r\n\tdelta = -2\r\n\r\n\tboard = new Board()\r\n\tmoves = []\r\n\tmontecarlo = null\r\n\t#computerMove()\r\n\r\ndraw = ->\r\n\tbg 0\r\n\tfc()\r\n\tsc 0.1,0.3,1\r\n\tsw 0.2 * SIZE\r\n\tfor index in range M*N\r\n\t\tr = index // N\r\n\t\tc = index %% N\r\n\t\tx = SIZE*(c+1)\r\n\t\ty = SIZE*(r+1)\r\n\t\tcircle x, y, SIZE/2\r\n\r\n\tsw 1\r\n\tfor index,i in moves\r\n\t\tr = index // N\r\n\t\tc = index %% N\r\n\t\tx = SIZE*(c+1)\r\n\t\ty = SIZE*(r+1)\r\n\t\tfc 1,i%2,0\r\n\t\tcircle x, y, SIZE*0.4\r\n\t\tfc 0\r\n\t\tsc()\r\n\t\ttext i, x, y+4\r\n\tsc()\r\n\tfc 1\r\n\tmsg = ['','Computer Wins!','Remis!','You win!'][delta+2]\r\n\ttext msg,width/2,height-SIZE/2-10\r\n\ttext level,SIZE/2,height-SIZE/2-10\r\n\t#text UCB,width-50,SIZE/2-10\r\n\r\ncomputerMove = ->\r\n\tmontecarlo = new MonteCarlo new Node 0,0,null,board\r\n\tstart = Date.now()\r\n\tresult = montecarlo.runSearch 2**level\r\n\tprint 'ms=',Date.now()-start, 'games='+montecarlo.root.n, 'nodes='+antal\r\n\tprint montecarlo\t\r\n\r\n\t#montecarlo.dump montecarlo.root\r\n\t#print ''\r\n\r\n\tm = montecarlo.bestPlay montecarlo.root\r\n\tmoves.push m\r\n\tboard.move m\r\n\tif board.done() then return delta = -1\r\n\tif board.moves.length == M*N then delta = 0\t\r\n\r\nmousePressed = ->\r\n\tantal = 0\r\n\tif delta != -2 then return newGame()\r\n\trow = int (mouseY - SIZE / 2) / SIZE\r\n\tcol = int (mouseX - SIZE / 2) / SIZE\r\n\tif not (0 <= row < N) then return\r\n\tif not (0 <= col < N) then return\r\n\tindex = row*N + col\r\n\r\n\tif 0 <= index < M*N\r\n\t\tmoves.push index\r\n\t\tboard.move index\r\n\r\n\tif board.done() then return delta = 1\r\n\r\n\tcomputerMove()\r\n\r\n# undo : -> if moves.length > 0 then list[moves.pop()].pop()\r\n"
  ]
}