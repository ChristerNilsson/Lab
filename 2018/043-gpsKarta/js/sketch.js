'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var A, B, C, D, E, FILENAME, HEIGHT, SCALE, TRACKED, WIDTH, buttons, corner, cx, cy, draw, drawButtons, drawTrack, gps, hortal, img, locationUpdate, locationUpdateFail, makeCorners, mousePressed, mouseReleased, myround, position, preload, released, setup, show, spara, track, vercal;

FILENAME = 'karta.jpg';

spara = function spara(_ref, _ref2) {
  var _ref4 = _slicedToArray(_ref, 2),
      lat = _ref4[0],
      lon = _ref4[1];

  var _ref3 = _slicedToArray(_ref2, 2),
      x = _ref3[0],
      y = _ref3[1];

  return { lat: lat, lon: lon, x: x, y: y };
};

A = spara([59.300736, 18.125648], [554, 433]);

B = spara([59.300593, 18.163456], [5422, 158]);

C = spara([59.265339, 18.159501], [5384, 9114]);

D = spara([59.281411, 18.122435], [338, 5298 // Sockenvägen/Ätravägen
]);

E = spara([59.266262, 18.144961], [3496, 8980 // Garden Center
]);

WIDTH = 6912;

HEIGHT = 9216;

cx = 0;
cy = 0 // center (image coordinates)
;


SCALE = 1;

released = true; // android

gps = null;

TRACKED = 5; // circles shows the player's position

position = null; // gps position (pixels)

track = []; // five latest GPS positions (pixels)

buttons = [];

img = null;

preload = function preload() {
  return img = loadImage(FILENAME);
};

myround = function myround(x) {
  var dec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

  x *= Math.pow(10, dec);
  x = round(x);
  return x / Math.pow(10, dec);
};

show = function show(prompt, p) {
  return print(prompt, 'http://maps.google.com/maps?q=' + p.lat + ',' + p.lon);
};

vercal = function vercal(a, b, y) {
  var lat, lon, x;
  x = map(y, a.y, b.y, a.x, b.x);
  lat = map(y, a.y, b.y, a.lat, b.lat);
  lon = map(y, a.y, b.y, a.lon, b.lon);
  return { lat: lat, lon: lon, x: x, y: y };
};

hortal = function hortal(a, b, x) {
  var lat, lon, y;
  y = map(x, a.x, b.x, a.y, b.y);
  lat = map(x, a.x, b.x, a.lat, b.lat);
  lon = map(x, a.x, b.x, a.lon, b.lon);
  return { lat: lat, lon: lon, x: x, y: y };
};

corner = function corner(a, b, c, d, x, y) {
  var lat, lon;
  lon = map(x, a.x, b.x, a.lon, b.lon);
  lat = map(y, c.y, d.y, c.lat, d.lat);
  return { lat: lat, lon: lon, x: x, y: y };
};

makeCorners = function makeCorners() {
  var P1, P2, P3, P4, f, g, h, i, j, k, l, m, ne, nw, se, sw;
  f = vercal(A, D, 0);
  k = vercal(A, D, HEIGHT);
  g = vercal(B, C, 0);
  j = vercal(B, C, HEIGHT);
  m = hortal(A, B, 0);
  h = hortal(A, B, WIDTH);
  l = hortal(E, C, 0);
  i = hortal(E, C, WIDTH);
  nw = corner(f, g, m, l, 0, 0);
  ne = corner(f, g, h, i, WIDTH, 0);
  se = corner(k, j, h, i, WIDTH, HEIGHT);
  sw = corner(k, j, m, l, 0, HEIGHT);
  gps = new GPS(nw, ne, se, sw, WIDTH, HEIGHT);
  // Testpunkter
  P1 = spara([59.275687, 18.155340], [4697, 6518 // krknök
  ]);
  P2 = spara([59.280348, 18.155122], [4590, 5310 // trevägsskylt
  ]);
  P3 = B;
  P4 = spara([59.279172, 18.149319], [3877, 5681 // Bron
  ]);
  gps.check_gps2bmp(P1, [6, 7]);
  gps.check_gps2bmp(P2, [24, 38]);
  gps.check_gps2bmp(P3, [0, 1]);
  gps.check_gps2bmp(P4, [-4, 7]);
  gps.check_bmp2gps(P1, [2.4, -1.2]);
  gps.check_bmp2gps(P2, [14.9, -7.35]);
  gps.check_bmp2gps(P3, [0.2, 0]);
  return gps.check_bmp2gps(P4, [2.3, 2.75]);
};

// show 'A',A
// show 'B',B
// show 'C',C
// show 'D',D
// show 'E',E
// show 'F',F
// show 'G',G
// show 'H',H
// show 'I',I
// show 'J',J
// show 'K',K
// show 'L',L
// show 'M',M
// show 'N',N
// show 'O',O
// show 'P',P
// show 'Q',Q
locationUpdate = function locationUpdate(p) {
  var lat, lon;
  lat = p.coords.latitude;
  lon = p.coords.longitude;
  position = gps.gps2bmp(lat, lon);
  track.push(position);
  if (track.length > TRACKED) {
    return track.shift();
  }
};

locationUpdateFail = function locationUpdateFail(error) {
  var messages;
  if (error.code === error.PERMISSION_DENIED) {
    return messages = ['Check location permissions'];
  }
};

setup = function setup() {
  var x, x1, x2, y, y1, y2;
  createCanvas(windowWidth, windowHeight);
  x = width / 2;
  y = height / 2;
  x1 = 100;
  x2 = width - 100;
  y1 = 100;
  y2 = height - 100;
  buttons.push(new Button('X', x1, y1));
  buttons.push(new Button('up', x, y1, function () {
    return cy -= height / 2 / SCALE;
  }));
  buttons.push(new Button('Y', x2, y1));
  buttons.push(new Button('left', x1, y, function () {
    return cx -= width / 2 / SCALE;
  }));
  buttons.push(new Button('C', x, y, function () {
    var _position, _position2;

    return _position = position, _position2 = _slicedToArray(_position, 2), cx = _position2[0], cy = _position2[1], _position;
  }));
  buttons.push(new Button('right', x2, y, function () {
    return cx += width / 2 / SCALE;
  }));
  buttons.push(new Button('down', x, y2, function () {
    return cy += height / 2 / SCALE;
  }));
  buttons.push(new Button('-', x1, y2, function () {
    return SCALE /= 1.2;
  }));
  buttons.push(new Button('+', x2, y2, function () {
    return SCALE *= 1.2;
  }));
  cx = WIDTH / 2;
  cy = HEIGHT / 2;

  makeCorners();
  return navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
};

drawTrack = function drawTrack() {
  var i, len, n, x, y;
  fc();
  sw(2);
  sc(1, 1, 0); // YELLOW
  push();
  translate(width / 2, height / 2);
  scale(SCALE);
  for (i = n = 0, len = track.length; n < len; i = ++n) {
    var _track$i = _slicedToArray(track[i], 2);

    x = _track$i[0];
    y = _track$i[1];

    circle(x - cx, y - cy, 5 * (track.length - i));
  }
  return pop();
};

drawButtons = function drawButtons() {
  var button, len, n, results;
  sw(1);
  sc(1, 1, 0, 0.5);
  buttons[0].prompt = round(cx);
  buttons[2].prompt = round(cy);
  results = [];
  for (n = 0, len = buttons.length; n < len; n++) {
    button = buttons[n];
    results.push(button.draw());
  }
  return results;
};

draw = function draw() {
  bg(0);
  image(img, 0, 0, width, height, cx - width / SCALE / 2, cy - height / SCALE / 2, width / SCALE, height / SCALE);
  drawTrack();
  return drawButtons();
};

mouseReleased = function mouseReleased() {
  // to make Android work
  released = true;
  return false;
};

mousePressed = function mousePressed() {
  var button, len, n, results;
  if (!released) {
    // to make Android work
    return;
  }
  released = false;
  results = [];
  for (n = 0, len = buttons.length; n < len; n++) {
    button = buttons[n];
    if (button.radius > dist(mouseX, mouseY, button.x, button.y)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
