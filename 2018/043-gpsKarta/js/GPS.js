"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var GPS;

GPS = function () {
  // hanterar GPS konvertering
  function GPS(nw, ne, se, sw, w, h) {
    _classCallCheck(this, GPS);

    this.nw = nw;
    this.ne = ne;
    this.se = se;
    this.sw = sw;
    this.w = w;
    this.h = h;
  }

  _createClass(GPS, [{
    key: "calcLon",
    value: function calcLon(mlat, mlon, a, b) {
      var lat, lon, x, y;
      x = map(mlon, a.lon, b.lon, a.x, b.x);
      y = map(mlon, a.lon, b.lon, a.y, b.y);
      lat = map(mlon, a.lon, b.lon, a.lat, b.lat);
      lon = mlon;
      return { lat: lat, lon: lon, x: x, y: y };
    }
  }, {
    key: "calcLat",
    value: function calcLat(mlat, mlon, a, b) {
      var lat, lon, x, y;
      x = map(mlat, a.lat, b.lat, a.x, b.x);
      y = map(mlat, a.lat, b.lat, a.y, b.y);
      lat = mlat;
      lon = map(mlat, a.lat, b.lat, a.lon, b.lon);
      return { lat: lat, lon: lon, x: x, y: y };
    }
  }, {
    key: "gps2bmp",
    value: function gps2bmp(mlat, mlon) {
      var q1, q2, x, y;
      q1 = this.calcLon(mlat, mlon, this.nw, this.ne);
      q2 = this.calcLon(mlat, mlon, this.sw, this.se);
      x = round(map(mlat, q1.lat, q2.lat, q1.x, q2.x));
      y = round(map(mlat, q1.lat, q2.lat, q1.y, q2.y));
      return [x, y];
    }

    // q3 = calcLat mlat,mlon,N,Q
    // q4 = calcLat mlat,mlon,O,P
    // x2 = map mlon, q3.lon,q4.lon, q3.x, q4.x
    // y2 = map mlon, q3.lon,q4.lon, q3.y, q4.y
    //[int(x1),int(y1)]

  }, {
    key: "check_gps2bmp",
    value: function check_gps2bmp(p, error) {
      var x, y;

      var _gps2bmp = this.gps2bmp(p.lat, p.lon);

      var _gps2bmp2 = _slicedToArray(_gps2bmp, 2);

      x = _gps2bmp2[0];
      y = _gps2bmp2[1];

      return assert(error, [x - p.x, y - p.y]);
    }
  }, {
    key: "calcx",
    value: function calcx(x, y, a, b) {
      var lat, lon;
      lon = map(x, a.x, b.x, a.lon, b.lon);
      lat = map(x, a.x, b.x, a.lat, b.lat);
      return { lat: lat, lon: lon, x: x, y: y };
    }
  }, {
    key: "calcy",
    value: function calcy(x, y, a, b) {
      var lat, lon;
      lon = map(y, a.y, b.y, a.lon, b.lon);
      lat = map(y, a.y, b.y, a.lat, b.lat);
      return { lat: lat, lon: lon, x: x, y: y };
    }
  }, {
    key: "bmp2gps",
    value: function bmp2gps(mx, my) {
      var q, q1, q2;
      q1 = this.calcx(mx, 0, this.nw, this.ne);
      q2 = this.calcx(mx, HEIGHT, this.sw, this.se);
      q = this.calcy(mx, my, q1, q2);
      return [myround(q.lat, 6), myround(q.lon, 6)];
    }
  }, {
    key: "check_bmp2gps",
    value: function check_bmp2gps(p, error) {
      var lat, lon;

      var _bmp2gps = this.bmp2gps(p.x, p.y);

      var _bmp2gps2 = _slicedToArray(_bmp2gps, 2);

      lat = _bmp2gps2[0];
      lon = _bmp2gps2[1];

      return assert(error, [myround(100000 * (lat - p.lat), 6), myround(50000 * (lon - p.lon), 6)]);
    }
  }]);

  return GPS;
}();
//# sourceMappingURL=GPS.js.map
