"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Turtle,
    indexOf = [].indexOf;

Turtle = function () {
  function Turtle() {
    _classCallCheck(this, Turtle);

    this.loc = createVector();
    this.ploc = createVector();
    this.heading = 0;
    this.pen = true;
    this.show = true;
    this.counter = 1;
    this.labelstring = "";
    this.labelheight = 15;
    this.penwidth = 1;
    this.pencolor = 0;
    this.commands = {};
    this.variables = {};
  }

  _createClass(Turtle, [{
    key: "forward",
    value: function forward(distance) {
      var dir;
      this.ploc = this.loc.copy();
      dir = createVector(0, -distance).rotate(this.heading);
      this.loc.add(dir);
      if (this.pen) {
        return line(this.ploc.x, this.ploc.y, this.loc.x, this.loc.y);
      }
    }
  }, {
    key: "back",
    value: function back(distance) {
      return this.forward(-distance);
    }
  }, {
    key: "right",
    value: function right(degree) {
      return this.heading += radians(degree);
    }
  }, {
    key: "left",
    value: function left(degree) {
      return this.right(-degree);
    }
  }, {
    key: "penup",
    value: function penup() {
      return this.pen = false;
    }
  }, {
    key: "pendown",
    value: function pendown() {
      return this.pen = true;
    }
  }, {
    key: "hideturtle",
    value: function hideturtle() {
      return this.show = false;
    }
  }, {
    key: "showturtle",
    value: function showturtle() {
      return this.show = true;
    }
  }, {
    key: "home",
    value: function home() {
      return this.setxy(0, 0);
    }
  }, {
    key: "setx",
    value: function setx(x) {
      return this.setxy(x, this.loc.y);
    }
  }, {
    key: "sety",
    value: function sety(y) {
      return this.setxy(this.loc.x, y);
    }
  }, {
    key: "setxy",
    value: function setxy(x, y) {
      this.ploc = this.loc.copy();
      this.loc.x = x;
      this.loc.y = y;
      if (this.pen) {
        return line(this.ploc.x, this.ploc.y, this.loc.x, this.loc.y);
      }
    }
  }, {
    key: "setheading",
    value: function setheading(degree) {
      return this.heading = radians(degree);
    }
  }, {
    key: "arc",
    value: function (_arc) {
      function arc(_x, _x2) {
        return _arc.apply(this, arguments);
      }

      arc.toString = function () {
        return _arc.toString();
      };

      return arc;
    }(function (degree, radius) {
      noFill();
      return arc(this.loc.x, this.loc.y, radius * 2, this.heading, this.heading + degree);
    })
  }, {
    key: "print",
    value: function print(string) {
      push();
      translate(-width / 2, -height / 2);
      textSize(10);
      text(string, 10, this.counter * 20);
      pop();
      return this.counter++;
    }
  }, {
    key: "label",
    value: function label(string) {
      return this.labelstring = string;
    }
  }, {
    key: "setlabelheight",
    value: function setlabelheight(_height) {
      return this.labelheight = _height;
    }
  }, {
    key: "repeat",
    value: function repeat(number, block) {
      var i, j, len, ref, results;
      ref = range(number);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(block());
      }
      return results;
    }
  }, {
    key: "setwidth",
    value: function setwidth(penwidth) {
      return this.penwidth = penwidth;
    }
  }, {
    key: "to",
    value: function to(name, command) {
      return this.commands[name] = command;
    }
  }, {
    key: "setcolor",
    value: function setcolor(pencolor) {
      return this.pencolor = pencolor;
    }
  }, {
    key: "random",
    value: function (_random) {
      function random(_x3) {
        return _random.apply(this, arguments);
      }

      random.toString = function () {
        return _random.toString();
      };

      return random;
    }(function (maximum) {
      return floor(random(maximum));
    })
  }, {
    key: "make",
    value: function make(name, variable) {
      return this.variables[name] = variable;
    }
  }, {
    key: "sum",
    value: function sum(a, b) {
      return a + b;
    }
  }, {
    key: "difference",
    value: function difference(a, b) {
      return a - b;
    }
  }, {
    key: "_for",
    value: function _for(minimum, maximum, increment, block) {
      var i, j, len, ref, results;
      ref = range(minimum, maximum, increment);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(block(i));
      }
      return results;
    }
  }, {
    key: "first",
    value: function first(list) {
      return this.item(1, list);
    }
  }, {
    key: "last",
    value: function last(list) {
      return this.item(list.length, list);
    }
  }, {
    key: "item",
    value: function item(number, list) {
      return list[number - 1];
    }
  }, {
    key: "pick",
    value: function pick(list) {
      return this.item(this.random(list.length + 1, list));
    }
  }, {
    key: "butfirst",
    value: function butfirst(list) {
      var newlist;
      newlist = [];
      this._for(indexOf.call(range(2, list.length), i) >= 0, function (i) {
        return newlist.push(list.item(i));
      });
      return newlist;
    }
  }, {
    key: "butlast",
    value: function butlast(list) {
      var newlist;
      newlist = [];
      this._for(indexOf.call(range(list.length - 1), i) >= 0, function (i) {
        return newlist.push(list.item(i));
      });
      return newlist;
    }
  }]);

  return Turtle;
}();
//# sourceMappingURL=sketch.js.map
