'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Human, SIZE, board, delta, draw, level, list, mousePressed, moves, newGame, o, setup, x;

SIZE = 600 / 7;

level = 0;

list = null;

moves = null;

x = null; // Dator

o = null; // Human

board = null;

delta = 0;

setup = function setup() {
  createCanvas(600, 600);
  x = new Computer('Dator');
  o = new Human('Human');
  return newGame();
};

newGame = function newGame() {
  var i;
  level += delta;
  if (level < 0) {
    level = 0;
  }
  delta = -2;
  board = new Board();
  list = function () {
    var k, len, ref, results;
    ref = range(7);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      results.push([]);
    }
    return results;
  }();
  return moves = [];
};

draw = function draw() {
  var column, i, j, k, l, len, len1, len2, len3, msg, n, nr, p, ref, ref1;
  bg(0);
  textAlign(CENTER, CENTER);
  textSize(SIZE / 2);
  fc();
  sc(0.1, 0.3, 1);
  sw(0.2 * SIZE);
  ref = range(7);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(6);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      circle(width / 2 - SIZE * 3 + SIZE * i, height - SIZE / 2 - SIZE * j, SIZE / 2);
    }
  }
  for (i = n = 0, len2 = list.length; n < len2; i = ++n) {
    column = list[i];
    for (j = p = 0, len3 = column.length; p < len3; j = ++p) {
      nr = column[j];
      fc(1, nr % 2, 0);
      sw(1);
      circle(width / 2 - SIZE * 3 + SIZE * i, height - SIZE / 2 - SIZE * j, SIZE * 0.4);
      fc(0);
      sc();
      text(nr, width / 2 - SIZE * 3 + SIZE * i, height - SIZE / 2 - SIZE * j);
    }
  }
  sc();
  fc(1);
  msg = '';
  if (delta === -1) {
    msg = 'Datorn vann!';
  }
  if (delta === 0) {
    msg = 'Remis!';
  }
  if (delta === 1) {
    msg = 'Du vann!';
  }
  text(msg, width / 2, SIZE / 2);
  return text(level, 50, 50);
};

mousePressed = function mousePressed() {
  var m, nr;
  if (delta !== -2) {
    return newGame();
  }
  nr = int((mouseX - (width - 7 * SIZE) / 2) / SIZE);
  if (0 <= nr && nr <= 6) {
    moves.push(nr);
    board.move(nr);
    list[nr].push(moves.length);
  }
  if (board.calc()) {
    return delta = 1;
  }
  m = x.move(board);
  moves.push(m);
  board.move(m);
  list[m].push(moves.length);
  if (board.calc()) {
    return delta = -1;
  }
  if (board.moves.length === 42) {
    return delta = 0;
  }
};

({
  undo: function undo() {
    if (moves.length > 0) {
      return list[moves.pop()].pop();
    }
  }
});

Human = function Human(name) {
  _classCallCheck(this, Human);

  this.name = name;
  this.move = -1;
};
//# sourceMappingURL=sketch.js.map
