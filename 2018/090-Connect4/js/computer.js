"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Computer;

Computer = function () {
  function Computer() {
    _classCallCheck(this, Computer);
  }

  _createClass(Computer, [{
    key: "play_complete",
    value: function play_complete(b) {
      var marker;
      while (true) {
        marker = b.last_marker();
        b.move(b.rand());
        if (b.done()) {
          return marker;
        }
        if (M * N === b.moves.length) {
          return "draw";
        }
      }
    }
  }, {
    key: "move",
    value: function move(board) {
      var b, cand, cands, i, j, k, l, len, len1, len2, m, marker, mrkr, n, ref, ref1, start;
      start = Date.now();
      marker = board.last_marker();
      cands = function () {
        var k, len, ref, results;
        ref = range(N);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          m = ref[k];
          if (board.board[m].length < M) {
            results.push([0, m]);
          }
        }
        return results;
      }();
      if (cands.length === 1) {
        return cands[0][1];
      }
      for (k = 0, len = cands.length; k < len; k++) {
        cand = cands[k];
        ref = range(Math.pow(2, level));
        for (l = 0, len1 = ref.length; l < len1; l++) {
          j = ref[l];
          ref1 = range(PROBES);
          // shorter ranges
          for (n = 0, len2 = ref1.length; n < len2; n++) {
            i = ref1[n];
            b = board.copy();
            b.move(cand[1]);
            if (b.done()) {
              return cand[1];
            }
            mrkr = this.play_complete(b);
            if (mrkr === marker) {
              cand[0]++;
            } else if (mrkr !== 'draw') {
              cand[0]--;
            }
          }
        }
      }
      cand = _.max(cands, function (cand) {
        return cand[0];
      });
      print(Date.now() - start, -cand[0]);
      return cand[1];
    }
  }]);

  return Computer;
}();
//# sourceMappingURL=computer.js.map
