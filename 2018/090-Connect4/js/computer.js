"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Computer;

Computer = function () {
  function Computer() {
    _classCallCheck(this, Computer);
  }

  _createClass(Computer, [{
    key: "play_complete",
    value: function play_complete(b) {
      var marker;
      while (true) {
        marker = b.last_marker();
        b.move(b.rand());
        if (b.done()) {
          return marker;
        }
        if (M * N === b.moves.length) {
          return "draw";
        }
      }
    }
  }, {
    key: "move",
    value: function move(board) {
      var b, best, bestm, cands, i, j, k, l, len, len1, len2, m, marker, mrkr, ref, score;
      score = [0, 0, 0, 0, 0, 0, 0];
      marker = board.last_marker();
      cands = function () {
        var j, len, ref, results;
        ref = range(N);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (board.board[m].length < M) {
            results.push(m);
          }
        }
        return results;
      }();
      if (cands.length === 1) {
        return cands[0];
      }
      for (j = 0, len = cands.length; j < len; j++) {
        m = cands[j];
        ref = range(20 * Math.pow(2, level));
        for (k = 0, len1 = ref.length; k < len1; k++) {
          i = ref[k];
          b = board.copy();
          b.move(m);
          if (b.done()) {
            return m;
          }
          mrkr = this.play_complete(b);
          if (mrkr === marker) {
            score[m]++;
          } else if (mrkr !== 'draw') {
            score[m]--;
          }
        }
      }
      bestm = cands[0];
      best = score[bestm];
      for (l = 0, len2 = cands.length; l < len2; l++) {
        m = cands[l];
        if (score[m] > best) {
          bestm = m;
          best = score[m];
        }
      }
      return bestm;
    }
  }]);

  return Computer;
}();
//# sourceMappingURL=computer.js.map
