{
  "version": 3,
  "file": "board.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\board.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "getRandom = (b) -> int b * Math.random()\r\n\r\nclass Board\r\n\r\n\tconstructor : (moves='') -> # @board,@moves\r\n\t\t@clear()\r\n\t\tfor digit in moves\r\n\t\t\t@move int digit\r\n \r\n\tcopy : ->\r\n\t\tb = new Board()\r\n\t\tb.board = @board.slice() \r\n\t\tb.moves = @moves.slice()\r\n\t\tb\r\n\r\n\trand : -> _.sample (i for b,i in @board when b.length < M)\r\n\r\n\tclear : ->\r\n\t\t@moves = []\r\n\t\t@board = ['', '', '', '', '', '', '']\r\n\r\n\tmove : (m) ->\r\n\t\t@board[m] += @next_marker()\r\n\t\t@moves.push m\r\n\r\n\tundo : -> @board[@moves.pop()].pop()\r\n\r\n\tlast_marker : -> 'OX'[@moves.length % 2]\r\n\tnext_marker : -> 'XO'[@moves.length % 2]\r\n\r\n\tcalc_columns : ->\r\n\t\tm = _.last @moves\r\n\t\trow = @board[m]\r\n\t\ti = row.length - 2\r\n\t\tif i<2 then return false # 50% more pos/sec\r\n\t\tmarker = @last_marker()\r\n\t\tcount = 1\r\n\t\twhile row[i] == marker and i >= 0\r\n\t\t\tcount++\r\n\t\t\ti--\r\n\t\tcount == 4\r\n\r\n\tcalc_rows : ->\r\n\t\tmarker = @last_marker()\r\n\t\tm = _.last @moves\r\n\t\tcount = 1\r\n\t\tn = @board[m].length - 1\r\n\r\n\t\tfor i in range m+1,N\r\n\t\t\tif n >= @board[i].length or @board[i][n] != marker then break\r\n\t\t\tcount++\r\n\r\n\t\tfor i in range m-1,-1,-1\r\n\t\t\tif n >= @board[i].length or @board[i][n] != marker then break\r\n\t\t\tcount++\r\n\r\n\t\tcount >= 4\r\n\r\n\thelper : (di, dj, marker, m, n) ->\r\n\t\ti = m+di\r\n\t\tj = n+dj\r\n\t\tres = 0\r\n\t\twhile 0 <= j < M and 0 <= i < N and j < @board[i].length and @board[i][j] == marker\r\n\t\t\tres++\r\n\t\t\ti += di\r\n\t\t\tj += dj\r\n\t\treturn res\r\n\r\n\tcalc_diagonal : (dj) ->\r\n\t\tmarker = @last_marker()\r\n\t\tm = _.last @moves\r\n\t\tcount = 1\r\n\t\tn = @board[m].length - 1\r\n\t\tcount += @helper +1,+dj,marker,m,n\r\n\t\tcount += @helper -1,-dj,marker,m,n\r\n\t\tcount >= 4\r\n\r\n\tdone : ->\r\n\t\tif @calc_columns()   then return true\r\n\t\tif @calc_rows()      then return true\r\n\t\tif @calc_diagonal +1 then return true\r\n\t\tif @calc_diagonal -1 then return true\r\n\t\tfalse\r\n"
  ]
}