{
  "version": 3,
  "file": "board.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\board.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,IAAA,OAAA,SAAA;;AAAA,UAAU;;AAEV,YAAY,mBAAA,AAAC;SAAM,IAAI,IAAI,AAAI,KAAnB,AAAO,AAAQ,AAAK;;;AAEhC,AAAM;AAEL,AAAc;AAAA,QAAC,4EAAD,AAAO;;;;AACpB;QAAA,OAAA,GAAA;AAAA,AAAC,SAAD,AAAC;AACD,SAAA,oCAAA;;AACC,AAAC,WAAD,AAAC,KAAK,IADP,AACC,AAAM,AAAI;AAHE;AAKd,AAAO;;;;2BACN;UAAA;AAAA,UAAI,IAAA,AAAI;AACR,AAAC,QAAD,AAAE,QAAQ,AAAC,KAAA,AAAK,MAAN,AAAO;AACjB,AAAC,QAAD,AAAE,QAAQ,AAAC,KAAA,AAAK,MAAN,AAAO;aAHX,AAIN;AAED,AAAO;;;2BAAG;UAAA,GAAA;aAAA,AAAC,EAAD,AAAE;yBAAU;mBAAA;;AAAA,aAAA,4CAAA;;cAAuB,AAAC,EAAD,AAAE,SAAS;yBAApC;AAAE;AAAA;;aAAf,AAAG;AAEV,AAAQ;;;;AACP,AAAC,WAAD,AAAC,QAAD,AAAS;aACT,AAAC,KAAD,AAAC,QAAQ,CAAA,AAAC,IAAD,AAAK,IAAL,AAAS,IAAT,AAAa,IAAb,AAAiB,IAAjB,AAAqB,IAFvB,AAEE,AAAyB;AAEnC,AAAO;;;yBAAA,AAAC;AACP,AAAC,WAAA,AAAM,MAAP,AAAO,MAAM,AAAC,KAAD,AAAC;aACd,AAAC,KAAA,AAAK,MAAN,AAAO,KAFD,AAEN,AAAY;AAEb,AAAO;;;;aAAG,AAAC,KAAA,AAAM,MAAA,AAAC,KAAA,AAAK,MAAN,AAAO,AAAM,OAAvB,AAAG,AAAqB;AAE/B,AAAa;;;;aAAG,AAAK,KAAA,AAAC,KAAA,AAAK,MAAN,AAAO,SAAf,AAAQ,AAAgB;AACrC,AAAa;;;;aAAG,AAAK,KAAA,AAAC,KAAA,AAAK,MAAN,AAAO,SAAf,AAAQ,AAAgB;AAErC,AAAO;;;yBAAA,AAAC,IAAD,AAAI;AACV;;UAAA,KAAA,QAAA,QAAA;AAAA,eAAS,kBACR;YAAA,GAAA,GAAA;AAAA,YAAI,MAAM;AACV,YAAI,MAAM;AACV,cAAM,AACN;eAAM,KAAA,AAAK,KAAL,AAAK,IAAL,AAAS,AAAM,CAAf,IAAe,KAAA,AAAK,KAAL,AAAK,IAApB,AAAe,AAAS,KAAM,IAAI,AAAC,MAAA,AAAM,MAAA,AAAE,GAA3C,AAA4C,UAAW,AAAC,MAAA,AAAM,MAAA,AAAG,GAAV,AAAU,OAAvE,AAA6E;AAC5E;AACA,eAAK;AACL,eAHD,AAGM;;eAPE,AAQR;;AACD,eAAS,AAAC,KAAD,AAAC;AACV,YAAM,AAAC,EAAD,AAAE,KAAK,AAAC,KAAR,AAAQ;AACd,YAAM,AAAC,KAAA,AAAM,MAAA,AAAI,KAAX,AAAY,SAAO;aACzB,IAAA,AAAI,YAbE,AAaU;AAEjB,AAAO;;;2BACN;UAAA,IAAA,IAAA,GAAA,GAAA,KAAA,MAAA,KAAA;AAAA,UAAG,AAAC,KAAA,AAAK,MAAN,AAAO,UAAU,AAAI,KAAC,UAAzB,AAAwB,AAAS,IAAQ;eAAzC,AAAgD;AAChD;;AAAA,WAAA,kCAAA;iBACC;;AAAA,aAAA,qCAAA;;AACC,cAAG,OAAA,AAAI,KAAK,OAAZ,AAAgB;AACf,gBAAG,AAAC,KAAD,AAAC,KAAD,AAAM,IAAT,AAAG,AAAS,KAAQ;qBAApB,AAA2B;AAD5B;AADD;AADD;;aAFM,AAMN;AAjDF",
  "sourcesContent": [
    "WINSIZE = 4\r\n\r\ngetRandom = (b) -> int b * Math.random()\r\n\r\nclass Board\r\n\r\n\tconstructor : (moves='') -> # @board,@moves\r\n\t\t@clear()\r\n\t\tfor digit in moves\r\n\t\t\t@move int digit\r\n \r\n\tcopy : ->\r\n\t\tb = new Board()\r\n\t\tb.board = @board.slice() \r\n\t\tb.moves = @moves.slice()\r\n\t\tb\r\n\r\n\trand : -> _.sample (i for b,i in @board when b.length < M)\r\n\r\n\tclear : ->\r\n\t\t@moves = [] # list of 0..6\r\n\t\t@board = ['', '', '', '', '', '', '']\r\n\r\n\tmove : (m) ->\r\n\t\t@board[m] += @nextMarker()\r\n\t\t@moves.push m\r\n\r\n\tundo : -> @board[@moves.pop()].pop()\r\n\r\n\tlastMarker : -> 'OX'[@moves.length % 2]\r\n\tnextMarker : -> 'XO'[@moves.length % 2]\r\n\r\n\tcalc : (dr,dc) ->\r\n\t\thelper = =>\r\n\t\t\tr = row + dr \r\n\t\t\tc = col + dc\r\n\t\t\tres = 0\r\n\t\t\twhile 0 <= r < M and 0 <= c < N and r < @board[c].length and @board[c][r] == marker\r\n\t\t\t\tres++\r\n\t\t\t\tr += dr\r\n\t\t\t\tc += dc\r\n\t\t\tres\r\n\t\tmarker = @lastMarker()\r\n\t\tcol = _.last @moves\r\n\t\trow = @board[col].length-1\r\n\t\t1 + helper() >= WINSIZE\r\n\r\n\tdone : ->\r\n\t\tif @moves.length <= 2 * (WINSIZE-1) then return false\r\n\t\tfor dr in [-1,0,1]\r\n\t\t\tfor dc in [-1,0,1]\r\n\t\t\t\tif dr!=0 or dc!=0\r\n\t\t\t\t\tif @calc dr,dc then return true \r\n\t\tfalse\r\n"
  ]
}