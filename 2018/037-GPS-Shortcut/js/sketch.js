'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, R, a, b, buttons, count, draw, dx, dy, hist, locationUpdate, locationUpdateFail, mousePressed, position, setup, start, stopp, track, wgs84, wgs84ToXY;

position = {
  x: 0,
  y: 0 // home
};

R = 80;

buttons = [];

hist = [];

track = [];

a = 7;

b = 9;

count = 0;

start = null;

stopp = null;

wgs84 = null;

dx = null;

dy = null;

Button = function () {
  function Button(x1, y1, r, txt1) {
    _classCallCheck(this, Button);

    this.x = x1;
    this.y = y1;
    this.r = r;
    this.txt = txt1;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      if (this.r > dist(position.x, position.y, this.x, this.y)) {
        fc(1, 1, 0, 0.5);
      } else {
        fc(1, 1, 1, 0.5);
      }
      if (stopp != null) {
        fc(0, 1, 0);
      }
      if (this.r > 0) {
        circle(this.x, this.y, this.r);
      }
      fc(0);
      return text(this.txt, this.x, this.y);
    }
  }, {
    key: 'execute',
    value: function execute() {
      if (this.r > dist(position.x, position.y, this.x, this.y)) {
        this.event();
        if (a === b) {
          return stopp = millis();
        }
      }
    }
  }, {
    key: 'spara',
    value: function spara(value) {
      count++;
      hist.push(a);
      a = value;
      return buttons[4].txt = a;
    }
  }]);

  return Button;
}();

locationUpdate = function locationUpdate(p) {
  var p1;
  p1 = {
    lat: p.coords.latitude,
    lng: p.coords.longitude,
    timestamp: p.timestamp // milliseconds since 1970
  };
  position = wgs84ToXY(p1.lat, p1.lng);
  track.push(position);
  if (track.length > 10) {
    return track.shift();
  }
};

locationUpdateFail = function locationUpdateFail(error) {};

wgs84ToXY = function wgs84ToXY(lat, lon) {
  var x, y;
  x = int(map(lon, 18.132735 - dx, 18.132735 + dx, 0, 800));
  y = int(map(lat, 59.265205 + dy, 59.265205 - dy, 0, 800));
  return { x: x, y: y };
};

setup = function setup() {
  var i, j, labels, len, p1, p2, p3, p4, txt, x, y;
  createCanvas(800, 800);
  dx = 0.01 / (1137 / width);
  dy = 0.01 / (2224 / height);
  p1 = new LatLon(59.265205 + dy, 18.132735);
  p2 = new LatLon(59.265205 - dy, 18.132735);
  p3 = new LatLon(59.265205, 18.132735 - dx);
  p4 = new LatLon(59.265205, 18.132735 + dx);
  print(p3.distanceTo(p4));
  print(p1.distanceTo(p2));
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  start = millis();
  angleMode(DEGREES);
  textAlign(CENTER, CENTER);
  textSize(50);
  labels = "+2 *2 /2".split(' ');
  for (i = j = 0, len = labels.length; j < len; i = ++j) {
    txt = labels[i];
    x = width / 2 + 200 * cos(i * 360 / labels.length - 90);
    y = height / 2 + 200 * sin(i * 360 / labels.length - 90);
    buttons.push(new Button(x, y, R, txt));
  }
  buttons.push(new Button(width / 2, height / 2, R, 'undo'));
  buttons[0].event = function () {
    return this.spara(a + 2);
  };
  buttons[1].event = function () {
    return this.spara(a * 2);
  };
  buttons[2].event = function () {
    if (a % 2 === 0) {
      return this.spara(Math.floor(a / 2));
    }
  };
  buttons[3].event = function () {
    if (hist.length > 0) {
      a = hist.pop();
      return buttons[4].txt = a;
    }
  };
  buttons.push(new Button(100, 100, -R, a));
  buttons.push(new Button(500, 100, -R, b));
  buttons.push(new Button(120, height - 50, -R, ''));
  return buttons.push(new Button(width - 120, height - 50, -R, ''));
};

draw = function draw() {
  var button, i, j, k, len, len1, p;
  bg(0.5);
  fc();
  circle(width / 2, height / 2, 200);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  if (stopp != null) {
    buttons[6].txt = round(stopp - start) / 1000;
    buttons[7].txt = count;
  }
  fc();
  sc(0);
  sw(1);
  for (i = k = 0, len1 = track.length; k < len1; i = ++k) {
    p = track[i];
    circle(p.x, p.y, 1 + 1 * (10 - i));
  }
  fc(1, 0, 0);
  return text(position.x + ', ' + position.y, 200, 200);
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  if (stopp != null) {
    return;
  }
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    results.push(button.execute());
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
