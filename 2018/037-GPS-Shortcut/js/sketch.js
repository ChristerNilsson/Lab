'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, R, a, b, buttons, count, draw, hist, locationUpdate, locationUpdateFail, mousePressed, position, setup, start, stopp, track, wgs84, wgs84ToXY;

position = [59.265205, 18.132735 // home
];

//OMKRETS = 40075000 # meter
R = 80;

buttons = [];

hist = [];

track = [];

a = 7;

b = 9;

count = 0;

start = null;

stopp = null;

wgs84 = null;

Button = function () {
  function Button(x1, y1, r, txt1) {
    _classCallCheck(this, Button);

    this.x = x1;
    this.y = y1;
    this.r = r;
    this.txt = txt1;
  }

  _createClass(Button, [{
    key: 'draw',
    value: function draw() {
      if (this.r > dist(mouseX, mouseY, this.x, this.y)) {
        fc(1, 1, 0, 0.5);
      } else {
        fc(1, 1, 1, 0.5);
      }
      if (stopp != null) {
        fc(0, 1, 0);
      }
      if (this.r > 0) {
        circle(this.x, this.y, this.r);
      }
      fc(0);
      return text(this.txt, this.x, this.y);
    }
  }, {
    key: 'execute',
    value: function execute() {
      if (this.r > dist(mouseX, mouseY, this.x, this.y)) {
        this.event();
        if (a === b) {
          return stopp = millis();
        }
      }
    }
  }, {
    key: 'spara',
    value: function spara(value) {
      count++;
      hist.push(a);
      a = value;
      return buttons[4].txt = a;
    }
  }]);

  return Button;
}();

locationUpdate = function locationUpdate(p) {
  var p1;
  //logg.push 'locationUpdate ' + position.timestamp
  //print 'locationUpdate', position
  p1 = {
    lat: p.coords.latitude,
    lng: p.coords.longitude,
    timestamp: p.timestamp // milliseconds since 1970
  };
  position = wgs84ToXY(p1.lat, p1.lng);
  track.push(position);
  if (track.length > 10) {
    return track.shift();
  }
};

//heading_12 = calcHeading p1,place()
//lastObservation = millis()

// texts[0] = prettyDist distance_on_geoid p1,place()
// texts[1] = "#{Math.round heading_12}Â°"
// texts[6] = track.length 
// if track.length > 1
// 	speed     = calcSpeed     start, millis(), track[0], _.last(track), place()
// 	totalTime = calcTotalTime start, millis(), track[0], _.last(track), place()
// 	#texts[3] = "#{precisionRound 3.6*speed,1} km/h"  
// 	texts[2] = prettyETA startDate, totalTime

// 	ts = prettyDate d = new Date p1.timestamp
// 	lat = precisionRound p1.lat,6
// 	lng = precisionRound p1.lng,6
// 	heading = precisionRound heading_12,0
// 	mark00 = if d.getSeconds() == 0 then '*' else ''

// 	logg.push "#{ts} #{lat} #{lng} #{texts[0]} #{heading} #{texts[3]} #{texts[2]} #{mark00}"
locationUpdateFail = function locationUpdateFail(error) {};

//logg.push error	
wgs84ToXY = function wgs84ToXY(lat, lon) {
  var dx, dy, x, y;
  dx = 0.01 / 1.136;
  dy = 0.01 / 2.224;
  x = int(map(lon, 18.132735 - dx, 18.132735 + dx, 0, 1000));
  y = int(map(lat, 59.265205 + dy, 59.265205 - dy, 0, 1000));
  return [x, y];
};

setup = function setup() {
  var dx, dy, i, j, labels, len, p0, p1, p2, p3, p4, p5, p6, p7, p8, txt, x, y;
  dx = 0.01 / 1.136;
  dy = 0.01 / 2.224;
  p0 = new LatLon(59.265205, 18.132735); // home
  p1 = new LatLon(59.265205 + dy, 18.132735 - dx);
  p2 = new LatLon(59.265205 + dy, 18.132735);
  p3 = new LatLon(59.265205 + dy, 18.132735 + dx);
  p4 = new LatLon(59.265205, 18.132735 + dx);
  p5 = new LatLon(59.265205 - dy, 18.132735 + dx);
  p6 = new LatLon(59.265205 - dy, 18.132735);
  p7 = new LatLon(59.265205 - dy, 18.132735 - dx);
  p8 = new LatLon(59.265205, 18.132735 - dx);
  print(p1.distanceTo(p3));
  print(p7.distanceTo(p5));
  print(p1.distanceTo(p7));
  print(p3.distanceTo(p5));
  navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
    enableHighAccuracy: true,
    maximumAge: 30000,
    timeout: 27000
  });
  start = millis();
  createCanvas(1000, 1000);
  // wgs84 = new WGS84 59.265205, 18.132735, width, height
  // assert [300,300], wgs84.w2c 59.265205, 18.132735
  // assert [300,301], wgs84.w2c 0.0001+59.265205, 0.0001+18.132735
  angleMode(DEGREES);
  textAlign(CENTER, CENTER);
  textSize(50);
  labels = "+2 *2 /2".split(' ');
  for (i = j = 0, len = labels.length; j < len; i = ++j) {
    txt = labels[i];
    x = width / 2 + 200 * cos(i * 360 / labels.length - 90);
    y = height / 2 + 200 * sin(i * 360 / labels.length - 90);
    buttons.push(new Button(x, y, R, txt));
  }
  buttons.push(new Button(width / 2, height / 2, R, 'undo'));
  buttons[0].event = function () {
    return this.spara(a + 2);
  };
  buttons[1].event = function () {
    return this.spara(a * 2);
  };
  buttons[2].event = function () {
    if (a % 2 === 0) {
      return this.spara(Math.floor(a / 2));
    }
  };
  buttons[3].event = function () {
    if (hist.length > 0) {
      a = hist.pop();
      return buttons[4].txt = a;
    }
  };
  buttons.push(new Button(100, 100, -R, a));
  buttons.push(new Button(500, 100, -R, b));
  buttons.push(new Button(120, height - 50, -R, ''));
  return buttons.push(new Button(width - 120, height - 50, -R, ''));
};

draw = function draw() {
  var button, i, j, k, len, len1, p, x, y;
  bg(0.5);
  fc();
  circle(width / 2, height / 2, 200);
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    button.draw();
  }
  if (stopp != null) {
    buttons[6].txt = round(stopp - start) / 1000;
    buttons[7].txt = count;
  }
  for (i = k = 0, len1 = track.length; k < len1; i = ++k) {
    p = track[i];
    var _p = p;

    var _p2 = _slicedToArray(_p, 2);

    x = _p2[0];
    y = _p2[1];

    fc((i + 1) * 0.1, 0, 0, 0.5);
    sc(0);
    sw(1);
    circle(x, y, 3 * (i + 1));
  }
  return text(position, 200, 200);
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  if (stopp != null) {
    return;
  }
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    results.push(button.execute());
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
