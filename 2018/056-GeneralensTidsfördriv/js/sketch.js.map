{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": ";;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;AAqBA,OArBA,AAqBO;;AAEP,OAAO,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO;;AACd,QAAQ,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAS,GAAT,AAAW,GAAX,AAAa,IAAb,AAAgB,AAAG,IAAnB,AAAoB,MAApB,AAA0B,GAA1B,AAA4B;;AACpC,QAAQ,CAAA,AAAC,IAAD,AAAI,IAAJ,AAAO,IAAP,AAAU,IAAV,AAAa,IAAb,AAAgB,IAAhB,AAAmB,IAAnB,AAAsB,AAAG,IAAzB,AAA0B,MAA1B,AAAgC,GAAhC,AAAkC;;AAE1C,OAAO;;AACP,OAAO;;AACP,OAAO,AAA0B,2BAA1B,AAA2B,MAA3B,AAAiC;;AACxC,OAAO;;AACP,OAAO,AAAmE,oEAAnE,AAAoE,MA/B3E,AA+BO,AAA0E;;;AAGjF,UAAU;;AACV,IAAI;;AACJ,IAAI;;AAEJ,IAAI;;AACJ,IAAI;;AACJ,QAxCA,AAwCQ;;AAER,QAAQ;;AACR,QAAQ;;AAER,QAAQ;;AACR,QAAQ;;AACR,OAAO;;AACP,QAAQ;;AACR,OAAO;;AACP,WAAW;;AACX,gBAAgB;;AAChB,QAAQ;;AACR,MAAM;;AACN,IAtDA,AAsDI;;;AAEJ,OAAO;;AACP,OAAO;;AACP,YAAY;;AACZ;AAAgB,cAAW,CAAZ,AAAa;AAAG,WAAhB,AAAwB;AAAxB;;AACf,aA5DA,AA4Da;;AAEb,QAAQ;;AACR,WAAW;;AACX,WAAW;;AAEX,QAAQ,AAAO,QAAC;;AAChB,QAAQ,AAAC,EAAC;;AACV,SAAS,gBAAA,AAAC,GAAD,AAAI;MAAG,0EAAP,AAAW;;SAAqB,AAAI,KAAC,AAAM,OAAX,AAAY,UAAZ,AAAsB,GAAtB,AAAyB,GAAzD,AAAgC,AAA4B;;;AAErE,gBAAgB,uBAAA,AAAC,MAAD,AAAM,GAAN,AAAQ,GACvB;MAAA,OAAA,QAAA,IAAA;AAAA,OAAK,IAAI,IAAE;AACX,OAAK,IAAI,OAAK;AACd,MAAG,QAAH,AAAW;AACV,0CAAiB,AAAW,WAAA;;AAA5B,AAAC;AAAD,AAAO;;AACP;AACA,QAAA,AAAG;AACF,aAAA,AAAO;AACP,mBAAa,OAAb,AAAkB;AAClB,UAAA,AAAI,IAAJ,AAAO,IAAG,MAAV,AAAc,GAAE,MAAhB,AAAoB,GAApB,AAAsB,GAAtB,AAAwB;AACxB,aAAA,AAAO;AACP,mBAAa,OAAA,AAAK,IAAlB,AAAoB;AACpB,UAAA,AAAI,IAAJ,AAAO,IAAG,MAAV,AAAc,GAAE,MAAhB,AAAoB,GAApB,AAAsB,GANvB,AAMC,AAAwB;AANzB,WAAA;AAQC,aAAA,AAAO;AACP,mBAAA,AAAa;AACb,WAAA,AAAK;AACL,cAAA,AAAQ,IAAR,AAAW,IAAG,OAXf,AAWC,AAAmB;;WAdrB,AAeC;AAlBc;;;AAoBhB,UAAU;AACT,UAAQ,UAAA,AAAU;SAClB,QAAQ,UAFC,AAED,AAAU;;;AAEnB,OAAO,cAAA,AAAC,MAAD,AAAM,OAAN,AAAY;SAAS,AAAK,KAAL,AAAK,QAAQ,AAAK,KAAlB,AAAkB,AAAS,UAAG,UAAH,AAAU,OAAV,AAAoB,KAAQ,AAAK,KAAjF,AAAgD,AAAiC;;;AACxF,OAAA,AAAO,MAAM,KAAA,AAAK,GAAL,AAAO,GAApB,AAAa,AAAS;;AACtB,OAAA,AAAO,MAAM,KAAA,AAAK,GAAL,AAAO,GAApB,AAAa,AAAS;;AACtB,OAAA,AAAO,MAAM,KAAA,AAAK,GAAL,AAAO,GAApB,AAAa,AAAS;;AACtB,OAAA,AAAO,OAAO,KAAA,AAAK,GAAL,AAAO,IAArB,AAAc,AAAU;;AACxB,OAAA,AAAO,MAAM,KAAA,AAAK,GAAL,AAAO,IAnGpB,AAmGA,AAAa,AAAU;;;AAGvB,SAAS,gBAAA,AAAC,GACT;MAAA,MAAA,MAAA;AAAA,SAAO,AAAI,KAAJ,AAAK,QAAQ,AAAE,EAAf,AAAe;AACtB,UAAQ,AAAI,KAAJ,AAAK,QAAQ,AAAE,EAAf,AAAe;AACvB,MAAG,AAAC,EAAD,AAAE,WAAL,AAAa;AAAO,WAAO,AAAI,KAAJ,AAAK,QAAQ,AAAE,EAA1C,AAA2B,AAAe;AAA1C,SAAA;AAAkD,WAAlD,AAAyD;;SACzD,CAAA,AAAC,MAAD,AAAM,OAJE,AAIR,AAAY;;;AACb,OAAO,CAAA,AAAC,GAAD,AAAG,GAAV,AAAO,AAAK,IAAI,OAAhB,AAAgB,AAAO;;AACvB,OAAO,CAAA,AAAC,GAAD,AAAG,GAAV,AAAO,AAAK,IAAI,OAAhB,AAAgB,AAAO;;AACvB,OAAO,CAAA,AAAC,GAAD,AAAG,IAAV,AAAO,AAAM,KAAK,OAAlB,AAAkB,AAAO;;AACzB,OAAO,CAAA,AAAC,GAAD,AAAG,IAAV,AAAO,AAAM,KAAK,OA9GlB,AA8GA,AAAkB,AAAO;;;AAGzB,WAAW,kBAAA,AAAC,OACX;MAAA,MAAA,GAAA,KAAA;;AAAA,OAAA,oCAAA;;iBACC,AAAM,MAAN,AAAM,QAAQ,YAAY,AAAM,MADjC,AACe,AAAkB;AADjC;SADU;;;AAIX,cAAc,qBAAA,AAAC,OACd;MAAA,GAAA,GAAA,KAAA,OAAA,OAAA,KAAA,MAAA,KAAA,OAAA,OAAA,MAAA,QAAA;AAAA,MAAG,AAAK,MAAL,AAAM,SAAT,AAAkB;AACjB,UAAM;AACN,WAAO,AAAM,MAAA,AACb;;AAAA,SAAA,kCAAA;cACC;;AACA;oBADuB,OAAvB,AAAuB,AAAO;;;;AAA9B,AAAC;AAAD,AAAO;AAAP,AAAc;;qBACS,OAAO,AAAM,MAAb,AAAa;;;;AAApC,AAAC;AAAD,AAAO;AAAP,AAAc;;AACd,UAAG,UAAA,AAAS,AAAU,kBAAA,SAAA,AAAO,WAAU,CAAjB,AAAkB,KAAlB,SAAtB,AAAsB,AAAoB;AACzC,eAAO,KAAA,AAAK,OAAL,AAAW,QADnB,AACQ,AAAkB;AAD1B,aAAA;AAGC,AAAG,YAAH,AAAI,KAAJ,AAAS;AACT,eAAO,KAAA,AAAK,OAAL,AAAW,QAJnB,AAIQ,AAAkB;AAP3B;;AAQA,AAAG,QAAH,AAAI,KAAJ,AAAS;WAXV,AAYC;AAZD,SAAA;WAAA,AAcC;AAfY;;;AAgBd,OAAA,AAAO,IAAG,YAAV,AAAU,AAAY;;AACtB,OAAO,CAAP,AAAO,AAAC,OAAM,YAAY,CAA1B,AAAc,AAAY,AAAC;;AAC3B,OAAO,CAAP,AAAO,AAAC,QAAO,YAAY,CAAA,AAAC,MAA5B,AAAe,AAAY,AAAM;;AACjC,OAAO,CAAP,AAAO,AAAC,QAAO,YAAY,CAAA,AAAC,MAA5B,AAAe,AAAY,AAAM;;AACjC,OAAO,CAAP,AAAO,AAAC,QAAO,YAAY,CAAA,AAAC,OAA5B,AAAe,AAAY,AAAO;;AAClC,OAAO,CAAP,AAAO,AAAC,QAAO,YAAY,CAAA,AAAC,MAAD,AAAM,MAAjC,AAAe,AAAY,AAAW;;AACtC,OAAO,CAAP,AAAO,AAAC,QAAO,YAAY,CAAA,AAAC,OAAD,AAAO,OAAlC,AAAe,AAAY,AAAa;;AACxC,OAAO,CAAA,AAAC,OAAD,AAAO,OAAd,AAAO,AAAa,QAAO,YAAY,CAAA,AAAC,OAAD,AAAO,OA5I9C,AA4IA,AAA2B,AAAY,AAAa;;;AAGpD,YAAY,mBAAA,AAAC,KACZ;MAAA,MAAA,GAAA,KAAA,MAAA,KAAA,MAAA;AAAA,QAAM;AACN,OAAA,kCAAA;eACC;;mBAAoB,OAAA,AAAO;;;;AAA3B,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,WAAO,IAAI,AAAI,KAAJ,AAAK,IAAI,QAFrB,AAEY,AAAe;;SAJhB,AAKX;;;AAED,gBAAgB,uBAAA,AAAC,GAChB;MAAA,MAAA,GAAA,KAAA;AAAA,QAAM;AACN,OAAA,mCAAA;;AACC,WAAO,UAAU,AAAE,EADpB,AACQ,AAAY;;SAHL,AAIf;;;AAED,kBAAkB,yBAAA,AAAC,GAClB;MAAA,MAAA,GAAA,KAAA;AAAA,QAAM;AACN,OAAA,oCAAA;;AACC,WAAO,AAAE,EAAA,AAAK,MADf,AACgB;;SAHC,AAIjB;;;AAED,YAAY,mBAAA,AAAC,OAAU;MAAA;;gBAAC;;AAAA,SAAA,oCAAA;;mBAAA,AAAI,KAAJ,AAAK,KAAL,AAAU;AAAV;;AAAD,AAAiC,KAAjC,CAAA,AAAkC,KAA7C,AAAW,AAAuC;;;AAE9D,YAAY,mBAAA,AAAC,KACZ;MAAA,MAAA,SAAA,MAAA,GAAA,GAAA,GAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,GAAA,GAAA,GAAA,GAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA;AAAA,MAAI,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAS,GAAT,AAAW,GAAX,AAAa,GAAb,AAAe,GAAf,AAAiB,GAAjB,AAAmB,GAAnB,AAAqB,IAArB,AAAwB,IAAxB,AAA2B,IAA3B,AAA8B,IAA9B,AAAiC,IAAjC,AAAoC,AAAI,IAAA;AAC5C,YAAU,MAAA,AAAM,MADhB,AACqB;;AAGrB,UAAQ,AACR;;AAAA,OAAA,kCAAA;eACC;;;AAAA,SAAA,qCAAA;;AACC,AAAK,YAAL,AAAM,KAAK,KAAA,AAAK,MAAL,AAAU,MADtB,AACC,AAAW,AAAe;AAF5B;;AAGA,UAAQ,AAAC,EAAD,AAAE,QAAF,AAAU;AAElB,UAAQ,AACR;;AAAA,OAAA,qCAAA;;AACC,AAAK,UAAL,AAAM,KADP,AACC,AAAW;AAEZ;;AAAA,OAAA,qDAAA;;AACC,AAAM,UAAA,AAAK,MAAX,AAAY,KAAK,KAAA,AAAK,MAAL,AAAU,GAD5B,AACC,AAAiB,AAAY,KAD9B;;AAGA,OAAA,sCAAA;;AACC,AAAM,UAAA,AAAK,MAAX,AAAY,KAAK,AAAK,MADvB,AACC,AAAiB,AAAM;;AAExB,OAAA,gDAAA;;AACC,SAAK,AAAG,UAAa,IAAE,IAAlB,AAAoB,OAAU,IAAI,OAAA,AAAO,GAAE,IAAb,AAAI,AAAW;AAClD,AAAM,UAAA,AAAG,IAAT,AAAU,KAFX,AAEC,AAAe;;SAEhB,SAzBW,AAyBX,AAAS;;;AAEV,YAAY,mBAAA,AAAC,GAAM;MAAA,MAAA,GAAA,KAAA,KAAA;gBAAA;;AAAA,OAAA,kCAAA;;iBAAI,SAAH,AAAS,KAAT,AAAiB,KAAQ,AAAI,KAAJ,AAAK,MAA/B,AAA0B,AAAW;AAArC;SAAP;;;AAEZ,YAAY,qBACX;MAAA;AAAA,MAAI;AACJ,YAAU;AACV,MAAG,MAAH,AAAM;AAAO,YAAb,AAAqB;;AACrB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,MAAG,MAAH,AAAM;AAAQ,YAAd,AAAsB;;AACtB,UAAQ,UAAA,AAAU;SAClB,MAXW,AAWX,AAAM;;;AAEP,QAAQ;AACP,QAAA,AAAM;AACN,eAAA,AAAa,YAAY,cAAzB,AAAqC;AACrC,MAAI,QAAM;AACV,MAAI,SAAO;AACX,YAAA,AAAU;AAEV,MAAG,0BAAH;AACC,sBAAmB,AAAI,KAAJ,AAAK,MAAM,AAAY,aAD3C,AACC,AAAmB,AAAwB;;AAA3C,AAAC;AAAD,AAAU;AADX;AAAA,AAGC;AAAoB,gBAAD,AAAU;AAAG,aAHjC,AAGC,AAAmB,AAAmB;AAAnB;AAAnB,AAAC;AAAD,AAAU;;AAEX,QAAA,AAAM,UAAN,AAAe;AAEf,UAAA,AAAQ;SACR,QAfO,AAeP,AAAQ;;;AAET,aAAa;AACZ,MAAG,QAAH,AAAU;AACT,QAAI;AACJ,YAAQ;AACR,WAAO,CAAC,CAAA,AAAC,IAAD,AAAI,GAAL,AAAC,AAAM,IAAG,CAAA,AAAC,GAAD,AAAG,GAAb,AAAU,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAArB,AAAkB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA7B,AAA0B,AAAK,IAAG,CAAA,AAAC,IAAD,AAAI,GAAtC,AAAkC,AAAM,IAAG,CAAA,AAAC,IAAD,AAAI,GAA/C,AAA2C,AAAM,IAAG,CAAA,AAAC,IAAD,AAAI,GAAxD,AAAoD,AAAM,IAAG,CAAA,AAAC,IAAD,AAAI,GAAjE,AAA6D,AAAM,IAAG,CAAA,AAAC,GAAD,AAAG,GAAzE,AAAsE,AAAK,IAAG,CAAA,AAAC,IAAD,AAAI,GAAlF,AAA8E,AAAM,IAAG,CAAA,AAAC,IAAD,AAAI,GAA3F,AAAuF,AAAM,IAAG,CAAA,AAAC,GAAD,AAAG,GAAnG,AAAgG,AAAK;AAC5G,YAAQ,UAAA,AAAU;AAClB,UALD,AAKC,AAAM;;SACP,QAPY,AAOZ,AAAQ;;;AAET,QAAQ,iBACP;MAAA,UAAA,IAAA;AAAA,aAAW,IAAA,AAAI,SAAS,IAAb,AAAe,GAAE,MAAjB,AAAqB,GAAE,OAAvB,AAA4B;AAEvC,OAAK,OAAO;AACZ,OAAK,QAAQ;AACb,AAAQ,WAAR,AAAS,MAAT,AAAe,KAAf,AAAmB,GAAnB,AAAqB,IAArB,AAAwB,IAAG,KAAG,MAA9B,AAAkC;AAElC,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAAK,CAAA,AAAC,QAAO,AAAI,KAArC,AAAyB,AAAa,SAAS,YAC9C;QAAA,KAAA;AAAA,QAAG,AAAI,KAAJ,AAAK,SAAR,AAAiB;AAChB,mBAAY,AAAC,EAAD,AAAE,KAAF,AAAO;;;;AAAnB,AAAC;AAAD,AAAK;;AACL,mBAAa;AACb,AAAW,iBAAX,AAAW,OAAK,CAAA,AAAC,QAAD,AAAQ;AACxB,AAAW,iBAAX,AAAW,OAAK,CAAA,AAAC,QAAD,AAAQ;AACxB,eAAS,AAAI,KALd,AAKC,AAAS,AAAK;;WACf,AAAS,UAPqC,AAO9C,AAAU;AAPX;AASA,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAAK,CAAA,AAAC,QAA1B,AAAyB,AAAQ,YAAY;AAC5C;WACA,AAAS,UAFmC,AAE5C,AAAU;AAFX;AAIA,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAApB,AAAyB;AAEzB,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAApB,AAAyB,UAAU;AAClC,YAAQ,UAAU,QAAV,AAAgB,GAAhB,AAAkB,GAAlB,AAAoB;AAC5B,YAAA,AAAQ;WACR,AAAS,UAHyB,AAGlC,AAAU;AAHX;AAKA,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAApB,AAAyB,MAAM;AAC9B,YAAA,AAAQ;WACR,AAAS,UAFqB,AAE9B,AAAU;AAFX;AAIA,AAAQ,WAAC,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAApB,AAAyB,UAAU;AAClC,YAAQ,UAAU,QAAV,AAAgB,GAAhB,AAAkB,GAAlB,AAAoB;AAC5B,YAAA,AAAQ;WACR,AAAS,UAHyB,AAGlC,AAAU;AAHX;kBAKS,AAAQ,QAAA,AAAE,GAAnB,AAAoB,KAApB,AAAyB,WAAW;AACnC;WACA,AAAS,UAF0B,AAEnC,AAAU;AAtCJ,AAoCP,GAAA,AAAQ;;;AAIT,WAAW,kBAAA,AAAC,OAAD,AAAO,MAAP,AAAY,GAAZ,AAAc,GAAd,AAAgB,IAAhB;AACV;MAAA,MAAA,IAAA,GAAA,GAAA,GAAA,KAAA,MAAA,GAAA,MAAA,MAAA,KAAA,MAAA,MAAA;AAAA,MAAI,UAAU,AAAM,MAAhB,AAAgB;AACpB,MAAI,IAAI;AACR,MAAG,IAAH,AAAO;AACN,QAAI,IAAA,AAAI,IAAI,IAAI,AAChB;;AAAA,SAAA,4CAAA;iBACC;;qBAAoB,OAAA,AAAO;;;;AAA3B,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,WAAQ,QAAH,AAAW,OAAX,AAAqB,IAAO,CAAC,AAClC;;AAAA,WAAA,qCAAA;;AACC;AACA,eAAA,AAAO;AACP,cAAA,AAAM,OAAN,AAAa,GAAb,AAAgB,GAAhB,AAAmB,GAAE,IAArB,AAAuB,KAAK,UAAQ,IAApC,AAAsC,MAAK,OAAK,IAAhD,AAAkD,MAAlD,AAAuD,KAAI,IAA3D,AAA6D;AAC7D,aAJD,AAIM;AAPP;AADA;;AAWA,WAAO,AAAC,EAAD,AAAE,KAAK,AAAM,MAAb,AAAa,AACpB;;mBAAoB,OAAA,AAAO;;;;AAA3B,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,QAAG,aAAA,AAAQ,MAAR,SAAA,KAAiB,SAAQ,IAA5B,AAA8B;AAC7B,YAAA,AAAM,OAAN,AAAa,GAAb,AAAgB,GAAhB,AAAmB,GAAE,IAArB,AAAuB,KAAK,UAA5B,AAAoC,KAAI,OAAxC,AAA6C,KAA7C,AAAiD,KAAI,IADtD,AACC,AAAuD;AAfzD;;SAiBA,cAAA,AAAc,MAAd,AAAmB,GAAK,aAAA,AAAQ,OAAR,SAAH,IAAsB,IAAtB,AAAwB,KApBnC,AAoBV,AAAqD;;;AAEtD,UAAU,iBAAA,AAAC,OACV;MAAA,IAAA,MAAA,GAAA,GAAA,KAAA,MAAA,MAAA,GAAA,GAAA,GAAA;AAAA,aAAA,AAAW,GAAX,AAAa,KAAb,AAAiB;AAEjB,YAAA,AAAU,MAAV,AAAe;AACf,OAAA,AAAK;AACL,WAAS,MAAT,AAAa;AACb,OAAA,AAAK,0BAA0B,OAA/B,AAAoC,GAAE,IAAtC,AAAwC;AAExC,YAAA,AAAU,QAAV,AAAiB;AACjB,OAAA,AAAK,KAAK,QAAV,AAAgB,GAAE,IAAlB,AAAoB;AAEpB,YAAA,AAAU,OAAV,AAAgB;AAChB,AAAK,mBAAL,AAAK,AAAU,OAAS,OAAxB,AAA6B,GAAE,IAA/B,AAAiC;AAEjC,YAAA,AAAU,QAAV,AAAiB;AACjB,OAAA,6CAAA;;AACC,aAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,GAAtB,AAAyB,GAD1B,AACC,AAA4B;;AAC7B,OAAA,gDAAA;;AACC,QAAI,UAAU,AAAM,MAAhB,AAAgB;AACpB,SAAQ,MAAH,AAAQ,IAAR,AAAe,IAAO,IAAI,IAAJ,AAAM,GAAE,IAAA,AAAE,AAAE,KAAC,IAAb,AAAY,AAAG;AAC1C,aAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,GAAtB,AAAyB,GAH1B,AAGC,AAA4B;;AAC7B,OAAA,gDAAA;;AACC,aAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,GAAtB,AAAyB,GAD1B,AACC,AAA4B;;AAE7B;SAxBS,AAyBT;;;AAED,eAAe;AAAG,MAAG,AAAS,UAAT,AAAU,SAAb,AAAoB;WAAQ,AAAC,EAAD,AAAE,KAAH,AAAC,AAAO,AAAU,UAAlB,CAA3B,AAA2B,AAAmB;AAAjD;;;AAEf,YAAY,mBAAA,AAAC,OAAD,AAAO,KAAP,AAAW;MACtB,OAAA,OAAA,OAAA,OAAA,QAAA;AAAA,MAAG,aAAA,AAAO,MAAP,QAAH,GAAoB;WAApB,AAA2B;;AAC3B,MAAG,aAAA,AAAO,OAAP,QAAH,GAAsB;WAAtB,AAA6B;;AAC7B,MAAG,AAAM,MAAA,AAAI,KAAV,AAAW,WAAd,AAAsB,GAAO;WAA7B,AAAoC;;AACpC,MAAG,AAAM,MAAA,AAAI,KAAV,AAAW,WAAd,AAAsB,GAAO;WAA7B,AAAoC;AACpC;;AAJA,kBAIuB,OAAO,AAAC,EAAD,AAAE,KAAK,AAAM,MAApB,AAAO,AAAa,AAC3C;;;;AADA,AAAC;AAAD,AAAO;AAAP,AAAc;;kBACS,OAAO,AAAC,EAAD,AAAE,KAAK,AAAM,MAApB,AAAO,AAAa;;;;AAA3C,AAAC;AAAD,AAAO;AAAP,AAAc;;AACd,MAAG,UAAA,AAAS,SAAU,MAAK,AAAI,KAAJ,AAAK,IAAI,QAApC,AAA2B,AAAe,QAAW;WAArD,AAA4D;;SAPjD,AAQX;;;AAED,WAAW,kBAAA,AAAC,OAAD,AAAO,KAAP,AAAW,KAAX,AAAe;MACzB,MAAA,OAAA,OAAA,MAAA,OAAA,OAAA,QAAA;;AAAA,kBAAsB,OAAO,AAAM,MAAA,AAAI,KAAjB,AAAO,AAAW;;;;AAAxC,AAAC;AAAD,AAAM;AAAN,AAAa;;AACb,SAAO;AACP,UAAQ;AACR,MAAA,AAAG;AAAY,AAAI,SAAJ,AAAK,KAAK,CAAA,AAAC,KAAD,AAAM,KAAK,IAAI,IAAI,SAA5C,AAAe,AAAU,AAAe,AAAW;;AACnD,MAAG,AAAM,MAAA,AAAI,KAAV,AAAW,SAAd,AAAuB;AACtB,oBAAuB,OAAO,AAAM,MAAA,AAAI,KAAjB,AAAO,AAAW;;;;AAAzC,AAAC;AAAD,AAAO;AAAP,AAAc;;AACd,YAFD,AAES;;SACT,AAAM,MAAA,AAAI,KAAV,AAAW,KAAK,KAAA,AAAK,MAAL,AAAU,OARhB,AAQV,AAAgB,AAAgB;AArVjC;;;AAwVA,WAAW,AAAC;AACX;MADW,AAAC;MAAD,AAAK;MAAN,AAAC,AAAS;;MACpB;AAAA,QAAM;AACN,QAAM,eAAA,AAAe,KAAf,AAAmB,KAAnB,AAAuB,OAAvB,AAA6B,AACnC;;qBAA0B,YAAY,AAAM,MAAlB,AAAkB,MAAK,AAAM,MAA7B,AAA6B,MAA7B,AAAkC;;;;AAA3D,AAAM,QAAP,AAAO;AAAK,AAAM,QAAlB,AAAkB;;SAHR,AAIV;;;AAED,cAAc,qBAAA,AAAC,GAAD,AAAG,GAAH,AAAK;MAClB,MAAA,MAAA;;AAAA,kBAAsB,OAAO,AAAC,EAAR,AAAO,AAAE;;;;AAA/B,AAAC;AAAD,AAAO;AAAP,AAAc;;AACd,MAAG,QAAH,AAAW;AACV,AAAC,MAAD,AAAE,KAAK,KAAA,AAAK,MAAL,AAAU,MAAK,OAAA,AAAK,QAA3B,AAAO,AAA0B;AACjC,QAAG,OAAA,AAAK,UAAS,QAAjB,AAAuB;AACtB,AAAC,QAAD,AAAE,KAAK,KAAA,AAAK,MAAL,AAAU,OAAM,OADxB,AACC,AAAO,AAAqB;AAH9B;AAAA,SAAA;AAKC,AAAC,MAAD,AAAE,KAAK,KAAA,AAAK,MAAL,AAAU,MAAK,OAAA,AAAK,QAA3B,AAAO,AAA0B;AACjC,QAAG,QAAA,AAAM,SAAQ,QAAjB,AAAuB;AACtB,AAAC,QAAD,AAAE,KAAK,KAAA,AAAK,MAAL,AAAU,OAAM,OADxB,AACC,AAAO,AAAqB;AAP9B;;SAQA,CAAA,AAAC,GAVY,AAUb,AAAG;;;AACJ,OAAO,CAAC,CAAD,AAAC,AAAC,QAAO,CAAhB,AAAO,AAAS,AAAC,QAAQ,YAAA,AAAY,IAAG,CAAf,AAAe,AAAC,QAAzC,AAAyB,AAAuB;;AAChD,OAAO,CAAC,CAAD,AAAC,AAAC,OAAM,CAAf,AAAO,AAAQ,AAAC,SAAS,YAAA,AAAY,IAAG,CAAf,AAAe,AAAC,QAAzC,AAAyB,AAAuB;;AAEhD,iBAAiB,wBAAA,AAAC,KAAD,AAAK,KAAL,AAAS,GAAT,AAAW,OAC3B;MAAA,IAAA;AAAA,OAAK,AAAC,EAAD,AAAE,KAAK,AAAE,EAAT,AAAS;AACd,MAAG,AAAE,EAAA,AAAI,KAAN,AAAO,SAAV,AAAmB;AAClB,SAAK,AAAC,EAAD,AAAE,KAAK,AAAE,EAAT,AAAS;AACd,WAAG,YAAA,AAAY,IAAf,AAAG,AAAe,AAAM,kBAAM,WAF/B,AAEC,AAA8B,AAAW;AAF1C,SAAA;AAIC,QAAG,aAAA,AAAO,OAAP,QAAH;AAAwB,kBAAA,AAAY,IAApC,AAAqB,AAAG,AAAe,AAAM,MAAxB;;AACrB,QAAG,aAAA,AAAO,OAAP,QAAH;AAAqB,aAAG,YAAA,AAAY,IAApC,AAAqB,AAAG,AAAe,AAAM;AAL9C;AAFgB;AA5WjB;;;AAsXA,WAAW,kBAAA,AAAC,MAAD,AAAM,QAAN,AAAa;AACvB,MAD6B,4EAAnB,AAAyB;;MACnC,iBAAA,OAAA,MAAA,OAAA,GAAA,GAAA,KAAA,MAAA;AAAA,MAAG,AAAC,EAAD,AAAE,QAAQ,AAAI,KAAd,AAAe,YAAlB,AAAG,AAA2B;AAAY,AAAI,SAA9C,AAA0C,AAAK;AAA/C,SAAA;AAA8D,AAAI,SAAJ,AAAK,UAAnE,AAA6E;;AAE7E,UAAQ;AACR,UAAQ;AAER,OAAA,mCAAA;;AACC,QAAG,UAAA,AAAU,OAAM,AAAO,OAAvB,AAAuB,IAA1B,AAAG,AAA0B;AAC5B,UAAA,AAAG;AAAW,iBAAA,AAAS,OAAM,AAAO,OAAtB,AAAsB,IAAtB,AAAyB,MAAvC,AAAc,AAA8B;;AAC5C,cAAQ,AACR;aAHD,AAGQ;AAJT;;AAMA,MAAG,CAAH,AAAO;;AACN,sBAAA,AAAkB;AAClB,SAAA,sCAAA;;AACC,UAAG,AAAM,MAAA,AAAK,MAAX,AAAY,WAAf,AAAyB;AACxB,YAAG,OAAA,AAAO,OAAP,AAAO,IAAP,aAAA,AAAa,OAAb,QAAA,MAAsB,UAAU,AAAM,MAAA,AAAO,OAAvB,AAAgB,AAAO,OAAhD,AAAuD;AACtD,AAAK,gBAAL,AAAM,KADP,AACC,AAAW;AAFb;AAAA,aAAA;AAIC,YAAG,UAAA,AAAU,OAAM,AAAO,OAAvB,AAAuB,IAA1B,AAAG,AAA0B;AAC5B,AAAe,0BAAf,AAAgB,KADjB,AACC,AAAqB;AALvB;AADD;;AAOA,QAAG,AAAK,MAAL,AAAM,SAAT,AAAkB;AAAO,AAAe,sBAAf,AAAgB,KAAK,AAAM,MAApD,AAAyB,AAA2B;;AAEpD,QAAG,AAAe,gBAAf,AAAgB,SAAnB,AAA4B;AAC3B,aAAO,AAAgB,gBAAA,AAAI,KAAJ,AAAK,UAAU,AAAe,gBAA9B,AAA+B;AACtD,UAAA,AAAG;AAAW,iBAAA,AAAS,OAAM,AAAO,OAAtB,AAAsB,IAAtB,AAAyB,MAAvC,AAAc,AAA8B;;AAC5C,AAAI,WAAJ,AAAK,aAAa,AAClB;aAJD,AAIQ;AAfT;AAiBA;SAAO,AAAO,OA7BJ,AA6BI;AAnZf;;;AAsZA,KAAK,UAAA,AAAU;;AACf,OAAA,AAAO;AAAc,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAApC,AAAmC,AAAG,IAvZjD,AAuZA,AAAW,AAAyC;;AACpD,OAAA,AAAO;AAAc,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAApC,AAAmC,AAAG,IAxZjD,AAwZA,AAAW,AAAyC;;AACpD,OAAA,AAAO;AAAc,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAApC,AAAmC,AAAG,IAzZjD,AAyZA,AAAW,AAAyC;;AAEpD,OAAA,AAAO;AAAc,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAApC,AAAmC,AAAG,IA3ZjD,AA2ZA,AAAW,AAAyC;;AACpD,OAAA,AAAO;AAAc,cAAW,CAAA,AAAC,GAAb,AAAY,AAAG;AAAI,WAA5B,AAAS,AAA2B;AAA3B,CAAT,EAAuC,CAAA,AAAC,GAAxC,AAAuC,AAAG,IA5ZrD,AA4ZA,AAAW,AAA6C;;AAExD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAAE,CAAtC,AAAmC,AAAI,IA9ZjD,AA8ZA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,GAApC,AAAmC,AAAG,IA/ZhD,AA+ZA,AAAU,AAAyC;;AAEnD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IAjajD,AAiaA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAlatD,AAkaA,AAAU,AAA+C;;AACzD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAnatD,AAmaA,AAAU,AAA+C;;AAEzD,MAAM,UAAA,AAAU;;AAChB,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAtatD,AAsaA,AAAU,AAA+C;;AACzD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAvatD,AAuaA,AAAU,AAA+C;;AAEzD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IAzajD,AAyaA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IA1atD,AA0aA,AAAU,AAA+C;;AAEzD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IA5ajD,AA4aA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IA7ajD,AA6aA,AAAU,AAA0C;;AAEpD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IA/ajD,AA+aA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAhbtD,AAgbA,AAAU,AAA+C;;AAEzD,OAAA,AAAO;AAAc,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IAlblD,AAkbA,AAAW,AAA0C;;AACrD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAnbtD,AAmbA,AAAU,AAA+C;;AAEzD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IArbjD,AAqbA,AAAU,AAA0C;;AAEpD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IAvbjD,AAubA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAxbtD,AAwbA,AAAU,AAA+C;;AACzD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IAzbtD,AAybA,AAAU,AAA+C;;AAEzD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IA3bjD,AA2bA,AAAU,AAA0C;;AAEpD,OAAA,AAAO;AAAa,cAAD,AAAY;AAAG,WAAxB,AAAS,AAAuB;AAAvB,CAAT,EAAmC,CAAA,AAAC,IAApC,AAAmC,AAAI,IA7bjD,AA6bA,AAAU,AAA0C;;AACpD,OAAA,AAAO;AAAa,cAAW,CAAA,AAAC,IAAb,AAAY,AAAI;AAAI,WAA7B,AAAS,AAA4B;AAA5B,CAAT,EAAwC,CAAA,AAAC,IAAzC,AAAwC,AAAI,IA9btD,AA8bA,AAAU,AAA+C;;;;AAGzD,KAAK,UAjcL,AAicK,AAAU;;;AAGf,WAAW,kBAAA,AAAC,IAAD,AAAI,IAAJ,AAAO,QAAP,AAAc,QACxB;MAAA,GAAA;AAAA,MAAG,OAAH,AAAO,GAAO;WAAd,AAAqB;;AACrB,SAAO,AAAM,MAAA,KAAA,AAAG;AAChB,QAAA,AAAM;AACN,MAAI,UAAA,AAAU;AACd,MAAG,MAAH,AAAM,GAAO;WAAb,AAAoB;AAJpB;;AAOA,QAAA,AAAM,QAAN,AAAc,IAAI,KAAlB,AAAqB,GAArB,AAAwB,GAAxB,AAA2B,GAAG,AAAE,KAAC,IAAE,IAAA,AAAE,AAAE,KAAC,IAAxC,AAAgC,AAAO,AAAG,KAAK,SAAS,AAAE,KAAC,IAAE,IAAA,AAAE,AAAE,KAAC,IAAlE,AAA0D,AAAO,AAAG;SACpE,SAAS,AAAE,KAAC,IAAE,IAAA,AAAE,AAAE,KAAC,IATT,AASC,AAAO,AAAG;;;AAEtB,eAAe,wBAEd;MAAA,UAAA,IAAA;AAAA,MAAG,AAAI,AAAC,EAAA,IAAA,AAAI,UAAJ,AAAI,SAAZ,AAAO,AAAC,AAAa,QAAY;AAAjC;;AACA,MAAG,AAAI,AAAC,EAAA,IAAA,AAAI,UAAJ,AAAI,SAAZ,AAAO,AAAC,AAAa,SAAa;AAAlC;;AAEA,kBAAK,SAAQ;AACb,kBAAK,SAAQ;AAEb,aAAW,AAAC,EAAD,AAAE,KAAF,AAAO;AAClB,MAAG,AAAS,UAAT,AAAU,WAAV,AAAkB,KAAK,CAAI,AAAQ,SAAR,AAAS,QAAT,AAAiB,QAA/C,AAA8B,AAAwB;AACrD,UAAA,AAAM;AACN,iBAAa;AAEb,QAAG,OAAA,AAAM,KAAK,SAAA,AAAS,IAAT,AAAY,IAAZ,AAAe,QAA7B,AAAc,AAAsB;AACnC,YAAA,AAAM;AACN,UAAG,AAAS,UAAT,AAAU,WAAb,AAAuB;AAAvB,AAA8B;AAA9B,aAAA;AAA2C,AAAS,kBAApD,AAA2C,AAAU;;AACrD,cAAA,AAAQ,AACR;AAJD;;AAMA,WAAA,AAAO,IAVR,AAUC,AAAU;;AAEX,QAAA,AAAM,AAAI,KAAG,AAAI,KAAP,AAAQ,AAAO,kBAAzB,AAAU,AAAqB,AAAS;SACxC,QAtBc,AAsBd,AAAQ;;;AAET,SAAS,gBAAA,AAAC,IAAD,AAAI,IACZ;MAAA,MAAA,MAAA,QAAA;AAAA,WAAS,CAAE,AAAK,MAAG,MAAH,AAAS,IAAT,AAAgB,KAAvB,AAAO,AAAwB,IAA/B,AAAkC;AAC3C,SAAO,SAAA,AAAS,cAAT,AAAsB,QAAtB,AAA6B,OAA7B,AAAmC;AAE1C,MAAG,QAAA,AAAO,MAAO,IAAA,AAAE,MAAK,cAAxB,AAAwB,AAAc;AACrC,QAAG,AAAI,KAAJ,AAAK,SAAS,WAAjB,AAA4B;AAC3B,AAAM,kCAAmB,AAAI,KAAJ,AAAK,SAD/B,AACO,AAAiC;AADxC,eAEQ,cAAH,AAAgB;AACpB,aAAO,AAAI,KAAJ,AAAK,SAAS;AACrB,UAAG,SAAH,AAAU;AAAO,YAAjB,AAAqB;;AACrB,UAAG,OAAH,AAAU;AAAO,AAAI,YAAG,CAAxB,AAAqB,AAAI,AAAK;;AAC9B,UAAG,OAAH,AAAU;AAAO,AAAI,YAArB,AAAqB,AAAG,AAAK;;AAC7B,AAAM,uBAAG,CAAC,WAAD,AAAY,SAAf,AAAyB,AAAK,iBAA9B,AAAoC,AAAE;AAC5C,UAAG,UAAH,AAAY;AAAZ,AAA0B;;AAC1B,iBAAW,UAAA,AAAU,UAAV,AAAmB,GAAnB,AAAqB;AAChC,AAAY,mBAAZ,AAAa,YAAY,AAAI,KAAJ,AAAK,UAAU,EAAA,AAAC,oBAAhB,AAAe,AAAU;AAClD,YAAM,AAAY,aATd,AASJ,AAAmB;AATf,KAAA,MAAA;AAWJ,AAAM,6BAXF,AAWE,AAAe;;WAdvB,AAeC;AAnBO;AAveT;;;AA8fA,eAAe,sBAAA,AAAC,GACf;MAAA,KAAA,GAAA,GAAA,KAAA,MAAA,KAAA;AAAA,SAAO,AAAK,MAAL,AAAM,OAAN,AAAa;AACpB,SAAO,AAAI,KAAJ,AAAK,OAAL,AAAY;AACnB,QAAM;AACN,OAAA,mCAAA;;AACC,SAAA,qCAAA;;AACC,UAAG,QAAH,AAAU;AACT,YAAG,UAAA,AAAU,GAAV,AAAY,KAAf,AAAG,AAAgB;AAClB,AAAG,cAAH,AAAI,KAAK,CAAA,AAAC,KADX,AACC,AAAS,AAAK;AAFhB;AADD;AADD;;SAJc,AASd;;;AAED,SAAS,AAAC;AACT;MADS,AAAC;MAAD,AAAU;MAAV,AAAgB;MAAjB,AAAC,AAAkB;;MAC3B,KAAA,GAAA,KAAA,KAAA,MAAA,OAAA,SAAA,KAAA;AAAA,QAAM;AACN,UAAQ,aAAA,AAAa;AACrB,OAAA,oCAAA;iBACC;gBAAY;;;;AAAZ,AAAC;AAAD,AAAK;;AACL,SAAK,AAAC,EAAD,AAAE,UAAF,AAAY;AACjB,aAAA,AAAS,IAAT,AAAY,KAAZ,AAAgB;AAChB,UAAM,UAAA,AAAU;AAChB,QAAG,EAAA,OAAH,AAAG,AAAW;AACb,gBAAU,AAAI,KAAJ,AAAK,OAAO,CAAZ,AAAY,AAAC;AACvB,AAAK,WAAL,AAAK,OAAO,CAAA,AAAC,SAAD,AAAU;AACtB,AAAG,UAAH,AAAI,KAAK,CAAC,cAAD,AAAC,AAAc,KAAK,QAApB,AAA0B,GAA1B,AAA6B,IAAI,AAAI,KAAJ,AAAK,OAAO,CAHvD,AAGC,AAAS,AAAiC,AAAY,AAAC;AARzD;;SAHQ,AAYR;;;AAED,OAAO;MACN,KAAA,KAAA;AAAA,MAAG,IAAA,AAAE,MAAK,cAAV,AAAU,AAAc,QAAW;AAAnC;;AACA;AACA,QAAM;AACN,MAAG,OAAO,AAAI,KAAJ,AAAK,WAAf,AAAuB,GAAO;AAA9B;;AACA,eAAa,AACb;;AALA,gBAKY,AAAC,EAAD,AAAE,KAAF,AAAO;;;;AAAnB,AAAC;AAAD,AAAK;;AACL,AAAW,aAAX,AAAW,OAAO,CAAA,AAAC,QAAD,AAAQ;SAC1B,AAAW,WAAX,AAAW,OAAO,CAAA,AAAC,QARb,AAQY,AAAQ;AA/hB3B;;;AAkiBA,UAAU,mBACT;MAAA,MAAA,KAAA,UAAA,WAAA,IAAA,WAAA,MAAA;AAAA,aAAW;AACX,aAAW,cAAA,AAAc;AACzB,MAAG,aAAY,IAAf,AAAiB,GAAO;WAAxB,AAA+B;;AAC/B,UAAQ;AACR,AAAK,QAAL,AAAM,MAAK,AAAC,UAAS,AAAI,KAAd,AAAe,QAAf,AAAsB;AAAjC,AAAW,AAA4B,IAA5B;AACX,SAAO;AACP,OAAK;AACL,SAAO;AACP,cAAY,AAAC,EAAD,AAAE,UAAF,AAAY,AAExB;SAAM,KAAA,AAAK,SAAU,AAAK,MAAL,AAAM,SAArB,AAA8B,KAAM,WAAW,IAArD,AAAuD;AACtD;AACA,WAAO,AAAK,MAAL,AAAM;AACb,eAAW,AAAK,KAAA;AAChB,QAAG,WAAW,IAAd,AAAgB;AACf,kBAAY,OAAA,AAAO;AACnB,cAAQ,AAAK,MAAL,AAAM,OAAN,AAAa;AACrB,AAAK,YAAL,AAAM,KAAK,UAAA,AAAC,GAAD,AAAG;AAAM,YAAG,AAAE,EAAF,AAAE,OAAM,AAAE,EAAb,AAAa;iBAAQ,AAAE,EAAF,AAAE,KAAG,AAAE,EAA5B,AAA4B;AAA5B,eAAA;iBAAoC,AAAE,EAAF,AAAE,KAAG,AAAE,EAA3C,AAA2C;AAApD;AAHZ,AAGC;AAPF;;AAQA,QAAA,AAAM,GAAN,AAAQ,IAAG,AAAK,MAAhB,AAAiB,QAAjB,AAAwB;AAExB,MAAG,aAAY,IAAf,AAAiB;AAChB,YAAQ,AAAK,KAAb,AAAa;;AAEb,WAAO,AAAK,KAAA;AACZ,YAAQ,AACR;;;gCAAY,AAAK,KAJjB,AAIiB;;AAAjB,AAAC;AAAD,AAAK;AAEL,iBAAa;AACb,AAAW,eAAX,AAAW,OAAO,CAAA,AAAC,QAAD,AAAQ;AAC1B,AAAW,eAAX,AAAW,OAAO,CAAA,AAAC,QAAD,AAAQ;AAE1B,AAAM,qBAAS,IAAI,WAAnB,AAAM,AAAS,AAAa,AAAS,AACrC;WAZD,AAYQ;AAZR,SAAA;AAcC,UAAA,AAAM;;AAEN,YAAQ,AACR;WAjBD,AAiBQ;AAtCC;;;AAwCV,UAAU,iBAAA,AAAC,KAAD;AACT;MAAA,MAAA,WAAA;AAAA,UAAQ;AACR,UAAQ;AACR,QAAM;AACN,SAAO,AACP;SAAA,AAAM;AACL,cAAA,AAAU;AACV,gBAAY;AACZ,oBAAgB,AAAC,EAAD,AAAE,UAAF,AAAY;AAE5B,eAAW,cAAA,AAAc;AACzB,YAAQ;AACR,AAAK,UAAL,AAAM,MAAK,AAAC,UAAD,AAAU,GAAV,AAAY;AAAvB,AAAW,AAAkB,MAAlB;AACX,WAAO;AACP,SAAK;AACL,WAAO,AAEP;WAAM,KAAA,AAAK,SAAU,AAAK,MAAL,AAAM,SAArB,AAA8B,KAAM,WAAW,IAArD,AAAuD;AACtD;AACA,aAAO,AAAK,MAAL,AAAM;AACb,iBAAW,AAAK,KAAA;AAChB,kBAAY,OAAA,AAAO;AACnB,cAAQ,AAAK,MAAL,AAAM,OAAN,AAAa;AACrB,AAAK,YAAL,AAAM,KAAK,UAAA,AAAC,GAAD,AAAG;AAAM,YAAG,AAAE,EAAF,AAAE,OAAM,AAAE,EAAb,AAAa;iBAAQ,AAAE,EAAF,AAAE,KAAG,AAAE,EAA5B,AAA4B;AAA5B,eAAA;iBAAoC,AAAE,EAAF,AAAE,KAAG,AAAE,EAA3C,AAA2C;AAApD;AANZ,AAMC;;AAED,QAAG,aAAY,IAAf,AAAiB;AAChB,YAAM,AAAI,KAAJ,AAAK,UAAU,UAArB,AAAM,AAAe,AAAU;AAC/B,cAAQ,AAAK,KAAA;AACb,6BAAA,AAAuB,MAAvB,AAA4B;AAC5B,cAAQ,AAAC,EAAD,AAAE,UAAF,AAAY;AACpB,AAAM,YAAG,IAAI,WAAb,AAAM,AAAG,AAAa,AAAM;AAC5B,cAAQ;AACR,iBAAW,IAAI,AAAK,KAAT,AAAS;AACpB,YAAA,AAAM,YAAN,AAAiB,AACjB;AATD;AApBD;AALS;;;AAoCV,UAAU;AACT,SAAO;AACP,UAAQ,AAAC,EAAD,AAAE,UAAF,AAAY;SACpB,MAHS,AAGH;;;AAEP,YAAY;AACX,MAAG,AAAI,KAAJ,AAAK,UAAL,AAAe,YAAa,SAA5B,AAAqC,YAAa,cAAlD,AAA+D,KAAM,IAAA,AAAE,MAAK,cAA/E,AAA+E,AAAc;AAA7F,AAAwG;AAAxG,SAAA;AAAA,AAAqH;;AACrH,UAAQ,UAAA,AAAU,OAAV,AAAgB,GAAhB,AAAkB;AAC1B,MAAG,QAAH,AAAS;AAAc,eAAvB,AAAgC;;SAChC,QAJW,AAIX,AAAQ;;;AAET,cAAc,qBAAA,AAAC,MAAD,AAAM;MACnB,MAAA,MAAA;;AAAA,kBAAoB,OAAA,AAAO;;;;AAA3B,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,MAAG,UAAH,AAAU;AACT,WAAG,AAAK,KAAR,AAAQ,cAAS,AAAK,KADvB,AACC,AAAsB;AADvB,SAAA;AAGC,QAAG,QAAH,AAAW;AACV,aAAG,AAAK,KAAR,AAAQ,cAAS,AAAK,KAAtB,AAAsB,AAAM,eAAI,AAAK,KAAA,OAAA,AAAK,QAD3C,AACC,AAAqC,AAAW;AADjD,WAAA;AAGC,aAAG,AAAK,KAAR,AAAQ,cAAS,AAAK,KAAtB,AAAsB,AAAM,eAAI,AAAK,KAAA,OAAA,AAAK,QAH3C,AAGC,AAAqC,AAAW;AANlD;AAFa;;;AAUd,aAAa,oBAAA,AAAC;AACb,MADkB,4EAAN,AAAY;;MACxB,MAAA,MAAA;;kBAAoB,OAAA,AAAO;;;;AAA3B,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,MAAG,UAAH,AAAU;AAAO,gBAAG,AAAK,KAAzB,AAAiB,AAAQ;AAAzB,SAAA;AACK,WAAG,AAAK,KAAR,AAAQ,cAAS,AAAK,KAD3B,AACK,AAAsB;AAHf;;;AAIb,OAAA,AAAO,UAAU,WAAW,KAAA,AAAK,GAAL,AAAO,GAAnC,AAAiB,AAAW,AAAS;;AACrC,OAAA,AAAO,UAAU,WAAW,KAAA,AAAK,GAAL,AAAO,GAAnC,AAAiB,AAAW,AAAS;;AACrC,OAAA,AAAO,WAAW,WAAW,KAAA,AAAK,GAAL,AAAO,IAApC,AAAkB,AAAW,AAAU;;AACvC,OAAA,AAAO,WAAW,WAAW,KAAA,AAAK,GAAL,AAAO,IAApC,AAAkB,AAAW,AAAU;;AACvC,OAAA,AAAO,aAAa,WAAW,KAAA,AAAK,GAAL,AAAO,IAAtC,AAAoB,AAAW,AAAU;;AACzC,OAAA,AAAO,KAAK,WAAW,KAAA,AAAK,GAAL,AAAO,GAAlB,AAAW,AAAS,IA5oBhC,AA4oBA,AAAY,AAAuB;;;AAGnC,aAAa,oBAAA,AAAC,KAAD,AAAK,KAAL,AAAS,GACrB;MAAA,IAAA;AAAA,OAAK,AAAC,EAAD,AAAE,KAAK,AAAE,EAAT,AAAS;AACd,MAAG,AAAE,EAAA,AAAI,KAAN,AAAO,SAAV,AAAmB;AAClB,SAAK,AAAC,EAAD,AAAE,KAAK,AAAE,EAAT,AAAS;AACd,WAAG,WAAH,AAAG,AAAW,AAAG,eAAM,WAAA,AAAW,IAFnC,AAEC,AAAuB,AAAc;AAFtC,SAAA;AAIC,QAAG,aAAA,AAAO,OAAP,QAAH;AAAqB,aAAG,WAAxB,AAAqB,AAAG,AAAW,AAAG;AAAtC,WAAA;AACK,aAAG,WADR,AACK,AAAG,AAAW,AAAG;AALvB;AAFY;;;AASb,yBAAyB,gCAAA,AAAC,MAAD,AAAO,GAC/B;MAAA,KAAA,OAAA,GAAA,KAAA,KAAA,MAAA,GAAA,UAAA;AAAA,QAAM,UAAA,AAAU;AAChB,aAAW,AACX;SAAM,OAAN,AAAa;AACZ,mCAAW,AAAK,KAAA;;AAAhB,AAAC;AAAD,AAAM;;AACN,AAAQ,aAAR,AAAS,KAAK,AAAK,KAAnB,AAAmB;AACnB,UAAM,UAHP,AAGO,AAAU;;AACjB,AAAQ,WAAR,AAAS;AACT,MAAI;AACJ,OAAA,yDAAA;AAAI,kDACH;;AADG,AAAC;AAAD,AAAM;;kBACG,AAAC,EAAD,AAAE,KAAF,AAAO;;;;AAAnB,AAAC;AAAD,AAAK;;AACL,AAAK,gBAAA,AAAK,AAAM,eAAI,WAAA,AAAW,KAAX,AAAe,KAA9B,AAAe,AAAmB,AAAE,YAApC,AAAwC,AAAI,eAFlD,AAEM,AAAkD,AAAI;;SAC5D,MAZwB,AAYxB,AAAM;;;AAEP,sBAAsB,+BACrB;MAAA,OAAA,GAAA,KAAA,OAAA,GAAA,KAAA,GAAA;AAAA,MAAI,AAAC,EAAD,AAAE,UAAF,AAAY;AAChB,MAAI;AACJ,OAAA,qDAAA;AAAI;;AAAA,AAAC;AAAD,AAAK;AAAL,AAAS;;AACZ,AAAK,gBAAA,AAAK,AAAM,eAAI,WAAA,AAAW,KAAX,AAAe,KAA9B,AAAe,AAAmB;AACvC,aAAA,AAAS,GAAT,AAAW,KAAX,AAAe,KAFhB,AAEC,AAAmB;;SACpB,MANqB,AAMrB,AAAM",
  "sourcesContent": [
    "# Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/\r\n# Copyright 2015 - Chris Aguilar - conjurenation@gmail.com\r\n# Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html\r\n\r\n#  4  4  4  4  4  0  8  8  8  8  8\r\n#  5  5  5  5  5  1  9  9  9  9  9\r\n#  6  6  6  6  6  2 10 10 10 10 10\r\n#  7  7  7  7  7  3 11 11 11 11 11\r\n#    12 13 14 15    16 17 18 19      PANEL\r\n\r\n# I vissa situationer vill man styra one click.\r\n# Exempel:\r\n# Vid klick på 6 vill man ha 7,6 istf 5,6\r\n# 5     3,4,6      7\r\n# Tidigare\r\n# 5,6   3,4        7\r\n# samt klick på 6 ger\r\n#                  7,6,5\r\n# men man vill kanske ha\r\n# 5     3,4        7,6\r\n\r\nSEQS = 8 # 6: kan fungera, 4: tar mkt lång tid att skapa problem\r\n\r\nACES = [0,1,2,3]\r\nHEAPS = [4,5,6,7,8,9,10,11].slice 0,SEQS\r\nPANEL = [12,13,14,15,16,17,18,19].slice 0,SEQS\r\n\r\nSuit = 'chsd'\r\nRank = \"A23456789TJQK\"\r\nSUIT = \"club heart spade diamond\".split ' '\r\nRANK = \"A23456789TJQK\" \r\nLONG = \" Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King\".split ' '\r\n\r\n# Konstanter för cards.png\r\nOFFSETX = 468\r\nW = 263.25\r\nH = 352\r\n\r\nw = null\r\nh = null\r\nLIMIT = 1000 # Maximum steps considered before giving up. 1000 is too low, hint fails sometimes.\r\n\r\nfaces = null\r\nbacks = null\r\n\r\nboard = null\r\ncards = null\r\nhist = null\r\ncands = null\r\nhash = null\r\naceCards = 4\r\noriginalBoard = null\r\nstart = null\r\nmsg = ''\r\nN = null # Max rank\r\n#classic = false\r\nsrcs = null\r\ndsts = null\r\nhintsUsed = null\r\noneClickData = {lastMarked:-1, counter:0}\r\nindicators = {} # färgmarkering av senaste undo eller hint. [color,hollow]\r\n\r\nlevel = 0\r\nmaxLevel = 0\r\nmaxMoves = null\r\n\r\nprint = console.log\r\nrange = _.range\r\nassert = (a, b, msg='Assert failure') -> chai.assert.deepEqual a, b, msg\r\n\r\nshowIndicator = (heap,x,y)->\r\n\tx0 = x + w/2\r\n\ty0 = y + 0.49*h\r\n\tif heap of indicators\r\n\t\t[color,hollow] = indicators[heap]\r\n\t\tpush()\r\n\t\tif hollow\r\n\t\t\tstroke 0\r\n\t\t\tstrokeWeight 0.13*h\r\n\t\t\tarc x0,y0,0.4*w,0.4*w,0,360\r\n\t\t\tstroke color\r\n\t\t\tstrokeWeight 0.13*h-2\r\n\t\t\tarc x0,y0,0.4*w,0.4*w,0,360\r\n\t\telse\r\n\t\t\tstroke 0\r\n\t\t\tstrokeWeight 1\r\n\t\t\tfill color\r\n\t\t\tellipse x0,y0,0.55*w\r\n\t\tpop()\r\n\r\npreload = -> \r\n\tfaces = loadImage 'cards/Color_52_Faces_v.2.0.png'\r\n\tbacks = loadImage 'cards/Playing_Card_Backs.png'\r\n\r\npack = (suit,under,over) -> Suit[suit] + RANK[under] + if under==over then '' else RANK[over]\r\nassert 'cA', pack 0,0,0 \r\nassert 'dA', pack 3,0,0 \r\nassert 'd2', pack 3,1,1 \r\nassert 'hJQ', pack 1,10,11 \r\nassert 'hJ', pack 1,10,10 \r\n#print 'pack ok'\r\n\r\nunpack = (n) -> \r\n\tsuit = Suit.indexOf n[0]\r\n\tunder = RANK.indexOf n[1] \r\n\tif n.length==3 then over = RANK.indexOf n[2] else over = under\r\n\t[suit,under,over]\r\nassert [0,0,0], unpack 'cA'\r\nassert [3,0,0], unpack 'dA'\r\nassert [1,10,11], unpack 'hJQ'\r\nassert [1,10,10], unpack 'hJ'\r\n#print 'unpack ok'\r\n\r\ncompress = (board) ->\r\n\tfor heap in HEAPS\r\n\t\tboard[heap] = compressOne board[heap]\r\n\r\ncompressOne = (cards) ->\r\n\tif cards.length > 1\r\n\t\tres = []\r\n\t\ttemp = cards[0]\r\n\t\tfor i in range 1,cards.length\r\n\t\t\t[suit1,under1,over1] = unpack temp     # understa\r\n\t\t\t[suit2,under2,over2] = unpack cards[i] # översta\r\n\t\t\tif suit1 == suit2 and under2-over1 in [-1,1]\r\n\t\t\t\ttemp = pack suit1,under1,over2\r\n\t\t\telse\r\n\t\t\t\tres.push temp \r\n\t\t\t\ttemp = pack suit2,under2,over2\r\n\t\tres.push temp\r\n\t\tres\r\n\telse \r\n\t\tcards\r\nassert [],compressOne [] \r\nassert ['cA'],compressOne ['cA'] \r\nassert ['cA2'],compressOne ['cA','c2'] \r\nassert ['c23'],compressOne ['c2','c3'] \r\nassert ['cA4'],compressOne ['cA2','c34'] \r\nassert ['cA3'],compressOne ['cA','c2','c3'] \r\nassert ['cA6'],compressOne ['cA2','c34','c56'] \r\nassert ['cA2','h34','c56'],compressOne ['cA2','h34','c56'] \r\n#print 'compressOne ok'\r\n\r\ncalcAntal = (lst) ->\r\n\tres = 0\r\n\tfor card in lst\r\n\t\t[suit,under,over] = unpack card\r\n\t\tres += 1 + Math.abs under-over\r\n\tres\r\n\r\ncountAceCards = (b) ->\r\n\tres\t= 0\r\n\tfor heap in ACES\r\n\t\tres += calcAntal b[heap]\r\n\tres\r\n\r\ncountPanelCards = (b) ->\r\n\tres\t= 0\r\n\tfor heap in PANEL\r\n\t\tres += b[heap].length\r\n\tres\r\n\r\ndumpBoard = (board) -> (heap.join ' ' for heap in board).join '|'\r\n\r\nmakeBoard = (lvl)->\r\n\tN = [3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13][lvl]\r\n\tclassic = lvl % 3 == 0\r\n\t#N = maxRank\r\n\r\n\tcards = []\r\n\tfor suit in range 4\r\n\t\tfor rank in range 1,N # 2..K\r\n\t\t\tcards.push pack suit,rank,rank \r\n\tcards = _.shuffle cards\r\n\r\n\tboard = []\r\n\tfor i in range 20\r\n\t\tboard.push []\r\n\r\n\tfor suit,heap in range 4 \r\n\t\tboard[heap].push pack suit,0,0 # Ess\r\n\r\n\tfor heap in PANEL\r\n\t\tboard[heap].push cards.pop()\r\n\r\n\tfor card,i in cards\r\n\t\tzz = if classic then 4+i%SEQS else int random 4,4+SEQS\r\n\t\tboard[zz].push card\r\n\r\n\tcompress board\r\n\r\nreadBoard = (b) -> (if heap=='' then [] else heap.split ' ') for heap in b.split '|'\r\n\r\nfakeBoard = ->\r\n\tN = 6\r\n\tclassic = false \r\n\tif N==6 then board = \"cA|hA|sA|dA|h5|c3|s65|c2 d5||s3|d2 h6 d4|d3 h4|h2|c5|c4|h3|c6|s4|s2|d6\"\r\n\tif N==13 then board = \"cA|hA|sA|dA|h6 s8 h3 s2 d5|dJ s3 c9 d7|sK h7 dQ s5 h5 d34|cQ sJ dT d6|c7 cK hT d2 s4 c8|sQ s7 cJ s9T h9|h8 c56 c4 hJ d8|cT c3|c2|h2|h4|s6|d9|hQ|hK|dK\"\r\n\tif N==13 then board = \"cA|hA|sA|dA|c5 c7 h2 d7 c9 s6 c3 d8 s9|h8 dQ cQK dK h7 s2 dT|c4 sJQ d5||hQ h54 c8 h3 d3|cJT s4 c6 s8 hJT|d2 d4 s5|h9 sK s3|d6|d9|sT|h6|s7|hK|dJ|c2\"\r\n\tif N==13 then board = \"cA2|hA|sA|dA|c5 c7 h2 d7 c9 s6 c3 d8 s9|h8 dQ cQK dK h7 s2 dT|c4 sJQ d5||hQ h54 c8 h3 d3|cJT s4 c6 s8 hJT|d2 d4 s5|h9 sK s3|d6|d9|sT|h6|s7|hK|dJ|\"\r\n\tif N==13 then board = \"cA2|hA|sA|dA|c5 c7 h2 d7 c9 s6 c3 d8 s9|h8 dQ cQK dK h7 s2 dT|c4 sJQ d5|s5|hQ h54 c8 h3 d3|cJT s4 c6 s8 hJT|d2 d4|h9 sK s3|d6|d9|sT|h6|s7|hK|dJ|\"\r\n\tif N==13 then board = \"cA|hA|sA|dA|c9 h3 s8|h5 s7 sJ hK h4 s3 c7 hT s4|s9 d2|s5 d7 c4|s6 h9|c3 d3 h6|d6 d8 dK sT s2 c5 cK c6 c8 d4 h2|dT hQ cT d5 hJ dJ cJ|c2|d9|sQ|cQ|h7|dQ|sK|h8\"\r\n\tif N==13 then board = \"cA|hA|sA|dA|s4 cJ s3 c3 dK hJ cQ c2 h4|sQK|s9 d2 dT|s2 dQ sJ hT|d8 h3 d7 h5 h2 c9|d3 s6 sT d9 c7 c4|cK c8 h7 c5|dJ hK s87 s5 cT|d6|h9|d4|h8|d5|h6|c6|hQ\"\r\n\tboard = readBoard board\r\n\tprint board\r\n\r\nsetup = ->\r\n\tprint 'X'\r\n\tcreateCanvas innerWidth, innerHeight-0.5\r\n\tw = width/9 \r\n\th = height/4 \r\n\tangleMode DEGREES\r\n\r\n\tif localStorage.Generalen? \r\n\t\t{maxLevel,level} = JSON.parse localStorage.Generalen\r\n\telse\r\n\t\t{maxLevel,level} = {maxLevel:0, level:0} \r\n\r\n\tprint maxLevel,level\r\n\r\n\tnewGame level\r\n\tdisplay board \r\n\r\nkeyPressed = -> \r\n\tif key == 'X' \r\n\t\tN = 7\r\n\t\tboard = \"cA7|hA4|sA3|dA2||h6|s5 d6||h5 d5||s4 s6|d34||d7|s7|h7||||\"\r\n\t\thist = [[12,0,1],[5,1,1],[8,3,1],[9,1,1],[11,1,1],[16,2,1],[17,0,1],[10,0,1],[9,0,1],[18,2,1],[19,0,1],[7,0,1]]\t\t\r\n\t\tboard = readBoard board\r\n\t\tprint board \r\n\tdisplay board\r\n\r\nmenu1 = ->\r\n\tdialogue = new Dialogue 4*w,1.5*h,0.15*h \r\n\r\n\tr1 = 0.25 * height \r\n\tr2 = 0.085 * height\r\n\tdialogue.clock ' ',7,r1,r2,90+360/14 \r\n\r\n\tdialogue.buttons[0].info ['Undo',hist.length], -> \r\n\t\tif hist.length > 0 \r\n\t\t\t[src,dst] = _.last hist\r\n\t\t\tindicators = {}\r\n\t\t\tindicators[src]=[\"#ff0\",true]\r\n\t\t\tindicators[dst]=[\"#ff0\",false]\r\n\t\t\tundoMove hist.pop()\r\n\t\tdialogues.pop()\r\n\r\n\tdialogue.buttons[1].info ['Hint',hintsUsed], -> \r\n\t\thint()\r\n\t\tdialogues.pop()\r\n\r\n\tdialogue.buttons[2].info 'Link'\r\n\r\n\tdialogue.buttons[3].info 'Harder', -> \r\n\t\tlevel = constrain level+1,0,maxLevel\r\n\t\tnewGame level\r\n\t\tdialogues.pop()\r\n\r\n\tdialogue.buttons[4].info 'Go', ->\r\n\t\tnewGame level\r\n\t\tdialogues.pop()\r\n\r\n\tdialogue.buttons[5].info 'Easier', -> \r\n\t\tlevel = constrain level-1,0,maxLevel\r\n\t\tnewGame level\r\n\t\tdialogues.pop()\r\n\r\n\tdialogue.buttons[6].info 'Restart', -> \r\n\t\trestart()\r\n\t\tdialogues.pop()\r\n\r\nshowHeap = (board,heap,x,y,dy) -> # dy kan vara både pos och neg\r\n\tn = calcAntal board[heap]\r\n\tx = x * w \r\n\tif n > 0\r\n\t\ty = y * h + y * dy\r\n\t\tfor card,k in board[heap]\r\n\t\t\t[suit,under,over] = unpack card\r\n\t\t\tdr = if under < over then 1 else -1\r\n\t\t\tfor rank in range under,over+dr,dr\r\n\t\t\t\tnoFill()\r\n\t\t\t\tstroke 0\r\n\t\t\t\timage faces, x, y, w,h*1.1, OFFSETX+W*rank,1092+H*suit,225,H-1\r\n\t\t\t\ty += dy\r\n\r\n\t\t# visa eventuellt baksidan\r\n\t\tcard = _.last board[heap]\r\n\t\t[suit,under,over] = unpack card\r\n\t\tif heap in ACES and over == N-1\r\n\t\t\timage backs, x, y, w,h*1.1, OFFSETX+860,1092+622,225,H-1\r\n\r\n\tshowIndicator heap,x,if heap in HEAPS then y-dy else y\r\n\r\ndisplay = (board) ->\r\n\tbackground 0,128,0\r\n\r\n\ttextAlign LEFT,BOTTOM\r\n\tfill 64\r\n\ttextSize 0.2*h\r\n\ttext 'Generalens Tidsfördriv', 0.05*w,3*h\r\n\r\n\ttextAlign CENTER,BOTTOM\r\n\ttext msg, width/2,3*h\r\n\r\n\ttextAlign RIGHT,BOTTOM\r\n\ttext \"Level: #{level}\", 7.95*w,3*h\r\n\r\n\ttextAlign CENTER,TOP\r\n\tfor heap,y in ACES\r\n\t\tshowHeap board, heap, 8, y, 0\r\n\tfor heap,x in HEAPS\r\n\t\tn = calcAntal board[heap]\r\n\t\tdy = if n == 0 then 0 else min h/4,2*h/(n-1)\r\n\t\tshowHeap board, heap, x, 0, dy\r\n\tfor heap,x in PANEL\r\n\t\tshowHeap board, heap, x, 3, 0\r\n\r\n\tnoStroke()\r\n\tshowDialogue()\r\n\r\nshowDialogue = -> if dialogues.length>0 then (_.last dialogues).show()\r\n\r\nlegalMove = (board,src,dst) ->\r\n\tif src in ACES then return false \r\n\tif dst in PANEL  then return false \r\n\tif board[src].length==0 then return false\r\n\tif board[dst].length==0 then return true\r\n\t[suit1,under1,over1] = unpack _.last board[src]\r\n\t[suit2,under2,over2] = unpack _.last board[dst]\r\n\tif suit1 == suit2 and 1 == Math.abs over1-over2 then return true \r\n\tfalse\r\n\r\nmakeMove = (board,src,dst,record) -> \r\n\t[suit,under1,over1] = unpack board[src].pop() \r\n\tover = under1 \r\n\tunder = over1 \r\n\tif record then hist.push [src, dst, 1 + abs under1-over1]\r\n\tif board[dst].length > 0\r\n\t\t[suit2,under2,over2] = unpack board[dst].pop()\r\n\t\tunder = under2 \r\n\tboard[dst].push pack suit,under,over \r\n\r\n# returns text move\r\nundoMove = ([src,dst,antal]) -> \r\n\tmsg = ''\r\n\tres = prettyUndoMove src,dst,board,antal\r\n\t[board[src],board[dst]] = undoMoveOne board[src],board[dst],antal\r\n\tres\r\n\r\nundoMoveOne = (a,b,antal) ->\r\n\t[suit, under, over] = unpack b.pop()\r\n\tif under < over \r\n\t\ta.push pack suit,over,over-antal+1\r\n\t\tif over-under != antal-1\t\r\n\t\t\tb.push pack suit,under,over-antal\r\n\telse\r\n\t\ta.push pack suit,over,over+antal-1\r\n\t\tif under-over != antal-1\r\n\t\t\tb.push pack suit,under,over+antal #\r\n\t[a,b]\r\nassert [['d9T'],['dJ']], undoMoveOne [],['dJ9'],2\r\nassert [['d9'],['dJT']], undoMoveOne [],['dJ9'],1\r\n\r\nprettyUndoMove = (src,dst,b,antal) ->\r\n\tc2 = _.last b[dst]\r\n\tif b[src].length > 0\r\n\t\tc1 = _.last b[src]\r\n\t\t\"#{prettyCard2 c2,antal} to #{prettyCard c1}\"\r\n\telse\r\n\t\tif src in HEAPS then \"#{prettyCard2 c2,antal} to hole\"\r\n\t\tif src in PANEL then \"#{prettyCard2 c2,antal} to panel\"\r\n\r\n# returns destination\r\noneClick = (data,marked,board,sharp=false) ->\r\n\tif _.isEqual data.lastMarked, marked then data.counter++ else data.counter = 0\r\n\r\n\tholes = []\r\n\tfound = false\r\n\r\n\tfor heap in ACES\r\n\t\tif legalMove board,marked[0],heap  \r\n\t\t\tif sharp then makeMove board,marked[0],heap,true\r\n\t\t\tfound = true \r\n\t\t\treturn heap\r\n\r\n\tif not found # Går ej att flytta till något ess. \r\n\t\talternativeDsts = [] # för att kunna välja mellan flera via Undo\r\n\t\tfor heap in HEAPS\r\n\t\t\tif board[heap].length == 0\r\n\t\t\t\tif marked[0] in PANEL or calcAntal(board[marked[0]]) > 1\r\n\t\t\t\t\tholes.push heap\r\n\t\t\telse \r\n\t\t\t\tif legalMove board,marked[0],heap\r\n\t\t\t\t\talternativeDsts.push heap\r\n\t\tif holes.length > 0 then alternativeDsts.push holes[0]\t\t\r\n\r\n\t\tif alternativeDsts.length > 0\r\n\t\t\theap = alternativeDsts[data.counter % alternativeDsts.length]  \r\n\t\t\tif sharp then makeMove board,marked[0],heap,true\r\n\t\t\tdata.lastMarked = marked \r\n\t\t\treturn heap\r\n\r\n\treturn marked[0] # no Move can happen\r\n\r\n# assert1.jpg\r\nb1 = readBoard \"cA|hA|sA|dA|h5|c3|s65|c2 d5||s3|d2 h6 d4|d3 h4|h2|c5|c4|h3|c6|s4|s2|d6\"\r\nassert 11, oneClick {lastMarked:0, counter:0},[4,0],b1 # hj5 to hj4\r\nassert 5,  oneClick {lastMarked:0, counter:0},[5,0],b1 # kl3 no move\r\nassert 8,  oneClick {lastMarked:0, counter:0},[6,1],b1 # sp5 to hole\r\n\r\nassert 10, oneClick {lastMarked:0, counter:0},[7,1],b1 # ru5 to ru4\r\nassert 8,  oneClick {lastMarked:[7,1], counter:0},[7,1],b1 # ru5 to hole\r\n\r\nassert 8, oneClick {lastMarked:0, counter:0},[8,-1],b1 # hole click\r\nassert 9, oneClick {lastMarked:0, counter:0},[9,0],b1 # sp3 no move\r\n\r\nassert 7, oneClick {lastMarked:0, counter:0},[10,2],b1 # ru4 to ru5\r\nassert 8, oneClick {lastMarked:[10,2], counter:0},[10,2],b1 # ru4 to hole\r\nassert 7, oneClick {lastMarked:[10,2], counter:1},[10,2],b1 # ru4 to ru5\r\n\r\nb1a = readBoard \"cA|hA|sA|dA|h5|c3|s65|c2 d54||s3|d2 h6|d3 h4|h2|c5|c4|h3|c6|s4|s2|d6\"\r\nassert 4, oneClick {lastMarked:[10,2], counter:0},[10,1],b1a # hj6 to hj5\r\nassert 8, oneClick {lastMarked:[10,1], counter:0},[10,1],b1a # hj6 to hole\r\n\r\nassert 4, oneClick {lastMarked:0, counter:0},[11,1],b1 # hj4 to hj5\r\nassert 8, oneClick {lastMarked:[11,1], counter:0},[11,1],b1 # hj4 to hole xxx\r\n\r\nassert 1, oneClick {lastMarked:0, counter:0},[12,0],b1 # hj2 to A\r\nassert 8, oneClick {lastMarked:0, counter:0},[13,0],b1 # kl5 to hole\r\n\r\nassert 5, oneClick {lastMarked:0, counter:0},[14,0],b1 # kl4 to kl3\r\nassert 8, oneClick {lastMarked:[14,0], counter:0},[14,0],b1 # kl4 to hole\r\n\r\nassert 11, oneClick {lastMarked:0, counter:0},[15,0],b1 # hj3 to hj4\r\nassert 8, oneClick {lastMarked:[15,0], counter:0},[15,0],b1 # hj3 to hole\r\n\r\nassert 8, oneClick {lastMarked:0, counter:0},[16,0],b1 # kl6 to hole\r\n\r\nassert 6, oneClick {lastMarked:0, counter:0},[17,0],b1 # sp4 to sp5\r\nassert 9, oneClick {lastMarked:[17,0], counter:0},[17,0],b1 # sp4 to sp3\r\nassert 8, oneClick {lastMarked:[17,0], counter:1},[17,0],b1 # sp4 to hole\r\n\r\nassert 2, oneClick {lastMarked:0, counter:0},[18,0],b1 # sp2 to A\r\n\r\nassert 7, oneClick {lastMarked:0, counter:0},[19,0],b1 # ru6 to ru5\r\nassert 8, oneClick {lastMarked:[19,0], counter:0},[19,0],b1 # ru6 to hole\r\n\r\n# assert2.jpg\r\nb2 = readBoard \"cA|hA|sA|dA|d5 h2 d3 h3|c7|c34|d4 h76|||s3 d6 c6|d7 c5 d2|c2|s4|s6|h5|s5|s7|s2|h4\"\r\n#assert 8, oneClick {lastMarked:0, marked:9, counter:0},b2 #hj6 to hole\r\n\r\nhitGreen = (mx,my,mouseX,mouseY) ->\r\n\tif my==3 then return false\r\n\tseqs = board[mx+4]\r\n\tprint seqs\r\n\tn = calcAntal seqs\r\n\tif n==0 then return true\r\n\r\n\t# dy = min h/4,2*h/(n-1)\r\n\tprint mouseY, mx, mx+4, h, n, h*(1+1/4*(n-1)), mouseY > h*(1+1/4*(n-1))\r\n\tmouseY > h*(1+1/4*(n-1))\r\n\r\nmousePressed = -> \r\n\r\n\tif not (0 < mouseX < width) then return\r\n\tif not (0 < mouseY < height) then return\r\n\r\n\tmx = mouseX//w\r\n\tmy = mouseY//h\r\n\r\n\tdialogue = _.last dialogues\r\n\tif dialogues.length==0 or not dialogue.execute mouseX,mouseY \r\n\t\tprint 'A'\r\n\t\tindicators = {}\r\n\r\n\t\tif mx == 8 or hitGreen mx,my,mouseX,mouseY \r\n\t\t\tprint 'B'\r\n\t\t\tif dialogues.length == 0 then menu1() else dialogues.pop()\r\n\t\t\tdisplay board\r\n\t\t\treturn\r\n\r\n\t\thandle mx,my\r\n\r\n\tprint 'C',\"#{hist.length} of #{maxMoves} moves\"\r\n\tdisplay board\r\n\r\nhandle = (mx,my) ->\r\n\tmarked = [(mx + if my >= 3 then 12 else 4),my]\r\n\theap = oneClick oneClickData,marked,board,true\r\n\r\n\tif msg == '' and 4*N == countAceCards board\r\n\t\tif hist.length > maxMoves * 1.1\r\n\t\t\tmsg = \"Too many moves: #{hist.length - maxMoves}\"\r\n\t\telse if hintsUsed == 0\r\n\t\t\tdiff = hist.length - maxMoves\r\n\t\t\tif diff ==0 then s = \"exact\"\r\n\t\t\tif diff < 0 then s = \"#{-diff} moves less\"\r\n\t\t\tif diff > 0 then s = \"#{diff} moves more\"\r\n\t\t\tmsg = \"#{(millis() - start) // 1000} s (#{s})\"\r\n\t\t\tif level == maxLevel then maxLevel++ \r\n\t\t\tmaxLevel = constrain maxLevel,0,15\r\n\t\t\tlocalStorage.Generalen = JSON.stringify {maxLevel,level}\r\n\t\t\tprint localStorage.Generalen\r\n\t\telse\r\n\t\t\tmsg = \"Hints used: #{hintsUsed}\"\r\n\t\tprintManualSolution()\r\n\r\n####### AI-section ########\r\n\r\nfindAllMoves = (b) ->\r\n\tsrcs = HEAPS.concat PANEL \r\n\tdsts = ACES.concat HEAPS \r\n\tres = []\r\n\tfor src in srcs\r\n\t\tfor dst in dsts\r\n\t\t\tif src != dst\r\n\t\t\t\tif legalMove b,src,dst\r\n\t\t\t\t\tres.push [src,dst]\r\n\tres\r\n\r\nexpand = ([aceCards,level,b,path]) ->\r\n\tres = []\r\n\tmoves = findAllMoves b\r\n\tfor move in moves\r\n\t\t[src,dst] = move\r\n\t\tb1 = _.cloneDeep b\r\n\t\tmakeMove b1,src,dst\r\n\t\tkey = dumpBoard b1\r\n\t\tif key not of hash\r\n\t\t\tnewPath = path.concat [move]\r\n\t\t\thash[key] = [newPath, b]\r\n\t\t\tres.push [countAceCards(b1), level+1, b1, path.concat([move])] \r\n\tres\r\n\r\nhint = ->\r\n\tif 4*N == countAceCards board then return \r\n\thintsUsed++\r\n\tres = hintOne()\r\n\tif res or hist.length==0 then return \r\n\tindicators = {}\r\n\t[src,dst] = _.last hist \r\n\tindicators[src] = ['#f00',true]\r\n\tindicators[dst] = ['#f00',false]\t\r\n\t#undoMove hist.pop()\r\n\r\nhintOne = -> \r\n\thintTime = millis()\r\n\taceCards = countAceCards board\r\n\tif aceCards == N*4 then return true\r\n\tcands = []\r\n\tcands.push [aceCards,hist.length,board,[]] # antal kort på ässen, antal drag, board\r\n\thash = {}\r\n\tnr = 0\r\n\tcand = null\r\n\torigBoard = _.cloneDeep board\r\n\r\n\twhile nr < 10000 and cands.length > 0 and aceCards < N*4\r\n\t\tnr++ \r\n\t\tcand = cands.pop()\r\n\t\taceCards = cand[0]\r\n\t\tif aceCards < N*4 \r\n\t\t\tincrement = expand cand\r\n\t\t\tcands = cands.concat increment\r\n\t\t\tcands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]\r\n\tprint N,nr,cands.length,aceCards\r\n\r\n\tif aceCards == N*4\r\n\t\tboard = cand[2]\r\n\t\t#printAutomaticSolution hash, board\r\n\t\tpath = cand[3]\r\n\t\tboard = origBoard\r\n\t\t[src,dst] = path[0]\r\n\t\t#makeMove board,src,dst,true\r\n\t\tindicators = {}\r\n\t\tindicators[src] = ['#0f0',true]\r\n\t\tindicators[dst] = ['#0f0',false]\r\n\r\n\t\tprint \"hint: #{int millis()-hintTime} ms\"\r\n\t\treturn true\r\n\telse\r\n\t\tprint 'hint failed. Should never happen!'\r\n\t\t#print N,nr,cands.length,aceCards,_.size hash\r\n\t\tboard = origBoard\r\n\t\treturn false\r\n\r\nnewGame = (lvl) -> # 0..15\r\n\tlevel = lvl\r\n\tstart = millis()\r\n\tmsg = ''\r\n\thist = []\r\n\twhile true \r\n\t\tmakeBoard level \r\n\t\thintsUsed = 0\r\n\t\toriginalBoard = _.cloneDeep board\r\n\r\n\t\taceCards = countAceCards board\t\t\r\n\t\tcands = []\r\n\t\tcands.push [aceCards,0,board,[]] # antal kort på ässen, antal drag, board\r\n\t\thash = {}\r\n\t\tnr = 0\r\n\t\tcand = null\r\n\r\n\t\twhile nr < LIMIT and cands.length > 0 and aceCards < N*4\r\n\t\t\tnr++ \r\n\t\t\tcand = cands.pop()\r\n\t\t\taceCards = cand[0]\r\n\t\t\tincrement = expand cand\r\n\t\t\tcands = cands.concat increment\r\n\t\t\tcands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]\r\n\r\n\t\tif aceCards == N*4\r\n\t\t\tprint JSON.stringify dumpBoard originalBoard \r\n\t\t\tboard = cand[2]\r\n\t\t\tprintAutomaticSolution hash,board\r\n\t\t\tboard = _.cloneDeep originalBoard\r\n\t\t\tprint \"#{int millis()-start} ms\"\r\n\t\t\tstart = millis()\r\n\t\t\tmaxMoves = int cand[1] # * 1.1 # +10%\r\n\t\t\tprint 'maxMoves',maxMoves\r\n\t\t\treturn \r\n\r\nrestart = ->\r\n\thist = []\r\n\tboard = _.cloneDeep originalBoard\r\n\tmsg = ''\r\n\r\nnextLevel = ->\r\n\tif hist.length <= maxMoves and level <= maxLevel and hintsUsed == 0 and 4*N == countAceCards board then level++ else level--\r\n\tlevel = constrain level,0,15\r\n\tif level>maxLevel then maxLevel=level\r\n\tnewGame level\r\n\r\nprettyCard2 = (card,antal) ->\r\n\t[suit,under,over] = unpack card \r\n\tif antal==1 \r\n\t\t\"#{SUIT[suit]} #{RANK[over]}\"\r\n\telse\r\n\t\tif under < over\r\n\t\t\t\"#{SUIT[suit]} #{RANK[over]}..#{RANK[over-antal+1]}\"\r\n\t\telse\r\n\t\t\t\"#{SUIT[suit]} #{RANK[over]}..#{RANK[over+antal-1]}\"\r\n\r\nprettyCard = (card,antal=2) ->\r\n\t[suit,under,over] = unpack card \r\n\tif antal==1 then \"#{RANK[over]}\"\r\n\telse \"#{SUIT[suit]} #{RANK[over]}\"\r\nassert \"club A\", prettyCard pack 0,0,0\r\nassert \"club T\", prettyCard pack 0,9,9\r\nassert \"heart J\", prettyCard pack 1,10,10\r\nassert \"spade Q\", prettyCard pack 2,11,11\r\nassert \"diamond K\", prettyCard pack 3,12,12\r\nassert \"3\", prettyCard pack(3,2,2),1\r\n#print 'prettyCard ok'\r\n\r\nprettyMove = (src,dst,b) ->\r\n\tc1 = _.last b[src]\r\n\tif b[dst].length > 0\r\n\t\tc2 = _.last b[dst]\r\n\t\t\"#{prettyCard c1} to #{prettyCard c2,1}\"\r\n\telse\r\n\t\tif dst in HEAPS then \"#{prettyCard c1} to hole\"\r\n\t\telse \"#{prettyCard c1} to panel\"\r\n\r\nprintAutomaticSolution = (hash, b) ->\r\n\tkey = dumpBoard b\r\n\tsolution = []\r\n\twhile key of hash\r\n\t\t[path,b] = hash[key]\r\n\t\tsolution.push hash[key]\r\n\t\tkey = dumpBoard b\r\n\tsolution.reverse()\r\n\ts = 'Automatic Solution:'\r\n\tfor [path,b],index in solution\r\n\t\t[src,dst] = _.last path \r\n\t\ts += \"\\n#{index}: #{prettyMove src,dst,b} (#{src} to #{dst})\"\r\n\tprint s\r\n\r\nprintManualSolution = ->\r\n\tb = _.cloneDeep originalBoard\r\n\ts = 'Manual Solution:'\r\n\tfor [src,dst,antal],index in hist\r\n\t\ts += \"\\n#{index}: #{prettyMove src,dst,b}\"\r\n\t\tmakeMove b,src,dst,false\r\n\tprint s\r\n"
  ]
}