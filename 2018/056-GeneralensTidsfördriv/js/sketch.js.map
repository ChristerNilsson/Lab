{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": ";;;;;AAAA;;;AAAA,IAAA,GAAA,SAAA,GAAA,OAAA,WAAA,OAAA,OAAA,YAAA,SAAA,MAAA,MAAA,QAAA,WAAA,cAAA,GAAA,MAAA,MAAA,OAAA,KAAA,YAAA,WAAA,WAAA,SAAA,UAAA,QAAA,cAAA,SAAA,OAAA,OAAA,UAAA,OAAA,MAAA;;AAIA,UAAU;;AACV,IAAI;;AACJ,IAAI;;AACJ,IAAI,IAAE;;AACN,IAAI,IAAE;;AACN,MAAM;;AACN,QAAM;;AACN,QAAQ;;AACR,OAAO;;AACP,SAAS;;AACT,QAAQ;;AACR,OAAO;;AACP,QAAQ;;AACR,OAAO;;AAEP,UAAU;SAAG,MAAM,UAAT,AAAS,AAAU;;;AAE7B,QAAQ,AAAC,EAAC;;AAEV,YAAY,qBACX;MAAA,MAAA,GAAA,GAAA,GAAA,KAAA,MAAA,MAAA,MAAA,MAAA,GAAA,GAAA,GAAA,GAAA,KAAA,MAAA,MAAA,MAAA,MAAA,IAAA;AAAA,UAAQ,AACR;;AAAA,OAAA,kCAAA;;AACC,AAAK,UAAL,AAAM,KADP,AACC,AAAW;AAEZ;;AAAA,OAAA,qDAAA;;AACC,AAAM,UAAA,AAAK,MAAX,AAAY,KAAK,CAAA,AAAC,MAAD,AAAM,GADxB,AACC,AAAiB,AAAQ;AAC1B;;AAAA,OAAA,qCAAA;aACC;;AAAA,SAAA,qCAAA;;AACC,WAAK,IAAI,OAAA,AAAO,GAAX,AAAI,AAAS;AAClB,AAAM,YAAA,AAAE,GAAR,AAAS,KAAK,AAAK,MAFpB,AAEC,AAAc,AAAM;AAHtB;AAIA;;AAAA,OAAA,qCAAA;;AACC,AAAM,UAAA,AAAK,MAAX,AAAY,KAAK,AAAK,MADvB,AACC,AAAiB,AAAM;;SAExB,MAAM,AAAI,KAAJ,AAAK,UAdA,AAcX,AAAM,AAAe;;;AAEtB,YAAY;SACX,QAAQ,CAAC,CAAC,CAAA,AAAC,GAAD,AAAG,GAAL,AAAC,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAf,AAAW,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAzB,AAAqB,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAnC,AAA+B,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAZ,AAAS,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAApB,AAAiB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA5B,AAAyB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA7E,AAAyC,AAAiC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAAZ,AAAS,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,GAAtB,AAAmB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA9B,AAA2B,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAzH,AAAmF,AAAmC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,IAAJ,AAAC,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,IAAd,AAAW,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,GAAxB,AAAqB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAhC,AAA6B,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAvK,AAA+H,AAAqC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAAZ,AAAS,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,GAAtB,AAAmB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA9B,AAA2B,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAAnN,AAA6K,AAAmC,AAAM,MAAK,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAAZ,AAAS,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,IAAtB,AAAmB,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,GAAhC,AAA6B,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAnQ,AAA2N,AAAqC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAZ,AAAS,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAApB,AAAiB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA5B,AAAyB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAA7S,AAAyQ,AAAiC,AAAM,MAAK,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAZ,AAAS,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAApB,AAAiB,AAAM,KAAI,CAAA,AAAC,GAAD,AAAG,GAA9B,AAA2B,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA3V,AAAqT,AAAmC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAJ,AAAC,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAAZ,AAAS,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAApB,AAAiB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,GAA5B,AAAyB,AAAK,IAAG,CAAA,AAAC,GAAD,AAAG,IAArY,AAAiW,AAAiC,AAAM,MAAK,CAAC,CAAA,AAAC,GAAD,AAAG,IAAjZ,AAA6Y,AAAC,AAAM,MAAK,CAAC,CAAA,AAAC,GAAD,AAAG,GAA7Z,AAAyZ,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAva,AAAma,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAjb,AAA6a,AAAC,AAAK,KAAnb,AAAub,IAAG,CAAC,CAAA,AAAC,GAAD,AAAG,GAA9b,AAA0b,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,GAAxc,AAAoc,AAAC,AAAK,KAAI,CAAC,CAAA,AAAC,GAAD,AAAG,IAAld,AAA8c,AAAC,AAAM,MAAK,CAAC,CAAA,AAAC,GAAD,AAAG,GAD3d,AACH,AAA0d,AAAC,AAAK;AAxCze;;;;;;;;;;;;;;;;;;AA0DA,QAAQ,iBACP;MAAA,GAAA,KAAA,MAAA,GAAA,MAAA,KAAA,MAAA;AAAA,eAAA,AAAa,KAAb,AAAiB;AAEjB,UAAQ,AACR;;AAAA,OAAA,kCAAA;eACC;;AAAA,SAAA,qCAAA;;AACC,AAAK,YAAL,AAAM,KAAK,CAAA,AAAC,MAAD,AAAM,MADlB,AACC,AAAW,AAAW;AAFxB;;AAGA,UAAQ,AAAC,EAAD,AAAE,QAAF,AAAU;AAElB;AACA,UAAA,AAAQ;AACR,UAAQ,CAAA,AAAC;AACT,SAAO;SACP,OAbO,AAaA;;;AAER,WAAW,kBAAA,AAAC,OAAD,AAAO,MAAP,AAAY,GAAZ,AAAc,GAAd,AAAgB,IAC1B;MAAA,MAAA,IAAA,GAAA,GAAA,KAAA,MAAA,GAAA,GAAA,MAAA,OAAA,OAAA,KAAA,MAAA,MAAA;AAAA,MAAI,UAAU,AAAM,MAAhB,AAAgB;AACpB,MAAG,MAAH,AAAM,GAAO;AAAb;;AACA,OAAK,QAAA,AAAM,IAAI,IAAE;AACjB,MAAG,IAAH,AAAO;AAAO,UAAM,CAAA,AAAC,IAArB,AAAuB;;AACvB,MAAG,IAAH,AAAO;AAAO,UAAM,IAApB,AAAsB;;AACtB,MAAI,KAAK,IAAA,AAAE,KAAG;AACd,MAAI,IAAI,AACR;;AAAA,OAAA,4CAAA;eACC;gBAAqB;;;;AAArB,AAAC;AAAD,AAAM;AAAN,AAAY;;AACZ,SAAQ,QAAH,AAAW,QAAX,AAAsB,IAAO,CAAC,AACnC;;AAAA,SAAA,qCAAA;;AACC,YAAA,AAAM,KAAN,AAAW,GAAE,IAAb,AAAe,IAAf,AAAmB,GAAnB,AAAqB,GAAG,UAAQ,IAAhC,AAAkC,MAAK,OAAK,IAA5C,AAA8C,MAA9C,AAAmD,KAAnD,AAAuD;AACvD,WAFD,AAEM;AALP;;AAOA,gBAAG,IAAA,IAAY,WAAf,AAAyB;AACxB,SAAA,AAAK,GAAL,AAAO,KAAP,AAAW,GAAX,AAAa;AACb,QAAG,MAAG,IAAN,AAAQ;aACP,QAAQ,IAAE,IAAV,AAAY,GAAE,IAAE,IAAhB,AAAkB,GADnB,AACC,AAAoB;AADrB,WAAA;AAGC,UAAG,KAAH,AAAM;AAAQ,gBAAQ,IAAR,AAAU,GAAI,IAAE,IAAhB,AAAkB,GAAhC,AAAc,AAAoB;;AAClC,UAAG,KAAH,AAAM;AAAQ,gBAAA,AAAQ,GAAM,IAAE,IAAhB,AAAkB,GAAhC,AAAc,AAAoB;;AAClC,UAAG,OAAH,AAAO;eAAO,QAAQ,IAAE,IAAV,AAAY,GAAE,IAAE,IAAhB,AAAkB,GAAhC,AAAc,AAAoB;AALnC;AAFD;AAfU;;;AAwBX,YAAY,mBAAA,AAAC,KACZ;MAAA,GAAA,KAAA,OAAA,OAAA,KAAA;AAAA,QAAI;AACJ,OAAA,kCAAA;AAAI;;AAAA,AAAC;AAAD,AAAM;AAAN,AAAY;;AACf,WAAO,IAAI,IAAI,QADhB,AACY,AAAU;;SAHX,AAIX;;;AAED,UAAU,iBAAA,AAAC,OACV;MAAA,IAAA,MAAA,GAAA,KAAA,MAAA,MAAA,MAAA,GAAA,GAAA,GAAA,GAAA,KAAA,MAAA,MAAA,MAAA,SAAA,GAAA,IAAA;AAAA,aAAA,AAAW,AAEX;;AAAA,OAAA,4CAAA;;AACC,aAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,GAAtB,AAAyB,GAD1B,AACC,AAA4B;AAE7B;;AAAA,OAAA,+CAAA;;AACC,QAAI,UAAU,AAAM,MAAhB,AAAgB;AACpB,SAAQ,KAAH,AAAM,IAAO,IAAb,AAAe,IAAO,CAAC,QAAA,AAAM,IAAE,IAAR,AAAU,IAAX,AAAa,AAAG,MAAC,IAAD,AAAG;AAC9C,aAAA,AAAS,OAAT,AAAgB,MAAM,CAAtB,AAAuB,GAAvB,AAA0B,GAAG,CAH9B,AAGC,AAA8B;AAE/B;;AAAA,OAAA,+CAAA;;AACC,QAAI,UAAU,AAAM,MAAhB,AAAgB;AACpB,SAAQ,KAAH,AAAM,IAAO,IAAb,AAAe,IAAO,CAAC,QAAA,AAAM,IAAE,IAAR,AAAU,IAAX,AAAa,AAAG,MAAC,IAAD,AAAG;AAC9C,aAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,GAAtB,AAAyB,GAH1B,AAGC,AAA4B;AAE7B;0CAAA;;AAAA,OAAA,+CAAA;;AACC,SAAK,CAAC,CAAD,AAAE,GAAE,CAAJ,AAAK,GAAE,CAAP,AAAQ,GAAE,CAAV,AAAW,GAAX,AAAa,GAAb,AAAe,GAAf,AAAiB,GAAjB,AAAmB,GAAnB,AAAqB,AAAG,GAAA;iBAC7B,SAAA,AAAS,OAAT,AAAgB,MAAhB,AAAsB,IAAtB,AAAyB,GAF1B,AAEC,AAA4B;AAF7B;SAhBS;;;AAoBV,YAAY,mBAAA,AAAC,OAAD,AAAO,GAAP,AAAS;MACpB,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA;AAAA,MAAG,MAAA,AAAM,KAAN,MAAA,AAAQ,KAAR,MAAA,AAAU,KAAV,MAAH,AAAe,GAAQ;WAAvB,AAA8B;;AAC9B,MAAG,MAAA,AAAM,MAAN,MAAA,AAAS,MAAT,MAAA,AAAY,MAAZ,MAAA,AAAe,MAAf,MAAA,AAAkB,MAAlB,MAAA,AAAqB,MAArB,MAAA,AAAwB,MAAxB,MAAH,AAA8B,IAAS;WAAvC,AAA8C;;AAC9C,OAAK,AAAM,MAAA,AAAG,IAAT,AAAU,SAAS,AAAM,MAAA,AAAG,IAA5B,AAA6B,SAAS,AAAM,MAAA,AAAG,IAA/C,AAAgD,SAAS,AAAM,MAAA,AAAG,IAAC;AACxE,OAAK,AAAM,MAAA,AAAG,IAAT,AAAU,SAAS,AAAM,MAAA,AAAG,IAA5B,AAA6B,SAAS,AAAM,MAAA,AAAG,IAA/C,AAAgD,SAAS,AAAM,MAAA,AAAG,IAAC;AACxE,MAAG,MAAH,AAAM,IAAQ;WAAO,OAAA,AAAI,KAAK,OAA9B,AAAkC;;AAClC,MAAG,MAAH,AAAM,IAAQ;WAAO,AAAM,MAAA,AAAG,IAAT,AAAU,WAAV,AAAkB,AAAM,MAAA,MAAA,AAAM,KAAN,MAAA,AAAQ,KAAR,MAAA,AAAU,KAAV,MAAA,AAAY,KAAZ,MAAA,AAAc,KAAd,MAAA,AAAgB,KAAhB,MAAA,AAAkB,MAAlB,MAA7C,AAA6C,AAAqB;AALlE;;AAOA,MAAG,AAAM,MAAA,AAAE,GAAR,AAAS,WAAZ,AAAoB,GAAO;WAA3B,AAAkC;;AAClC,MAAG,AAAM,MAAA,AAAE,GAAR,AAAS,WAAZ,AAAoB,GAAO;WAA3B,AAAkC;AAClC;;AATA,eASa,AAAC,EAAD,AAAE,KAAK,AAAM,MAAb,AAAa,AAC1B;;;;AADA,AAAC;AAAD,AAAI;AAAJ,AAAO;;gBACM,AAAC,EAAD,AAAE,KAAK,AAAM,MAAb,AAAa;;;;AAA1B,AAAC;AAAD,AAAI;AAAJ,AAAO;;AACP,MAAG,OAAA,AAAI,AAAO,cAAA,IAAI,KAAJ,AAAO,SAAP,AAAe,KAAf,QAAd,AAAc,AAAiB,KAAS;WAAxC,AAA+C;;SAZpC,AAaX;;;AAED,WAAW,kBAAA,AAAC,OAAD,AAAO,GAAP,AAAS,GAAT;AACV;MAAA,OAAA,OAAA,OAAA;AAAA,SAAO,AAAC,EAAD,AAAE,KAAK,AAAM,MAAb,AAAa,AAAI,IAAA;AACxB,UAAQ,AAAM,MAAA,AAAE,GAAR,AAAS;AACjB,UAAQ,AAAM,MAAA;AACd,UAAQ,AAAM,MAAA;AACd,MAAG,AAAM,MAAA,AAAE,GAAR,AAAS,SAAZ,AAAqB;AAAO,YAAQ,AAAM,MAAA,AAAE,GAAR,AAAS,AAAM,MAAnD,AAAmD;;SACnD,AAAM,MAAA,AAAE,GAAR,AAAS,KAAK,CAAA,AAAC,MAAD,AAAM,OANV,AAMV,AAAc,AAAY;;;AAE3B,eAAe,wBACd;MAAA,SAAA,IAAA;AAAA,kBAAK,UAAS,IAAE;AAChB,kBAAK,UAAS,IAAE;AAChB,MAAG,MAAH,AAAS;AACR,cAAU,KADX,AACgB;AADhB,SAAA;AAGC,QAAG,OAAH,AAAO;AAAO,gBAAd,AAAwB;AAAxB,eACQ,KAAH,AAAM;AAAO,gBAAU,IAAvB,AAAyB;AAAzB,KAAA,MAAA;AACA,gBAAU,IADV,AACY;AALlB;;AAOA,MAAG,UAAH;AACC,QAAG,YAAH,AAAc;AACb,UAAG,UAAA,AAAU,OAAV,AAAgB,QAAnB,AAAG,AAAuB;AACzB,iBAAA,AAAS,OAAT,AAAe,QADhB,AACC,AAAsB;AAFxB;;AAGA,aAJD,AAIU;AAJV,SAAA;AAMC,aAND,AAMU;;SACV,QAjBc,AAiBd,AAAQ;AAnKT;;;AAuKA,OAAO,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAU,GAAV,AAAY,GAAZ,AAAc,IAAd,AAAiB,IAAjB,AAAqB,IAArB,AAAwB,IAAxB,AAA2B,IAA3B,AAA8B,IAA9B,AAAkC,IAAlC,AAAqC,IAArC,AAAwC,IAAxC,AAA2C;;AAClD,OAAO,CAAA,AAAC,GAAD,AAAG,GAAH,AAAK,GAAL,AAAO,GAAP,AAAU,GAAV,AAAY,GAAZ,AAAc,GAAd,AAAgB,GAAhB,AAAmB,GAAnB,AAAqB,GAArB,AAAuB,IAAvB,AAA0B;;AAEjC,eAAe,sBAAA,AAAC,GACf;MAAA,KAAA,GAAA,KAAA,MAAA,GAAA,KAAA;AAAA,QAAM;AACN,OAAA,mCAAA;;AACC,SAAA,qCAAA;;AACC,UAAG,QAAH,AAAQ;AACP,YAAG,UAAA,AAAU,GAAV,AAAY,KAAf,AAAG,AAAgB;AAAS,AAAG,cAAH,AAAI,KAAK,CAAA,AAAC,KAAtC,AAA4B,AAAS,AAAK;AAD3C;AADD;AADD;;SAFc,AAMd;;;AAED,UAAU,iBAAA,AAAC,GACV;MAAA,MAAA,OAAA,GAAA,KAAA,MAAA,GAAA,IAAA,IAAA,KAAA;AAAA,QAAM;AACN,OAAA,kDAAA;;AACC,SAAA,qCAAA;AAAI;;AAAA,AAAC;AAAD,AAAM;AAAN,AAAS;;AACZ,UAAG,OAAH,AAAO;AACN,eAAO,AAAO,OAAP,AAAO,QAAQ,IADvB,AACuB,AAAI;AAD3B,aAAA;AAGC,eAAO,AAAO,OAAP,AAAO,QAAQ,IAAf,AAAe,AAAI,MAAM,IAHjC,AAGiC,AAAI;AAJtC;;AAKA,WAND,AAMQ;;SARC,AAST;;;AAED,aAAa,oBAAA,AAAC,GACb;MAAA,MAAA,GAAA,KAAA,KAAA;AAAA,QAAM,AACN;;AAAA,OAAA,kCAAA;;AACC,QAAG,AAAE,EAAA,AAAK,MAAP,AAAQ,WAAX,AAAqB;AAArB,AAA4B;AAD7B;;SAFY,AAIZ;;;AAED,SAAS,gBAAA,AAAC,GACT;MAAA,IAAA,KAAA,KAAA,GAAA,KAAA,OAAA,KAAA;AAAA,QAAM;AACN,UAAQ,aAAA,AAAa;AACrB,OAAA,oCAAA;AAAI;;AAAA,AAAC;AAAD,AAAK;;AACR,SAAK,AAAC,EAAD,AAAE,UAAF,AAAY;AACjB,aAAA,AAAS,IAAT,AAAY,KAAZ,AAAgB;AAChB,UAAM,QAAA,AAAQ;AACd,QAAG,EAAA,OAAH,AAAG,AAAW;AACb,AAAK,WAAL,AAAK,OAAO;AACZ,AAAG,UAAH,AAAI,KAAJ,AAAS;AACT,UAAG,QAAA,AAAQ,MAAK,WAAhB,AAAgB,AAAW;AAC1B;AACA,gBAAA,AAAQ;AACR,cAAA,AAAM,SAAN,AAAc;AACd,eAJD,AAIQ;AAPT;AAJD;;SAHQ,AAeR;;;AAED,QAAQ,iBACP;MAAA,MAAA,GAAA,KAAA;AAAA,QAAM;AACN,SAAO;AACP,OAAA,oCAAA;;AACC,UAAM,AAAG,IAAH,AAAI,OAAO,OAAX,AAAW,AAAO;AACxB,QAAG,QAAH,MAAc;AAAd;AAFD;;SAGA,QANO,AAMC;;;AAET,aAAa;AACZ,MAAG,QAAH,AAAU;;AACT,YAAA,AAAQ;AACR,YAAQ,CAAA,AAAC;AACT,WAHD,AAGQ;;AAER,MAAG,QAAH,AAAU;AACT;WACA,MAAM,AAAK,MAAX,AAAY,QAAQ,AAAC,EAAD,AAAE,KAFvB,AAEC,AAAoB,AAAO;AARhB",
  "sourcesContent": [
    "# Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/\r\n# Copyright 2015 - Chris Aguilar - conjurenation@gmail.com\r\n# Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html\r\n\r\nOFFSETX = 468\r\nW = 263.25\r\nH = 352\r\nw = W/3\r\nh = H/3\r\nimg = null\r\nboard=null\r\ncards = null\r\nhist = []\r\nmarked = null\r\ncands = null\r\nhash = null\r\nholes = 0\r\ndone = null\r\n\r\npreload = -> img = loadImage 'cards/Color_52_Faces_v.2.0.png'\r\n\r\nrange = _.range\r\n\r\nmakeBoard = ->\r\n\tboard = []\r\n\tfor i in range 21 \r\n\t\tboard.push []\r\n\r\n\tfor suit,heap in [2,1,3,0]\r\n\t\tboard[heap].push [suit,0,0]\r\n\tfor i in range 4,12\r\n\t\tfor j in range 5 \r\n\t\t\trr = int random 4,12\r\n\t\t\tboard[i].push cards.pop()\r\n\tfor heap in [12,13,14,15,17,18,19,20]\r\n\t\tboard[heap].push cards.pop()\r\n\r\n\tprint JSON.stringify(board)\r\n\r\nfakeBoard = ->\r\n\tboard = [[[2,0,0]],[[1,0,0]],[[3,0,0]],[[0,0,0]],[[0,2,2],[1,3,3],[1,1,1],[3,1,1],[3,2,2]],[[0,4,4],[0,12,12],[3,5,5],[1,8,8],[3,9,9]],[[2,11,11],[3,12,12],[0,6,6],[2,5,5],[1,7,7]],[[0,8,8],[3,11,11],[2,6,6],[2,9,9],[1,12,12]],[[0,9,9],[0,10,10],[2,10,10],[2,4,4],[2,7,7]],[[1,2,2],[3,4,4],[3,6,6],[0,5,5],[1,11,11]],[[0,1,1],[0,7,7],[1,10,10],[1,5,5],[3,8,8]],[[0,3,3],[1,4,4],[3,3,3],[2,2,2],[3,10,10]],[[0,11,11]],[[3,7,7]],[[2,1,1]],[[2,8,8]],[],[[1,6,6]],[[2,3,3]],[[2,12,12]],[[1,9,9]]]\r\n\t# board = []\r\n\t# for i in range 21 \r\n\t# \tboard.push []\r\n\r\n\t# for heap in range 4\r\n\t# \tboard[heap].push [heap,0,0]\r\n\t# board[4].push [0,5,5]\r\n\t# board[5].push [1,5,3]\r\n\t# board[5].push [2,5,3]\r\n\t# board[7].push [3,5,3]\r\n\t# board[8].push [0,6,6]\r\n\t# board[9].push [1,6,9]\r\n\t# board[10].push [2,6,9]\r\n\t# board[11].push [3,6,9]\r\n\t# for heap in [12,13,14,15,17,18,19,20]\r\n\t# \tboard[heap].push cards.pop()\r\n\r\nsetup = ->\r\n\tcreateCanvas 800,600\r\n\r\n\tcards = []\r\n\tfor rank in range 1,13\r\n\t\tfor suit in range 4\r\n\t\t\tcards.push [suit,rank,rank]\r\n\tcards = _.shuffle cards\r\n\r\n\tfakeBoard()\r\n\tdisplay board \r\n\tcands = [board]\r\n\tdone = board \r\n\thash = {}\r\n\r\nshowHeap = (board,heap,x,y,dx) ->\r\n\tn = calcAntal board[heap]\r\n\tif n==0 then return \r\n\tx0 = width/2 - w/2\r\n\tif x < 0 then x0 += -w+dx\r\n\tif x > 0 then x0 += w-dx\r\n\tx = x0 + x*dx/2\r\n\ty = y * h\r\n\tfor card,k in board[heap]\r\n\t\t[suit,rank2,rank1] = card\r\n\t\tdr = if rank1 < rank2 then 1 else -1\r\n\t\tfor rank in range rank1,rank2+dr,dr\r\n\t\t\timage img, x,y+13, w,h, OFFSETX+W*rank,1092+H*suit,243,H\r\n\t\t\tx += dx\r\n\r\n\tif marked? and marked == heap \r\n\t\tfill 0,128,0,128\r\n\t\tif y==4*h \r\n\t\t\tellipse x-w/2,y+h/2,20 \r\n\t\telse\r\n\t\t\tif dx<0  then ellipse x+w,  y+h/2,20\r\n\t\t\tif dx>0  then ellipse x,    y+h/2,20\r\n\t\t\tif dx==0 then ellipse x+w/2,y+h/2,20\r\n\r\ncalcAntal = (lst) ->\r\n\tres=0\r\n\tfor [suit,rank1,rank2] in lst\r\n\t\tres += 1 + abs(rank1-rank2)\r\n\tres\r\n\r\ndisplay = (board) ->\r\n\tbackground 128\r\n\r\n\tfor heap,y in [0,1,2,3]\r\n\t\tshowHeap board, heap, 0, y, 0\r\n\r\n\tfor heap,y in [4,5,6,7]\r\n\t\tn = calcAntal board[heap]\r\n\t\tdx = if n<=7 then w/2 else (width/2-w/2-w)/(n-1)\r\n\t\tshowHeap board, heap, -2, y, -dx\r\n\r\n\tfor heap,y in [8,9,10,11]\r\n\t\tn = calcAntal board[heap]\r\n\t\tdx = if n<=7 then w/2 else (width/2-w/2-w)/(n-1)\r\n\t\tshowHeap board, heap, 2, y, dx\r\n\r\n\tfor heap,x in [12,13,14,15,16,17,18,19,20]\r\n\t\txx = [-8,-6,-4,-2,0,2,4,6,8][x]\r\n\t\tshowHeap board, heap, xx,4, w\r\n\r\nlegalMove = (board,a,b) ->\r\n\tif a in [0,1,2,3] then return false \r\n\tif b in [12,13,14,15,17,18,19,20] then return false \r\n\tb1 = board[12].length + board[13].length + board[14].length + board[15].length \r\n\tb2 = board[17].length + board[18].length + board[19].length + board[20].length \r\n\tif a==16 then return b1==0 or b2==0\r\n\tif b==16 then return board[16].length==0 and a in [4,5,6,7,8,9,10,11]\r\n\t#print a,b,board[a].length,_.last board[a],board[b].length,_.last board[b]\r\n\tif board[a].length==0 then return false\r\n\tif board[b].length==0 then return true\r\n\t[sa,a1,a2] = _.last board[a]\r\n\t[sb,b1,b2] = _.last board[b]\r\n\tif sa==sb and abs(a1-b1) in [1,12] then return true\r\n\tfalse\r\n\r\nmakeMove = (board,a,b) -> # from a to b\r\n\tsuit = _.last(board[a])[0]\r\n\tacard = board[a].pop()\r\n\trank1 = acard[2]\r\n\trank2 = acard[1]\r\n\tif board[b].length > 0 then\trank2 = board[b].pop()[2]\r\n\tboard[b].push [suit,rank1,rank2]\r\n\r\nmousePressed = ->\r\n\tmx = mouseX//(W/3)\r\n\tmy = mouseY//(H/3)\r\n\tif my >= 4\r\n\t\tmarked1 = 12 + mx\r\n\telse\r\n\t\tif mx==4 then marked1 = my\r\n\t\telse if mx<4 then marked1 = 4+my\r\n\t\telse marked1 = 8+my\r\n\r\n\tif marked?\r\n\t\tif marked1 != marked \r\n\t\t\tif legalMove board,marked,marked1  \r\n\t\t\t\tmakeMove board,marked,marked1\r\n\t\tmarked = null\r\n\telse\r\n\t\tmarked = marked1\r\n\tdisplay board\r\n\r\n####### AI-section ########\r\n\r\nsrcs = [4,5,6,7, 8,9,10,11, 12,13,14,15, 17,17,19,20]\r\ndsts = [0,1,2,3, 4,5,6,7, 8,9,10,11]\r\n\r\nfindAllMoves = (b) ->\r\n\tres = []\r\n\tfor src in srcs\r\n\t\tfor dst in dsts\r\n\t\t\tif src!=dst\r\n\t\t\t\tif legalMove b,src,dst then res.push [src,dst]\r\n\tres\r\n\r\nmakeKey = (b) ->\r\n\tres = ''\r\n\tfor heap,index in b\r\n\t\tfor [suit,r1,r2] in heap\r\n\t\t\tif r1==r2\r\n\t\t\t\tres += 'shrk'[suit] + str(r1)\r\n\t\t\telse\r\n\t\t\t\tres += 'shrk'[suit] + str(r1) + str(r2)\r\n\t\tres += ' '\r\n\tres \r\n\r\ncountHoles = (b) ->\r\n\tres\t= 0\r\n\tfor heap in range 4,12\r\n\t\tif b[heap].length == 0 then res++\r\n\tres\r\n\r\nexpand = (b) ->\r\n\tres = []\r\n\tmoves = findAllMoves b\r\n\tfor [src,dst] in moves\r\n\t\tb1 = _.cloneDeep b\r\n\t\tmakeMove b1,src,dst\r\n\t\tkey = makeKey b1\r\n\t\tif key not of hash\r\n\t\t\thash[key] = true\r\n\t\t\tres.push b1\r\n\t\t\tif holes + 1 == countHoles b1\r\n\t\t\t\tholes++\r\n\t\t\t\tdisplay b1\r\n\t\t\t\tprint 'Done!',holes\r\n\t\t\t\tdone = b1\r\n\tres\r\n\r\nsolve = ->\r\n\tres = []\r\n\tdone = null\r\n\tfor cand in cands \r\n\t\tres = res.concat expand cand\r\n\t\tif done? then return \r\n\tcands = res\r\n\r\nkeyPressed = -> \r\n\tif key == 'R' # reset \r\n\t\tdisplay done \r\n\t\tcands = [done]\r\n\t\thash = {}\r\n\r\n\tif key == ' ' \r\n\t\tsolve()\r\n\t\tprint cands.length, _.size hash\r\n"
  ]
}