{
  "version": 3,
  "file": "sketch.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\sketch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/\r\n# Copyright 2015 - Chris Aguilar - conjurenation@gmail.com\r\n# Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html\r\n\r\n#  4  4  4  4  4  0  8  8  8  8  8\r\n#  5  5  5  5  5  1  9  9  9  9  9\r\n#  6  6  6  6  6  2 10 10 10 10 10\r\n#  7  7  7  7  7  3 11 11 11 11 11\r\n#    12 13 14 15    16 17 18 19      PANEL\r\n\r\nACES = [0,1,2,3]\r\nHEAPS = [4,5,6,7,8,9,10,11]\r\nPANEL = [12,13,14,15,16,17,18,19]\r\n\r\nSuit = 'chsd'\r\nRank = \"A23456789TJQK\"\r\nSUIT = \"club heart spade diamond\".split ' '\r\nRANK = \"A23456789TJQK\" #.split ' '\r\nLONG = \" Ace 2 3 4 5 6 7 8 9 Ten Jack Queen King\".split ' '\r\nOFFSETX = 468\r\nW = 263.25\r\nH = 352\r\nw = W/3\r\nh = H/3\r\nLIMIT = 2000 # Maximum steps considered before giving up.\r\n\r\nfaces = null\r\nbacks = null\r\n\r\nboard = null\r\ncards = null\r\nhist = null\r\ncands = null\r\nhash = null\r\naceCards = 4\r\noriginalBoard = null\r\nstart = null\r\nmsg = ''\r\nautoShake = []\r\nshake = true\r\nN = null # Max rank\r\nclassic = false\r\nsrcs = null\r\ndsts = null\r\nhintsLeft = null\r\nmaxHints = null\r\n\r\npreload = -> \r\n\tfaces = loadImage 'cards/Color_52_Faces_v.2.0.png'\r\n\tbacks = loadImage 'cards/Playing_Card_Backs.png'\r\n\r\nprint = console.log\r\nrange = _.range\r\nassert = (a, b, msg='Assert failure') -> chai.assert.deepEqual a, b, msg\r\n\r\npack = (suit,under,over) -> Suit[suit] + Rank[under] + if under==over then '' else Rank[over]\r\nassert 'cA', pack 0,0,0 \r\nassert 'dA', pack 3,0,0 \r\nassert 'd2', pack 3,1,1 \r\nassert 'hJQ', pack 1,10,11 \r\nassert 'hJ', pack 1,10,10 \r\nprint 'pack ok'\r\n\r\nunpack = (n) -> \r\n\tsuit = Suit.indexOf n[0]\r\n\tunder = Rank.indexOf n[1] \r\n\tif n.length==3 then over = Rank.indexOf n[2] else over = under\r\n\t[suit,under,over]\r\nassert [0,0,0], unpack 'cA'\r\nassert [3,0,0], unpack 'dA'\r\nassert [1,10,11], unpack 'hJQ'\r\nassert [1,10,10], unpack 'hJ'\r\nprint 'unpack ok'\r\n\r\ncompress = (board) ->\r\n\tfor heap in HEAPS\r\n\t\tboard[heap] = compressOne board[heap]\r\n\r\ncompressOne = (cards) ->\r\n\tif cards.length > 1\r\n\t\tres = []\r\n\t\ttemp = cards[0]\r\n\t\tfor i in range 1,cards.length\r\n\t\t\t[suit1,under1,over1] = unpack temp     # understa\r\n\t\t\t[suit2,under2,over2] = unpack cards[i] # översta\r\n\t\t\tif suit1 == suit2 and under2-over1 in [-1,1]\r\n\t\t\t\ttemp = pack suit1,under1,over2\r\n\t\t\telse\r\n\t\t\t\tres.push temp \r\n\t\t\t\ttemp = pack suit2,under2,over2\r\n\t\tres.push temp\r\n\t\tres\r\n\telse \r\n\t\tcards\r\nassert [],compressOne [] \r\nassert ['cA'],compressOne ['cA'] \r\nassert ['cA2'],compressOne ['cA','c2'] \r\nassert ['c23'],compressOne ['c2','c3'] \r\nassert ['cA4'],compressOne ['cA2','c34'] \r\nassert ['cA3'],compressOne ['cA','c2','c3'] \r\nassert ['cA6'],compressOne ['cA2','c34','c56'] \r\nassert ['cA2','h34','c56'],compressOne ['cA2','h34','c56'] \r\nprint 'compressOne ok'\r\n\r\ndumpBoard = (board) -> heap.join ' ' for heap in board\r\n\t\t\r\nmakeBoard = (maxRank,classic)->\r\n\tN = maxRank\r\n\r\n\tcards = []\r\n\tfor suit in range 4\r\n\t\tfor rank in range 1,maxRank # 2..K\r\n\t\t\tcards.push pack suit,rank,rank \r\n\tcards = _.shuffle cards\r\n\r\n\tboard = []\r\n\tfor i in range 20\r\n\t\tboard.push []\r\n\r\n\tfor suit,heap in range 4 \r\n\t\tboard[heap].push pack suit,0,0 # Ess\r\n\r\n\tfor heap in PANEL\r\n\t\tboard[heap].push cards.pop()\r\n\r\n\tfor card,i in cards\r\n\t\tboard[if classic then 4+i%8 else int random 4,12].push card\r\n\r\n\tcompress board\r\n\r\nfakeBoard = ->\r\n\tN = 13\r\n\tclassic = false \r\n\tif N==13 then board = [\"cA\",\"hA\",\"sA\",\"dA\",\"cQ d2 d5 cJ c8 d8\",\"h5 sJ c4 dK h8 sT\",\"h6 d4 c56 cT s8\",\"d9 s4 h3 d3\",\"s2 c7 s9\",\"h4 h7 hK s65\",\"hQ sK dJ sQ c2 d7 c9\",\"hT c3 h2\",\"d6\",\"dQ\",\"s3\",\"dT\",\"cK\",\"s7\",\"h9\",\"hJ\"]\r\n\tif N==13 then board = [\"cA\",\"hA\",\"sA\",\"dA\",\"dK hQ h6 d7 h7\",\"s6 d6 cJ dQ dT\",\"s8 s45 d3 sT\",\"c7 sK hK c8 d8\",\"c3 s9 c9 s3 h9\",\"h4 c6 sJ h3 d2\",\"cT c4 s7 d5 h5\",\"hJ d9 dJ h8 h2\",\"cQ\",\"s2\",\"c2\",\"d4\",\"c5\",\"sQ\",\"cK\",\"hT\"] # 146 s\r\n\r\nmakeAutoShake = ->\r\n\tautoShake = []\r\n\tfor i in range 52\r\n\t\tautoShake.push [int(random(-2,2)),int(random(-2,2))]\r\n\r\nsetup = ->\r\n\tcreateCanvas 800,600\r\n\tmakeAutoShake()\r\n\tnewGame '3'\r\n\tdisplay board \r\n\r\nshowHeap = (board,heap,x,y,dx) -> # dx kan vara både pos och neg\r\n\tn = calcAntal board[heap]\r\n\tif n==0 then return \r\n\tx0 = width/2 - w/2\r\n\tif x < 0 then x0 += -w+dx\r\n\tif x > 0 then x0 += w-dx\r\n\tx = x0 + x*dx/2\r\n\ty = y * h\r\n\tfor card,k in board[heap]\r\n\t\t[suit,under,over] = unpack card\r\n\t\tdr = if under < over then 1 else -1\r\n\t\tfor rank in range under,over+dr,dr\r\n\t\t\t[x0,y0] = if shake then autoShake[13*suit+rank] else [0,0]\r\n\t\t\timage faces, x0+x,y0+y+13, w,h, OFFSETX+W*rank,1092+H*suit,243,H\r\n\t\t\tx += dx\r\n\r\n\t# visa eventuellt baksidan\r\n\tcard = _.last board[heap]\r\n\t[suit,under,over] = unpack card\r\n\tif heap in ACES and over == N-1\r\n\t\t[x0,y0] = if shake then autoShake[13*suit+rank] else [0,0]\r\n\t\timage backs, x0+x,y0+y+13, w,h, OFFSETX+860,1092+622,243,H\r\n\r\ndisplay = (board) ->\r\n\tbackground 0,128,0\r\n\r\n\ttextAlign CENTER,CENTER\r\n\ttextSize 10\r\n\r\n\tx = width/2-5+2\r\n\ty = height-110\r\n\r\n\tfill 200\r\n\ttext 'U = Undo',          x,y\r\n\ttext 'R = Restart',       x,y+10\r\n\r\n\ttext '3 4 5 6 7 8 9 T J Q K',    x,y+20\r\n\ttext 'Easy    Level    Hard',    x,y+30\r\n\r\n\ttext 'C = Classic',       x,y+40\r\n\ttext 'Space = Next',      x,y+60\r\n\ttext \"H = Hint (#{hintsLeft} left)\", x,y+70\r\n\r\n\ttext msg, x,y+105\r\n\ttextSize 24\r\n\ttext (if classic then 'Classic' else LONG[N]), x,y+89\r\n\ttextAlign LEFT,CENTER\r\n\ttextSize 10\r\n\ttext 'Generalens Tidsfördriv', 0,height-5\r\n\r\n\tfor heap,y in ACES\r\n\t\tshowHeap board, heap, 0, y, 0\r\n\r\n\tfor heap,y in [4,5,6,7]\r\n\t\tn = calcAntal board[heap]\r\n\t\tdx = if n<=7 then w/2 else (width/2-w/2-w)/(n-1)\r\n\t\tshowHeap board, heap, -2, y, -dx\r\n\r\n\tfor heap,y in [8,9,10,11]\r\n\t\tn = calcAntal board[heap]\r\n\t\tdx = if n<=7 then w/2 else (width/2-w/2-w)/(n-1)\r\n\t\tshowHeap board, heap, 2, y, dx\r\n\r\n\tfor heap,x in PANEL\r\n\t\txx = [-8,-6,-4,-2,2,4,6,8][x]\r\n\t\tshowHeap board, heap, xx,4, w\r\n\r\nlegalMove = (board,src,dst) ->\r\n\tif src in ACES then return false \r\n\tif dst in PANEL then return false \r\n\tif board[src].length==0 then return false\r\n\tif board[dst].length==0 then return true\r\n\t[suit1,under1,over1] = unpack _.last board[src]\r\n\t[suit2,under2,over2] = unpack _.last board[dst]\r\n\tif suit1==suit2 and abs(over1-over2) == 1 then return true \r\n\tfalse\r\n\r\nmakeMove = (board,src,dst,record) -> \r\n\t[suit,under1,over1] = unpack board[src].pop() \r\n\tover = under1 \r\n\tunder = over1 \r\n\tif record then hist.push [src, dst, 1 + abs under1-over1]\r\n\tif board[dst].length > 0\r\n\t\t[suit2,under2,over2] = unpack board[dst].pop()\r\n\t\tunder = under2 \r\n\tboard[dst].push pack suit,under,over \r\n\r\n# returns text move\r\nundoMove = ([src,dst,antal]) -> \r\n\tres = prettyUndoMove src,dst,board,antal\r\n\t[board[src],board[dst]] = undoMoveOne board[src],board[dst],antal\r\n\tres\r\n\r\nundoMoveOne = (a,b,antal) ->\r\n\t[suit, under, over] = unpack b.pop()\r\n\tif under < over \r\n\t\ta.push pack suit,over,over-antal+1\r\n\t\tif over-under != antal-1\t\r\n\t\t\tb.push pack suit,under,over-antal\r\n\telse\r\n\t\ta.push pack suit,over,over+antal-1\r\n\t\tif under-over != antal-1\r\n\t\t\tb.push pack suit,under,over+antal #\r\n\t[a,b]\r\nassert [['d9T'],['dJ']], undoMoveOne [],['dJ9'],2\r\nassert [['d9'],['dJT']], undoMoveOne [],['dJ9'],1\r\n\r\nprettyUndoMove = (src,dst,b,antal) ->\r\n\tc2 = _.last b[dst]\r\n\tif b[src].length > 0\r\n\t\tc1 = _.last b[src]\r\n\t\t\"#{prettyCard2 c2,antal} to #{prettyCard c1}\"\r\n\telse\r\n\t\tif src in HEAPS then \"#{prettyCard2 c2,antal} to hole\"\r\n\t\tif src in PANEL then \"#{prettyCard2 c2,antal} to panel\"\r\n\r\nmousePressed = -> \r\n\tif not (0 < mouseX < width) then return\r\n\tif not (0 < mouseY < height) then return\r\n\r\n\tmarked = null\r\n\tmx = mouseX//(W/3)\r\n\tmy = mouseY//(H/3)\r\n\tif my >= 4\r\n\t\tif mx<=3 then marked = 12 + mx\r\n\t\tif mx>=5 then marked = 11 + mx\r\n\telse\r\n\t\tif mx==4 then marked = my\r\n\t\telse if mx<4 then marked = [4,5,6,7][my]\r\n\t\telse marked = [8,9,10,11][my]\r\n\tif marked==null then return \r\n\r\n\tholes = []\r\n\tfound = false\r\n\r\n\tfor heap in ACES.concat HEAPS \t\r\n\t\tif board[heap].length==0 then holes.push heap\r\n\t\tif heap not in holes and legalMove board,marked,heap  \r\n\t\t\tmakeMove board,marked,heap,true\r\n\t\t\tfound = true\r\n\t\t\tbreak \r\n\tif not found\r\n\t\tfor heap in holes\t\r\n\t\t\tif legalMove board,marked,heap  \r\n\t\t\t\tmakeMove board,marked,heap,true\r\n\t\t\t\tbreak \r\n\r\n\tif 4*N == countAceCards board \r\n\t\tif hintsLeft == maxHints\r\n\t\t\tmsg = \"#{(millis() - start) // 1000} seconds\"\r\n\t\telse if hintsLeft == maxHints-1\r\n\t\t\tmsg = \"1 hint used\"\r\n\t\telse\r\n\t\t\tmsg = \"#{maxHints - hintsLeft} hints used\"\r\n\r\n\tdisplay board\r\n\r\n####### AI-section ########\r\n\r\nfindAllMoves = (b) ->\r\n\tsrcs = HEAPS.concat PANEL \r\n\tdsts = ACES.concat HEAPS \r\n\tres = []\r\n\tfor src in srcs\r\n\t\tfor dst in dsts\r\n\t\t\tif src != dst\r\n\t\t\t\tif legalMove b,src,dst\r\n\t\t\t\t\tres.push [src,dst]\r\n\tres\r\n\r\nmakeKey = (b) -> \r\n\tres = ''\r\n\tfor heap,index in b\r\n\t\tif heap.length==0\r\n\t\t\tres += '.'\r\n\t\tfor card in heap\r\n\t\t\t[suit,under,over] = unpack card\r\n\t\t\tif under==over\r\n\t\t\t\tres += 'chsd'[suit] + RANK[over]\r\n\t\t\telse\r\n\t\t\t\tres += 'chsd'[suit] + RANK[under] + RANK[over]\r\n\t\tres += '|'\r\n\tres \r\n\r\ncalcAntal = (lst) ->\r\n\tres = 0\r\n\tfor card in lst\r\n\t\t[suit,under,over] = unpack card\r\n\t\tres += 1 + abs under-over\r\n\tres\r\n\r\ncountAceCards = (b) ->\r\n\tres\t= 0\r\n\tfor heap in ACES\r\n\t\tres += calcAntal b[heap]\r\n\tres\r\n\r\ncountPanelCards = (b) ->\r\n\tres\t= 0\r\n\tfor heap in PANEL\r\n\t\tres += b[heap].length\r\n\tres\r\n\r\nexpand = ([aceCards,level,b,path]) ->\r\n\tres = []\r\n\tmoves = findAllMoves b\r\n\tfor move in moves\r\n\t\t[src,dst] = move\r\n\t\tb1 = _.cloneDeep b\r\n\t\tmakeMove b1,src,dst\r\n\t\tkey = makeKey b1\r\n\t\tif key not of hash\r\n\t\t\tnewPath = path.concat([move])\r\n\t\t\thash[key] = [newPath, b]\r\n\t\t\tres.push [countAceCards(b1), level+1, b1, path.concat([move])] \r\n\tres\r\n\r\nhint = ->\r\n\tif hintsLeft == 0 then return\r\n\thintsLeft--\r\n\tundone = []\r\n\twhile true \r\n\t\tres = hintOne()\r\n\t\tif res? or hist.length==0\r\n\t\t\tfor u in undone\r\n\t\t\t\tprint \"Undo: #{u}\"\r\n\t\t\tprint \"Move: #{res}\"\r\n\t\t\treturn\r\n\t\tcard = hist.pop()\r\n\t\tundone.push undoMove card\r\n\r\nhintOne = -> \r\n\thintTime = millis()\r\n\taceCards = countAceCards board\r\n\tif aceCards == N*4 then return \r\n\tcands = []\r\n\tcands.push [aceCards,hist.length,board,[]] # antal kort på ässen, antal drag, board\r\n\thash = {}\r\n\tnr = 0\r\n\tcand = null\r\n\torigBoard = _.cloneDeep board\r\n\r\n\twhile nr < LIMIT and cands.length > 0 and aceCards < N*4\r\n\t\tnr++ \r\n\t\tcand = cands.pop()\r\n\t\taceCards = cand[0]\r\n\t\tif aceCards < N*4 \r\n\t\t\tincrement = expand cand\r\n\t\t\tcands = cands.concat increment\r\n\t\t\tcands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]\r\n\r\n\tif aceCards == N*4\r\n\t\tboard = cand[2]\r\n\t\tpath = cand[3]\r\n\t\tboard = origBoard\r\n\t\t[src,dst] = path[0]\r\n\t\ts = prettyMove src,dst,board\r\n\t\tmakeMove board,src,dst,true\r\n\t\tprint \"hint: #{int millis()-hintTime} ms\"\r\n\t\treturn s\r\n\telse\r\n\t\tboard = origBoard\r\n\t\treturn null\r\n\r\nnewGame = (key) ->\r\n\tstart = millis()\r\n\tmsg = ''\r\n\thist = []\r\n\tclassic = key=='C'\r\n\twhile true \r\n\t\tif key in '3456789TJQK' then makeBoard 3+'3456789TJQK'.indexOf(key),classic\r\n\t\tif key in 'C' then makeBoard 13,classic\r\n\t\tmaxHints = N\r\n\t\thintsLeft = maxHints\r\n\t\toriginalBoard = _.cloneDeep board\r\n\r\n\t\taceCards = countAceCards board\t\t\r\n\t\tcands = []\r\n\t\tcands.push [aceCards,0,board,[]] # antal kort på ässen, antal drag, board\r\n\t\thash = {}\r\n\t\tnr = 0\r\n\t\tcand = null\r\n\r\n\t\t#print LIMIT,N,nr,cands.length,aceCards\r\n\t\twhile nr < LIMIT and cands.length > 0 and aceCards < N*4\r\n\t\t\tnr++ \r\n\t\t\tcand = cands.pop()\r\n\t\t\taceCards = cand[0]\r\n\t\t\tincrement = expand cand\r\n\t\t\tcands = cands.concat increment\r\n\t\t\tcands.sort (a,b) -> if a[0] == b[0] then b[1]-a[1] else a[0]-b[0]\r\n\r\n\t\tlevel = cand[1]\r\n\t\tprint nr,aceCards,level\r\n\t\tif aceCards == N*4\r\n\t\t\tprint JSON.stringify dumpBoard originalBoard \r\n\t\t\tboard = cand[2]\r\n\t\t\tprintSolution hash,board\r\n\t\t\tboard = _.cloneDeep originalBoard\r\n\t\t\tprint \"#{int millis()-start} ms\"\r\n\t\t\tstart = millis()\r\n\t\t\treturn \r\n\r\nrestart = ->\r\n\thist = []\r\n\tboard = _.cloneDeep originalBoard\r\n\r\nnextLevel = ->\r\n\tif 4*N == countAceCards board\r\n\t\tN++\r\n\telse\r\n\t\tN--\r\n\tN = constrain N,3,13\r\n\tclassic = false\r\n\tnewGame '   3456789TJQK'[N]\r\n\r\nkeyPressed = -> \r\n\tif key == 'U' and hist.length > 0 then undoMove hist.pop()\r\n\tif key == 'R' then restart()\r\n\tif key in '3456789TJQKC' then newGame key \r\n\tif key == 'A' then shake = not shake\r\n\tif key == ' ' then nextLevel()\r\n\tif key == 'H' then hint()\r\n\tif key == 'X' \r\n\t\tN = 13\r\n\t\tboard = [[101],[10103],[20101],[30103],[10404,30808,1313,1009],[506],[10707,303,20202,20505,20708],[11212,1111,20303,21010],[202,10808,707,20404],[10909,10505,20909,10606],[11010,21111,808,20606,31109],[11111,21313,30404,404,30705],[21212],[31313],[],[1212],[31212],[],[],[11313]]\r\n\t\thist = [[4,6,1],[7,10,1],[9,1,1],[17,3,1],[18,4,1],[14,8,1],[5,3,1],[8,11,2],[5,1,1],[5,10,1]]\r\n\tdisplay board\r\n\t\t\r\nprettyCard2 = (card,antal) ->\r\n\t[suit,under,over] = unpack card \r\n\tif antal==1 \r\n\t\t\"#{SUIT[suit]} #{RANK[over]}\"\r\n\telse\r\n\t\tif under < over\r\n\t\t\t\"#{SUIT[suit]} #{RANK[over]}..#{RANK[over-antal+1]}\"\r\n\t\telse\r\n\t\t\t\"#{SUIT[suit]} #{RANK[over]}..#{RANK[over+antal-1]}\"\r\n\r\nprettyCard = (card,antal=2) ->\r\n\t[suit,under,over] = unpack card \r\n\tif antal==1 then \"#{RANK[over]}\"\r\n\telse \"#{SUIT[suit]} #{RANK[over]}\"\r\nassert \"club A\", prettyCard pack 0,0,0\r\nassert \"club T\", prettyCard pack 0,9,9\r\nassert \"heart J\", prettyCard pack 1,10,10\r\nassert \"spade Q\", prettyCard pack 2,11,11\r\nassert \"diamond K\", prettyCard pack 3,12,12\r\nassert \"3\", prettyCard pack(3,2,2),1\r\nprint 'prettyCard ok'\r\n\r\nprettyMove = (src,dst,b) ->\r\n\tc1 = _.last b[src]\r\n\tif b[dst].length > 0\r\n\t\tc2 = _.last b[dst]\r\n\t\t\"#{prettyCard c1} to #{prettyCard c2,1}\"\r\n\telse\r\n\t\tif dst in HEAPS then \"#{prettyCard c1} to hole\"\r\n\t\telse \"#{prettyCard c1} to panel\"\r\n\r\nprintSolution = (hash, b) ->\r\n\tkey = makeKey b\r\n\tsolution = []\r\n\twhile key of hash\r\n\t\t[path,b] = hash[key]\r\n\t\tsolution.push hash[key]\r\n\t\tkey = makeKey b\r\n\tsolution.reverse()\r\n\ts = ''\r\n\tfor [path,b],index in solution\r\n\t\t[src,dst] = _.last path \r\n\t\ts += \"\\n#{index}: #{prettyMove src,dst,b}\"\r\n\tprint s\r\n"
  ]
}