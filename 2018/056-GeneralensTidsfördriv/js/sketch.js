'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
// Vectorized Playing Cards 2.0 - http://sourceforge.net/projects/vector-cards/
// Copyright 2015 - Chris Aguilar - conjurenation@gmail.com
// Licensed under LGPL 3 - www.gnu.org/copyleft/lesser.html
var H, OFFSETX, W, board, display, hist, img, keyPressed, legalMove, makeMove, marked, mousePressed, preload, setup, showCard;

OFFSETX = 468;

W = 263;

H = 352;

img = null;

board = null;

hist = [];

preload = function preload() {
  return img = loadImage('cards/Color_52_Faces_v.2.0.png');
};

marked = null;

setup = function setup() {
  var cards, i, j, l, len, len1, len2, len3, len4, len5, len6, m, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, rr, s;
  createCanvas(800, 600);
  // createCanvas 4000,2600
  // image img, 0,0 #, w,h, 460+W*i,1080+H*j,W,H
  // return
  cards = [];
  ref = range(1, 13);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(4);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      cards.push([j, i]);
    }
  }
  cards = _.shuffle(cards);
  board = [];
  ref2 = range(21);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    i = ref2[o];
    board.push([]);
  }
  ref3 = range(4);
  for (p = 0, len3 = ref3.length; p < len3; p++) {
    i = ref3[p];
    board[i].push([i, 0]);
  }
  ref4 = range(4, 12);
  for (q = 0, len4 = ref4.length; q < len4; q++) {
    i = ref4[q];
    ref5 = range(5);
    for (r = 0, len5 = ref5.length; r < len5; r++) {
      j = ref5[r];
      rr = int(random(4, 12));
      board[rr].push(cards.pop());
    }
  }
  ref6 = [12, 13, 14, 15, 17, 18, 19, 20];
  for (s = 0, len6 = ref6.length; s < len6; s++) {
    i = ref6[s];
    board[i].push(cards.pop());
  }
  return display();
};

showCard = function showCard(heap, k, x, y) {
  var dx, h, i, j, n, w, x0;
  n = board[heap].length;
  if (n === 0) {
    return;
  }
  w = W / 3;
  dx = w;
  x0 = width / 2 - w / 2;
  if (n > 7) {
    dx = (width / 2 - w / 2 - w) / (n - 1) * 2;
    x0 += x < 0 ? -w + dx : w - dx;
  }
  h = H / 3;
  x = x0 + x * dx / 2;
  y = y * h;

  var _board$heap$k = _slicedToArray(board[heap][k], 2);

  j = _board$heap$k[0];
  i = _board$heap$k[1];

  image(img, x, y, w, h, OFFSETX + W * i, 1080 + H * j, 243, H);
  if (marked != null) {
    if (k === board[heap].length - 1) {
      if (marked === heap) {
        fc(0, 1, 0, 0.5);
        return circle(x + w / 2, y + h / 2, 20);
      }
    }
  }
};

display = function display() {
  var heap, l, len, len1, len2, len3, len4, len5, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, results, x, xx, y, z;
  bg(0.5);
  ref = [0, 1, 2, 3];
  for (l = 0, len = ref.length; l < len; l++) {
    heap = ref[l];
    n = board[heap].length;
    showCard(heap, n - 1, 0, heap);
  }
  ref1 = [4, 5, 6, 7];
  for (y = m = 0, len1 = ref1.length; m < len1; y = ++m) {
    heap = ref1[y];
    ref2 = board[heap];
    for (x = o = 0, len2 = ref2.length; o < len2; x = ++o) {
      z = ref2[x];
      showCard(heap, x, -2 - x, y);
    }
  }
  ref3 = [8, 9, 10, 11];
  for (y = p = 0, len3 = ref3.length; p < len3; y = ++p) {
    heap = ref3[y];
    ref4 = board[heap];
    for (x = q = 0, len4 = ref4.length; q < len4; x = ++q) {
      z = ref4[x];
      showCard(heap, x, 2 + x, y);
    }
  }
  ref5 = [12, 13, 14, 15, 16, 17, 18, 19, 20];
  results = [];
  for (x = r = 0, len5 = ref5.length; r < len5; x = ++r) {
    heap = ref5[x];
    xx = [-8, -6, -4, -2, 0, 2, 4, 6, 8][x];
    results.push(showCard(heap, 0, xx, 4));
  }
  return results;
};

legalMove = function legalMove(a, b) {
  var b1, b2, c1, c2, ref;
  if (b === 12 || b === 13 || b === 14 || b === 15 || b === 17 || b === 18 || b === 19 || b === 20) {
    return false;
  }
  if (a === 0 || a === 1 || a === 2 || a === 3) {
    return false;
  }
  b1 = board[12].length + board[13].length + board[14].length + board[15].length;
  b2 = board[17].length + board[18].length + board[19].length + board[20].length;
  if (a === 16) {
    return b1 === 0 || b2 === 0;
  }
  if (b === 16) {
    return board[16].length === 0 && (a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10 || a === 11);
  }
  if (board[b].length === 0) {
    return true;
  }
  if (a === 0 || a === 1 || a === 2 || a === 3) {
    return false;
  }
  if (b === 12 || b === 13 || b === 14 || b === 15 || b === 17 || b === 18 || b === 19 || b === 20) {
    return false;
  }
  c1 = _.last(board[a]);
  c2 = _.last(board[b]);
  if (c1[0] === c2[0] && ((ref = abs(c1[1] - c2[1])) === 1 || ref === 12)) {
    return true;
  }
  return false;
};

makeMove = function makeMove(a, b) {
  board[b].push(board[a].pop());
  return hist.push([a, b]);
};

keyPressed = function keyPressed() {
  var a, b;
  if (key === ' ') {
    var _hist$pop = hist.pop();

    var _hist$pop2 = _slicedToArray(_hist$pop, 2);

    a = _hist$pop2[0];
    b = _hist$pop2[1];

    board[a].push(board[b].pop());
    return display();
  }
};

mousePressed = function mousePressed() {
  var marked1, mx, my;
  mx = Math.floor(mouseX / (W / 3));
  my = Math.floor(mouseY / (H / 3));
  if (my >= 4) {
    marked1 = 12 + mx;
  } else {
    if (mx === 4) {
      marked1 = my;
    } else if (mx < 4) {
      marked1 = 4 + my;
    } else {
      marked1 = 8 + my;
    }
  }
  if (marked != null) {
    if (marked1 !== marked) {
      if (legalMove(marked, marked1)) {
        makeMove(marked, marked1);
      }
    }
    marked = null;
  } else {
    marked = marked1;
  }
  return display();
};

// draw = ->
// 	#display()
// 	bg 0.5
// 	image img, 0,0 #, w,h, 460+W*i,1080+H*j,W,H

// mousePressed = ->
// 	print mouseX
//# sourceMappingURL=sketch.js.map
