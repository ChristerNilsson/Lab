'use strict';

// Generated by CoffeeScript 2.0.3
// no mouse events works
// rotate relative does not work
// contains does not work

// `
// function inside1(x,y, vs) {
//     // ray-casting algorithm based on
//     // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

//     //var x = point[0], y = point[1];

//     var inside = false;
//     for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
//         var xi = vs[i].x, yi = vs[i].y;
//         var xj = vs[j].x, yj = vs[j].y;

//         var intersect = ((yi > y) != (yj > y))
//             && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
//         if (intersect) inside = !inside;
//     }

//     return inside;
// };
// `
var c, dist, group, halfCircle, i, inside, k, len, r, ref, x, y;

inside = function inside(x, y, vs) {
  var i, intersect, j, k, len, lst, res, xi, xj, yi, yj;
  res = false;
  lst = range(vs.length);
  lst.unshift(lst.pop());
  for (i = k = 0, len = lst.length; k < len; i = ++k) {
    j = lst[i];
    xi = vs[i].x;
    yi = vs[i].y;
    xj = vs[j].x;
    yj = vs[j].y;
    intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      res = !res;
    }
  }
  return res;
};

group = null;

r = new Rune({
  container: "body",
  width: 600,
  height: 600
});

dist = function dist(x1, y1, x2, y2) {
  var dx, dy;
  dx = x1 - x2;
  dy = y1 - y2;
  return Math.sqrt(dx * dx + dy * dy);
};

halfCircle = function halfCircle(x, y, radius, cr, cg, cb, group) {
  var p;
  p = r.polygon(x, y, group);
  p.fill(cr, cg, cb);
  p.lineTo(-50, 0);
  p.lineTo(-50, radius);
  p.lineTo(50, radius);
  p.lineTo(50, 0);
  return p;
};

group = r.group(300, 300);

c = r.circle(0, 0, 200, group);

c.fill(0, 255, 0);

ref = range(4);
for (k = 0, len = ref.length; k < len; k++) {
  i = ref[k];
  x = 200 * Math.cos(Rune.radians(90 * i));
  y = 200 * Math.sin(Rune.radians(90 * i));
  r.circle(x, y, 50, group);
}

//halfCircle x,y, 50,255,  0,0,group
//halfCircle x,y,-50,255,255,0,group
r.on('update', function () {
  var rotation;
  var _group$state = group.state;
  x = _group$state.x;
  y = _group$state.y;
  rotation = _group$state.rotation;

  return group.rotate(rotation + 0.1, x, y);
});

// for child,i in group.children
// 	if i>0
// 		{x,y,rotation} = child.state
// 		child.rotate rotation-0.2,x,y
r.el.addEventListener('mousedown', function (mouse) {
  var child, d, l, len1, pos, ref1, results;
  ref1 = group.children;
  results = [];
  for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
    child = ref1[i];
    if (i > 0) {
      pos = new Rune.Vector(300, 300);
      var _child$state = child.state;
      x = _child$state.x;
      y = _child$state.y;

      pos = pos.add(new Rune.Vector(x, y).rotate(group.state.rotation));
      d = dist(pos.x, pos.y, mouse.x, mouse.y);
      if (d < 50) {
        results.push(child.fill(0, 0, 0));
      } else {
        results.push(child.fill(255, 255, 255));
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
});

r.play();
//# sourceMappingURL=sketch.js.map
