'use strict';

// Generated by CoffeeScript 2.0.3
//hng: null # NESW = [0,90,180,270]
//spd: null # m/s
var bearing, draw, drawCompass, heading_12, locationUpdate, locationUpdateFail, p2, setup, texts, track;

p2 = { // UlvsjÃ¶n
  lat: 59.277103,
  lng: 18.164897,
  timestamp: 0
};

track = [];

bearing = 0;

heading_12 = 0;

texts = ['', '', '', '', '', '', '', '', '', '', '', ''];

locationUpdate = function locationUpdate(position) {
  var p0, p1;
  p1 = {
    lat: position.coords.latitude,
    lng: position.coords.longitude,
    timestamp: position.timestamp
  };
  track.push(p1);
  heading_12 = calcHeading(p1, p2);
  texts[0] = precisionRound(p1.lat, 6);
  texts[1] = precisionRound(p1.lng, 6);
  texts[8] = Math.round(heading_12) + '\xB0';
  //texts[3] = 'nospeed' #p1.spd
  //texts[4] = p1.timestamp
  texts[10] = Math.round(distance_on_geoid(p1, p2)) + ' m';
  texts[2] = track.length + ' punkter';
  if (track.length >= 2) {
    p0 = track[track.length - 2];
    texts[3] = 'Delta t: ' + (p1.timestamp - p0.timestamp) + ' ms';
    texts[4] = 'Distance: ' + Math.round(distance_on_geoid(p0, p1)) + ' m';
    texts[9] = 'Heading: ' + Math.round(calcHeading(p0, p1)) + '\xB0';
    return texts[5] = "speed";
  }
};

locationUpdateFail = function locationUpdateFail(error) {
  texts[0] = "n/a";
  return texts[1] = "n/a";
};

navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
  enableHighAccuracy: false,
  maximumAge: 30000,
  timeout: 27000
});

window.addEventListener("deviceorientation", function (event) {
  bearing = event.alpha;
  if (typeof event.webkitCompassHeading !== "undefined") {
    bearing = event.webkitCompassHeading; // iOS non-standard
  }
  texts[9] = Math.round(bearing) + '\xB0';
  return texts[11] = Math.round(bearing - heading_12) + '\xB0';
});

setup = function setup() {
  return createCanvas(windowWidth, windowHeight);
};

drawCompass = function drawCompass() {
  var h, w;
  w = windowWidth;
  h = windowHeight;
  fc();
  sw(5);
  circle(w / 2, h / 2, 0.9 * w / 2);
  translate(w / 2, h / 2);
  sc(1);
  line(0, 0, 0, -0.9 * w / 2);
  try {
    rd(bearing - heading_12);
    sc(0);
    return line(0, 0, 0, -0.9 * w / 2);
  } catch (error1) {}
};

draw = function draw() {
  var d, i, j, len, t, x, y;
  bg(0.5);
  fc(0.75);
  d = windowHeight / 6;
  textSize(50);
  for (i = j = 0, len = texts.length; j < len; i = ++j) {
    t = texts[i];
    x = i % 2 * windowWidth / 2;
    y = d * Math.floor(i / 2);
    text(t, 50 + x, 0.6 * d + y);
  }
  return drawCompass();
};
//# sourceMappingURL=sketch.js.map
