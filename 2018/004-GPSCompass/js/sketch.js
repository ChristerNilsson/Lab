"use strict";

// Generated by CoffeeScript 2.0.3
//hng: null # NESW = [0,90,180,270]
//spd: null # m/s
var bearing, delta, deltas, deltat, distance, heading, heading_12, locationUpdate, locationUpdateFail, p2, points, positionHng, positionLat, positionLng, positionSpd, positionTimestamp, track;

p2 = { // Ulvsjön
  lat: 59.277103,
  lng: 18.164897,
  timestamp: 0
};

track = [];

heading_12 = 0;

// devicets position och hastighet
positionLat = document.getElementById("position-lat");

positionLng = document.getElementById("position-lng");

positionTimestamp = document.getElementById("timestamp");

positionSpd = document.getElementById("position-spd");

// beräkningar baserade på de senaste tvåpunkterna
deltat = document.getElementById("deltat");

deltas = document.getElementById("deltas");

//speed = document.getElementById "speed"
heading = document.getElementById("heading");

// bäring enligt kompass
bearing = document.getElementById("bearing");

delta = document.getElementById("delta");

// bäring och avstånd till målet
positionHng = document.getElementById("position-hng");

distance = document.getElementById("distance");

points = document.getElementById("points");

locationUpdate = function locationUpdate(position) {
  var p0, p1;
  p1 = {
    lat: position.coords.latitude,
    lng: position.coords.longitude,
    timestamp: position.timestamp
  };
  track.push(p1);
  heading_12 = calcHeading(p1, p2);
  positionLat.textContent = p1.lat;
  positionLng.textContent = p1.lng;
  positionHng.textContent = Math.round(heading_12) + "\xB0";
  positionSpd.textContent = 'nospeed'; //p1.spd
  positionTimestamp.textContent = p1.timestamp;
  distance.textContent = Math.round(distance_on_geoid(p1, p2)) + " m";
  if (track.length >= 2) {
    p0 = track[track.length - 2];
    deltat.textContent = "Delta t: " + (p1.timestamp - p0.timestamp) + " ms";
    deltas.textContent = "Distance: " + Math.round(distance_on_geoid(p0, p1)) + " m";
    //speed.textContent = "?"
    heading.textContent = "Heading: " + Math.round(calcHeading(p0, p1)) + "\xB0";
  }
  return points.textContent = track.length + " punkter";
};

locationUpdateFail = function locationUpdateFail(error) {
  positionLat.textContent = "n/a";
  return positionLng.textContent = "n/a";
};

navigator.geolocation.watchPosition(locationUpdate, locationUpdateFail, {
  enableHighAccuracy: false,
  maximumAge: 30000,
  timeout: 27000
});

window.addEventListener("deviceorientation", function (event) {
  var b;
  b = event.alpha;
  if (typeof event.webkitCompassHeading !== "undefined") {
    b = event.webkitCompassHeading; // iOS non-standard
  }
  bearing.textContent = "Bearing: " + Math.round(b) + "\xB0";
  return delta.textContent = "Delta: " + Math.round(b - heading_12) + "\xB0";
});

// var orientation = getBrowserOrientation()

// if (typeof heading !== "undefined" && heading !== null) { // && typeof orientation !== "undefined") {
// 	// we have a browser that reports device heading and orientation

// 	if (debug) {
// 		debugOrientation.textContent = orientation;
// 	}

// 	// what adjustment we have to add to rotation to allow for current device orientation
// 	var adjustment = 0;
// 	if (defaultOrientation === "landscape") {
// 		adjustment -= 90;
// 	}

// 	if (typeof orientation !== "undefined") {
// 		var currentOrientation = orientation.split("-");

// 		if (defaultOrientation !== currentOrientation[0]) {
// 			if (defaultOrientation === "landscape") {
// 				adjustment -= 270;
// 			} else {
// 				adjustment -= 90;
// 			}
// 		}

// 		if (currentOrientation[1] === "secondary") {
// 			adjustment -= 180;
// 		}
// 	}

// 	positionCurrent.hng = heading + adjustment;

// 	var phase = positionCurrent.hng < 0 ? 360 + positionCurrent.hng : positionCurrent.hng;
// 	positionHng.textContent = (360 - phase | 0) + "°";

// 	// apply rotation to compass rose
// 	if (typeof rose.style.transform !== "undefined") {
// 		rose.style.transform = "rotateZ(" + positionCurrent.hng + "deg)";
// 	} else if (typeof rose.style.webkitTransform !== "undefined") {
// 		rose.style.webkitTransform = "rotateZ(" + positionCurrent.hng + "deg)";
// 	}
// } else {
// 	// device can't show heading

// 	positionHng.textContent = "n/a";
// 	showHeadingWarning();
// }
//# sourceMappingURL=sketch.js.map
