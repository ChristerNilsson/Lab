{
  "version": 3,
  "file": "utils.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\utils.coffee"
  ],
  "names": [],
  "mappings": ";;;AAAA;AAAA,IAAA,aAAA,mBAAA;;AACA,oBAAoB,2BAAC,AAAD,IAAI,AAAJ,IAEnB;MAAA,IAAA;AAAA,OAAK,OAAO,AAAE,GAAC,AAAV,KAAc,AAAE,GAAC,AAAjB;AACL,OAAK,OAAO,AAAE,GAAC,AAAV,KAAc,AAAE,GAAC,AAAjB;SACL,AAAE,GAAC,AAAH,WAAc,AAAd,AAJmB;AADpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,cAAc,qBAAC,AAAD,IAAI,AAAJ,IACb;MAAA,IAAA;AAAA,OAAK,OAAO,AAAE,GAAC,AAAV,KAAc,AAAE,GAAC,AAAjB;AACL,OAAK,OAAO,AAAE,GAAC,AAAV,KAAc,AAAE,GAAC,AAAjB;SACL,AAAE,GAAC,AAAH,UAAa,AAAb,AAHa;;;AAKd,iBAAiB,wBAAC,AAAD,QAAS,AAAT,WACf;MAAA;AAAA,WAAS,AAAI,KAAC,AAAL,IAAS,AAAT,IAAa,AAAb;SACT,AAAI,KAAC,AAAL,MAAW,SAAS,AAApB,UAA8B,AAFf",
  "sourcesContent": [
    "# https://cdn.rawgit.com/chrisveness/geodesy/v1.1.2/latlon-spherical.js\r\ndistance_on_geoid = (p1,p2) ->\r\n\r\n\tq1 = LatLon p1.lat,p1.lng\r\n\tq2 = LatLon p2.lat,p2.lng\r\n\tq1.distanceTo q2\t\r\n\r\n\t# lat1 = p1.lat\r\n\t# lon1 = p1.lng\r\n\r\n\t# lat2 = p2.lat\r\n\t# lon2 = p2.lng\r\n\r\n\t# # Convert degrees to radians\r\n\t# lat1 *= Math.PI / 180.0\r\n\t# lon1 *= Math.PI / 180.0\r\n \r\n\t# lat2 *= Math.PI / 180.0\r\n\t# lon2 *= Math.PI / 180.0\r\n \r\n\t# # radius of earth in metres\r\n\t# r = 6378100\r\n \r\n\t# # P\r\n\t# rho1 = r * Math.cos lat1\r\n\t# z1 = r * Math.sin lat1\r\n\t# x1 = rho1 * Math.cos lon1\r\n\t# y1 = rho1 * Math.sin lon1\r\n \r\n\t# # Q\r\n\t# rho2 = r * Math.cos lat2 \r\n\t# z2 = r * Math.sin lat2\r\n\t# x2 = rho2 * Math.cos lon2\r\n\t# y2 = rho2 * Math.sin lon2\r\n \r\n\t# # Dot product\r\n\t# dot = x1 * x2 + y1 * y2 + z1 * z2\r\n\t# cos_theta = dot / (r * r)\r\n \r\n\t# theta = Math.acos cos_theta\r\n \r\n\t# # Distance in Metres\r\n\t# r * theta\r\n\r\ncalcHeading = (p1,p2) ->\r\n\tq1 = LatLon p1.lat,p1.lng\r\n\tq2 = LatLon p2.lat,p2.lng\r\n\tq1.bearingTo q2\r\n\r\nprecisionRound = (number, precision) ->\r\n  factor = Math.pow 10, precision\r\n  Math.round(number * factor) / factor"
  ]
}