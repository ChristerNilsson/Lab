'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Alien, Obstacle, Ship, Shot, aliens, draw, handleCollisions, keyPressed, keyReleased, obstacles, setup, ship, shots, state, timestamp;

aliens = [];

shots = [];

obstacles = [];

ship = null;

state = 0;

timestamp = null;

Alien = function () {
  function Alien(x1, x2, y) {
    _classCallCheck(this, Alien);

    this.x1 = x1;
    this.x2 = x2;
    this.y = y;
    this.x = (this.x1 + this.x2) / 2;
    this.dx = 0.5;
    this.radius = 25;
  }

  _createClass(Alien, [{
    key: 'draw',
    value: function draw() {
      fc(1, 1, 0);
      circle(this.x, this.y, this.radius);
      this.x += this.dx;
      if (this.x > this.x2 || this.x < this.x1) {
        this.dx = -this.dx;
        return this.y += 5;
      }
    }
  }]);

  return Alien;
}();

Obstacle = function () {
  function Obstacle(x, y) {
    _classCallCheck(this, Obstacle);

    this.x = x;
    this.y = y;
    this.radius = 10;
    this.active = true;
  }

  _createClass(Obstacle, [{
    key: 'draw',
    value: function draw() {
      if (this.active === false) {
        return;
      }
      fc(1, 0, 0);
      return circle(this.x, this.y, this.radius);
    }
  }]);

  return Obstacle;
}();

Ship = function () {
  function Ship(x, y) {
    _classCallCheck(this, Ship);

    this.x = x;
    this.y = y;
    this.active = true;
    this.dx = 0;
    this.radius = 25;
  }

  _createClass(Ship, [{
    key: 'draw',
    value: function draw() {
      fc(0, 1, 0);
      circle(this.x, this.y, this.radius);
      return this.x += this.dx;
    }
  }, {
    key: 'shoot',
    value: function shoot() {
      return shots.push(new Shot(this.x, this.y - this.radius - 15, 0, -2));
    }
  }]);

  return Ship;
}();

Shot = function () {
  function Shot(x, y, dx, dy) {
    _classCallCheck(this, Shot);

    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.active = true;
  }

  _createClass(Shot, [{
    key: 'draw',
    value: function draw() {
      if (this.active) {
        line(this.x, this.y - 10, this.x, this.y + 10);
        return this.y += this.dy;
      }
    }
  }, {
    key: 'hit',
    value: function hit(other) {
      var a, b;
      a = other.radius > dist(other.x, other.y, this.x, this.y - 10);
      b = other.radius > dist(other.x, other.y, this.x, this.y + 10);
      return a || b;
    }
  }]);

  return Shot;
}();

setup = function setup() {
  var col, i, j, k, l, len, len1, len2, len3, len4, m, n, o, p, ref, ref1, ref2, ref3, ref4;
  createCanvas(700, 600);
  rectMode(CENTER);
  sc(1);
  ref = range(6);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    col = [];
    ref1 = range(6);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      col.push(new Alien(150 + 80 * i - 100, 150 + 80 * i + 100, 50 + 60 * j));
    }
    aliens.push(col);
  }
  ship = new Ship(width / 2, height - 50);
  ref2 = range(3);
  for (n = 0, len2 = ref2.length; n < len2; n++) {
    i = ref2[n];
    ref3 = range(3);
    for (o = 0, len3 = ref3.length; o < len3; o++) {
      j = ref3[o];
      ref4 = range(3);
      for (p = 0, len4 = ref4.length; p < len4; p++) {
        k = ref4[p];
        if (j === 0 && k === 0) {
          continue;
        }
        if (j === 2 && k === 2) {
          continue;
        }
        obstacles.push(new Obstacle(120 + 200 * i + 20 * (j + k / 2), 450 + 20 * k));
      }
    }
  }
  return timestamp = new Date();
};

handleCollisions = function handleCollisions() {
  var a, col, l, len, len1, len2, m, n, obstacle, results, shot;
  results = [];
  for (l = 0, len = shots.length; l < len; l++) {
    shot = shots[l];
    if (!shot.active) {
      continue;
    }
    for (m = 0, len1 = aliens.length; m < len1; m++) {
      col = aliens[m];
      if (col.length > 0) {
        a = _.last(col);
        if (shot.hit(a)) {
          shot.active = false;
          col.pop();
          break;
        }
      }
    }
    for (n = 0, len2 = obstacles.length; n < len2; n++) {
      obstacle = obstacles[n];
      if (!obstacle.active) {
        continue;
      }
      if (shot.hit(obstacle)) {
        shot.active = false;
        obstacle.active = false;
      }
    }
    if (shot.hit(ship)) {
      results.push(state = 1);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

draw = function draw() {
  var alien, col, l, len, len1, len2, len3, m, n, o, obstacle, shot;
  if (state === 1) {
    return;
  }
  bg(0);
  for (l = 0, len = aliens.length; l < len; l++) {
    col = aliens[l];
    for (m = 0, len1 = col.length; m < len1; m++) {
      alien = col[m];
      alien.draw();
    }
    if (col.length > 0 && 1 > random(1000)) {
      alien = _.last(col);
      shots.push(new Shot(alien.x, alien.y + 40, 0, 2));
    }
  }
  for (n = 0, len2 = shots.length; n < len2; n++) {
    shot = shots[n];
    shot.draw();
  }
  for (o = 0, len3 = obstacles.length; o < len3; o++) {
    obstacle = obstacles[o];
    obstacle.draw();
  }
  ship.draw();
  handleCollisions();
  return shots = function () {
    var len4, p, ref, results;
    results = [];
    for (p = 0, len4 = shots.length; p < len4; p++) {
      shot = shots[p];
      if (shot.active && 0 < (ref = shot.y) && ref < height) {
        results.push(shot);
      }
    }
    return results;
  }();
};

keyPressed = function keyPressed() {
  var date;
  date = new Date();
  if (date - timestamp < 500) {
    return;
  }
  timestamp = date;
  if (keyCode === RIGHT_ARROW) {
    ship.dx = +2;
  }
  if (keyCode === LEFT_ARROW) {
    ship.dx = -2;
  }
  if (key === ' ') {
    return ship.shoot();
  }
};

keyReleased = function keyReleased() {
  return ship.dx = 0;
};
//# sourceMappingURL=sketch.js.map
