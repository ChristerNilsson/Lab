"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Menu;

Menu = function () {
  function Menu(items1) {
    var table = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var branch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0];

    _classCallCheck(this, Menu);

    this.items = items1;
    this.table = table;
    this.branch = branch;
  }

  _createClass(Menu, [{
    key: "rensa",
    value: function rensa() {
      return this.table.innerHTML = "";
    }
  }, {
    key: "clear",
    value: function clear() {
      return this.branch = [0];
    }
  }, {
    key: "traverse",
    value: function traverse() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      var b1, children, count, i, item, j, k, l, len, len1, len2, len3, m, results, title, x;
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        b1 = document.createElement("div");
        b1.innerHTML = i;
        this.handleRow(b1);
      }
      return;
      if (false === goDeeper(this.branch, br)) {
        return;
      }
      if (level === 0 || level === 1) {
        for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
          item = items[i];
          var _item = item;

          var _item2 = _toArray(_item);

          title = _item2[0];
          children = _item2.slice(1);

          if (level === 0) {
            this.addTitle(null, '', 0, title, children.length, level, br.concat(i), i);
          } else {
            count = 0;
            for (l = 0, len2 = children.length; l < len2; l++) {
              x = children[l];
              count += x.length;
            }
            this.addTitle(null, '', 0, title, count, level, br.concat(i), i);
          }
          this.traverse(children, level + 1, br.concat(i));
        }
      }
      if (level === 2) {
        results = [];
        for (m = 0, len3 = items.length; m < len3; m++) {
          item = items[m];
          results.push(function () {
            var len4, n, results1;
            results1 = [];
            for (n = 0, len4 = item.length; n < len4; n++) {
              x = item[n];
              results1.push(this.addTitle(x, x[0], x[2], x[3], sum(x[4]), level, br, i));
            }
            return results1;
          }.call(this));
        }
        return results;
      }
    }
  }, {
    key: "handleRow",
    value: function handleRow(b1) {
      var td1, tr;
      tr = document.createElement("tr");
      td1 = document.createElement("td");
      td1.style.cssText = "width:100%";
      this.table.appendChild(tr);
      tr.appendChild(td1);
      return td1.appendChild(b1);
    }
  }, {
    key: "addTitle",
    value: function addTitle(item, id, pris, title, count, level, br, i) {
      var b1;
      b1 = document.createElement("div");
      b1.innerHTML = title;
      // if count>0 then scount = " (#{count})" else scount =""
      // v = title + scount 
      // if id!='' then v = "#{id}. #{v} #{pris}kr" 
      // if level == 2 
      // 	b1 = makeButton v, YELLOW, BLACK
      // else if @branch[level] == i
      // 	b1 = makeButton v, WHITE, BLACK
      // else
      // 	b1 = makeButton v, BLACK, WHITE
      // b1.style.textAlign = 'left'
      // b1.branch = br

      // #b1.style.position = 'relative' 
      // #b1.style.left = 15*level + 'px' 

      // b1.onclick = => 
      // 	if level in [0,1]
      // 		@branch = calcBranch @branch, b1.branch
      // 	if level == 2
      // 		newitem = _.clone item
      // 		newitem[4] = _.clone item[4]
      // 		korg.add newitem
      // 		@branch = [0]
      // 	updateTables()
      return this.handleRow(b1);
    }
  }]);

  return Menu;
}();
//# sourceMappingURL=menu.js.map
