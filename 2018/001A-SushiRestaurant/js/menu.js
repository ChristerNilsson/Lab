'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Menu;

Menu = function () {
  function Menu() {
    _classCallCheck(this, Menu);

    this.table = null;
    this.branch = [0];
    this.items = [];
  }

  _createClass(Menu, [{
    key: 'traverse',
    value: function traverse() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      var children, count, i, item, j, k, l, len, len1, len2, results, title, x;
      if (false === goDeeper(this.branch, br)) {
        return;
      }
      if (level === 0 || level === 1) {
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          var _item = item;

          var _item2 = _toArray(_item);

          title = _item2[0];
          children = _item2.slice(1);

          if (level === 0) {
            this.addTitle(null, '', 0, title, children.length, level, br.concat(i), i);
          } else {
            count = 0;
            for (k = 0, len1 = children.length; k < len1; k++) {
              x = children[k];
              count += x.length;
            }
            this.addTitle(null, '', 0, title, count, level, br.concat(i), i);
          }
          this.traverse(children, level + 1, br.concat(i));
        }
      }
      if (level === 2) {
        results = [];
        for (l = 0, len2 = items.length; l < len2; l++) {
          item = items[l];
          results.push(function () {
            var len3, m, results1;
            results1 = [];
            for (m = 0, len3 = item.length; m < len3; m++) {
              x = item[m];
              results1.push(this.addTitle(x, x[0], x[2], x[3], calc(x[4]), level, br, i));
            }
            return results1;
          }.call(this));
        }
        return results;
      }
    }
  }, {
    key: 'handleRow',
    value: function handleRow(b1) {
      var td1, tr;
      tr = document.createElement("tr");
      td1 = document.createElement("td");
      td1.style.cssText = "width:100%";
      this.table.appendChild(tr);
      tr.appendChild(td1);
      return td1.appendChild(b1);
    }
  }, {
    key: 'addTitle',
    value: function addTitle(item, id, pris, title, count, level, br, i) {
      var _this = this;

      var b1, scount, v;
      if (count > 0) {
        scount = ' (' + count + ')';
      } else {
        scount = "";
      }
      v = title + scount;
      if (id !== '') {
        v = id + '. ' + v + ' ' + pris + 'kr';
      }
      if (level === 2) {
        b1 = makeButton(v, YELLOW, BLACK);
      } else if (this.branch[level] === i) {
        b1 = makeButton(v, WHITE, BLACK);
      } else {
        b1 = makeButton(v, BLACK, WHITE);
      }
      b1.style.textAlign = 'left';
      b1.branch = br;
      b1.style.position = 'relative';
      b1.style.left = 15 * level + 'px';
      b1.onclick = function () {
        var newitem;
        if (level === 0 || level === 1) {
          _this.branch = calcBranch(_this.branch, b1.branch);
        }
        if (level === 2) {
          newitem = _.clone(item);
          newitem[4] = _.clone(item[4]);
          korg.add(newitem);
          _this.branch = [0];
        }
        return updateTables();
      };
      return this.handleRow(b1);
    }
  }]);

  return Menu;
}();
//# sourceMappingURL=menu.js.map
