// Generated by CoffeeScript 2.3.2
var ANGLE_MODE, DISPLAY_MODE, KEY, LANGUAGE, assert, config, decode, encode, findLineNo, makeAnswer, memory, page, setup,
  indexOf = [].indexOf;

KEY = '008B';

ANGLE_MODE = ['Degrees', 'Radians'];

LANGUAGE = ['Coffeescript', 'Javascript'];

DISPLAY_MODE = ['Fixed', 'Engineering'];

memory = null;

page = null;

config = {
  angleMode: 0,
  language: 1,
  displayMode: 0,
  digits: 3
};

assert = (a, b, msg = '') => {
  chai.assert.deepEqual(a, b, msg);
  return 'ok';
};

findLineNo = (e) => {
  var i, len, line, lines;
  lines = e.stack.split('\n');
  for (i = 0, len = lines.length; i < len; i++) {
    line = lines[i];
    if (0 <= line.indexOf('<anonymous>')) {
      return line.split(':')[1] - 1;
    }
  }
  return 0;
};

makeAnswer = function() {
  var JS, answer, answers, cs, e, i, j, js, len, len1, line, lineNo, lines, pos, post, pre, res;
  answers = [];
  res = '';
  cs = '';
  js = [];
  JS = config.language === 0 ? '' : '`';
  angleMode([DEGREES, RADIANS][config.angleMode]);
  lines = memory.split("\n");
  for (i = 0, len = lines.length; i < len; i++) {
    line = lines[i];
    pos = line.lastIndexOf(config.language === 0 ? '#' : '//');
    if (pos >= 0) {
      line = line.slice(0, pos);
    }
    cs = line.trim();
    if (cs === '') {
      js.push(transpile(JS + 'answers.push("")' + JS));
    } else {
      try {
        if (cs[cs.length - 1] === '=') {
          cs += 'undefined';
        }
        js.push(transpile(JS + 'answers.push(' + cs + ")" + JS));
      } catch (error) {
        e = error;
        js.push(transpile(JS + "answers.push('ERROR: " + e.message + "')" + JS));
      }
    }
  }
  try {
    console.dir(js);
    eval(js.join("\n"));
  } catch (error) {
    e = error;
    lineNo = findLineNo(e);
    pre = (range(lineNo).map((x) => {
      return '\n';
    })).join('');
    post = (range(js.length - lineNo).map((x) => {
      return '\n';
    })).join('');
    return pre + 'ERROR: ' + e.message + post;
  }
  res = "";
  for (j = 0, len1 = answers.length; j < len1; j++) {
    answer = answers[j];
    if ('function' === typeof answer) {
      res += 'function defined' + "\n";
    } else if ('object' === typeof answer) {
      res += JSON.stringify(answer) + "\n";
    } else if ('number' === typeof answer) {
      if (config.displayMode === 0) {
        res += fixed(answer, config.digits) + "\n";
      }
      if (config.displayMode === 1) {
        res += engineering(answer, config.digits) + "\n";
      }
    } else {
      res += answer + "\n";
    }
  }
  return res;
};

encode = function() {
  var s;
  s = encodeURI(memory);
  s = s.replace(/=/g, '%3D');
  s = s.replace(/\?/g, '%3F');
  return window.open('?content=' + s + '&config=' + encodeURI(JSON.stringify(config)));
};

decode = function() {
  var parameters;
  memory = '';
  if (indexOf.call(window.location.href, '?') >= 0) {
    parameters = getParameters();
    if (parameters.content) {
      memory = decodeURI(parameters.content);
      memory = memory.replace(/%3D/g, '=');
      memory = memory.replace(/%3F/g, '?');
    }
    if (parameters.config) {
      return config = JSON.parse(decodeURI(parameters.config));
    }
  }
};

setup = function() {
  // memory = fetchData()
  decode();
  page = new Page(0, function() {
    var answer, enter;
    this.table.innerHTML = "";
    enter = makeTextArea();
    enter.style.left = '51%';
    enter.style.width = '48%';
    //enter.style.overflow = 'hidden'
    enter.focus();
    enter.value = memory;
    answer = makeTextArea();
    answer.style.left = '0px';
    answer.setAttribute("readonly", true);
    answer.style.textAlign = 'right';
    answer.style.overflow = 'hidden';
    answer.wrap = 'off';
    answer.value = makeAnswer();
    enter.onscroll = function(e) {
      answer.scrollTop = enter.scrollTop;
      return answer.scrollLeft = enter.scrollLeft;
    };
    answer.onscroll = function(e) {
      return e.preventDefault();
    };
    this.addRow(enter, answer);
    return enter.addEventListener("keyup", function(event) {
      var ref;
      answer.scrollTop = enter.scrollTop;
      answer.scrollLeft = enter.scrollLeft;
      if (ref = event.keyCode, indexOf.call([33, 34, 35, 36, 37, 38, 39, 40], ref) < 0) {
        memory = enter.value;
        return answer.value = makeAnswer();
      }
    });
  });
  // storeData memory
  page.addAction('Clear', function() {
    memory = "";
    return storeAndGoto(memory, page);
  });
  page.addAction('Samples', function() {
    if (config.language === 0) {
      memory = "# Coffeescript\n2+3\n\nsträcka = 150\ntid = 6\ntid\nsträcka/tid\n25 == sträcka/tid \n30 == sträcka/tid\n\n# String\na = \"Volvo\" \n5 == a.length\n'l' == a[2]\n\n# Math\n5 == sqrt 25 \n\n# Date\nc = new Date() \nc.getFullYear()\nc.getHours()\n\n# Array\nnumbers = [1,2,3] \n2 == numbers[1]\nnumbers.push 47\n4 == numbers.length\nnumbers \n47 == numbers.pop()\n3 == numbers.length\nnumbers\nassert [0,1,4,9,16,25,36,49,64,81], (x*x for x in range 10)\n\n# Object\nperson = {fnamn:'David', enamn:'Larsson'}\n'David' == person['fnamn']\n'Larsson' == person.enamn\n\n# functions (enbart one liners tillåtna!)\nkvadrat = (x) -> x*x\n25 == kvadrat 5\n\n# feluppskattning vid användande av bäring och avstånd\narea = (b1,b2,r1,r2) -> (r2*r2 - r1*r1) * Math.PI * (b2-b1)/360  \n17.671458676442587 == area 90,91,200,205\n35.12475119638588  == area 90,91,400,405\n69.81317007977317  == area 90,92,195,205\n139.62634015954634 == area 90,92,395,405\n\nserial = (a,b) -> a+b\n2 == serial 1,1\n5 == serial 2,3\n\nparallel = (a,b) -> a*b/(a+b)\n0.5 == parallel 1,1\n1.2 == parallel 2,3\n\nfak = (x) -> if x==0 then 1 else x * fak(x-1)\n3628800 == fak 10\n\nfib = (x) -> if x<=0 then 1 else fib(x-1) + fib(x-2) \n1 == fib 0\n2 == fib 1\n5 == fib 3\n8 == fib 4\n13 == fib 5\n21 == fib 6\n"; // Javascript
    } else {
      memory = "// Javascript\n2+3\n\ndistance = 150\nseconds = 6\nseconds\ndistance/seconds\n25 == distance/seconds\n30 == distance/seconds\n\n// String\na = \"Volvo\" \n5 == a.length\n'l' == a[2]\n\n// Math\n5 == sqrt(25)\n\n// Date\nc = new Date() \nc.getFullYear()\nc.getHours()\n\n// Array\nnumbers = [1,2,3] \n2 == numbers[1]\nnumbers.push(47)\n4 == numbers.length\nnumbers \n47 == numbers.pop()\n3 == numbers.length\nnumbers\nassert([0,1,4,9,16,25,36,49,64,81], range(10).map(x => x*x))\n\n// Object\nperson = {fnamn:'David', enamn:'Larsson'}\n'David' == person['fnamn']\n'Larsson' == person.enamn\n\n// functions (only one liners)\nkvadrat = (x) => x*x\n25 == kvadrat(5)\n\nserial = (a,b) => a+b\n2 == serial(1,1)\n5 == serial(2,3)\n\nparallel = (a,b) => a*b/(a+b)\n0.5 == parallel(1,1)\n1.2 == parallel(2,3)\n\nfak = (x) => (x==0 ? 1 : x * fak(x-1))\n3628800 == fak(10)\n\nfib = (x) => x<=0 ? 1 : fib(x-1) + fib(x-2)\n1 == fib(0)\n2 == fib(1)\n5 == fib(3)\n8 == fib(4)\n13 == fib(5)\n21 == fib(6)\n";
    }
    // storeAndGoto memory,page
    return encode();
  });
  page.addAction('Reference', function() {
    return window.open("https://www.w3schools.com/jsref/default.asp");
  });
  page.addAction('Hide', function() {
    return page.display();
  });
  page.addAction('URL', function() {
    return encode();
  });
  page.addAction(ANGLE_MODE[config.angleMode], function() {
    config.angleMode = 1 - config.angleMode;
    page.actions[5][0] = ANGLE_MODE[config.angleMode];
    makeAnswer();
    return storeAndGoto(memory, page);
  });
  page.addAction(LANGUAGE[config.language], function() {
    config.language = 1 - config.language;
    page.actions[6][0] = LANGUAGE[config.language];
    return storeAndGoto(memory, page);
  });
  page.addAction(DISPLAY_MODE[config.displayMode], function() {
    config.displayMode = 1 - config.displayMode;
    page.actions[7][0] = DISPLAY_MODE[config.displayMode];
    return storeAndGoto(memory, page);
  });
  page.addAction('Less', function() {
    if (config.digits > 1) {
      config.digits--;
    }
    return storeAndGoto(memory, page);
  });
  page.addAction('More', function() {
    if (config.digits < 17) {
      config.digits++;
    }
    return storeAndGoto(memory, page);
  });
  return page.display();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\Lab\2018\008-Kalkyl\coffee\sketch.coffee