'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var KEY, enter, memory, page, setup;

KEY = '008B';

memory = {};

page = null;

enter = null;

setup = function setup() {
  memory = fetchData();
  page = new Page(0, function () {
    var _this = this;

    var count, expr, failed, key, value;
    failed = true;
    count = 0;
    while (failed && count < 10) {
      count++;
      failed = false;
      this.table.innerHTML = "";
      for (key in memory) {
        expr = memory[key];
        try {
          value = eval('window.' + key + '=' + expr);
          (function (key, value, expr) {
            var b;
            b = makeButton(key + '=' + expr, 0, function () {
              return enter.value = key + '=' + expr;
            });
            return _this.addRow(b, makeSpan(value));
          })(key, value, expr);
        } catch (error) {
          failed = true;
        }
      }
    }
    this.addRow(enter = makeInput('enter'));
    enter.focus();
    return function (enter) {
      return enter.addEventListener("keyup", function (event) {
        event.preventDefault();
        if (event.keyCode === 13) {
          var _enter$value$split = enter.value.split('=');

          var _enter$value$split2 = _slicedToArray(_enter$value$split, 2);

          key = _enter$value$split2[0];
          expr = _enter$value$split2[1];

          key = key.trim();
          expr = expr.trim();
          memory[key] = expr;
          return storeAndGoto(memory, page);
        }
      });
    }(enter);
  });
  page.addAction('Clear', function () {
    memory = {};
    return storeAndGoto(memory, page);
  });
  return page.display();
};
//# sourceMappingURL=sketch.js.map
