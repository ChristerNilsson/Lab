"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.0.3
var KEY, memory, page, setup;

KEY = '008B';

memory = {};

page = null;

setup = function setup() {
  memory = fetchData();
  page = new Page(0, function () {
    var arr, b, enter, expr, i, key, len, line, ref, value;
    this.table.innerHTML = "";
    this.addRow(enter = makeTextArea(40, 10));
    enter.focus();
    enter.value = memory;
    ref = memory.split("\n");
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      arr = line.split('=');
      if (arr.length === 2) {
        var _arr = arr;

        var _arr2 = _slicedToArray(_arr, 2);

        key = _arr2[0];
        expr = _arr2[1];

        try {
          value = eval('window.' + key + '=' + expr);
        } catch (error) {
          value = 'error';
        }
        b = makeSpan(key);
        this.addRow(b, makeSpan(JSON.stringify(value)));
      }
    }
    return enter.addEventListener("keyup", function (event) {
      memory = enter.value;
      return storeData(memory);
    });
  });
  page.addAction('Run', function () {
    return storeAndGoto(memory, page);
  });
  page.addAction('Clear', function () {
    memory = '';
    return storeAndGoto(memory, page);
  });
  return page.display();
};
//# sourceMappingURL=sketch.js.map
