"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Menu;

Menu = function () {
  function Menu(items1) {
    var table = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var branch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    _classCallCheck(this, Menu);

    this.items = items1;
    this.table = table;
    this.branch = branch;
  }

  _createClass(Menu, [{
    key: "rensa",
    value: function rensa() {
      return this.table.innerHTML = "";
    }
  }, {
    key: "clear",
    value: function clear() {
      return this.branch = [];
    }
  }, {
    key: "traverse",
    value: function traverse() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      var children, i, item, j, k, key, l, len, len1, len2, ref, ref1, results;
      if (false === goDeeper(this.branch, br)) {
        return;
      }
      if (level === 0) {
        ref = _.keys(items);
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          key = ref[i];
          if (i === this.branch[level] || this.branch.length === level) {
            this.addTitle(key, level, i, br.concat(i));
          }
          children = items[key];
          this.traverse(children, level + 1, br.concat(i));
        }
      }
      if (level === 1) {
        ref1 = _.keys(items);
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          key = ref1[i];
          if (i === this.branch[level] || this.branch.length === level) {
            this.addTitle(key, level, i, br.concat(i));
          }
          children = keywords[key].split(' ');
          this.traverse(children, level + 1, br.concat(i));
        }
      }
      if (level === 2) {
        results = [];
        for (l = 0, len2 = items.length; l < len2; l++) {
          item = items[l];
          results.push(this.addTitle(item, level, i, br));
        }
        return results;
      }
    }
  }, {
    key: "handleRow",
    value: function handleRow(b) {
      var tr;
      tr = document.createElement("tr");
      addCell(tr, b, 100);
      return this.table.appendChild(tr);
    }
  }, {
    key: "addTitle",
    value: function addTitle(title, level, i, br) {
      var _this = this;

      var b1;
      if (level === 2) {
        b1 = makeButton(title, BLACK, YELLOW);
      } else if (this.branch[level] === i) {
        b1 = makeButton(title, WHITE, BLACK);
      } else {
        b1 = makeButton(title, BLACK, WHITE);
      }
      b1.style.textAlign = 'left';
      b1.branch = br;
      b1.style.paddingLeft = 10 * level + "px";
      b1.onclick = function () {
        if (level === 0 || level === 1) {
          _this.branch = calcBranch(_this.branch, b1.branch);
        }
        return updateTables();
      };
      return this.handleRow(b1);
    }
  }]);

  return Menu;
}();
//# sourceMappingURL=menu.js.map
