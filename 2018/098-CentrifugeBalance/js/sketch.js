"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Button, buttons, clicks, draw, drawCenterOfGravity, mousePressed, setup;

Button = function () {
  function Button(x1, y1) {
    _classCallCheck(this, Button);

    this.x = x1;
    this.y = y1;
    this.r = 50;
    this.active = false;
    this.found = false;
  }

  _createClass(Button, [{
    key: "draw",
    value: function draw() {
      if (this.active) {
        fc(1);
      } else {
        fc(0);
      }
      sc();
      circle(this.x, this.y, this.r);
      if (this.found) {
        fc(1, 1, 0);
        return circle(this.x, this.y, this.r / 2);
      }
    }
  }, {
    key: "inside",
    value: function inside(x, y) {
      return this.r > dist(x, y, this.x, this.y);
    }
  }, {
    key: "click",
    value: function click() {
      return this.active = !this.active;
    }
  }]);

  return Button;
}();

buttons = [];

clicks = 0;

setup = function setup() {
  var i, j, len, ref, x, y;
  createCanvas(600, 600);
  angleMode(DEGREES);
  textSize(200);
  textAlign(CENTER, CENTER);
  ref = range(12);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = width / 2 + 250 * cos(30 * i - 90);
    y = height / 2 + 250 * sin(30 * i - 90);
    buttons.push(new Button(x, y));
  }
  buttons[1].found = true;
  return buttons[11].found = true;
};

drawCenterOfGravity = function drawCenterOfGravity() {
  var button, count, j, len, x, y;
  fc();
  sc(1, 0, 0);
  sw(2);
  x = 0;
  y = 0;
  count = 0;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.active) {
      x += button.x;
      y += button.y;
      count++;
    }
  }
  if (count > 0) {
    x /= count;
    y /= count;
    circle(x, y, 25);
    if (x === width / 2 && y === height / 2) {
      return buttons[count % 12].found = true;
    }
  }
};

draw = function draw() {
  var button, count, j, k, len, len1;
  count = 0;
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.found) {
      count++;
    }
  }
  if (count === 12) {
    bg(0, 1, 0);
  } else {
    bg(0.5);
  }
  fc(1, 1, 0);
  sc();
  text(clicks, width / 2, height / 2);
  sc(0);
  fc();
  circle(width / 2, height / 2, 10);
  for (k = 0, len1 = buttons.length; k < len1; k++) {
    button = buttons[k];
    button.draw();
  }
  return drawCenterOfGravity();
};

mousePressed = function mousePressed() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      button.click();
      results.push(clicks++);
    } else {
      results.push(void 0);
    }
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
