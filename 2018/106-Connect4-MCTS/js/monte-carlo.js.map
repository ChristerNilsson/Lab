{
  "version": 3,
  "file": "monte-carlo.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\monte-carlo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class MonteCarlo \r\n\tconstructor : (game, UCB1ExploreParam = 2) ->\r\n\t\t@game = game\r\n\t\t@UCB1ExploreParam = UCB1ExploreParam\r\n\t\t@nodes = new Map() \r\n\r\n\tmakeNode : (state) ->\r\n\t\tif !@nodes.has state.hash()\r\n\t\t\tunexpandedPlays = @game.legalPlays(state).slice()\r\n\t\t\tnode = new MonteCarloNode null, null, state, unexpandedPlays\r\n\t\t\t@nodes.set state.hash(), node\r\n\r\n\trunSearch : (state, timeout = 3) ->\r\n\r\n\t\t@makeNode state\r\n\r\n\t\tdraws = 0\r\n\t\ttotalSims = 0\r\n\t\t\r\n\t\tend = Date.now() + timeout * 1000\r\n\t\twhile Date.now() < end\r\n\r\n\t\t\tnode = @select state\r\n\t\t\twinner = @game.winner node.state\r\n\r\n\t\t\tif node.isLeaf() == false and winner == null\r\n\t\t\t\tnode = @expand node\r\n\t\t\t\twinner = @simulate node\r\n\t\t\t\r\n\t\t\t@backpropagate node, winner\r\n\r\n\t\t\tif winner == 0 then draws++\r\n\t\t\ttotalSims++\r\n\t\t\r\n\t\t{ runtime: timeout, simulations: totalSims, draws: draws }\r\n\r\n\tbestPlay : (state, policy = \"robust\") ->\r\n\r\n\t\t@makeNode state\r\n\r\n\t\tprint 'state.hash',state.hash()\r\n\t\tprint 'nodes',@nodes\r\n\r\n\t\tif @nodes.get(state.hash()).isFullyExpanded() == false\r\n\t\t\tthrow new Error \"Not enough information!\"\r\n\r\n\t\tnode = @nodes.get state.hash()\r\n\t\tallPlays = node.allPlays()\r\n\t\tbestPlay = null\r\n\r\n\t\tif policy == \"robust\"\r\n\t\t\tmax = -Infinity\r\n\t\t\tfor play in allPlays\r\n\t\t\t\tchildNode = node.childNode play\r\n\t\t\t\tif childNode.n_plays > max\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tmax = childNode.n_plays\r\n\r\n\t\telse if policy == \"max\"\r\n\t\t\tmax = -Infinity\r\n\t\t\tfor play in allPlays\r\n\t\t\t\tchildNode = node.childNode play\r\n\t\t\t\tratio = childNode.n_wins / childNode.n_plays\r\n\t\t\t\tif ratio > max\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tmax = ratio\r\n\r\n\t\treturn bestPlay\r\n\r\n\tselect : (state) ->\r\n\t\tnode = @nodes.get state.hash()\r\n\t\twhile node.isFullyExpanded() && !node.isLeaf()\r\n\t\t\tplays = node.allPlays()\r\n\t\t\tbestPlay = null\r\n\t\t\tbestUCB1 = -Infinity\r\n\t\t\tfor play in plays\r\n\t\t\t\tchildUCB1 = node.childNode(play).getUCB1 @UCB1ExploreParam\r\n\t\t\t\tif childUCB1 > bestUCB1\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tbestUCB1 = childUCB1\r\n\t\t\tnode = node.childNode bestPlay\r\n\t\treturn node\r\n\r\n\texpand : (node) ->\r\n\r\n\t\tplays = node.unexpandedPlays()\r\n\t\tindex = Math.floor Math.random() * plays.length\r\n\t\tplay = plays[index]\r\n\r\n\t\tchildState = @game.nextState node.state, play\r\n\t\tchildUnexpandedPlays = @game.legalPlays childState\r\n\t\tchildNode = node.expand play, childState, childUnexpandedPlays\r\n\t\t@nodes.set childState.hash(), childNode\r\n\r\n\t\treturn childNode\r\n\r\n\tsimulate : (node) ->\r\n\r\n\t\tstate = node.state\r\n\t\twinner = @game.winner state\r\n\r\n\t\twhile winner == null\r\n\t\t\tplays = @game.legalPlays state\r\n\t\t\tplay = plays[Math.floor Math.random() * plays.length]\r\n\t\t\tstate = @game.nextState state, play\r\n\t\t\twinner = @game.winner state\r\n\r\n\t\treturn winner\r\n\r\n\tbackpropagate : (node, winner) ->\r\n\r\n\t\twhile node != null\r\n\t\t\tnode.n_plays++\r\n\t\t\tif node.state.isPlayer -winner then node.n_wins++\r\n\t\t\tnode = node.parent\r\n\r\n\tgetStats : (state) ->\r\n\t\tnode = @nodes.get state.hash()\r\n\t\tstats = { n_plays: node.n_plays, n_wins: node.n_wins, children: [] }\r\n\t\tfor child of node.children.values() \r\n\t\t\tif child.node == null then stats.children.push { play: child.play, n_plays: null, n_wins: null}\r\n\t\t\telse stats.children.push { play: child.play, n_plays: child.node.n_plays, n_wins: child.node.n_wins}\r\n\t\treturn stats\r\n"
  ]
}