{
  "version": 3,
  "file": "monte-carlo.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\monte-carlo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class MonteCarlo \r\n\tconstructor : (game, UCB1ExploreParam = 2) ->\r\n\t\t@game = game\r\n\t\t@UCB1ExploreParam = UCB1ExploreParam\r\n\t\t@nodes = new Map() \r\n\r\n\tmakeNode : (state) ->\r\n\t\tif !@nodes.has state.hash()\r\n\t\t\tunexpandedPlays = @game.legalPlays(state).slice()\r\n\t\t\tnode = new MonteCarloNode null, null, state, unexpandedPlays\r\n\t\t\t@nodes.set state.hash(), node\r\n\r\n\trunSearch : (state, timeout = 3) ->\r\n\r\n\t\t@makeNode state\r\n\r\n\t\tdraws = 0\r\n\t\ttotalSims = 0\r\n\t\t\r\n\t\tend = Date.now() + timeout * 1000\r\n\t\twhile Date.now() < end\r\n\r\n\t\t\tnode = @select state\r\n\t\t\twinner = @game.winner node.state\r\n\r\n\t\t\tif node.isLeaf() == false and winner == null\r\n\t\t\t\tnode = @expand node\r\n\t\t\t\twinner = @simulate node\r\n\t\t\t\r\n\t\t\t@backpropagate node, winner\r\n\r\n\t\t\tif winner == 0 then draws++\r\n\t\t\ttotalSims++\r\n\t\t\r\n\t\t{ runtime: timeout, simulations: totalSims, draws: draws }\r\n\r\n\tbestPlay : (state, policy = \"robust\") ->\r\n\r\n\t\t@makeNode state\r\n\r\n\t\tprint 'state.hash',state.hash()\r\n\t\tprint 'nodes',@nodes\r\n\r\n\t\tif @nodes.get(state.hash()).isFullyExpanded() == false\r\n\t\t\tthrow new Error \"Not enough information!\"\r\n\r\n\t\tnode = @nodes.get state.hash()\r\n\t\tallPlays = node.allPlays()\r\n\t\tbestPlay = null\r\n\r\n\t\tif policy == \"robust\"\r\n\t\t\tmax = -Infinity\r\n\t\t\tfor play in allPlays\r\n\t\t\t\tchildNode = node.childNode play\r\n\t\t\t\tif childNode.n_plays > max\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tmax = childNode.n_plays\r\n\r\n\t\telse if policy == \"max\"\r\n\t\t\tmax = -Infinity\r\n\t\t\tfor play in allPlays\r\n\t\t\t\tchildNode = node.childNode play\r\n\t\t\t\tratio = childNode.n_wins / childNode.n_plays\r\n\t\t\t\tif ratio > max\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tmax = ratio\r\n\r\n\t\treturn bestPlay\r\n\r\n\tselect : (state) ->\r\n\t\tnode = @nodes.get state.hash()\r\n\t\twhile node.isFullyExpanded() && !node.isLeaf()\r\n\t\t\tplays = node.allPlays()\r\n\t\t\tbestPlay = null\r\n\t\t\tbestUCB1 = -Infinity\r\n\t\t\tfor play in plays\r\n\t\t\t\tchildUCB1 = node.childNode(play).getUCB1 @UCB1ExploreParam\r\n\t\t\t\tif childUCB1 > bestUCB1\r\n\t\t\t\t\tbestPlay = play\r\n\t\t\t\t\tbestUCB1 = childUCB1\r\n\t\t\tnode = node.childNode bestPlay\r\n\t\treturn node\r\n\r\n\texpand : (node) ->\r\n\r\n\t\tplays = node.unexpandedPlays()\r\n\t\tindex = Math.floor Math.random() * plays.length\r\n\t\tplay = plays[index]\r\n\r\n\t\tchildState = @game.nextState node.state, play\r\n\t\tchildUnexpandedPlays = @game.legalPlays childState\r\n\t\tchildNode = node.expand play, childState, childUnexpandedPlays\r\n\t\t@nodes.set childState.hash(), childNode\r\n\r\n\t\treturn childNode\r\n\r\n\tsimulate : (node) ->\r\n\r\n\t\tstate = node.state\r\n\t\twinner = @game.winner state\r\n\r\n\t\twhile winner == null\r\n\t\t\tplays = @game.legalPlays state\r\n\t\t\tplay = plays[Math.floor Math.random() * plays.length]\r\n\t\t\tstate = @game.nextState state, play\r\n\t\t\twinner = @game.winner state\r\n\r\n\t\treturn winner\r\n\r\n\tbackpropagate : (node, winner) ->\r\n\r\n\t\twhile node != null\r\n\t\t\tnode.n_plays++\r\n\t\t\tif node.state.isPlayer -winner then node.n_wins++\r\n\t\t\tnode = node.parent\r\n\r\n\tgetStats : (state) ->\r\n\t\tnode = @nodes.get state.hash()\r\n\t\tstats = { n_plays: node.n_plays, n_wins: node.n_wins, children: [] }\r\n\t\tfor child of node.children.values() \r\n\t\t\tif child.node == null then stats.children.push { play: child.play, n_plays: null, n_wins: null}\r\n\t\t\telse stats.children.push { play: child.play, n_plays: child.node.n_plays, n_wins: child.node.n_wins}\r\n\t\treturn stats\r\n"
  ]
}