"use strict";

// Generated by CoffeeScript 2.3.2
var Game, N_COLS, N_ROWS, boardPrototype, checkPrototype, i;

N_ROWS = 6;

N_COLS = 7;

boardPrototype = function () {
  var j, len, ref, results;
  ref = range(N_ROWS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push([0, 0, 0, 0, 0, 0, 0]);
  }
  return results;
}();

checkPrototype = function () {
  var j, len, ref, results;
  ref = range(N_COLS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    results.push([0, 0, 0, 0, 0, 0, 0, 0, 0]);
  }
  return results;
}();

Game = class Game {
  start() {
    var newBoard;
    newBoard = boardPrototype.map(row => {
      return row.slice();
    });
    return new State([], newBoard, 1);
  }

  legalPlays(state) {
    var col, j, k, len, len1, ref, ref1, res, row;
    res = [];
    ref = range(N_COLS);
    for (j = 0, len = ref.length; j < len; j++) {
      col = ref[j];
      ref1 = range(N_ROWS - 1, -1, -1);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        row = ref1[k];
        if (state.board[row][col] === 0) {
          res.push(new Play(row, col));
          break;
        }
      }
    }
    return res;
  }

  nextState(state, play) {
    var newBoard, newHistory, newPlayer;
    newHistory = state.playHistory + play.col;
    newBoard = state.board.map(row => {
      return row.slice();
    });
    newBoard[play.row][play.col] = state.player;
    newPlayer = -state.player;
    return new State(newHistory, newBoard, newPlayer);
  }

  winner(state) {
    var acc, cell, checkBoards, col, dc, dr, item, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, res, row, val;
    res = 0;
    ref = state.board[0];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      if (item === 0) {
        res++;
      }
    }
    if (res === 0) {
      return 0;
    }
    checkBoards = function () {
      var k, len1, ref1, results;
      ref1 = range(4);
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        i = ref1[k];
        results.push(checkPrototype.map(row => {
          return row.slice();
        }));
      }
      return results;
    }.call(this);
    ref1 = range(N_ROWS);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      row = ref1[k];
      ref2 = range(N_COLS);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        col = ref2[l];
        cell = state.board[row][col];
        for (i = m = 0, len3 = checkBoards.length; m < len3; i = ++m) {
          val = checkBoards[i];
          [dr, dc] = [[1, 0], [0, 1], [0, 0], [0, 2]][i];
          acc = val[row + dr][col + dc];
          val[row + 1][col + 1] = cell;
          if (cell < 0 && acc < 0 || cell > 0 && acc > 0) {
            val[row + 1][col + 1] += acc;
          }
          if (val[row + 1][col + 1] === 4) {
            return 1;
          }
          if (val[row + 1][col + 1] === -4) {
            return -1;
          }
        }
      }
    }
    return null;
  }

};
//# sourceMappingURL=game.js.map
