"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var Game_C4, N_COLS, N_ROWS, boardPrototype, checkPrototype;

N_ROWS = 6;

N_COLS = 7;

boardPrototype = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];

checkPrototype = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];

Game_C4 = function () {
  function Game_C4() {
    _classCallCheck(this, Game_C4);
  }

  _createClass(Game_C4, [{
    key: "start",
    value: function start() {
      var newBoard;
      newBoard = boardPrototype.map(function (row) {
        return row.slice();
      });
      return new State([], newBoard, 1);
    }
  }, {
    key: "legalPlays",
    value: function legalPlays(state) {
      var col, j, k, len, len1, ref, ref1, res, row;
      res = [];
      ref = range(N_COLS);
      for (j = 0, len = ref.length; j < len; j++) {
        col = ref[j];
        ref1 = range(N_ROWS - 1, -1, -1);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          row = ref1[k];
          if (state.board[row][col] === 0) {
            res.push(new Play(row, col));
            break;
          }
        }
      }
      return res;
    }
  }, {
    key: "nextState",
    value: function nextState(state, play) {
      var newBoard, newHistory, newPlayer;
      newHistory = state.playHistory.slice(); // 1-deep copy
      newHistory.push(play);
      newBoard = state.board.map(function (row) {
        return row.slice();
      });
      newBoard[play.row][play.col] = state.player;
      newPlayer = -state.player;
      return new State(newHistory, newBoard, newPlayer);
    }
  }, {
    key: "winner",
    value: function winner(state) {
      var acc, cell, checkBoards, col, dc, dr, i, item, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, res, row, val;
      res = 0;
      ref = state.board[0];
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item === 0) {
          res++;
        }
      }
      if (res === 0) {
        return 0;
      }
      checkBoards = function () {
        var k, len1, ref1, results;
        ref1 = range(4);
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          i = ref1[k];
          results.push(checkPrototype.map(function (row) {
            return row.slice();
          }));
        }
        return results;
      }.call(this);
      ref1 = range(N_ROWS);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        row = ref1[k];
        ref2 = range(N_COLS);
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          col = ref2[l];
          cell = state.board[row][col];
          for (i = m = 0, len3 = checkBoards.length; m < len3; i = ++m) {
            val = checkBoards[i];

            var _i = _slicedToArray([[1, 0], [0, 1], [0, 0], [0, 2]][i], 2);

            dr = _i[0];
            dc = _i[1];

            acc = val[row + dr][col + dc];
            val[row + 1][col + 1] = cell;
            if (cell < 0 && acc < 0 || cell > 0 && acc > 0) {
              val[row + 1][col + 1] += acc;
            }
            if (val[row + 1][col + 1] === 4) {
              return 1;
            }
            if (val[row + 1][col + 1] === -4) {
              return -1;
            }
          }
        }
      }
      return null;
    }
  }]);

  return Game_C4;
}();
//# sourceMappingURL=game.js.map
