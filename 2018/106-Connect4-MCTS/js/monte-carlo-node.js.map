{
  "version": 3,
  "file": "monte-carlo-node.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\monte-carlo-node.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AAAA,IAAA;;AAAM,iBAAN,MAAA;AACC,AAAc,cAAA,QAAA,OAAA,OAAA,AAAyB,iBAEtC;QAAA,GAAA,KAAA;AAFc,AAAC,SAAA;AAAQ,AAAC,SAAA;AAAM,AAAC,SAAA;AAE/B,AAAC,SAAD,AAAC,UAAU;AACX,AAAC,SAAD,AAAC,SAAS;AAEV,AAAC,SAAD,AAAC,WAAW,AAAI;AAChB,SAAA,8CAAA;;AACC,AAAC,WAAA,AAAQ,SAAT,AAAU,IAAI,AAAI,KAAlB,AAAc,AAAK;AAAU,cAAF,AAAQ;AAAM,cAD1C,AACC,AAA2B,AAAoB;AAApB;AAPf;;;AASd,AAAY,YAAA,AAAC,MACZ;QAAA;AAAA,YAAQ,AAAC,KAAA,AAAQ,SAAT,AAAU,IAAI,AAAI,KAAlB,AAAc,AAAK;AAC3B,QAAG,UAAS,KAAZ;AACC,YAAM,IAAA,AAAI,MADX,AACO,AAAU;AADjB,WAEK,IAAG,AAAK,MAAL,AAAM,SAAT,AAAiB;AACrB,YAAM,IAAA,AAAI,MADN,AACE,AAAU;;WACjB,AAAK,MANM,AAML;;;AAEP,AAAS,SAAA,AAAC,MAAD,AAAO,YAAP,AAAmB,iBAC3B;QAAA;AAAA,QAAG,AAAC,CAAC,AAAC,KAAA,AAAQ,SAAT,AAAU,IAAI,AAAI,KAAvB,AAAI,AAAC,AAAc,AAAK;AAAa,YAAM,IAAA,AAAI,MAA/C,AAA2C,AAAU;;AACrD,gBAAY,IAAA,AAAI,eAAJ,AAAmB,MAAnB,AAAsB,MAAtB,AAA4B,YAA5B,AAAwC;AACpD,AAAC,SAAA,AAAQ,SAAT,AAAU,IAAI,AAAI,KAAlB,AAAc,AAAK;AAAU,YAAF,AAAQ;AAAM,YAAzC,AAA2B,AAAoB;AAApB;WAHnB,AAIR;;;AAED,AAAW,aAAA;AACV;QAAA;AAAA,UAAM;AACN,AAAC,SAAA,AAAQ,SAAT,AAAU,QAAQ,CAAA,AAAC,OAAD,AAAQ;aAAQ,AAAG,IAAH,AAAI,KAAK,AAAK,MAA9B,AAAgB,AAAe;AAAjD;WAFU,AAGV;;;AAED,AAAkB,oBAAA;AACjB;QAAA;AAAA,UAAM;AACN,AAAC,SAAA,AAAQ,SAAT,AAAU,QAAQ,CAAA,AAAC,OAAD,AAAQ;AAAQ,UAAG,AAAK,MAAL,AAAM,SAAT,AAAiB;eAAU,AAAG,IAAH,AAAI,KAAK,AAAK,MAAzC,AAA2B,AAAe;AAA1D;AAAlB;WAFiB,AAGjB;;;AAED,AAAkB,oBAAA;AACjB;QAAA;AAAA,UAAM;AACN,AAAC,SAAA,AAAQ,SAAT,AAAU,QAAQ,CAAA,AAAC,OAAD,AAAQ;AAAQ,UAAG,AAAK,MAAL,AAAM,SAAT,AAAiB;eAAU,MAA3B,AAAiC;AAAjD;AAAlB;WAFiB,AAGjB;;;AAED,AAAS;WAAG,AAAC,KAAA,AAAQ,SAAT,AAAU,WAAb,AAAuB;;;AAEhC,AAAU,UAAA,AAAC;WAAc,AAAC,KAAD,AAAC,SAAS,AAAC,KAAX,AAAW,UAAU,AAAI,KAAJ,AAAK,KAAK,YAAY,AAAI,KAAJ,AAAK,IAAI,AAAC,KAAA,AAAM,OAA5B,AAAY,AAAiB,WAAW,AAAC,KAAvF,AAAoC,AAAmD;AAzClG;;AAAA",
  "sourcesContent": [
    "class MonteCarloNode \r\n\tconstructor : (@parent, @play, @state, unexpandedPlays) ->\r\n\r\n\t\t@n_plays = 0\r\n\t\t@n_wins = 0\r\n\r\n\t\t@children = new Map()\r\n\t\tfor play in unexpandedPlays\r\n\t\t\t@children.set play.hash(), { play: play, node: null }\r\n\r\n\tchildNode : (play) ->\r\n\t\tchild = @children.get play.hash()\r\n\t\tif child == undefined\r\n\t\t\tthrow new Error 'No such play!'\r\n\t\telse if child.node == null\r\n\t\t\tthrow new Error \"Child is not expanded!\"\r\n\t\tchild.node\r\n\r\n\texpand : (play, childState, unexpandedPlays) ->\r\n\t\tif !(@children.has play.hash()) then throw new Error(\"No such play!\")\r\n\t\tchildNode = new MonteCarloNode(@, play, childState, unexpandedPlays)\r\n\t\t@children.set play.hash(), { play: play, node: childNode }\r\n\t\tchildNode\r\n\r\n\tallPlays : -> # (child.play for child in @children)\r\n\t\tret = []\r\n\t\t@children.forEach (child, key) => ret.push child.play\r\n\t\tret\r\n\r\n\tunexpandedPlays : -> #(child.play for child in @children when child.node == null)\r\n\t\tret = []\r\n\t\t@children.forEach (child, key) => if child.node == null then ret.push child.play\r\n\t\tret\r\n\r\n\tisFullyExpanded : -> #(child.play for child in @children when child.node).length == @children.length\r\n\t\tret = true\r\n\t\t@children.forEach (child, key) => if child.node == null then ret = false\r\n\t\tret\r\n\r\n\tisLeaf : -> @children.length == 0 \r\n\t\r\n\tgetUCB1 : (biasParam) -> @n_wins / @n_plays + Math.sqrt(biasParam * Math.log(@parent.n_plays) / @n_plays)\r\n"
  ]
}