{
  "version": 3,
  "file": "monte-carlo-node.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\monte-carlo-node.coffee"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,IAAA;IAAA;;AAAA,AAAM;AACL,AAAc,0BAAA,QAAA,OAAA,OAAA,AAAyB;AAEtC;;QAAA,GAAA,KAAA;AAFc,AAAC,SAAA;AAAQ,AAAC,SAAA;AAAM,AAAC,SAAA;AAE/B,AAAC,SAAD,AAAC,UAAU;AACX,AAAC,SAAD,AAAC,SAAS;AAEV,AAAC,SAAD,AAAC,WAHD,AAGY;AACZ,SAAA,8CAAA;;AACC,AAAC,WAAA,AAAS,SAAA,AAAI,KAAd,AAAU,AAAK;AAAY,cAAF,AAAQ;AAAM,cADxC,AAC0B,AAAoB;AAApB;AAPb;AASd,AAAY;;;;8BAAA,AAAC,MACZ;UAAA;AAAA,cAAQ,AAAC,KAAA,AAAS,SAAA,AAAI,KAAJ,AAAK;AACvB,UAAG,UAAS,KAAZ;AACC,cAAM,IAAA,AAAI,MADX,AACO,AAAU;AADjB,aAEK,IAAG,AAAK,MAAL,AAAM,SAAT,AAAiB;AACrB,cAAM,IAAA,AAAI,MADN,AACE,AAAU;;aACjB,AAAK,MANM,AAML;AAEP,AAAS;;;2BAAA,AAAC,MAAD,AAAO,YAAP,AAAmB,iBAC3B;UAAA,WAAA;AAAA,gBAAG,AAAI,KAAJ,AAAK,QAAL,aAAmB,AAAC,EAAD,AAAE,KAAK,AAAC,KAA3B,AAAmB,AAAQ,WAA3B,OAAH;AAA4C,cAAM,IAAA,AAAI,MAAtD,AAAkD,AAAU;;AAC5D,kBAAY,IAAA,AAAI,eAAJ,AAAmB,MAAnB,AAAsB,MAAtB,AAA4B,YAA5B,AAAwC;AACpD,AAAC,WAAA,AAAS,SAAA,AAAI,KAAd,AAAU,AAAK;AAAY,cAAF,AAAQ;AAAM,cAAd,AAAoB;AAApB;aAHjB,AAIR;AAED,AAAW;;;+BAAG;UAAA,OAAA,GAAA,KAAA,KAAA,AAAY;iBAAA;;AAAA,WAAA,kCAAA;;qBAAX,AAAK,MAAC,AAAK;AAAA;aAAf;AAEX,AAAkB;;;sCAAG;UAAA,OAAA,GAAA,KAAA,KAAA,AAAY;iBAAA;;AAAA,WAAA,kCAAA;;YAA4B,AAAK,MAAL,AAAM,SAAQ;uBAArD,AAAK,MAAC;AAAK;AAAA;aAAf;AAzBlB;;;;AA8BA,AAAkB;;;;sCAAG;UAAA;;yBAAY;mBAAA;;AAAA,aAAA,kCAAA;;cAA4B,AAAK,MAAC;yBAA7C,AAAK,MAAC;AAAK;AAAA;;aAAZ,AAAmD,KAAnD,CAAA,AAAoD,WAAU,AAAC,KAAA,AAAQ,SAA1E,AAA2E;AA9B7F;;;;AAmCA,AAAS;;;;;aAAG,AAAC,KAAA,AAAQ,SAAT,AAAU,WAAb,AAAuB;AAEhC,AAAU;;;4BAAA,AAAC;aAAc,AAAC,KAAD,AAAC,SAAS,AAAC,KAAX,AAAW,UAAU,AAAI,KAAJ,AAAK,KAAK,YAAY,AAAI,KAAJ,AAAK,IAAI,AAAC,KAAA,AAAM,OAA5B,AAAY,AAAiB,WAAW,AAAC,KAAvF,AAAoC,AAAmD;AAtClG",
  "sourcesContent": [
    "class MonteCarloNode \r\n\tconstructor : (@parent, @play, @state, unexpandedPlays) ->\r\n\r\n\t\t@n_plays = 0\r\n\t\t@n_wins = 0\r\n\r\n\t\t@children = {} #new Map()\r\n\t\tfor play in unexpandedPlays\r\n\t\t\t@children[play.hash()] = { play: play, node: null }\r\n\r\n\tchildNode : (play) ->\r\n\t\tchild = @children[play.hash()]\r\n\t\tif child == undefined\r\n\t\t\tthrow new Error 'No such play!'\r\n\t\telse if child.node == null\r\n\t\t\tthrow new Error \"Child is not expanded!\"\r\n\t\tchild.node\r\n\r\n\texpand : (play, childState, unexpandedPlays) ->\r\n\t\tif play.hash() not in _.keys @children then throw new Error(\"No such play!\")\r\n\t\tchildNode = new MonteCarloNode(@, play, childState, unexpandedPlays)\r\n\t\t@children[play.hash()] = { play: play, node: childNode }\r\n\t\tchildNode\r\n\r\n\tallPlays : -> (child.play for child in @children)\r\n\r\n\tunexpandedPlays : -> (child.play for child in @children when child.node == null)\r\n\t\t# ret = []\r\n\t\t# @children.forEach (child, key) => if child.node == null then ret.push child.play\r\n\t\t# ret\r\n\r\n\tisFullyExpanded : -> (child.play for child in @children when child.node).length == @children.length\r\n\t\t# ret = true\r\n\t\t# @children.forEach (child, key) => if child.node == null then ret = false\r\n\t\t# ret\r\n\r\n\tisLeaf : -> @children.length == 0 \r\n\t\r\n\tgetUCB1 : (biasParam) -> @n_wins / @n_plays + Math.sqrt(biasParam * Math.log(@parent.n_plays) / @n_plays)\r\n"
  ]
}