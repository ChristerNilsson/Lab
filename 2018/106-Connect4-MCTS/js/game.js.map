{
  "version": 3,
  "file": "game.js",
  "sourceRoot": "..",
  "sources": [
    "coffee\\game.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "N_ROWS = 6\r\nN_COLS = 7\r\n\r\nboardPrototype = [ \r\n\t[0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0] \r\n]\r\n\r\ncheckPrototype = [ \r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n\t[0,0,0,0,0,0,0,0,0]\r\n]\r\n\r\nclass Game_C4 \r\n\r\n\tstart : () ->\r\n\t\tnewBoard = boardPrototype.map (row) => row.slice()\r\n\t\tnew State [], newBoard, 1\r\n\r\n\tlegalPlays : (state) ->\r\n\t\tres = []\r\n\t\tfor col in range N_COLS\r\n\t\t\tfor row in range N_ROWS-1, -1, -1\r\n\t\t\t\tif state.board[row][col] == 0\r\n\t\t\t\t\tres.push new Play row, col\r\n\t\t\t\t\tbreak\r\n\t\tres\r\n\r\n\tnextState : (state, play) ->\r\n\t\t#newHistory = state.playHistory.slice() # 1-deep copy\r\n\t\t#newHistory.push play.col\r\n\t\tnewHistory = state.playHistory + play.col \r\n\r\n\t\tnewBoard = state.board.map (row) => row.slice()\r\n\t\tnewBoard[play.row][play.col] = state.player\r\n\t\tnewPlayer = -state.player\r\n\t\tnew State newHistory, newBoard, newPlayer\r\n\r\n\twinner : (state) ->\r\n\r\n\t\tres = 0\r\n\t\tfor item in state.board[0] \r\n\t\t\tif item == 0 then res++\r\n\t\tif res == 0 then return 0\r\n\r\n\t\tcheckBoards = ((checkPrototype.map (row) => row.slice()) for i in range 4)\r\n\r\n\t\tfor row in range N_ROWS\r\n\t\t\tfor col in range N_COLS\r\n\t\t\t\tcell = state.board[row][col]\r\n\t\t\t\tfor val,i in checkBoards \r\n\t\t\t\t\t[dr,dc] = [[1,0],[0,1],[0,0],[0,2]][i]\r\n\t\t\t\t\tacc = val[row+dr][col+dc]\r\n\t\t\t\t\tval[row + 1][col + 1] = cell\r\n\t\t\t\t\tif (cell < 0 && acc < 0 || cell > 0 && acc > 0) \r\n\t\t\t\t\t\tval[row + 1][col + 1] += acc\r\n\t\t\t\t\t\r\n\t\t\t\t\tif val[row + 1][col + 1] == 4 then return 1\r\n\t\t\t\t\tif val[row + 1][col + 1] == -4 then return -1\r\n\t\tnull\r\n\r\n"
  ]
}