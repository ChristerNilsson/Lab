"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.3.2
var MonteCarloNode,
    indexOf = [].indexOf;

MonteCarloNode = function () {
  function MonteCarloNode(parent, play1, state, unexpandedPlays) {
    _classCallCheck(this, MonteCarloNode);

    var i, len, play;
    this.parent = parent;
    this.play = play1;
    this.state = state;
    this.n_plays = 0;
    this.n_wins = 0;
    this.children = {}; //new Map()
    for (i = 0, len = unexpandedPlays.length; i < len; i++) {
      play = unexpandedPlays[i];
      this.children[play.hash()] = {
        play: play,
        node: null
      };
    }
  }

  _createClass(MonteCarloNode, [{
    key: "childNode",
    value: function childNode(play) {
      var child;
      child = this.children[play.hash()];
      if (child === void 0) {
        throw new Error('No such play!');
      } else if (child.node === null) {
        throw new Error("Child is not expanded!");
      }
      return child.node;
    }
  }, {
    key: "expand",
    value: function expand(play, childState, unexpandedPlays) {
      var childNode, ref;
      if (ref = play.hash(), indexOf.call(_.keys(this.children), ref) < 0) {
        throw new Error("No such play!");
      }
      childNode = new MonteCarloNode(this, play, childState, unexpandedPlays);
      this.children[play.hash()] = {
        play: play,
        node: childNode
      };
      return childNode;
    }
  }, {
    key: "allPlays",
    value: function allPlays() {
      var child, i, len, ref, results;
      ref = this.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        results.push(child.play);
      }
      return results;
    }
  }, {
    key: "unexpandedPlays",
    value: function unexpandedPlays() {
      var child, i, len, ref, results;
      ref = this.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (child.node === null) {
          results.push(child.play);
        }
      }
      return results;
    }

    // ret = []
    // @children.forEach (child, key) => if child.node == null then ret.push child.play
    // ret

  }, {
    key: "isFullyExpanded",
    value: function isFullyExpanded() {
      var child;
      return function () {
        var i, len, ref, results;
        ref = this.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (child.node) {
            results.push(child.play);
          }
        }
        return results;
      }.call(this).length === this.children.length;
    }

    // ret = true
    // @children.forEach (child, key) => if child.node == null then ret = false
    // ret

  }, {
    key: "isLeaf",
    value: function isLeaf() {
      return this.children.length === 0;
    }
  }, {
    key: "getUCB1",
    value: function getUCB1(biasParam) {
      return this.n_wins / this.n_plays + Math.sqrt(biasParam * Math.log(this.parent.n_plays) / this.n_plays);
    }
  }]);

  return MonteCarloNode;
}();
//# sourceMappingURL=monte-carlo-node.js.map
