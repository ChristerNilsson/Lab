"use strict";

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.3.2
var MonteCarloNode;

MonteCarloNode = class MonteCarloNode {
  constructor(parent, play1, state, unexpandedPlays) {
    var i, len, play;
    this.parent = parent;
    this.play = play1;
    this.state = state;
    this.n_plays = 0;
    this.n_wins = 0;
    this.children = new _map2.default();
    for (i = 0, len = unexpandedPlays.length; i < len; i++) {
      play = unexpandedPlays[i];
      this.children.set(play.hash(), {
        play: play,
        node: null
      });
    }
  }

  childNode(play) {
    var child;
    child = this.children.get(play.hash());
    if (child === void 0) {
      throw new Error('No such play!');
    } else if (child.node === null) {
      throw new Error("Child is not expanded!");
    }
    return child.node;
  }

  expand(play, childState, unexpandedPlays) {
    var childNode;
    if (!this.children.has(play.hash())) {
      throw new Error("No such play!");
    }
    childNode = new MonteCarloNode(this, play, childState, unexpandedPlays);
    this.children.set(play.hash(), {
      play: play,
      node: childNode
    });
    return childNode;
  }

  allPlays() {
    // (child.play for child in @children)
    var ret;
    ret = [];
    this.children.forEach((child, key) => {
      return ret.push(child.play);
    });
    return ret;
  }

  unexpandedPlays() {
    //(child.play for child in @children when child.node == null)
    var ret;
    ret = [];
    this.children.forEach((child, key) => {
      if (child.node === null) {
        return ret.push(child.play);
      }
    });
    return ret;
  }

  isFullyExpanded() {
    //(child.play for child in @children when child.node).length == @children.length
    var ret;
    ret = true;
    this.children.forEach((child, key) => {
      if (child.node === null) {
        return ret = false;
      }
    });
    return ret;
  }

  isLeaf() {
    return this.children.length === 0;
  }

  getUCB1(biasParam) {
    return this.n_wins / this.n_plays + Math.sqrt(biasParam * Math.log(this.parent.n_plays) / this.n_plays);
  }

};
//# sourceMappingURL=monte-carlo-node.js.map
