'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Generated by CoffeeScript 2.3.2
var indexOf = [].indexOf;

new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue.js!'
  },
  methods: {
    decodeQr: function decodeQr(v) {
      return console.log('holi', v);
    },
    onInit: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(promise) {
        var _this = this;

        var error, sleep;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return promise;

              case 3:
                return _context2.abrupt('return', _context2.sent);

              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2['catch'](0);

                // successfully initialized
                error = _context2.t0;
                return _context2.abrupt('return', console.log(error.name));

              case 10:
                _context2.prev = 10;

                // if error.name == 'NotAllowedError'
                // 	console.log('1')
                // 	# user denied camera access permisson
                // else if (error.name == 'NotFoundError') 
                // 	console.log('2')
                // 	# no suitable camera device installed
                // else if (error.name == 'NotSupportedError') 
                // 	console.log('3')

                // 	# page is not served over HTTPS (or localhost)
                // else if (error.name == 'NotReadableError') 
                // 	console.log('4')

                // 	# maybe camera is already in use
                // else if (error.name == 'OverconstrainedError') 
                // 	console.log('5')

                // 	# passed constraints don't match any camera.
                // 	# Did you requested the front camera although there is none?
                // else 
                // 	console.log('6')
                // 	# browser might be lacking features (WebRTC, ...)
                console.log('holi!');
                _context2.prev = 12;
                _context2.next = 15;
                return sleep(1000);

              case 15:
                navigator.mediaDevices.getUserMedia({
                  audio: true,
                  video: {
                    facingMode: "environment"
                  }
                }).then(mediaStream(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var capabilities, track;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          console.log('holi async');
                          _context.next = 3;
                          return sleep(1000);

                        case 3:
                          track = mediaStream.getVideoTracks()[0];
                          capabilities = track.getCapabilities();

                          if (indexOf.call(capabilities, 'zoom') >= 0) {
                            _context.next = 10;
                            break;
                          }

                          _this.message = 'NOT SUPPORTED';
                          return _context.abrupt('return');

                        case 10:
                          _this.message = 'WORKS!!';

                        case 11:
                          return _context.abrupt('return', track.applyConstraints({
                            advanced: [{
                              zoom: 1
                            }]
                          }));

                        case 12:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this);
                })))).catch(error(function () {
                  return console.log('error!', error);
                }));
                sleep = function sleep() {
                  var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

                  return new Promise(resolve(function () {
                    return setTimeout(resolve, ms);
                  }));
                };
                _context2.next = 23;
                break;

              case 19:
                _context2.prev = 19;
                _context2.t1 = _context2['catch'](12);

                error = _context2.t1;
                this.message = 'ERROR!' + error;

              case 23:
                return _context2.finish(10);

              case 24:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 6, 10, 24], [12, 19]]);
      }));

      function onInit(_x) {
        return _ref.apply(this, arguments);
      }

      return onInit;
    }()
  }
});

Vue.use(VueQrcodeReader);
//# sourceMappingURL=sketch.js.map
