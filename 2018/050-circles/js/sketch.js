"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Circle, R, circles, draw, overlap, setup;

R = 30;

circles = [];

Circle = function () {
  function Circle() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : random(R, width - R);
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : random(R, height - R);
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : R;

    _classCallCheck(this, Circle);

    this.x = x;
    this.y = y;
    this.r = r;
  }

  _createClass(Circle, [{
    key: "draw",
    value: function draw() {
      return circle(this.x, this.y, this.r);
    }
  }, {
    key: "overlap",
    value: function overlap(o) {
      return o.r + this.r > dist(o.x, o.y, this.x, this.y);
    }
  }]);

  return Circle;
}();

overlap = function overlap(d) {
  var c, i, len;
  for (i = 0, len = circles.length; i < len; i++) {
    c = circles[i];
    if (d.overlap(c)) {
      return true;
    }
  }
  return false;
};

setup = function setup() {
  var d, results;
  createCanvas(400, 400);
  fc(1, 0, 0);
  results = [];
  while (circles.length < 25) {
    d = new Circle();
    if (!overlap(d)) {
      results.push(circles.push(d));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

draw = function draw() {
  var c, i, len, results;
  bg(0.5);
  results = [];
  for (i = 0, len = circles.length; i < len; i++) {
    c = circles[i];
    results.push(c.draw());
  }
  return results;
};
//# sourceMappingURL=sketch.js.map
